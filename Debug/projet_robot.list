
projet_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d114  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800d2a8  0800d2a8  0000e2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d720  0800d720  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d720  0800d720  0000e720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d728  0800d728  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d728  0800d728  0000e728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d72c  0800d72c  0000e72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d730  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  200001d8  0800d908  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800d908  0000f56c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016192  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b48  00000000  00000000  0002539a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00027ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc3  00000000  00000000  00029310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a0b  00000000  00000000  0002a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172e7  00000000  00000000  00053cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001079b1  00000000  00000000  0006afc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b7c  00000000  00000000  001729bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00179538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d28c 	.word	0x0800d28c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800d28c 	.word	0x0800d28c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fe8:	f001 fb44 	bl	8002674 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fec:	f000 f868 	bl	80010c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ff0:	f000 faf2 	bl	80015d8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000ff4:	f000 f8b6 	bl	8001164 <MX_ADC1_Init>
	MX_TIM6_Init();
 8000ff8:	f000 fa88 	bl	800150c <MX_TIM6_Init>
	MX_TIM2_Init();
 8000ffc:	f000 f928 	bl	8001250 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001000:	f000 f9a8 	bl	8001354 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001004:	f000 fa22 	bl	800144c <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8001008:	f000 fab6 	bl	8001578 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 800100c:	4823      	ldr	r0, [pc, #140]	@ (800109c <main+0xb8>)
 800100e:	f004 fecb 	bl	8005da8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001012:	2100      	movs	r1, #0
 8001014:	4822      	ldr	r0, [pc, #136]	@ (80010a0 <main+0xbc>)
 8001016:	f004 ff99 	bl	8005f4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800101a:	210c      	movs	r1, #12
 800101c:	4820      	ldr	r0, [pc, #128]	@ (80010a0 <main+0xbc>)
 800101e:	f004 ff95 	bl	8005f4c <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart3, &rxData, sizeof(rxData));
 8001022:	2201      	movs	r2, #1
 8001024:	491f      	ldr	r1, [pc, #124]	@ (80010a4 <main+0xc0>)
 8001026:	4820      	ldr	r0, [pc, #128]	@ (80010a8 <main+0xc4>)
 8001028:	f006 fada 	bl	80075e0 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		handleEvent(currentEvent);
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <main+0xc8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fbd1 	bl	80017d8 <handleEvent>
		executeStateActions();
 8001036:	f000 fe5b 	bl	8001cf0 <executeStateActions>
		HAL_Delay(150);
 800103a:	2096      	movs	r0, #150	@ 0x96
 800103c:	f001 fb96 	bl	800276c <HAL_Delay>
		if (T_batt >= 50)
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <main+0xcc>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b31      	cmp	r3, #49	@ 0x31
 8001048:	d9f0      	bls.n	800102c <main+0x48>
		{
			T_batt = 0;
 800104a:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <main+0xcc>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 8001050:	4818      	ldr	r0, [pc, #96]	@ (80010b4 <main+0xd0>)
 8001052:	f001 fef5 	bl	8002e40 <HAL_ADC_Start_IT>
			if (ADC_on == 1)
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <main+0xd4>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d1e5      	bne.n	800102c <main+0x48>
			{
				ADC_on = 0;
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <main+0xd4>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
				adcValue = HAL_ADC_GetValue(&hadc1);
 8001066:	4813      	ldr	r0, [pc, #76]	@ (80010b4 <main+0xd0>)
 8001068:	f002 f818 	bl	800309c <HAL_ADC_GetValue>
 800106c:	4603      	mov	r3, r0
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <main+0xd8>)
 8001072:	701a      	strb	r2, [r3, #0]

				if (adcValue < 231)
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <main+0xd8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2be6      	cmp	r3, #230	@ 0xe6
 800107c:	d806      	bhi.n	800108c <main+0xa8>
				{
					HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_SET); // Allumer la LED
 800107e:	2201      	movs	r2, #1
 8001080:	2120      	movs	r1, #32
 8001082:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001086:	f003 faff 	bl	8004688 <HAL_GPIO_WritePin>
 800108a:	e7cf      	b.n	800102c <main+0x48>
				}
				else
				{
					HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_RESET); // Éteindre la LED
 800108c:	2200      	movs	r2, #0
 800108e:	2120      	movs	r1, #32
 8001090:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001094:	f003 faf8 	bl	8004688 <HAL_GPIO_WritePin>
		handleEvent(currentEvent);
 8001098:	e7c8      	b.n	800102c <main+0x48>
 800109a:	bf00      	nop
 800109c:	2000033c 	.word	0x2000033c
 80010a0:	20000258 	.word	0x20000258
 80010a4:	20000413 	.word	0x20000413
 80010a8:	20000388 	.word	0x20000388
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000410 	.word	0x20000410
 80010b4:	200001f4 	.word	0x200001f4
 80010b8:	20000412 	.word	0x20000412
 80010bc:	20000411 	.word	0x20000411

080010c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b096      	sub	sp, #88	@ 0x58
 80010c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	2244      	movs	r2, #68	@ 0x44
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 fd07 	bl	8009ae2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010e6:	f003 faf5 	bl	80046d4 <HAL_PWREx_ControlVoltageScaling>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80010f0:	f000 ff42 	bl	8001f78 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010fc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fe:	2310      	movs	r3, #16
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001106:	2302      	movs	r3, #2
 8001108:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800110e:	230a      	movs	r3, #10
 8001110:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001112:	2307      	movs	r3, #7
 8001114:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fb2c 	bl	8004780 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x72>
	{
		Error_Handler();
 800112e:	f000 ff23 	bl	8001f78 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2303      	movs	r3, #3
 8001138:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fef4 	bl	8004f38 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001156:	f000 ff0f 	bl	8001f78 <Error_Handler>
	}
}
 800115a:	bf00      	nop
 800115c:	3758      	adds	r7, #88	@ 0x58
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001186:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <MX_ADC1_Init+0xe0>)
 8001188:	4a2f      	ldr	r2, [pc, #188]	@ (8001248 <MX_ADC1_Init+0xe4>)
 800118a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800118c:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <MX_ADC1_Init+0xe0>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001192:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <MX_ADC1_Init+0xe0>)
 8001194:	2210      	movs	r2, #16
 8001196:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001198:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <MX_ADC1_Init+0xe0>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800119e:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a4:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011a6:	2204      	movs	r2, #4
 80011a8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80011aa:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80011b0:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80011b6:	4b23      	ldr	r3, [pc, #140]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011bc:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e6:	4817      	ldr	r0, [pc, #92]	@ (8001244 <MX_ADC1_Init+0xe0>)
 80011e8:	f001 fcda 	bl	8002ba0 <HAL_ADC_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 80011f2:	f000 fec1 	bl	8001f78 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4810      	ldr	r0, [pc, #64]	@ (8001244 <MX_ADC1_Init+0xe0>)
 8001202:	f002 fe57 	bl	8003eb4 <HAL_ADCEx_MultiModeConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 800120c:	f000 feb4 	bl	8001f78 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <MX_ADC1_Init+0xe8>)
 8001212:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001214:	2306      	movs	r3, #6
 8001216:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001218:	2307      	movs	r3, #7
 800121a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800121c:	237f      	movs	r3, #127	@ 0x7f
 800121e:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001220:	2304      	movs	r3, #4
 8001222:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_ADC1_Init+0xe0>)
 800122e:	f002 f971 	bl	8003514 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0xd8>
	{
		Error_Handler();
 8001238:	f000 fe9e 	bl	8001f78 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	@ 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001f4 	.word	0x200001f4
 8001248:	50040000 	.word	0x50040000
 800124c:	3ac04000 	.word	0x3ac04000

08001250 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	@ 0x38
 8001254:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001256:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001282:	4b33      	ldr	r3, [pc, #204]	@ (8001350 <MX_TIM2_Init+0x100>)
 8001284:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001288:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 4-1;
 800128a:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <MX_TIM2_Init+0x100>)
 800128c:	2203      	movs	r2, #3
 800128e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <MX_TIM2_Init+0x100>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 40000-1;
 8001296:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <MX_TIM2_Init+0x100>)
 8001298:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800129c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <MX_TIM2_Init+0x100>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001350 <MX_TIM2_Init+0x100>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012aa:	4829      	ldr	r0, [pc, #164]	@ (8001350 <MX_TIM2_Init+0x100>)
 80012ac:	f004 fd24 	bl	8005cf8 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 80012b6:	f000 fe5f 	bl	8001f78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4822      	ldr	r0, [pc, #136]	@ (8001350 <MX_TIM2_Init+0x100>)
 80012c8:	f005 fa50 	bl	800676c <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 80012d2:	f000 fe51 	bl	8001f78 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012d6:	481e      	ldr	r0, [pc, #120]	@ (8001350 <MX_TIM2_Init+0x100>)
 80012d8:	f004 fdd6 	bl	8005e88 <HAL_TIM_PWM_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 80012e2:	f000 fe49 	bl	8001f78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4816      	ldr	r0, [pc, #88]	@ (8001350 <MX_TIM2_Init+0x100>)
 80012f6:	f006 f87f 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001300:	f000 fe3a 	bl	8001f78 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001304:	2360      	movs	r3, #96	@ 0x60
 8001306:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_TIM2_Init+0x100>)
 800131c:	f005 f912 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8001326:	f000 fe27 	bl	8001f78 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	220c      	movs	r2, #12
 800132e:	4619      	mov	r1, r3
 8001330:	4807      	ldr	r0, [pc, #28]	@ (8001350 <MX_TIM2_Init+0x100>)
 8001332:	f005 f907 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0xf0>
	{
		Error_Handler();
 800133c:	f000 fe1c 	bl	8001f78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001340:	4803      	ldr	r0, [pc, #12]	@ (8001350 <MX_TIM2_Init+0x100>)
 8001342:	f000 ff69 	bl	8002218 <HAL_TIM_MspPostInit>

}
 8001346:	bf00      	nop
 8001348:	3738      	adds	r7, #56	@ 0x38
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000258 	.word	0x20000258

08001354 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	@ 0x30
 8001358:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001380:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <MX_TIM3_Init+0xf0>)
 8001382:	4a31      	ldr	r2, [pc, #196]	@ (8001448 <MX_TIM3_Init+0xf4>)
 8001384:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 244-1;
 8001386:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <MX_TIM3_Init+0xf0>)
 8001388:	22f3      	movs	r2, #243	@ 0xf3
 800138a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <MX_TIM3_Init+0xf0>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535-1;
 8001392:	4b2c      	ldr	r3, [pc, #176]	@ (8001444 <MX_TIM3_Init+0xf0>)
 8001394:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001398:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <MX_TIM3_Init+0xf0>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <MX_TIM3_Init+0xf0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a6:	4827      	ldr	r0, [pc, #156]	@ (8001444 <MX_TIM3_Init+0xf0>)
 80013a8:	f004 fca6 	bl	8005cf8 <HAL_TIM_Base_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM3_Init+0x62>
	{
		Error_Handler();
 80013b2:	f000 fde1 	bl	8001f78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ba:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013bc:	f107 0320 	add.w	r3, r7, #32
 80013c0:	4619      	mov	r1, r3
 80013c2:	4820      	ldr	r0, [pc, #128]	@ (8001444 <MX_TIM3_Init+0xf0>)
 80013c4:	f005 f9d2 	bl	800676c <HAL_TIM_ConfigClockSource>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 80013ce:	f000 fdd3 	bl	8001f78 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013d2:	481c      	ldr	r0, [pc, #112]	@ (8001444 <MX_TIM3_Init+0xf0>)
 80013d4:	f004 fec0 	bl	8006158 <HAL_TIM_IC_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 80013de:	f000 fdcb 	bl	8001f78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4814      	ldr	r0, [pc, #80]	@ (8001444 <MX_TIM3_Init+0xf0>)
 80013f2:	f006 f801 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM3_Init+0xac>
	{
		Error_Handler();
 80013fc:	f000 fdbc 	bl	8001f78 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001404:	2301      	movs	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	4619      	mov	r1, r3
 8001416:	480b      	ldr	r0, [pc, #44]	@ (8001444 <MX_TIM3_Init+0xf0>)
 8001418:	f004 fff7 	bl	800640a <HAL_TIM_IC_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0xd2>
	{
		Error_Handler();
 8001422:	f000 fda9 	bl	8001f78 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2204      	movs	r2, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_TIM3_Init+0xf0>)
 800142e:	f004 ffec 	bl	800640a <HAL_TIM_IC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM3_Init+0xe8>
	{
		Error_Handler();
 8001438:	f000 fd9e 	bl	8001f78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3730      	adds	r7, #48	@ 0x30
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002a4 	.word	0x200002a4
 8001448:	40000400 	.word	0x40000400

0800144c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800146a:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <MX_TIM4_Init+0xb8>)
 800146c:	4a26      	ldr	r2, [pc, #152]	@ (8001508 <MX_TIM4_Init+0xbc>)
 800146e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 244-1;
 8001470:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <MX_TIM4_Init+0xb8>)
 8001472:	22f3      	movs	r2, #243	@ 0xf3
 8001474:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <MX_TIM4_Init+0xb8>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535-1;
 800147c:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <MX_TIM4_Init+0xb8>)
 800147e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001482:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <MX_TIM4_Init+0xb8>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <MX_TIM4_Init+0xb8>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001490:	481c      	ldr	r0, [pc, #112]	@ (8001504 <MX_TIM4_Init+0xb8>)
 8001492:	f004 fe61 	bl	8006158 <HAL_TIM_IC_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 800149c:	f000 fd6c 	bl	8001f78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4815      	ldr	r0, [pc, #84]	@ (8001504 <MX_TIM4_Init+0xb8>)
 80014b0:	f005 ffa2 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM4_Init+0x72>
	{
		Error_Handler();
 80014ba:	f000 fd5d 	bl	8001f78 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014c2:	2301      	movs	r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	480b      	ldr	r0, [pc, #44]	@ (8001504 <MX_TIM4_Init+0xb8>)
 80014d6:	f004 ff98 	bl	800640a <HAL_TIM_IC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM4_Init+0x98>
	{
		Error_Handler();
 80014e0:	f000 fd4a 	bl	8001f78 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2204      	movs	r2, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4806      	ldr	r0, [pc, #24]	@ (8001504 <MX_TIM4_Init+0xb8>)
 80014ec:	f004 ff8d 	bl	800640a <HAL_TIM_IC_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM4_Init+0xae>
	{
		Error_Handler();
 80014f6:	f000 fd3f 	bl	8001f78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200002f0 	.word	0x200002f0
 8001508:	40000800 	.word	0x40000800

0800150c <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 800151c:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <MX_TIM6_Init+0x64>)
 800151e:	4a15      	ldr	r2, [pc, #84]	@ (8001574 <MX_TIM6_Init+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 122-1;
 8001522:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <MX_TIM6_Init+0x64>)
 8001524:	2279      	movs	r2, #121	@ 0x79
 8001526:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_TIM6_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535-1;
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <MX_TIM6_Init+0x64>)
 8001530:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001534:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_TIM6_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <MX_TIM6_Init+0x64>)
 800153e:	f004 fbdb 	bl	8005cf8 <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8001548:	f000 fd16 	bl	8001f78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_TIM6_Init+0x64>)
 800155a:	f005 ff4d 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 8001564:	f000 fd08 	bl	8001f78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000033c 	.word	0x2000033c
 8001574:	40001000 	.word	0x40001000

08001578 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 800157e:	4a15      	ldr	r2, [pc, #84]	@ (80015d4 <MX_USART3_UART_Init+0x5c>)
 8001580:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 8001584:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001588:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_USART3_UART_Init+0x58>)
 80015bc:	f005 ffc2 	bl	8007544 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 80015c6:	f000 fcd7 	bl	8001f78 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000388 	.word	0x20000388
 80015d4:	40004800 	.word	0x40004800

080015d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	4b3f      	ldr	r3, [pc, #252]	@ (80016ec <MX_GPIO_Init+0x114>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	4a3e      	ldr	r2, [pc, #248]	@ (80016ec <MX_GPIO_Init+0x114>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fa:	4b3c      	ldr	r3, [pc, #240]	@ (80016ec <MX_GPIO_Init+0x114>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001606:	4b39      	ldr	r3, [pc, #228]	@ (80016ec <MX_GPIO_Init+0x114>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	4a38      	ldr	r2, [pc, #224]	@ (80016ec <MX_GPIO_Init+0x114>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001612:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <MX_GPIO_Init+0x114>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b33      	ldr	r3, [pc, #204]	@ (80016ec <MX_GPIO_Init+0x114>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	4a32      	ldr	r2, [pc, #200]	@ (80016ec <MX_GPIO_Init+0x114>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162a:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <MX_GPIO_Init+0x114>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b2d      	ldr	r3, [pc, #180]	@ (80016ec <MX_GPIO_Init+0x114>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	4a2c      	ldr	r2, [pc, #176]	@ (80016ec <MX_GPIO_Init+0x114>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001642:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <MX_GPIO_Init+0x114>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2120      	movs	r1, #32
 8001652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001656:	f003 f817 	bl	8004688 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2104      	movs	r1, #4
 800165e:	4824      	ldr	r0, [pc, #144]	@ (80016f0 <MX_GPIO_Init+0x118>)
 8001660:	f003 f812 	bl	8004688 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800166a:	4822      	ldr	r0, [pc, #136]	@ (80016f4 <MX_GPIO_Init+0x11c>)
 800166c:	f003 f80c 	bl	8004688 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001670:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001674:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001676:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800167a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	481b      	ldr	r0, [pc, #108]	@ (80016f4 <MX_GPIO_Init+0x11c>)
 8001688:	f002 fe54 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : Alert_batt_Pin */
	GPIO_InitStruct.Pin = Alert_batt_Pin;
 800168c:	2320      	movs	r3, #32
 800168e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Alert_batt_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a6:	f002 fe45 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIR2_Pin */
	GPIO_InitStruct.Pin = DIR2_Pin;
 80016aa:	2304      	movs	r3, #4
 80016ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <MX_GPIO_Init+0x118>)
 80016c2:	f002 fe37 	bl	8004334 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIR1_Pin */
	GPIO_InitStruct.Pin = DIR1_Pin;
 80016c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_GPIO_Init+0x11c>)
 80016e0:	f002 fe28 	bl	8004334 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016e4:	bf00      	nop
 80016e6:	3728      	adds	r7, #40	@ 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	48000400 	.word	0x48000400
 80016f4:	48000800 	.word	0x48000800

080016f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d106      	bne.n	8001718 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		T_batt++;
 800170a:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001716:	701a      	strb	r2, [r3, #0]
	}
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40001000 	.word	0x40001000
 8001728:	20000410 	.word	0x20000410

0800172c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	ADC_on = 1;
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000412 	.word	0x20000412

0800174c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1b      	ldr	r2, [pc, #108]	@ (80017c8 <HAL_UART_RxCpltCallback+0x7c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d12f      	bne.n	80017be <HAL_UART_RxCpltCallback+0x72>
	{
		if(rxData == 'F')
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_UART_RxCpltCallback+0x80>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b46      	cmp	r3, #70	@ 0x46
 8001764:	d103      	bne.n	800176e <HAL_UART_RxCpltCallback+0x22>
			currentEvent = EVENT_AV;
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <HAL_UART_RxCpltCallback+0x84>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e022      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x68>
		else if(rxData == 'B')
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_UART_RxCpltCallback+0x80>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b42      	cmp	r3, #66	@ 0x42
 8001774:	d103      	bne.n	800177e <HAL_UART_RxCpltCallback+0x32>
			currentEvent = EVENT_R;
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <HAL_UART_RxCpltCallback+0x84>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e01a      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x68>
		else if(rxData == 'L')
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <HAL_UART_RxCpltCallback+0x80>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b4c      	cmp	r3, #76	@ 0x4c
 8001784:	d103      	bne.n	800178e <HAL_UART_RxCpltCallback+0x42>
			currentEvent = EVENT_G;
 8001786:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_UART_RxCpltCallback+0x84>)
 8001788:	2203      	movs	r2, #3
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e012      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x68>
		else if(rxData == 'R')
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <HAL_UART_RxCpltCallback+0x80>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b52      	cmp	r3, #82	@ 0x52
 8001794:	d103      	bne.n	800179e <HAL_UART_RxCpltCallback+0x52>
			currentEvent = EVENT_D;
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <HAL_UART_RxCpltCallback+0x84>)
 8001798:	2202      	movs	r2, #2
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	e00a      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x68>
		else if(rxData == 'X')
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_UART_RxCpltCallback+0x80>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b58      	cmp	r3, #88	@ 0x58
 80017a4:	d103      	bne.n	80017ae <HAL_UART_RxCpltCallback+0x62>
			currentEvent = EVENT_END;
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_UART_RxCpltCallback+0x84>)
 80017a8:	2204      	movs	r2, #4
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e002      	b.n	80017b4 <HAL_UART_RxCpltCallback+0x68>
		else
			currentEvent = EVENT_NEUTRAL;
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_UART_RxCpltCallback+0x84>)
 80017b0:	2205      	movs	r2, #5
 80017b2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &rxData, sizeof(rxData));
 80017b4:	2201      	movs	r2, #1
 80017b6:	4905      	ldr	r1, [pc, #20]	@ (80017cc <HAL_UART_RxCpltCallback+0x80>)
 80017b8:	4806      	ldr	r0, [pc, #24]	@ (80017d4 <HAL_UART_RxCpltCallback+0x88>)
 80017ba:	f005 ff11 	bl	80075e0 <HAL_UART_Receive_IT>
	}
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40004800 	.word	0x40004800
 80017cc:	20000413 	.word	0x20000413
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000388 	.word	0x20000388

080017d8 <handleEvent>:

void handleEvent(Event_t event) {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
	switch (currentState) {
 80017e2:	4b99      	ldr	r3, [pc, #612]	@ (8001a48 <handleEvent+0x270>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	f200 825c 	bhi.w	8001ca4 <handleEvent+0x4cc>
 80017ec:	a201      	add	r2, pc, #4	@ (adr r2, 80017f4 <handleEvent+0x1c>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001829 	.word	0x08001829
 80017f8:	08001881 	.word	0x08001881
 80017fc:	080018d9 	.word	0x080018d9
 8001800:	08001931 	.word	0x08001931
 8001804:	08001989 	.word	0x08001989
 8001808:	080019e1 	.word	0x080019e1
 800180c:	08001a39 	.word	0x08001a39
 8001810:	08001a97 	.word	0x08001a97
 8001814:	08001aef 	.word	0x08001aef
 8001818:	08001b47 	.word	0x08001b47
 800181c:	08001b9f 	.word	0x08001b9f
 8001820:	08001bf5 	.word	0x08001bf5
 8001824:	08001c4b 	.word	0x08001c4b
	case STATE_NEUTRAL:
		if (event == EVENT_AV) {
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d103      	bne.n	8001836 <handleEvent+0x5e>
			currentState = STATE_AV1;
 800182e:	4b86      	ldr	r3, [pc, #536]	@ (8001a48 <handleEvent+0x270>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001834:	e23a      	b.n	8001cac <handleEvent+0x4d4>
		else if (event == EVENT_R) {
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d103      	bne.n	8001844 <handleEvent+0x6c>
			currentState = STATE_R1;
 800183c:	4b82      	ldr	r3, [pc, #520]	@ (8001a48 <handleEvent+0x270>)
 800183e:	2204      	movs	r2, #4
 8001840:	701a      	strb	r2, [r3, #0]
		break;
 8001842:	e233      	b.n	8001cac <handleEvent+0x4d4>
		else if (event == EVENT_D) {
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d103      	bne.n	8001852 <handleEvent+0x7a>
			currentState = STATE_D1;
 800184a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a48 <handleEvent+0x270>)
 800184c:	2207      	movs	r2, #7
 800184e:	701a      	strb	r2, [r3, #0]
		break;
 8001850:	e22c      	b.n	8001cac <handleEvent+0x4d4>
		else if (event == EVENT_G) {
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d103      	bne.n	8001860 <handleEvent+0x88>
			currentState = STATE_G1;
 8001858:	4b7b      	ldr	r3, [pc, #492]	@ (8001a48 <handleEvent+0x270>)
 800185a:	220a      	movs	r2, #10
 800185c:	701a      	strb	r2, [r3, #0]
		break;
 800185e:	e225      	b.n	8001cac <handleEvent+0x4d4>
		else if (event == EVENT_END) {
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	2b04      	cmp	r3, #4
 8001864:	d103      	bne.n	800186e <handleEvent+0x96>
			currentState = STATE_END;
 8001866:	4b78      	ldr	r3, [pc, #480]	@ (8001a48 <handleEvent+0x270>)
 8001868:	220d      	movs	r2, #13
 800186a:	701a      	strb	r2, [r3, #0]
		break;
 800186c:	e21e      	b.n	8001cac <handleEvent+0x4d4>
		else if (event == EVENT_NEUTRAL){
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b05      	cmp	r3, #5
 8001872:	f040 821b 	bne.w	8001cac <handleEvent+0x4d4>
			currentState = currentState;
 8001876:	4b74      	ldr	r3, [pc, #464]	@ (8001a48 <handleEvent+0x270>)
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	4b73      	ldr	r3, [pc, #460]	@ (8001a48 <handleEvent+0x270>)
 800187c:	701a      	strb	r2, [r3, #0]
		break;
 800187e:	e215      	b.n	8001cac <handleEvent+0x4d4>

	case STATE_AV1:
		if (event == EVENT_AV) {
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d103      	bne.n	800188e <handleEvent+0xb6>
			currentState = STATE_AV2;
 8001886:	4b70      	ldr	r3, [pc, #448]	@ (8001a48 <handleEvent+0x270>)
 8001888:	2202      	movs	r2, #2
 800188a:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 800188c:	e210      	b.n	8001cb0 <handleEvent+0x4d8>
		else if (event == EVENT_R) {
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d103      	bne.n	800189c <handleEvent+0xc4>
			currentState = STATE_NEUTRAL;
 8001894:	4b6c      	ldr	r3, [pc, #432]	@ (8001a48 <handleEvent+0x270>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
		break;
 800189a:	e209      	b.n	8001cb0 <handleEvent+0x4d8>
		else if (event == EVENT_D) {
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d103      	bne.n	80018aa <handleEvent+0xd2>
			currentState = STATE_D1;
 80018a2:	4b69      	ldr	r3, [pc, #420]	@ (8001a48 <handleEvent+0x270>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	701a      	strb	r2, [r3, #0]
		break;
 80018a8:	e202      	b.n	8001cb0 <handleEvent+0x4d8>
		else if (event == EVENT_G) {
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d103      	bne.n	80018b8 <handleEvent+0xe0>
			currentState = STATE_G1;
 80018b0:	4b65      	ldr	r3, [pc, #404]	@ (8001a48 <handleEvent+0x270>)
 80018b2:	220a      	movs	r2, #10
 80018b4:	701a      	strb	r2, [r3, #0]
		break;
 80018b6:	e1fb      	b.n	8001cb0 <handleEvent+0x4d8>
		else if (event == EVENT_END) {
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d103      	bne.n	80018c6 <handleEvent+0xee>
			currentState = STATE_END;
 80018be:	4b62      	ldr	r3, [pc, #392]	@ (8001a48 <handleEvent+0x270>)
 80018c0:	220d      	movs	r2, #13
 80018c2:	701a      	strb	r2, [r3, #0]
		break;
 80018c4:	e1f4      	b.n	8001cb0 <handleEvent+0x4d8>
		else if (event == EVENT_NEUTRAL){
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	f040 81f1 	bne.w	8001cb0 <handleEvent+0x4d8>
			currentState = currentState;
 80018ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001a48 <handleEvent+0x270>)
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a48 <handleEvent+0x270>)
 80018d4:	701a      	strb	r2, [r3, #0]
		break;
 80018d6:	e1eb      	b.n	8001cb0 <handleEvent+0x4d8>

	case STATE_AV2:
		if (event == EVENT_AV) {
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <handleEvent+0x10e>
			currentState = STATE_AV3;
 80018de:	4b5a      	ldr	r3, [pc, #360]	@ (8001a48 <handleEvent+0x270>)
 80018e0:	2203      	movs	r2, #3
 80018e2:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 80018e4:	e1e6      	b.n	8001cb4 <handleEvent+0x4dc>
		else if (event == EVENT_R) {
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d103      	bne.n	80018f4 <handleEvent+0x11c>
			currentState = STATE_AV1;
 80018ec:	4b56      	ldr	r3, [pc, #344]	@ (8001a48 <handleEvent+0x270>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
		break;
 80018f2:	e1df      	b.n	8001cb4 <handleEvent+0x4dc>
		else if (event == EVENT_D) {
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d103      	bne.n	8001902 <handleEvent+0x12a>
			currentState = STATE_D2;
 80018fa:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <handleEvent+0x270>)
 80018fc:	2208      	movs	r2, #8
 80018fe:	701a      	strb	r2, [r3, #0]
		break;
 8001900:	e1d8      	b.n	8001cb4 <handleEvent+0x4dc>
		else if (event == EVENT_G) {
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d103      	bne.n	8001910 <handleEvent+0x138>
			currentState = STATE_G2;
 8001908:	4b4f      	ldr	r3, [pc, #316]	@ (8001a48 <handleEvent+0x270>)
 800190a:	220b      	movs	r2, #11
 800190c:	701a      	strb	r2, [r3, #0]
		break;
 800190e:	e1d1      	b.n	8001cb4 <handleEvent+0x4dc>
		else if (event == EVENT_END) {
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	2b04      	cmp	r3, #4
 8001914:	d103      	bne.n	800191e <handleEvent+0x146>
			currentState = STATE_END;
 8001916:	4b4c      	ldr	r3, [pc, #304]	@ (8001a48 <handleEvent+0x270>)
 8001918:	220d      	movs	r2, #13
 800191a:	701a      	strb	r2, [r3, #0]
		break;
 800191c:	e1ca      	b.n	8001cb4 <handleEvent+0x4dc>
		else if (event == EVENT_NEUTRAL){
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b05      	cmp	r3, #5
 8001922:	f040 81c7 	bne.w	8001cb4 <handleEvent+0x4dc>
			currentState = currentState;
 8001926:	4b48      	ldr	r3, [pc, #288]	@ (8001a48 <handleEvent+0x270>)
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <handleEvent+0x270>)
 800192c:	701a      	strb	r2, [r3, #0]
		break;
 800192e:	e1c1      	b.n	8001cb4 <handleEvent+0x4dc>

	case STATE_AV3:
		if (event == EVENT_AV) {
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <handleEvent+0x166>
			currentState = STATE_AV3;
 8001936:	4b44      	ldr	r3, [pc, #272]	@ (8001a48 <handleEvent+0x270>)
 8001938:	2203      	movs	r2, #3
 800193a:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 800193c:	e1bc      	b.n	8001cb8 <handleEvent+0x4e0>
		else if (event == EVENT_R) {
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d103      	bne.n	800194c <handleEvent+0x174>
			currentState = STATE_AV2;
 8001944:	4b40      	ldr	r3, [pc, #256]	@ (8001a48 <handleEvent+0x270>)
 8001946:	2202      	movs	r2, #2
 8001948:	701a      	strb	r2, [r3, #0]
		break;
 800194a:	e1b5      	b.n	8001cb8 <handleEvent+0x4e0>
		else if (event == EVENT_D) {
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d103      	bne.n	800195a <handleEvent+0x182>
			currentState = STATE_D3;
 8001952:	4b3d      	ldr	r3, [pc, #244]	@ (8001a48 <handleEvent+0x270>)
 8001954:	2209      	movs	r2, #9
 8001956:	701a      	strb	r2, [r3, #0]
		break;
 8001958:	e1ae      	b.n	8001cb8 <handleEvent+0x4e0>
		else if (event == EVENT_G) {
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d103      	bne.n	8001968 <handleEvent+0x190>
			currentState = STATE_G3;
 8001960:	4b39      	ldr	r3, [pc, #228]	@ (8001a48 <handleEvent+0x270>)
 8001962:	220c      	movs	r2, #12
 8001964:	701a      	strb	r2, [r3, #0]
		break;
 8001966:	e1a7      	b.n	8001cb8 <handleEvent+0x4e0>
		else if (event == EVENT_END) {
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b04      	cmp	r3, #4
 800196c:	d103      	bne.n	8001976 <handleEvent+0x19e>
			currentState = STATE_END;
 800196e:	4b36      	ldr	r3, [pc, #216]	@ (8001a48 <handleEvent+0x270>)
 8001970:	220d      	movs	r2, #13
 8001972:	701a      	strb	r2, [r3, #0]
		break;
 8001974:	e1a0      	b.n	8001cb8 <handleEvent+0x4e0>
		else if (event == EVENT_NEUTRAL){
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b05      	cmp	r3, #5
 800197a:	f040 819d 	bne.w	8001cb8 <handleEvent+0x4e0>
			currentState = currentState;
 800197e:	4b32      	ldr	r3, [pc, #200]	@ (8001a48 <handleEvent+0x270>)
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	4b31      	ldr	r3, [pc, #196]	@ (8001a48 <handleEvent+0x270>)
 8001984:	701a      	strb	r2, [r3, #0]
		break;
 8001986:	e197      	b.n	8001cb8 <handleEvent+0x4e0>

	case STATE_R1:
		if (event == EVENT_AV) {
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d103      	bne.n	8001996 <handleEvent+0x1be>
			currentState = STATE_NEUTRAL;
 800198e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <handleEvent+0x270>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001994:	e192      	b.n	8001cbc <handleEvent+0x4e4>
		else if (event == EVENT_R) {
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d103      	bne.n	80019a4 <handleEvent+0x1cc>
			currentState = STATE_R2;
 800199c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <handleEvent+0x270>)
 800199e:	2205      	movs	r2, #5
 80019a0:	701a      	strb	r2, [r3, #0]
		break;
 80019a2:	e18b      	b.n	8001cbc <handleEvent+0x4e4>
		else if (event == EVENT_D) {
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d103      	bne.n	80019b2 <handleEvent+0x1da>
			currentState = STATE_D1;
 80019aa:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <handleEvent+0x270>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	701a      	strb	r2, [r3, #0]
		break;
 80019b0:	e184      	b.n	8001cbc <handleEvent+0x4e4>
		else if (event == EVENT_G) {
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d103      	bne.n	80019c0 <handleEvent+0x1e8>
			currentState = STATE_G1;
 80019b8:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <handleEvent+0x270>)
 80019ba:	220a      	movs	r2, #10
 80019bc:	701a      	strb	r2, [r3, #0]
		break;
 80019be:	e17d      	b.n	8001cbc <handleEvent+0x4e4>
		else if (event == EVENT_END) {
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d103      	bne.n	80019ce <handleEvent+0x1f6>
			currentState = STATE_END;
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <handleEvent+0x270>)
 80019c8:	220d      	movs	r2, #13
 80019ca:	701a      	strb	r2, [r3, #0]
		break;
 80019cc:	e176      	b.n	8001cbc <handleEvent+0x4e4>
		else if (event == EVENT_NEUTRAL){
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	f040 8173 	bne.w	8001cbc <handleEvent+0x4e4>
			currentState = currentState;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <handleEvent+0x270>)
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <handleEvent+0x270>)
 80019dc:	701a      	strb	r2, [r3, #0]
		break;
 80019de:	e16d      	b.n	8001cbc <handleEvent+0x4e4>

	case STATE_R2:
		if (event == EVENT_AV) {
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <handleEvent+0x216>
			currentState = STATE_R1;
 80019e6:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <handleEvent+0x270>)
 80019e8:	2204      	movs	r2, #4
 80019ea:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 80019ec:	e168      	b.n	8001cc0 <handleEvent+0x4e8>
		else if (event == EVENT_R) {
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d103      	bne.n	80019fc <handleEvent+0x224>
			currentState = STATE_R3;
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <handleEvent+0x270>)
 80019f6:	2206      	movs	r2, #6
 80019f8:	701a      	strb	r2, [r3, #0]
		break;
 80019fa:	e161      	b.n	8001cc0 <handleEvent+0x4e8>
		else if (event == EVENT_D) {
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d103      	bne.n	8001a0a <handleEvent+0x232>
			currentState = STATE_D2;
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <handleEvent+0x270>)
 8001a04:	2208      	movs	r2, #8
 8001a06:	701a      	strb	r2, [r3, #0]
		break;
 8001a08:	e15a      	b.n	8001cc0 <handleEvent+0x4e8>
		else if (event == EVENT_G) {
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d103      	bne.n	8001a18 <handleEvent+0x240>
			currentState = STATE_G2;
 8001a10:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <handleEvent+0x270>)
 8001a12:	220b      	movs	r2, #11
 8001a14:	701a      	strb	r2, [r3, #0]
		break;
 8001a16:	e153      	b.n	8001cc0 <handleEvent+0x4e8>
		else if (event == EVENT_END) {
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d103      	bne.n	8001a26 <handleEvent+0x24e>
			currentState = STATE_END;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <handleEvent+0x270>)
 8001a20:	220d      	movs	r2, #13
 8001a22:	701a      	strb	r2, [r3, #0]
		break;
 8001a24:	e14c      	b.n	8001cc0 <handleEvent+0x4e8>
		else if (event == EVENT_NEUTRAL){
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	f040 8149 	bne.w	8001cc0 <handleEvent+0x4e8>
			currentState = currentState;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <handleEvent+0x270>)
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <handleEvent+0x270>)
 8001a34:	701a      	strb	r2, [r3, #0]
		break;
 8001a36:	e143      	b.n	8001cc0 <handleEvent+0x4e8>

	case STATE_R3:
		if (event == EVENT_AV) {
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <handleEvent+0x274>
			currentState = STATE_R2;
 8001a3e:	4b02      	ldr	r3, [pc, #8]	@ (8001a48 <handleEvent+0x270>)
 8001a40:	2205      	movs	r2, #5
 8001a42:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001a44:	e13e      	b.n	8001cc4 <handleEvent+0x4ec>
 8001a46:	bf00      	nop
 8001a48:	20000414 	.word	0x20000414
		else if (event == EVENT_R) {
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d103      	bne.n	8001a5a <handleEvent+0x282>
			currentState = STATE_R3;
 8001a52:	4b93      	ldr	r3, [pc, #588]	@ (8001ca0 <handleEvent+0x4c8>)
 8001a54:	2206      	movs	r2, #6
 8001a56:	701a      	strb	r2, [r3, #0]
		break;
 8001a58:	e134      	b.n	8001cc4 <handleEvent+0x4ec>
		else if (event == EVENT_D) {
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d103      	bne.n	8001a68 <handleEvent+0x290>
			currentState = STATE_D3;
 8001a60:	4b8f      	ldr	r3, [pc, #572]	@ (8001ca0 <handleEvent+0x4c8>)
 8001a62:	2209      	movs	r2, #9
 8001a64:	701a      	strb	r2, [r3, #0]
		break;
 8001a66:	e12d      	b.n	8001cc4 <handleEvent+0x4ec>
		else if (event == EVENT_G) {
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d103      	bne.n	8001a76 <handleEvent+0x29e>
			currentState = STATE_G3;
 8001a6e:	4b8c      	ldr	r3, [pc, #560]	@ (8001ca0 <handleEvent+0x4c8>)
 8001a70:	220c      	movs	r2, #12
 8001a72:	701a      	strb	r2, [r3, #0]
		break;
 8001a74:	e126      	b.n	8001cc4 <handleEvent+0x4ec>
		else if (event == EVENT_END) {
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d103      	bne.n	8001a84 <handleEvent+0x2ac>
			currentState = STATE_END;
 8001a7c:	4b88      	ldr	r3, [pc, #544]	@ (8001ca0 <handleEvent+0x4c8>)
 8001a7e:	220d      	movs	r2, #13
 8001a80:	701a      	strb	r2, [r3, #0]
		break;
 8001a82:	e11f      	b.n	8001cc4 <handleEvent+0x4ec>
		else if (event == EVENT_NEUTRAL){
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	f040 811c 	bne.w	8001cc4 <handleEvent+0x4ec>
			currentState = currentState;
 8001a8c:	4b84      	ldr	r3, [pc, #528]	@ (8001ca0 <handleEvent+0x4c8>)
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b83      	ldr	r3, [pc, #524]	@ (8001ca0 <handleEvent+0x4c8>)
 8001a92:	701a      	strb	r2, [r3, #0]
		break;
 8001a94:	e116      	b.n	8001cc4 <handleEvent+0x4ec>

	case STATE_D1:
		if (event == EVENT_AV) {
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <handleEvent+0x2cc>
			currentState = STATE_AV1;
 8001a9c:	4b80      	ldr	r3, [pc, #512]	@ (8001ca0 <handleEvent+0x4c8>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001aa2:	e111      	b.n	8001cc8 <handleEvent+0x4f0>
		else if (event == EVENT_R) {
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d103      	bne.n	8001ab2 <handleEvent+0x2da>
			currentState = STATE_R1;
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8001ca0 <handleEvent+0x4c8>)
 8001aac:	2204      	movs	r2, #4
 8001aae:	701a      	strb	r2, [r3, #0]
		break;
 8001ab0:	e10a      	b.n	8001cc8 <handleEvent+0x4f0>
		else if (event == EVENT_D) {
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d103      	bne.n	8001ac0 <handleEvent+0x2e8>
			currentState = STATE_D2;
 8001ab8:	4b79      	ldr	r3, [pc, #484]	@ (8001ca0 <handleEvent+0x4c8>)
 8001aba:	2208      	movs	r2, #8
 8001abc:	701a      	strb	r2, [r3, #0]
		break;
 8001abe:	e103      	b.n	8001cc8 <handleEvent+0x4f0>
		else if (event == EVENT_G) {
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d103      	bne.n	8001ace <handleEvent+0x2f6>
			currentState = STATE_NEUTRAL;
 8001ac6:	4b76      	ldr	r3, [pc, #472]	@ (8001ca0 <handleEvent+0x4c8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
		break;
 8001acc:	e0fc      	b.n	8001cc8 <handleEvent+0x4f0>
		else if (event == EVENT_END) {
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d103      	bne.n	8001adc <handleEvent+0x304>
			currentState = STATE_END;
 8001ad4:	4b72      	ldr	r3, [pc, #456]	@ (8001ca0 <handleEvent+0x4c8>)
 8001ad6:	220d      	movs	r2, #13
 8001ad8:	701a      	strb	r2, [r3, #0]
		break;
 8001ada:	e0f5      	b.n	8001cc8 <handleEvent+0x4f0>
		else if (event == EVENT_NEUTRAL){
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	f040 80f2 	bne.w	8001cc8 <handleEvent+0x4f0>
			currentState = currentState;
 8001ae4:	4b6e      	ldr	r3, [pc, #440]	@ (8001ca0 <handleEvent+0x4c8>)
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	4b6d      	ldr	r3, [pc, #436]	@ (8001ca0 <handleEvent+0x4c8>)
 8001aea:	701a      	strb	r2, [r3, #0]
		break;
 8001aec:	e0ec      	b.n	8001cc8 <handleEvent+0x4f0>

	case STATE_D2:
		if (event == EVENT_AV) {
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d103      	bne.n	8001afc <handleEvent+0x324>
			currentState = STATE_AV2;
 8001af4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca0 <handleEvent+0x4c8>)
 8001af6:	2202      	movs	r2, #2
 8001af8:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001afa:	e0e7      	b.n	8001ccc <handleEvent+0x4f4>
		else if (event == EVENT_R) {
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d103      	bne.n	8001b0a <handleEvent+0x332>
			currentState = STATE_R2;
 8001b02:	4b67      	ldr	r3, [pc, #412]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b04:	2205      	movs	r2, #5
 8001b06:	701a      	strb	r2, [r3, #0]
		break;
 8001b08:	e0e0      	b.n	8001ccc <handleEvent+0x4f4>
		else if (event == EVENT_D) {
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d103      	bne.n	8001b18 <handleEvent+0x340>
			currentState = STATE_D3;
 8001b10:	4b63      	ldr	r3, [pc, #396]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b12:	2209      	movs	r2, #9
 8001b14:	701a      	strb	r2, [r3, #0]
		break;
 8001b16:	e0d9      	b.n	8001ccc <handleEvent+0x4f4>
		else if (event == EVENT_G) {
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d103      	bne.n	8001b26 <handleEvent+0x34e>
			currentState = STATE_D1;
 8001b1e:	4b60      	ldr	r3, [pc, #384]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	701a      	strb	r2, [r3, #0]
		break;
 8001b24:	e0d2      	b.n	8001ccc <handleEvent+0x4f4>
		else if (event == EVENT_END) {
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d103      	bne.n	8001b34 <handleEvent+0x35c>
			currentState = STATE_END;
 8001b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b2e:	220d      	movs	r2, #13
 8001b30:	701a      	strb	r2, [r3, #0]
		break;
 8001b32:	e0cb      	b.n	8001ccc <handleEvent+0x4f4>
		else if (event == EVENT_NEUTRAL){
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	f040 80c8 	bne.w	8001ccc <handleEvent+0x4f4>
			currentState = currentState;
 8001b3c:	4b58      	ldr	r3, [pc, #352]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	4b57      	ldr	r3, [pc, #348]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b42:	701a      	strb	r2, [r3, #0]
		break;
 8001b44:	e0c2      	b.n	8001ccc <handleEvent+0x4f4>

	case STATE_D3:
		if (event == EVENT_AV) {
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d103      	bne.n	8001b54 <handleEvent+0x37c>
			currentState = STATE_AV3;
 8001b4c:	4b54      	ldr	r3, [pc, #336]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b4e:	2203      	movs	r2, #3
 8001b50:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001b52:	e0bd      	b.n	8001cd0 <handleEvent+0x4f8>
		else if (event == EVENT_R) {
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d103      	bne.n	8001b62 <handleEvent+0x38a>
			currentState = STATE_R3;
 8001b5a:	4b51      	ldr	r3, [pc, #324]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b5c:	2206      	movs	r2, #6
 8001b5e:	701a      	strb	r2, [r3, #0]
		break;
 8001b60:	e0b6      	b.n	8001cd0 <handleEvent+0x4f8>
		else if (event == EVENT_D) {
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d103      	bne.n	8001b70 <handleEvent+0x398>
			currentState = STATE_D3;
 8001b68:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b6a:	2209      	movs	r2, #9
 8001b6c:	701a      	strb	r2, [r3, #0]
		break;
 8001b6e:	e0af      	b.n	8001cd0 <handleEvent+0x4f8>
		else if (event == EVENT_G) {
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d103      	bne.n	8001b7e <handleEvent+0x3a6>
			currentState = STATE_D2;
 8001b76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b78:	2208      	movs	r2, #8
 8001b7a:	701a      	strb	r2, [r3, #0]
		break;
 8001b7c:	e0a8      	b.n	8001cd0 <handleEvent+0x4f8>
		else if (event == EVENT_END) {
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d103      	bne.n	8001b8c <handleEvent+0x3b4>
			currentState = STATE_END;
 8001b84:	4b46      	ldr	r3, [pc, #280]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b86:	220d      	movs	r2, #13
 8001b88:	701a      	strb	r2, [r3, #0]
		break;
 8001b8a:	e0a1      	b.n	8001cd0 <handleEvent+0x4f8>
		else if (event == EVENT_NEUTRAL){
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	f040 809e 	bne.w	8001cd0 <handleEvent+0x4f8>
			currentState = currentState;
 8001b94:	4b42      	ldr	r3, [pc, #264]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	4b41      	ldr	r3, [pc, #260]	@ (8001ca0 <handleEvent+0x4c8>)
 8001b9a:	701a      	strb	r2, [r3, #0]
		break;
 8001b9c:	e098      	b.n	8001cd0 <handleEvent+0x4f8>

	case STATE_G1:
		if (event == EVENT_AV) {
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d103      	bne.n	8001bac <handleEvent+0x3d4>
			currentState = STATE_AV1;
 8001ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca0 <handleEvent+0x4c8>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001baa:	e093      	b.n	8001cd4 <handleEvent+0x4fc>
		else if (event == EVENT_R) {
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d103      	bne.n	8001bba <handleEvent+0x3e2>
			currentState = STATE_R1;
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca0 <handleEvent+0x4c8>)
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	701a      	strb	r2, [r3, #0]
		break;
 8001bb8:	e08c      	b.n	8001cd4 <handleEvent+0x4fc>
		else if (event == EVENT_D) {
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d103      	bne.n	8001bc8 <handleEvent+0x3f0>
			currentState = STATE_NEUTRAL;
 8001bc0:	4b37      	ldr	r3, [pc, #220]	@ (8001ca0 <handleEvent+0x4c8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
		break;
 8001bc6:	e085      	b.n	8001cd4 <handleEvent+0x4fc>
		else if (event == EVENT_G) {
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d103      	bne.n	8001bd6 <handleEvent+0x3fe>
			currentState = STATE_G2;
 8001bce:	4b34      	ldr	r3, [pc, #208]	@ (8001ca0 <handleEvent+0x4c8>)
 8001bd0:	220b      	movs	r2, #11
 8001bd2:	701a      	strb	r2, [r3, #0]
		break;
 8001bd4:	e07e      	b.n	8001cd4 <handleEvent+0x4fc>
		else if (event == EVENT_END) {
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d103      	bne.n	8001be4 <handleEvent+0x40c>
			currentState = STATE_END;
 8001bdc:	4b30      	ldr	r3, [pc, #192]	@ (8001ca0 <handleEvent+0x4c8>)
 8001bde:	220d      	movs	r2, #13
 8001be0:	701a      	strb	r2, [r3, #0]
		break;
 8001be2:	e077      	b.n	8001cd4 <handleEvent+0x4fc>
		else if (event == EVENT_NEUTRAL){
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d174      	bne.n	8001cd4 <handleEvent+0x4fc>
			currentState = currentState;
 8001bea:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca0 <handleEvent+0x4c8>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca0 <handleEvent+0x4c8>)
 8001bf0:	701a      	strb	r2, [r3, #0]
		break;
 8001bf2:	e06f      	b.n	8001cd4 <handleEvent+0x4fc>

	case STATE_G2:
		if (event == EVENT_AV) {
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <handleEvent+0x42a>
			currentState = STATE_AV2;
 8001bfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <handleEvent+0x4c8>)
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001c00:	e06a      	b.n	8001cd8 <handleEvent+0x500>
		else if (event == EVENT_R) {
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d103      	bne.n	8001c10 <handleEvent+0x438>
			currentState = STATE_R2;
 8001c08:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c0a:	2205      	movs	r2, #5
 8001c0c:	701a      	strb	r2, [r3, #0]
		break;
 8001c0e:	e063      	b.n	8001cd8 <handleEvent+0x500>
		else if (event == EVENT_D) {
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d103      	bne.n	8001c1e <handleEvent+0x446>
			currentState = STATE_G1;
 8001c16:	4b22      	ldr	r3, [pc, #136]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c18:	220a      	movs	r2, #10
 8001c1a:	701a      	strb	r2, [r3, #0]
		break;
 8001c1c:	e05c      	b.n	8001cd8 <handleEvent+0x500>
		else if (event == EVENT_G) {
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d103      	bne.n	8001c2c <handleEvent+0x454>
			currentState = STATE_G3;
 8001c24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c26:	220c      	movs	r2, #12
 8001c28:	701a      	strb	r2, [r3, #0]
		break;
 8001c2a:	e055      	b.n	8001cd8 <handleEvent+0x500>
		else if (event == EVENT_END) {
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d103      	bne.n	8001c3a <handleEvent+0x462>
			currentState = STATE_END;
 8001c32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c34:	220d      	movs	r2, #13
 8001c36:	701a      	strb	r2, [r3, #0]
		break;
 8001c38:	e04e      	b.n	8001cd8 <handleEvent+0x500>
		else if (event == EVENT_NEUTRAL){
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d14b      	bne.n	8001cd8 <handleEvent+0x500>
			currentState = currentState;
 8001c40:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c46:	701a      	strb	r2, [r3, #0]
		break;
 8001c48:	e046      	b.n	8001cd8 <handleEvent+0x500>

	case STATE_G3:
		if (event == EVENT_AV) {
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <handleEvent+0x480>
			currentState = STATE_AV3;
 8001c50:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c52:	2203      	movs	r2, #3
 8001c54:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001c56:	e041      	b.n	8001cdc <handleEvent+0x504>
		else if (event == EVENT_R) {
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d103      	bne.n	8001c66 <handleEvent+0x48e>
			currentState = STATE_R3;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c60:	2206      	movs	r2, #6
 8001c62:	701a      	strb	r2, [r3, #0]
		break;
 8001c64:	e03a      	b.n	8001cdc <handleEvent+0x504>
		else if (event == EVENT_D) {
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d103      	bne.n	8001c74 <handleEvent+0x49c>
			currentState = STATE_G2;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c6e:	220b      	movs	r2, #11
 8001c70:	701a      	strb	r2, [r3, #0]
		break;
 8001c72:	e033      	b.n	8001cdc <handleEvent+0x504>
		else if (event == EVENT_G) {
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d103      	bne.n	8001c82 <handleEvent+0x4aa>
			currentState = STATE_G3;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c7c:	220c      	movs	r2, #12
 8001c7e:	701a      	strb	r2, [r3, #0]
		break;
 8001c80:	e02c      	b.n	8001cdc <handleEvent+0x504>
		else if (event == EVENT_END) {
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d103      	bne.n	8001c90 <handleEvent+0x4b8>
			currentState = STATE_END;
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c8a:	220d      	movs	r2, #13
 8001c8c:	701a      	strb	r2, [r3, #0]
		break;
 8001c8e:	e025      	b.n	8001cdc <handleEvent+0x504>
		else if (event == EVENT_NEUTRAL){
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d122      	bne.n	8001cdc <handleEvent+0x504>
			currentState = currentState;
 8001c96:	4b02      	ldr	r3, [pc, #8]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	4b01      	ldr	r3, [pc, #4]	@ (8001ca0 <handleEvent+0x4c8>)
 8001c9c:	701a      	strb	r2, [r3, #0]
		break;
 8001c9e:	e01d      	b.n	8001cdc <handleEvent+0x504>
 8001ca0:	20000414 	.word	0x20000414

	default:
		currentState = STATE_NEUTRAL;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <handleEvent+0x514>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
		break;
 8001caa:	e018      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cac:	bf00      	nop
 8001cae:	e016      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cb0:	bf00      	nop
 8001cb2:	e014      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cb4:	bf00      	nop
 8001cb6:	e012      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cb8:	bf00      	nop
 8001cba:	e010      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cbc:	bf00      	nop
 8001cbe:	e00e      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cc0:	bf00      	nop
 8001cc2:	e00c      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cc4:	bf00      	nop
 8001cc6:	e00a      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cc8:	bf00      	nop
 8001cca:	e008      	b.n	8001cde <handleEvent+0x506>
		break;
 8001ccc:	bf00      	nop
 8001cce:	e006      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cd0:	bf00      	nop
 8001cd2:	e004      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cd4:	bf00      	nop
 8001cd6:	e002      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cd8:	bf00      	nop
 8001cda:	e000      	b.n	8001cde <handleEvent+0x506>
		break;
 8001cdc:	bf00      	nop
	}
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000414 	.word	0x20000414

08001cf0 <executeStateActions>:

void executeStateActions(void) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	switch (currentState) {
 8001cf4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f68 <executeStateActions+0x278>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	f200 812e 	bhi.w	8001f5a <executeStateActions+0x26a>
 8001cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001d04 <executeStateActions+0x14>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d39 	.word	0x08001d39
 8001d08:	08001d4b 	.word	0x08001d4b
 8001d0c:	08001d77 	.word	0x08001d77
 8001d10:	08001da3 	.word	0x08001da3
 8001d14:	08001dcf 	.word	0x08001dcf
 8001d18:	08001dfb 	.word	0x08001dfb
 8001d1c:	08001e27 	.word	0x08001e27
 8001d20:	08001e53 	.word	0x08001e53
 8001d24:	08001e7f 	.word	0x08001e7f
 8001d28:	08001eab 	.word	0x08001eab
 8001d2c:	08001ed7 	.word	0x08001ed7
 8001d30:	08001f03 	.word	0x08001f03
 8001d34:	08001f2f 	.word	0x08001f2f
	case STATE_NEUTRAL:
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001d38:	4b8c      	ldr	r3, [pc, #560]	@ (8001f6c <executeStateActions+0x27c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 8001d40:	4b8a      	ldr	r3, [pc, #552]	@ (8001f6c <executeStateActions+0x27c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2200      	movs	r2, #0
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8001d48:	e10b      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_AV1:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,13333);
 8001d4a:	4b88      	ldr	r3, [pc, #544]	@ (8001f6c <executeStateActions+0x27c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f243 4215 	movw	r2, #13333	@ 0x3415
 8001d52:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,13333);
 8001d54:	4b85      	ldr	r3, [pc, #532]	@ (8001f6c <executeStateActions+0x27c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f243 4215 	movw	r2, #13333	@ 0x3415
 8001d5c:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2104      	movs	r1, #4
 8001d62:	4883      	ldr	r0, [pc, #524]	@ (8001f70 <executeStateActions+0x280>)
 8001d64:	f002 fc90 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d6e:	4881      	ldr	r0, [pc, #516]	@ (8001f74 <executeStateActions+0x284>)
 8001d70:	f002 fc8a 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001d74:	e0f5      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_AV2:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,26666);
 8001d76:	4b7d      	ldr	r3, [pc, #500]	@ (8001f6c <executeStateActions+0x27c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f646 022a 	movw	r2, #26666	@ 0x682a
 8001d7e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,26666);
 8001d80:	4b7a      	ldr	r3, [pc, #488]	@ (8001f6c <executeStateActions+0x27c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f646 022a 	movw	r2, #26666	@ 0x682a
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4878      	ldr	r0, [pc, #480]	@ (8001f70 <executeStateActions+0x280>)
 8001d90:	f002 fc7a 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d9a:	4876      	ldr	r0, [pc, #472]	@ (8001f74 <executeStateActions+0x284>)
 8001d9c:	f002 fc74 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001da0:	e0df      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_AV3:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,39997);
 8001da2:	4b72      	ldr	r3, [pc, #456]	@ (8001f6c <executeStateActions+0x27c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f649 423d 	movw	r2, #39997	@ 0x9c3d
 8001daa:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,39997);
 8001dac:	4b6f      	ldr	r3, [pc, #444]	@ (8001f6c <executeStateActions+0x27c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f649 423d 	movw	r2, #39997	@ 0x9c3d
 8001db4:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 8001db6:	2201      	movs	r2, #1
 8001db8:	2104      	movs	r1, #4
 8001dba:	486d      	ldr	r0, [pc, #436]	@ (8001f70 <executeStateActions+0x280>)
 8001dbc:	f002 fc64 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dc6:	486b      	ldr	r0, [pc, #428]	@ (8001f74 <executeStateActions+0x284>)
 8001dc8:	f002 fc5e 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001dcc:	e0c9      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_R1:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,13333);
 8001dce:	4b67      	ldr	r3, [pc, #412]	@ (8001f6c <executeStateActions+0x27c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f243 4215 	movw	r2, #13333	@ 0x3415
 8001dd6:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,13333);
 8001dd8:	4b64      	ldr	r3, [pc, #400]	@ (8001f6c <executeStateActions+0x27c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f243 4215 	movw	r2, #13333	@ 0x3415
 8001de0:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2104      	movs	r1, #4
 8001de6:	4862      	ldr	r0, [pc, #392]	@ (8001f70 <executeStateActions+0x280>)
 8001de8:	f002 fc4e 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001df2:	4860      	ldr	r0, [pc, #384]	@ (8001f74 <executeStateActions+0x284>)
 8001df4:	f002 fc48 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001df8:	e0b3      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_R2:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,26666);
 8001dfa:	4b5c      	ldr	r3, [pc, #368]	@ (8001f6c <executeStateActions+0x27c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f646 022a 	movw	r2, #26666	@ 0x682a
 8001e02:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,26666);
 8001e04:	4b59      	ldr	r3, [pc, #356]	@ (8001f6c <executeStateActions+0x27c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f646 022a 	movw	r2, #26666	@ 0x682a
 8001e0c:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2104      	movs	r1, #4
 8001e12:	4857      	ldr	r0, [pc, #348]	@ (8001f70 <executeStateActions+0x280>)
 8001e14:	f002 fc38 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e1e:	4855      	ldr	r0, [pc, #340]	@ (8001f74 <executeStateActions+0x284>)
 8001e20:	f002 fc32 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001e24:	e09d      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_R3:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,39997);
 8001e26:	4b51      	ldr	r3, [pc, #324]	@ (8001f6c <executeStateActions+0x27c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f649 423d 	movw	r2, #39997	@ 0x9c3d
 8001e2e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,39997);
 8001e30:	4b4e      	ldr	r3, [pc, #312]	@ (8001f6c <executeStateActions+0x27c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f649 423d 	movw	r2, #39997	@ 0x9c3d
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	484c      	ldr	r0, [pc, #304]	@ (8001f70 <executeStateActions+0x280>)
 8001e40:	f002 fc22 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e4a:	484a      	ldr	r0, [pc, #296]	@ (8001f74 <executeStateActions+0x284>)
 8001e4c:	f002 fc1c 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001e50:	e087      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_D1:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,13333);
 8001e52:	4b46      	ldr	r3, [pc, #280]	@ (8001f6c <executeStateActions+0x27c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f243 4215 	movw	r2, #13333	@ 0x3415
 8001e5a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,13333);
 8001e5c:	4b43      	ldr	r3, [pc, #268]	@ (8001f6c <executeStateActions+0x27c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f243 4215 	movw	r2, #13333	@ 0x3415
 8001e64:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2104      	movs	r1, #4
 8001e6a:	4841      	ldr	r0, [pc, #260]	@ (8001f70 <executeStateActions+0x280>)
 8001e6c:	f002 fc0c 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e76:	483f      	ldr	r0, [pc, #252]	@ (8001f74 <executeStateActions+0x284>)
 8001e78:	f002 fc06 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001e7c:	e071      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_D2:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,26666);
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f6c <executeStateActions+0x27c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f646 022a 	movw	r2, #26666	@ 0x682a
 8001e86:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,26666);
 8001e88:	4b38      	ldr	r3, [pc, #224]	@ (8001f6c <executeStateActions+0x27c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f646 022a 	movw	r2, #26666	@ 0x682a
 8001e90:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	2104      	movs	r1, #4
 8001e96:	4836      	ldr	r0, [pc, #216]	@ (8001f70 <executeStateActions+0x280>)
 8001e98:	f002 fbf6 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ea2:	4834      	ldr	r0, [pc, #208]	@ (8001f74 <executeStateActions+0x284>)
 8001ea4:	f002 fbf0 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001ea8:	e05b      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_D3:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,39997);
 8001eaa:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <executeStateActions+0x27c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f649 423d 	movw	r2, #39997	@ 0x9c3d
 8001eb2:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,39997);
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <executeStateActions+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f649 423d 	movw	r2, #39997	@ 0x9c3d
 8001ebc:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	482b      	ldr	r0, [pc, #172]	@ (8001f70 <executeStateActions+0x280>)
 8001ec4:	f002 fbe0 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ece:	4829      	ldr	r0, [pc, #164]	@ (8001f74 <executeStateActions+0x284>)
 8001ed0:	f002 fbda 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001ed4:	e045      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_G1:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,13333);
 8001ed6:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <executeStateActions+0x27c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f243 4215 	movw	r2, #13333	@ 0x3415
 8001ede:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,13333);
 8001ee0:	4b22      	ldr	r3, [pc, #136]	@ (8001f6c <executeStateActions+0x27c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f243 4215 	movw	r2, #13333	@ 0x3415
 8001ee8:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2104      	movs	r1, #4
 8001eee:	4820      	ldr	r0, [pc, #128]	@ (8001f70 <executeStateActions+0x280>)
 8001ef0:	f002 fbca 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001efa:	481e      	ldr	r0, [pc, #120]	@ (8001f74 <executeStateActions+0x284>)
 8001efc:	f002 fbc4 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001f00:	e02f      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_G2:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,26666);
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <executeStateActions+0x27c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f646 022a 	movw	r2, #26666	@ 0x682a
 8001f0a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,26666);
 8001f0c:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <executeStateActions+0x27c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f646 022a 	movw	r2, #26666	@ 0x682a
 8001f14:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2104      	movs	r1, #4
 8001f1a:	4815      	ldr	r0, [pc, #84]	@ (8001f70 <executeStateActions+0x280>)
 8001f1c:	f002 fbb4 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f26:	4813      	ldr	r0, [pc, #76]	@ (8001f74 <executeStateActions+0x284>)
 8001f28:	f002 fbae 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001f2c:	e019      	b.n	8001f62 <executeStateActions+0x272>

	case STATE_G3:


		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,39997);
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <executeStateActions+0x27c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f649 423d 	movw	r2, #39997	@ 0x9c3d
 8001f36:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,39997);
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <executeStateActions+0x27c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f649 423d 	movw	r2, #39997	@ 0x9c3d
 8001f40:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2104      	movs	r1, #4
 8001f46:	480a      	ldr	r0, [pc, #40]	@ (8001f70 <executeStateActions+0x280>)
 8001f48:	f002 fb9e 	bl	8004688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f52:	4808      	ldr	r0, [pc, #32]	@ (8001f74 <executeStateActions+0x284>)
 8001f54:	f002 fb98 	bl	8004688 <HAL_GPIO_WritePin>
		break;
 8001f58:	e003      	b.n	8001f62 <executeStateActions+0x272>

	default:
		currentState = STATE_NEUTRAL;
 8001f5a:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <executeStateActions+0x278>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
		break;
 8001f60:	bf00      	nop
	}
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000414 	.word	0x20000414
 8001f6c:	20000258 	.word	0x20000258
 8001f70:	48000400 	.word	0x48000400
 8001f74:	48000800 	.word	0x48000800

08001f78 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
 void Error_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7c:	b672      	cpsid	i
}
 8001f7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
			__disable_irq();
	while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <Error_Handler+0x8>

08001f84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f96:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a08      	ldr	r2, [pc, #32]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0ac      	sub	sp, #176	@ 0xb0
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2288      	movs	r2, #136	@ 0x88
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f007 fd78 	bl	8009ae2 <memset>
  if(hadc->Instance==ADC1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a2b      	ldr	r2, [pc, #172]	@ (80020a4 <HAL_ADC_MspInit+0xd8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d14e      	bne.n	800209a <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ffc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002000:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002002:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800200a:	2302      	movs	r3, #2
 800200c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800200e:	2301      	movs	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002012:	2308      	movs	r3, #8
 8002014:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002016:	2307      	movs	r3, #7
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800201a:	2302      	movs	r3, #2
 800201c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800201e:	2302      	movs	r3, #2
 8002020:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002022:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002026:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4618      	mov	r0, r3
 800202e:	f003 f9a7 	bl	8005380 <HAL_RCCEx_PeriphCLKConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002038:	f7ff ff9e 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800203c:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <HAL_ADC_MspInit+0xdc>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002040:	4a19      	ldr	r2, [pc, #100]	@ (80020a8 <HAL_ADC_MspInit+0xdc>)
 8002042:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002046:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002048:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <HAL_ADC_MspInit+0xdc>)
 800204a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002054:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <HAL_ADC_MspInit+0xdc>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002058:	4a13      	ldr	r2, [pc, #76]	@ (80020a8 <HAL_ADC_MspInit+0xdc>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_ADC_MspInit+0xdc>)
 8002062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800206c:	2320      	movs	r3, #32
 800206e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002072:	230b      	movs	r3, #11
 8002074:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002082:	4619      	mov	r1, r3
 8002084:	4809      	ldr	r0, [pc, #36]	@ (80020ac <HAL_ADC_MspInit+0xe0>)
 8002086:	f002 f955 	bl	8004334 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2012      	movs	r0, #18
 8002090:	f002 f89b 	bl	80041ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002094:	2012      	movs	r0, #18
 8002096:	f002 f8b4 	bl	8004202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	37b0      	adds	r7, #176	@ 0xb0
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	50040000 	.word	0x50040000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000800 	.word	0x48000800

080020b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	@ 0x30
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d0:	d10c      	bne.n	80020ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020de:	4b29      	ldr	r3, [pc, #164]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80020ea:	e047      	b.n	800217c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a25      	ldr	r2, [pc, #148]	@ (8002188 <HAL_TIM_Base_MspInit+0xd8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d129      	bne.n	800214a <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020f6:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	4a22      	ldr	r2, [pc, #136]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	6593      	str	r3, [r2, #88]	@ 0x58
 8002102:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	4a1c      	ldr	r2, [pc, #112]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211a:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002126:	23c0      	movs	r3, #192	@ 0xc0
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002136:	2302      	movs	r3, #2
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002144:	f002 f8f6 	bl	8004334 <HAL_GPIO_Init>
}
 8002148:	e018      	b.n	800217c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM6)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a0f      	ldr	r2, [pc, #60]	@ (800218c <HAL_TIM_Base_MspInit+0xdc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d113      	bne.n	800217c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 800215a:	f043 0310 	orr.w	r3, r3, #16
 800215e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <HAL_TIM_Base_MspInit+0xd4>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	2036      	movs	r0, #54	@ 0x36
 8002172:	f002 f82a 	bl	80041ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002176:	2036      	movs	r0, #54	@ 0x36
 8002178:	f002 f843 	bl	8004202 <HAL_NVIC_EnableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3730      	adds	r7, #48	@ 0x30
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	40000400 	.word	0x40000400
 800218c:	40001000 	.word	0x40001000

08002190 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a17      	ldr	r2, [pc, #92]	@ (800220c <HAL_TIM_IC_MspInit+0x7c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d127      	bne.n	8002202 <HAL_TIM_IC_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_TIM_IC_MspInit+0x80>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	4a16      	ldr	r2, [pc, #88]	@ (8002210 <HAL_TIM_IC_MspInit+0x80>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021be:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_TIM_IC_MspInit+0x80>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_TIM_IC_MspInit+0x80>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <HAL_TIM_IC_MspInit+0x80>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <HAL_TIM_IC_MspInit+0x80>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021e2:	23c0      	movs	r3, #192	@ 0xc0
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021f2:	2302      	movs	r3, #2
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	@ (8002214 <HAL_TIM_IC_MspInit+0x84>)
 80021fe:	f002 f899 	bl	8004334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	@ 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40000800 	.word	0x40000800
 8002210:	40021000 	.word	0x40021000
 8002214:	48000400 	.word	0x48000400

08002218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	@ 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002238:	d13a      	bne.n	80022b0 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <HAL_TIM_MspPostInit+0xa0>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	4a1e      	ldr	r2, [pc, #120]	@ (80022b8 <HAL_TIM_MspPostInit+0xa0>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002246:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <HAL_TIM_MspPostInit+0xa0>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <HAL_TIM_MspPostInit+0xa0>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	4a18      	ldr	r2, [pc, #96]	@ (80022b8 <HAL_TIM_MspPostInit+0xa0>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225e:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <HAL_TIM_MspPostInit+0xa0>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MOT1_Pin;
 800226a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800227c:	2301      	movs	r3, #1
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOT1_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	480d      	ldr	r0, [pc, #52]	@ (80022bc <HAL_TIM_MspPostInit+0xa4>)
 8002288:	f002 f854 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOT2_Pin;
 800228c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800229e:	2301      	movs	r3, #1
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOT2_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ac:	f002 f842 	bl	8004334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	@ 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	48000400 	.word	0x48000400

080022c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0ac      	sub	sp, #176	@ 0xb0
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2288      	movs	r2, #136	@ 0x88
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f007 fbfe 	bl	8009ae2 <memset>
  if(huart->Instance==USART3)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a36      	ldr	r2, [pc, #216]	@ (80023c4 <HAL_UART_MspInit+0x104>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d165      	bne.n	80023bc <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022f0:	2304      	movs	r3, #4
 80022f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 f83f 	bl	8005380 <HAL_RCCEx_PeriphCLKConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002308:	f7ff fe36 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800230c:	4b2e      	ldr	r3, [pc, #184]	@ (80023c8 <HAL_UART_MspInit+0x108>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	4a2d      	ldr	r2, [pc, #180]	@ (80023c8 <HAL_UART_MspInit+0x108>)
 8002312:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002316:	6593      	str	r3, [r2, #88]	@ 0x58
 8002318:	4b2b      	ldr	r3, [pc, #172]	@ (80023c8 <HAL_UART_MspInit+0x108>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002324:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <HAL_UART_MspInit+0x108>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002328:	4a27      	ldr	r2, [pc, #156]	@ (80023c8 <HAL_UART_MspInit+0x108>)
 800232a:	f043 0302 	orr.w	r3, r3, #2
 800232e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <HAL_UART_MspInit+0x108>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800233c:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <HAL_UART_MspInit+0x108>)
 800233e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002340:	4a21      	ldr	r2, [pc, #132]	@ (80023c8 <HAL_UART_MspInit+0x108>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002348:	4b1f      	ldr	r3, [pc, #124]	@ (80023c8 <HAL_UART_MspInit+0x108>)
 800234a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB12     ------> USART3_CK
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002358:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800236e:	2307      	movs	r3, #7
 8002370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002378:	4619      	mov	r1, r3
 800237a:	4814      	ldr	r0, [pc, #80]	@ (80023cc <HAL_UART_MspInit+0x10c>)
 800237c:	f001 ffda 	bl	8004334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002380:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002384:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800239a:	2307      	movs	r3, #7
 800239c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023a4:	4619      	mov	r1, r3
 80023a6:	480a      	ldr	r0, [pc, #40]	@ (80023d0 <HAL_UART_MspInit+0x110>)
 80023a8:	f001 ffc4 	bl	8004334 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2027      	movs	r0, #39	@ 0x27
 80023b2:	f001 ff0a 	bl	80041ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023b6:	2027      	movs	r0, #39	@ 0x27
 80023b8:	f001 ff23 	bl	8004202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023bc:	bf00      	nop
 80023be:	37b0      	adds	r7, #176	@ 0xb0
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40004800 	.word	0x40004800
 80023c8:	40021000 	.word	0x40021000
 80023cc:	48000400 	.word	0x48000400
 80023d0:	48000800 	.word	0x48000800

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <NMI_Handler+0x4>

080023dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <HardFault_Handler+0x4>

080023e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <MemManage_Handler+0x4>

080023ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <BusFault_Handler+0x4>

080023f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <UsageFault_Handler+0x4>

080023fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242a:	f000 f97f 	bl	800272c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <ADC1_2_IRQHandler+0x10>)
 800243a:	f000 fe3d 	bl	80030b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200001f4 	.word	0x200001f4

08002448 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800244c:	4802      	ldr	r0, [pc, #8]	@ (8002458 <USART3_IRQHandler+0x10>)
 800244e:	f005 f913 	bl	8007678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000388 	.word	0x20000388

0800245c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002460:	4802      	ldr	r0, [pc, #8]	@ (800246c <TIM6_DAC_IRQHandler+0x10>)
 8002462:	f003 fed0 	bl	8006206 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000033c 	.word	0x2000033c

08002470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return 1;
 8002474:	2301      	movs	r3, #1
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_kill>:

int _kill(int pid, int sig)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800248a:	f007 fb7d 	bl	8009b88 <__errno>
 800248e:	4603      	mov	r3, r0
 8002490:	2216      	movs	r2, #22
 8002492:	601a      	str	r2, [r3, #0]
  return -1;
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_exit>:

void _exit (int status)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ffe7 	bl	8002480 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024b2:	bf00      	nop
 80024b4:	e7fd      	b.n	80024b2 <_exit+0x12>

080024b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e00a      	b.n	80024de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024c8:	f3af 8000 	nop.w
 80024cc:	4601      	mov	r1, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	60ba      	str	r2, [r7, #8]
 80024d4:	b2ca      	uxtb	r2, r1
 80024d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	dbf0      	blt.n	80024c8 <_read+0x12>
  }

  return len;
 80024e6:	687b      	ldr	r3, [r7, #4]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e009      	b.n	8002516 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	60ba      	str	r2, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	dbf1      	blt.n	8002502 <_write+0x12>
  }
  return len;
 800251e:	687b      	ldr	r3, [r7, #4]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_close>:

int _close(int file)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002550:	605a      	str	r2, [r3, #4]
  return 0;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_isatty>:

int _isatty(int file)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002568:	2301      	movs	r3, #1
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002598:	4a14      	ldr	r2, [pc, #80]	@ (80025ec <_sbrk+0x5c>)
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <_sbrk+0x60>)
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a4:	4b13      	ldr	r3, [pc, #76]	@ (80025f4 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ac:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <_sbrk+0x64>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	@ (80025f8 <_sbrk+0x68>)
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b2:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d207      	bcs.n	80025d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c0:	f007 fae2 	bl	8009b88 <__errno>
 80025c4:	4603      	mov	r3, r0
 80025c6:	220c      	movs	r2, #12
 80025c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
 80025ce:	e009      	b.n	80025e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d0:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d6:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	4a05      	ldr	r2, [pc, #20]	@ (80025f4 <_sbrk+0x64>)
 80025e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20018000 	.word	0x20018000
 80025f0:	00000400 	.word	0x00000400
 80025f4:	20000418 	.word	0x20000418
 80025f8:	20000570 	.word	0x20000570

080025fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002600:	4b06      	ldr	r3, [pc, #24]	@ (800261c <SystemInit+0x20>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002606:	4a05      	ldr	r2, [pc, #20]	@ (800261c <SystemInit+0x20>)
 8002608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800260c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002624:	f7ff ffea 	bl	80025fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002628:	480c      	ldr	r0, [pc, #48]	@ (800265c <LoopForever+0x6>)
  ldr r1, =_edata
 800262a:	490d      	ldr	r1, [pc, #52]	@ (8002660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800262c:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <LoopForever+0xe>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002640:	4c0a      	ldr	r4, [pc, #40]	@ (800266c <LoopForever+0x16>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800264e:	f007 faa1 	bl	8009b94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002652:	f7fe fcc7 	bl	8000fe4 <main>

08002656 <LoopForever>:

LoopForever:
    b LoopForever
 8002656:	e7fe      	b.n	8002656 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002658:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800265c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002660:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002664:	0800d730 	.word	0x0800d730
  ldr r2, =_sbss
 8002668:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800266c:	2000056c 	.word	0x2000056c

08002670 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002670:	e7fe      	b.n	8002670 <ADC3_IRQHandler>
	...

08002674 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800267e:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <HAL_Init+0x3c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0b      	ldr	r2, [pc, #44]	@ (80026b0 <HAL_Init+0x3c>)
 8002684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002688:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268a:	2003      	movs	r0, #3
 800268c:	f001 fd92 	bl	80041b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002690:	2000      	movs	r0, #0
 8002692:	f000 f80f 	bl	80026b4 <HAL_InitTick>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	71fb      	strb	r3, [r7, #7]
 80026a0:	e001      	b.n	80026a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026a2:	f7ff fc6f 	bl	8001f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026a6:	79fb      	ldrb	r3, [r7, #7]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40022000 	.word	0x40022000

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026c0:	4b17      	ldr	r3, [pc, #92]	@ (8002720 <HAL_InitTick+0x6c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d023      	beq.n	8002710 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <HAL_InitTick+0x70>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <HAL_InitTick+0x6c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 fd9d 	bl	800421e <HAL_SYSTICK_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d809      	bhi.n	8002704 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f001 fd67 	bl	80041ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <HAL_InitTick+0x74>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e007      	b.n	8002714 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e004      	b.n	8002714 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e001      	b.n	8002714 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	2000000c 	.word	0x2000000c
 8002724:	20000004 	.word	0x20000004
 8002728:	20000008 	.word	0x20000008

0800272c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_IncTick+0x20>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_IncTick+0x24>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4413      	add	r3, r2
 800273c:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <HAL_IncTick+0x24>)
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	2000000c 	.word	0x2000000c
 8002750:	2000041c 	.word	0x2000041c

08002754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return uwTick;
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <HAL_GetTick+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	2000041c 	.word	0x2000041c

0800276c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7ff ffee 	bl	8002754 <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d005      	beq.n	8002792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002786:	4b0a      	ldr	r3, [pc, #40]	@ (80027b0 <HAL_Delay+0x44>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002792:	bf00      	nop
 8002794:	f7ff ffde 	bl	8002754 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d8f7      	bhi.n	8002794 <HAL_Delay+0x28>
  {
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000000c 	.word	0x2000000c

080027b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3360      	adds	r3, #96	@ 0x60
 800282e:	461a      	mov	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <LL_ADC_SetOffset+0x44>)
 800283e:	4013      	ands	r3, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	4313      	orrs	r3, r2
 800284c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	03fff000 	.word	0x03fff000

08002864 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3360      	adds	r3, #96	@ 0x60
 8002872:	461a      	mov	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3360      	adds	r3, #96	@ 0x60
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3330      	adds	r3, #48	@ 0x30
 80028fc:	461a      	mov	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	4413      	add	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	211f      	movs	r1, #31
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	401a      	ands	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0e9b      	lsrs	r3, r3, #26
 8002924:	f003 011f 	and.w	r1, r3, #31
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	431a      	orrs	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002950:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800296a:	b480      	push	{r7}
 800296c:	b087      	sub	sp, #28
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3314      	adds	r3, #20
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	0e5b      	lsrs	r3, r3, #25
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	0d1b      	lsrs	r3, r3, #20
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	2107      	movs	r1, #7
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	0d1b      	lsrs	r3, r3, #20
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	431a      	orrs	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f003 0318 	and.w	r3, r3, #24
 80029e2:	4908      	ldr	r1, [pc, #32]	@ (8002a04 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029e4:	40d9      	lsrs	r1, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	400b      	ands	r3, r1
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	431a      	orrs	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	0007ffff 	.word	0x0007ffff

08002a08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 031f 	and.w	r3, r3, #31
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6093      	str	r3, [r2, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a78:	d101      	bne.n	8002a7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aa0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ac8:	d101      	bne.n	8002ace <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002aec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <LL_ADC_IsEnabled+0x18>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <LL_ADC_IsEnabled+0x1a>
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b3e:	f043 0204 	orr.w	r2, r3, #4
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d101      	bne.n	8002b6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d101      	bne.n	8002b90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b089      	sub	sp, #36	@ 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e130      	b.n	8002e1c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff f9ff 	bl	8001fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff3f 	bl	8002a64 <LL_ADC_IsDeepPowerDownEnabled>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff25 	bl	8002a40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ff5a 	bl	8002ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d115      	bne.n	8002c32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff3e 	bl	8002a8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c10:	4b84      	ldr	r3, [pc, #528]	@ (8002e24 <HAL_ADC_Init+0x284>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	4a84      	ldr	r2, [pc, #528]	@ (8002e28 <HAL_ADC_Init+0x288>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	3301      	adds	r3, #1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c24:	e002      	b.n	8002c2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f9      	bne.n	8002c26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff ff3c 	bl	8002ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10d      	bne.n	8002c5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c46:	f043 0210 	orr.w	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff ff75 	bl	8002b52 <LL_ADC_REG_IsConversionOngoing>
 8002c68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 80c9 	bne.w	8002e0a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 80c5 	bne.w	8002e0a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c88:	f043 0202 	orr.w	r2, r3, #2
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff35 	bl	8002b04 <LL_ADC_IsEnabled>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d115      	bne.n	8002ccc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ca0:	4862      	ldr	r0, [pc, #392]	@ (8002e2c <HAL_ADC_Init+0x28c>)
 8002ca2:	f7ff ff2f 	bl	8002b04 <LL_ADC_IsEnabled>
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	4861      	ldr	r0, [pc, #388]	@ (8002e30 <HAL_ADC_Init+0x290>)
 8002caa:	f7ff ff2b 	bl	8002b04 <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	431c      	orrs	r4, r3
 8002cb2:	4860      	ldr	r0, [pc, #384]	@ (8002e34 <HAL_ADC_Init+0x294>)
 8002cb4:	f7ff ff26 	bl	8002b04 <LL_ADC_IsEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4323      	orrs	r3, r4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	485c      	ldr	r0, [pc, #368]	@ (8002e38 <HAL_ADC_Init+0x298>)
 8002cc8:	f7ff fd74 	bl	80027b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7e5b      	ldrb	r3, [r3, #25]
 8002cd0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cd6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002cdc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ce2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d106      	bne.n	8002d08 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	045b      	lsls	r3, r3, #17
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	4b44      	ldr	r3, [pc, #272]	@ (8002e3c <HAL_ADC_Init+0x29c>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	430b      	orrs	r3, r1
 8002d36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff1b 	bl	8002b78 <LL_ADC_INJ_IsConversionOngoing>
 8002d42:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d13d      	bne.n	8002dc6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d13a      	bne.n	8002dc6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d54:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d5c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d6c:	f023 0302 	bic.w	r3, r3, #2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	69b9      	ldr	r1, [r7, #24]
 8002d76:	430b      	orrs	r3, r1
 8002d78:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d118      	bne.n	8002db6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d8e:	f023 0304 	bic.w	r3, r3, #4
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d9a:	4311      	orrs	r1, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002da0:	4311      	orrs	r1, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002da6:	430a      	orrs	r2, r1
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	611a      	str	r2, [r3, #16]
 8002db4:	e007      	b.n	8002dc6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10c      	bne.n	8002de8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	f023 010f 	bic.w	r1, r3, #15
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	1e5a      	subs	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002de6:	e007      	b.n	8002df8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 020f 	bic.w	r2, r2, #15
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	f023 0303 	bic.w	r3, r3, #3
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e08:	e007      	b.n	8002e1a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0e:	f043 0210 	orr.w	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3724      	adds	r7, #36	@ 0x24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd90      	pop	{r4, r7, pc}
 8002e24:	20000004 	.word	0x20000004
 8002e28:	053e2d63 	.word	0x053e2d63
 8002e2c:	50040000 	.word	0x50040000
 8002e30:	50040100 	.word	0x50040100
 8002e34:	50040200 	.word	0x50040200
 8002e38:	50040300 	.word	0x50040300
 8002e3c:	fff0c007 	.word	0xfff0c007

08002e40 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e48:	4891      	ldr	r0, [pc, #580]	@ (8003090 <HAL_ADC_Start_IT+0x250>)
 8002e4a:	f7ff fddd 	bl	8002a08 <LL_ADC_GetMultimode>
 8002e4e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fe7c 	bl	8002b52 <LL_ADC_REG_IsConversionOngoing>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 8110 	bne.w	8003082 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_Start_IT+0x30>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e10b      	b.n	8003088 <HAL_ADC_Start_IT+0x248>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 ff3d 	bl	8003cf8 <ADC_Enable>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 80f7 	bne.w	8003078 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a7c      	ldr	r2, [pc, #496]	@ (8003094 <HAL_ADC_Start_IT+0x254>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d002      	beq.n	8002eae <HAL_ADC_Start_IT+0x6e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	e000      	b.n	8002eb0 <HAL_ADC_Start_IT+0x70>
 8002eae:	4b7a      	ldr	r3, [pc, #488]	@ (8003098 <HAL_ADC_Start_IT+0x258>)
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d002      	beq.n	8002ebe <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d105      	bne.n	8002eca <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ece:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	f023 0206 	bic.w	r2, r3, #6
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ee2:	e002      	b.n	8002eea <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	221c      	movs	r2, #28
 8002ef0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 021c 	bic.w	r2, r2, #28
 8002f08:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d108      	bne.n	8002f24 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0208 	orr.w	r2, r2, #8
 8002f20:	605a      	str	r2, [r3, #4]
          break;
 8002f22:	e008      	b.n	8002f36 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0204 	orr.w	r2, r2, #4
 8002f32:	605a      	str	r2, [r3, #4]
          break;
 8002f34:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0210 	orr.w	r2, r2, #16
 8002f4c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a50      	ldr	r2, [pc, #320]	@ (8003094 <HAL_ADC_Start_IT+0x254>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d002      	beq.n	8002f5e <HAL_ADC_Start_IT+0x11e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	e000      	b.n	8002f60 <HAL_ADC_Start_IT+0x120>
 8002f5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003098 <HAL_ADC_Start_IT+0x258>)
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d008      	beq.n	8002f7a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d002      	beq.n	8002f7a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b09      	cmp	r3, #9
 8002f78:	d13a      	bne.n	8002ff0 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02d      	beq.n	8002fe4 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d110      	bne.n	8002fc2 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0220 	bic.w	r2, r2, #32
 8002fae:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fbe:	605a      	str	r2, [r3, #4]
              break;
 8002fc0:	e010      	b.n	8002fe4 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fd0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0220 	orr.w	r2, r2, #32
 8002fe0:	605a      	str	r2, [r3, #4]
              break;
 8002fe2:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fd9e 	bl	8002b2a <LL_ADC_REG_StartConversion>
 8002fee:	e04a      	b.n	8003086 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a24      	ldr	r2, [pc, #144]	@ (8003094 <HAL_ADC_Start_IT+0x254>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d002      	beq.n	800300c <HAL_ADC_Start_IT+0x1cc>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e000      	b.n	800300e <HAL_ADC_Start_IT+0x1ce>
 800300c:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <HAL_ADC_Start_IT+0x258>)
 800300e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d034      	beq.n	8003086 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003020:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003024:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d110      	bne.n	8003056 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0220 	bic.w	r2, r2, #32
 8003042:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003052:	605a      	str	r2, [r3, #4]
              break;
 8003054:	e017      	b.n	8003086 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003064:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0220 	orr.w	r2, r2, #32
 8003074:	605a      	str	r2, [r3, #4]
              break;
 8003076:	e006      	b.n	8003086 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003080:	e001      	b.n	8003086 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	50040300 	.word	0x50040300
 8003094:	50040100 	.word	0x50040100
 8003098:	50040000 	.word	0x50040000

0800309c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	@ 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030c0:	2300      	movs	r3, #0
 80030c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030d4:	4882      	ldr	r0, [pc, #520]	@ (80032e0 <HAL_ADC_IRQHandler+0x228>)
 80030d6:	f7ff fc97 	bl	8002a08 <LL_ADC_GetMultimode>
 80030da:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d017      	beq.n	8003116 <HAL_ADC_IRQHandler+0x5e>
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d012      	beq.n	8003116 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fec9 	bl	8003ea0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2202      	movs	r2, #2
 8003114:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d004      	beq.n	800312a <HAL_ADC_IRQHandler+0x72>
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8083 	beq.w	800323c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d07d      	beq.n	800323c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003150:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fbb2 	bl	80028c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d062      	beq.n	800322e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5d      	ldr	r2, [pc, #372]	@ (80032e4 <HAL_ADC_IRQHandler+0x22c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d002      	beq.n	8003178 <HAL_ADC_IRQHandler+0xc0>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e000      	b.n	800317a <HAL_ADC_IRQHandler+0xc2>
 8003178:	4b5b      	ldr	r3, [pc, #364]	@ (80032e8 <HAL_ADC_IRQHandler+0x230>)
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	4293      	cmp	r3, r2
 8003180:	d008      	beq.n	8003194 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d002      	beq.n	8003194 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b09      	cmp	r3, #9
 8003192:	d104      	bne.n	800319e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	623b      	str	r3, [r7, #32]
 800319c:	e00c      	b.n	80031b8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a50      	ldr	r2, [pc, #320]	@ (80032e4 <HAL_ADC_IRQHandler+0x22c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d002      	beq.n	80031ae <HAL_ADC_IRQHandler+0xf6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	e000      	b.n	80031b0 <HAL_ADC_IRQHandler+0xf8>
 80031ae:	4b4e      	ldr	r3, [pc, #312]	@ (80032e8 <HAL_ADC_IRQHandler+0x230>)
 80031b0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d135      	bne.n	800322e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d12e      	bne.n	800322e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fcbc 	bl	8002b52 <LL_ADC_REG_IsConversionOngoing>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d11a      	bne.n	8003216 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 020c 	bic.w	r2, r2, #12
 80031ee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d112      	bne.n	800322e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54
 8003214:	e00b      	b.n	800322e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	f043 0210 	orr.w	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	f043 0201 	orr.w	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe fa7c 	bl	800172c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	220c      	movs	r2, #12
 800323a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <HAL_ADC_IRQHandler+0x198>
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 809f 	beq.w	800339a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8099 	beq.w	800339a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003278:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fb5d 	bl	8002944 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800328a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fb18 	bl	80028c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003296:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a11      	ldr	r2, [pc, #68]	@ (80032e4 <HAL_ADC_IRQHandler+0x22c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d002      	beq.n	80032a8 <HAL_ADC_IRQHandler+0x1f0>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	e000      	b.n	80032aa <HAL_ADC_IRQHandler+0x1f2>
 80032a8:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <HAL_ADC_IRQHandler+0x230>)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d008      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d002      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b07      	cmp	r3, #7
 80032c2:	d104      	bne.n	80032ce <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	e013      	b.n	80032f6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a04      	ldr	r2, [pc, #16]	@ (80032e4 <HAL_ADC_IRQHandler+0x22c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_ADC_IRQHandler+0x234>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	e007      	b.n	80032ee <HAL_ADC_IRQHandler+0x236>
 80032de:	bf00      	nop
 80032e0:	50040300 	.word	0x50040300
 80032e4:	50040100 	.word	0x50040100
 80032e8:	50040000 	.word	0x50040000
 80032ec:	4b7d      	ldr	r3, [pc, #500]	@ (80034e4 <HAL_ADC_IRQHandler+0x42c>)
 80032ee:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d047      	beq.n	800338c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_ADC_IRQHandler+0x25e>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d03f      	beq.n	800338c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003312:	2b00      	cmp	r3, #0
 8003314:	d13a      	bne.n	800338c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003320:	2b40      	cmp	r3, #64	@ 0x40
 8003322:	d133      	bne.n	800338c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d12e      	bne.n	800338c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fc20 	bl	8002b78 <LL_ADC_INJ_IsConversionOngoing>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11a      	bne.n	8003374 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800334c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003352:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d112      	bne.n	800338c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	655a      	str	r2, [r3, #84]	@ 0x54
 8003372:	e00b      	b.n	800338c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003378:	f043 0210 	orr.w	r2, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fd5f 	bl	8003e50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2260      	movs	r2, #96	@ 0x60
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d011      	beq.n	80033c8 <HAL_ADC_IRQHandler+0x310>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f896 	bl	80034ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2280      	movs	r2, #128	@ 0x80
 80033c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d012      	beq.n	80033f8 <HAL_ADC_IRQHandler+0x340>
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fd45 	bl	8003e78 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d012      	beq.n	8003428 <HAL_ADC_IRQHandler+0x370>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00d      	beq.n	8003428 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003410:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fd37 	bl	8003e8c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003426:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b00      	cmp	r3, #0
 8003430:	d036      	beq.n	80034a0 <HAL_ADC_IRQHandler+0x3e8>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d031      	beq.n	80034a0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003444:	2301      	movs	r3, #1
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24
 8003448:	e014      	b.n	8003474 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003450:	4825      	ldr	r0, [pc, #148]	@ (80034e8 <HAL_ADC_IRQHandler+0x430>)
 8003452:	f7ff fae7 	bl	8002a24 <LL_ADC_GetMultiDMATransfer>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800345c:	2301      	movs	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003460:	e008      	b.n	8003474 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003470:	2301      	movs	r3, #1
 8003472:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10e      	bne.n	8003498 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348a:	f043 0202 	orr.w	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f834 	bl	8003500 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2210      	movs	r2, #16
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d018      	beq.n	80034dc <HAL_ADC_IRQHandler+0x424>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d013      	beq.n	80034dc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	f043 0208 	orr.w	r2, r3, #8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034d4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fcc4 	bl	8003e64 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80034dc:	bf00      	nop
 80034de:	3728      	adds	r7, #40	@ 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	50040000 	.word	0x50040000
 80034e8:	50040300 	.word	0x50040300

080034ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b0b6      	sub	sp, #216	@ 0xd8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x22>
 8003532:	2302      	movs	r3, #2
 8003534:	e3c9      	b.n	8003cca <HAL_ADC_ConfigChannel+0x7b6>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fb05 	bl	8002b52 <LL_ADC_REG_IsConversionOngoing>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 83aa 	bne.w	8003ca4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d824      	bhi.n	80035aa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	3b02      	subs	r3, #2
 8003566:	2b03      	cmp	r3, #3
 8003568:	d81b      	bhi.n	80035a2 <HAL_ADC_ConfigChannel+0x8e>
 800356a:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <HAL_ADC_ConfigChannel+0x5c>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	08003581 	.word	0x08003581
 8003574:	08003589 	.word	0x08003589
 8003578:	08003591 	.word	0x08003591
 800357c:	08003599 	.word	0x08003599
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003580:	230c      	movs	r3, #12
 8003582:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003586:	e010      	b.n	80035aa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003588:	2312      	movs	r3, #18
 800358a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800358e:	e00c      	b.n	80035aa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003590:	2318      	movs	r3, #24
 8003592:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003596:	e008      	b.n	80035aa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003598:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800359c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035a0:	e003      	b.n	80035aa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80035a2:	2306      	movs	r3, #6
 80035a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035a8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80035b8:	f7ff f998 	bl	80028ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fac6 	bl	8002b52 <LL_ADC_REG_IsConversionOngoing>
 80035c6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fad2 	bl	8002b78 <LL_ADC_INJ_IsConversionOngoing>
 80035d4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f040 81a4 	bne.w	800392a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 819f 	bne.w	800392a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f7ff f9b6 	bl	800296a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	08db      	lsrs	r3, r3, #3
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d00a      	beq.n	8003636 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6919      	ldr	r1, [r3, #16]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003630:	f7ff f8f4 	bl	800281c <LL_ADC_SetOffset>
 8003634:	e179      	b.n	800392a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff f911 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x14e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff f906 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003658:	4603      	mov	r3, r0
 800365a:	0e9b      	lsrs	r3, r3, #26
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	e01e      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x18c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff f8fb 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800366e:	4603      	mov	r3, r0
 8003670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003680:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003684:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003690:	2320      	movs	r3, #32
 8003692:	e004      	b.n	800369e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x1a4>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0e9b      	lsrs	r3, r3, #26
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	e018      	b.n	80036ea <HAL_ADC_ConfigChannel+0x1d6>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80036cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80036d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80036dc:	2320      	movs	r3, #32
 80036de:	e004      	b.n	80036ea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80036e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d106      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f8ca 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2101      	movs	r1, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff f8ae 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x214>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2101      	movs	r1, #1
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff f8a3 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800371e:	4603      	mov	r3, r0
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	e01e      	b.n	8003766 <HAL_ADC_ConfigChannel+0x252>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2101      	movs	r1, #1
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff f898 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003746:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800374a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800374e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003756:	2320      	movs	r3, #32
 8003758:	e004      	b.n	8003764 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800375a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <HAL_ADC_ConfigChannel+0x26a>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0e9b      	lsrs	r3, r3, #26
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	e018      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x29c>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003792:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003796:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800379a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e004      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80037a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	2101      	movs	r1, #1
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff f867 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2102      	movs	r1, #2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff f84b 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x2da>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2102      	movs	r1, #2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff f840 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80037e4:	4603      	mov	r3, r0
 80037e6:	0e9b      	lsrs	r3, r3, #26
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	e01e      	b.n	800382c <HAL_ADC_ConfigChannel+0x318>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2102      	movs	r1, #2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff f835 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800380c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003810:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003814:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e004      	b.n	800382a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x330>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	0e9b      	lsrs	r3, r3, #26
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	e014      	b.n	800386e <HAL_ADC_ConfigChannel+0x35a>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003852:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003858:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e004      	b.n	800386e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003864:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800386e:	429a      	cmp	r2, r3
 8003870:	d106      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2200      	movs	r2, #0
 8003878:	2102      	movs	r1, #2
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff f808 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2103      	movs	r1, #3
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe ffec 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800388c:	4603      	mov	r3, r0
 800388e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x398>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2103      	movs	r1, #3
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe ffe1 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80038a2:	4603      	mov	r3, r0
 80038a4:	0e9b      	lsrs	r3, r3, #26
 80038a6:	f003 021f 	and.w	r2, r3, #31
 80038aa:	e017      	b.n	80038dc <HAL_ADC_ConfigChannel+0x3c8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2103      	movs	r1, #3
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe ffd6 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80038b8:	4603      	mov	r3, r0
 80038ba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80038c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038c6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80038c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80038ce:	2320      	movs	r3, #32
 80038d0:	e003      	b.n	80038da <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80038d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x3e0>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	0e9b      	lsrs	r3, r3, #26
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	e011      	b.n	8003918 <HAL_ADC_ConfigChannel+0x404>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003904:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003906:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800390c:	2320      	movs	r3, #32
 800390e:	e003      	b.n	8003918 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003910:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003918:	429a      	cmp	r2, r3
 800391a:	d106      	bne.n	800392a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2200      	movs	r2, #0
 8003922:	2103      	movs	r1, #3
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe ffb3 	bl	8002890 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff f8e8 	bl	8002b04 <LL_ADC_IsEnabled>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 8140 	bne.w	8003bbc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6819      	ldr	r1, [r3, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	461a      	mov	r2, r3
 800394a:	f7ff f839 	bl	80029c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	4a8f      	ldr	r2, [pc, #572]	@ (8003b90 <HAL_ADC_ConfigChannel+0x67c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	f040 8131 	bne.w	8003bbc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x46e>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	3301      	adds	r3, #1
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2b09      	cmp	r3, #9
 8003978:	bf94      	ite	ls
 800397a:	2301      	movls	r3, #1
 800397c:	2300      	movhi	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	e019      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x4a2>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003992:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003994:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800399a:	2320      	movs	r3, #32
 800399c:	e003      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800399e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	2b09      	cmp	r3, #9
 80039ae:	bf94      	ite	ls
 80039b0:	2301      	movls	r3, #1
 80039b2:	2300      	movhi	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d079      	beq.n	8003aae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d107      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x4c2>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	0e9b      	lsrs	r3, r3, #26
 80039cc:	3301      	adds	r3, #1
 80039ce:	069b      	lsls	r3, r3, #26
 80039d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039d4:	e015      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x4ee>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039de:	fa93 f3a3 	rbit	r3, r3
 80039e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80039e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80039e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80039ee:	2320      	movs	r3, #32
 80039f0:	e003      	b.n	80039fa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80039f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039f4:	fab3 f383 	clz	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	069b      	lsls	r3, r3, #26
 80039fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x50e>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0e9b      	lsrs	r3, r3, #26
 8003a14:	3301      	adds	r3, #1
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	e017      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x53e>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a32:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003a3a:	2320      	movs	r3, #32
 8003a3c:	e003      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	ea42 0103 	orr.w	r1, r2, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x564>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	0e9b      	lsrs	r3, r3, #26
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f003 021f 	and.w	r2, r3, #31
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	051b      	lsls	r3, r3, #20
 8003a76:	e018      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x596>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a88:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003a90:	2320      	movs	r3, #32
 8003a92:	e003      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f003 021f 	and.w	r2, r3, #31
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	e081      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d107      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x5b6>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	0e9b      	lsrs	r3, r3, #26
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	069b      	lsls	r3, r3, #26
 8003ac4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ac8:	e015      	b.n	8003af6 <HAL_ADC_ConfigChannel+0x5e2>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003ae2:	2320      	movs	r3, #32
 8003ae4:	e003      	b.n	8003aee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	069b      	lsls	r3, r3, #26
 8003af2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x602>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	0e9b      	lsrs	r3, r3, #26
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	2101      	movs	r1, #1
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	e017      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x632>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	61bb      	str	r3, [r7, #24]
  return result;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003b2e:	2320      	movs	r3, #32
 8003b30:	e003      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	ea42 0103 	orr.w	r1, r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10d      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x65e>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	0e9b      	lsrs	r3, r3, #26
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f003 021f 	and.w	r2, r3, #31
 8003b62:	4613      	mov	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	4413      	add	r3, r2
 8003b68:	3b1e      	subs	r3, #30
 8003b6a:	051b      	lsls	r3, r3, #20
 8003b6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b70:	e01e      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x69c>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	60fb      	str	r3, [r7, #12]
  return result;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d104      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003b8a:	2320      	movs	r3, #32
 8003b8c:	e006      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x688>
 8003b8e:	bf00      	nop
 8003b90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f003 021f 	and.w	r2, r3, #31
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3b1e      	subs	r3, #30
 8003baa:	051b      	lsls	r3, r3, #20
 8003bac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f7fe fed7 	bl	800296a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b44      	ldr	r3, [pc, #272]	@ (8003cd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d07a      	beq.n	8003cbe <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bc8:	4843      	ldr	r0, [pc, #268]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003bca:	f7fe fe19 	bl	8002800 <LL_ADC_GetCommonPathInternalCh>
 8003bce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a41      	ldr	r2, [pc, #260]	@ (8003cdc <HAL_ADC_ConfigChannel+0x7c8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d12c      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003be0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d126      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_ADC_ConfigChannel+0x6e8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d15d      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c04:	4619      	mov	r1, r3
 8003c06:	4834      	ldr	r0, [pc, #208]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c08:	f7fe fde7 	bl	80027da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	4a36      	ldr	r2, [pc, #216]	@ (8003cec <HAL_ADC_ConfigChannel+0x7d8>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c26:	e002      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f9      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c34:	e040      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d118      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d112      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a23      	ldr	r2, [pc, #140]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_ADC_ConfigChannel+0x74c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a22      	ldr	r2, [pc, #136]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d12d      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c68:	4619      	mov	r1, r3
 8003c6a:	481b      	ldr	r0, [pc, #108]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c6c:	f7fe fdb5 	bl	80027da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c70:	e024      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d120      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d11a      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d115      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	480e      	ldr	r0, [pc, #56]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c9e:	f7fe fd9c 	bl	80027da <LL_ADC_SetCommonPathInternalCh>
 8003ca2:	e00c      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003cb6:	e002      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cb8:	bf00      	nop
 8003cba:	e000      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	37d8      	adds	r7, #216	@ 0xd8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	80080000 	.word	0x80080000
 8003cd8:	50040300 	.word	0x50040300
 8003cdc:	c7520000 	.word	0xc7520000
 8003ce0:	50040000 	.word	0x50040000
 8003ce4:	50040200 	.word	0x50040200
 8003ce8:	20000004 	.word	0x20000004
 8003cec:	053e2d63 	.word	0x053e2d63
 8003cf0:	cb840000 	.word	0xcb840000
 8003cf4:	80000001 	.word	0x80000001

08003cf8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe fefb 	bl	8002b04 <LL_ADC_IsEnabled>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d169      	bne.n	8003de8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	4b36      	ldr	r3, [pc, #216]	@ (8003df4 <ADC_Enable+0xfc>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	f043 0210 	orr.w	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e055      	b.n	8003dea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe feca 	bl	8002adc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d48:	482b      	ldr	r0, [pc, #172]	@ (8003df8 <ADC_Enable+0x100>)
 8003d4a:	f7fe fd59 	bl	8002800 <LL_ADC_GetCommonPathInternalCh>
 8003d4e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d013      	beq.n	8003d80 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d58:	4b28      	ldr	r3, [pc, #160]	@ (8003dfc <ADC_Enable+0x104>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	4a28      	ldr	r2, [pc, #160]	@ (8003e00 <ADC_Enable+0x108>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d72:	e002      	b.n	8003d7a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f9      	bne.n	8003d74 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d80:	f7fe fce8 	bl	8002754 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d86:	e028      	b.n	8003dda <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe feb9 	bl	8002b04 <LL_ADC_IsEnabled>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe fe9d 	bl	8002adc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003da2:	f7fe fcd7 	bl	8002754 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d914      	bls.n	8003dda <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d00d      	beq.n	8003dda <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	f043 0210 	orr.w	r2, r3, #16
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e007      	b.n	8003dea <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d1cf      	bne.n	8003d88 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	8000003f 	.word	0x8000003f
 8003df8:	50040300 	.word	0x50040300
 8003dfc:	20000004 	.word	0x20000004
 8003e00:	053e2d63 	.word	0x053e2d63

08003e04 <LL_ADC_IsEnabled>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <LL_ADC_IsEnabled+0x18>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <LL_ADC_IsEnabled+0x1a>
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_ADC_REG_IsConversionOngoing>:
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d101      	bne.n	8003e42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b09f      	sub	sp, #124	@ 0x7c
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e093      	b.n	8003ffa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003eda:	2300      	movs	r3, #0
 8003edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a47      	ldr	r2, [pc, #284]	@ (8004004 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d102      	bne.n	8003ef2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003eec:	4b46      	ldr	r3, [pc, #280]	@ (8004008 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	e001      	b.n	8003ef6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e072      	b.n	8003ffa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff ff87 	bl	8003e2a <LL_ADC_REG_IsConversionOngoing>
 8003f1c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff81 	bl	8003e2a <LL_ADC_REG_IsConversionOngoing>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d154      	bne.n	8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003f2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d151      	bne.n	8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f34:	4b35      	ldr	r3, [pc, #212]	@ (800400c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003f36:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d02c      	beq.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f52:	035b      	lsls	r3, r3, #13
 8003f54:	430b      	orrs	r3, r1
 8003f56:	431a      	orrs	r2, r3
 8003f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f5c:	4829      	ldr	r0, [pc, #164]	@ (8004004 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f5e:	f7ff ff51 	bl	8003e04 <LL_ADC_IsEnabled>
 8003f62:	4604      	mov	r4, r0
 8003f64:	4828      	ldr	r0, [pc, #160]	@ (8004008 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f66:	f7ff ff4d 	bl	8003e04 <LL_ADC_IsEnabled>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	431c      	orrs	r4, r3
 8003f6e:	4828      	ldr	r0, [pc, #160]	@ (8004010 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f70:	f7ff ff48 	bl	8003e04 <LL_ADC_IsEnabled>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4323      	orrs	r3, r4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d137      	bne.n	8003fec <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f84:	f023 030f 	bic.w	r3, r3, #15
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	6811      	ldr	r1, [r2, #0]
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	6892      	ldr	r2, [r2, #8]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	431a      	orrs	r2, r3
 8003f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f96:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f98:	e028      	b.n	8003fec <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fa6:	4817      	ldr	r0, [pc, #92]	@ (8004004 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003fa8:	f7ff ff2c 	bl	8003e04 <LL_ADC_IsEnabled>
 8003fac:	4604      	mov	r4, r0
 8003fae:	4816      	ldr	r0, [pc, #88]	@ (8004008 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003fb0:	f7ff ff28 	bl	8003e04 <LL_ADC_IsEnabled>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	431c      	orrs	r4, r3
 8003fb8:	4815      	ldr	r0, [pc, #84]	@ (8004010 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003fba:	f7ff ff23 	bl	8003e04 <LL_ADC_IsEnabled>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4323      	orrs	r3, r4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d112      	bne.n	8003fec <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003fce:	f023 030f 	bic.w	r3, r3, #15
 8003fd2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fd4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fd6:	e009      	b.n	8003fec <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003fea:	e000      	b.n	8003fee <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ff6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	377c      	adds	r7, #124	@ 0x7c
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd90      	pop	{r4, r7, pc}
 8004002:	bf00      	nop
 8004004:	50040000 	.word	0x50040000
 8004008:	50040100 	.word	0x50040100
 800400c:	50040300 	.word	0x50040300
 8004010:	50040200 	.word	0x50040200

08004014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004024:	4b0c      	ldr	r3, [pc, #48]	@ (8004058 <__NVIC_SetPriorityGrouping+0x44>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004030:	4013      	ands	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800403c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004046:	4a04      	ldr	r2, [pc, #16]	@ (8004058 <__NVIC_SetPriorityGrouping+0x44>)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	60d3      	str	r3, [r2, #12]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004060:	4b04      	ldr	r3, [pc, #16]	@ (8004074 <__NVIC_GetPriorityGrouping+0x18>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	f003 0307 	and.w	r3, r3, #7
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	2b00      	cmp	r3, #0
 8004088:	db0b      	blt.n	80040a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	4907      	ldr	r1, [pc, #28]	@ (80040b0 <__NVIC_EnableIRQ+0x38>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2001      	movs	r0, #1
 800409a:	fa00 f202 	lsl.w	r2, r0, r2
 800409e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000e100 	.word	0xe000e100

080040b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db0a      	blt.n	80040de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	490c      	ldr	r1, [pc, #48]	@ (8004100 <__NVIC_SetPriority+0x4c>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	440b      	add	r3, r1
 80040d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040dc:	e00a      	b.n	80040f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4908      	ldr	r1, [pc, #32]	@ (8004104 <__NVIC_SetPriority+0x50>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3b04      	subs	r3, #4
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	761a      	strb	r2, [r3, #24]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000e100 	.word	0xe000e100
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	@ 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f1c3 0307 	rsb	r3, r3, #7
 8004122:	2b04      	cmp	r3, #4
 8004124:	bf28      	it	cs
 8004126:	2304      	movcs	r3, #4
 8004128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3304      	adds	r3, #4
 800412e:	2b06      	cmp	r3, #6
 8004130:	d902      	bls.n	8004138 <NVIC_EncodePriority+0x30>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3b03      	subs	r3, #3
 8004136:	e000      	b.n	800413a <NVIC_EncodePriority+0x32>
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800413c:	f04f 32ff 	mov.w	r2, #4294967295
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	401a      	ands	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004150:	f04f 31ff 	mov.w	r1, #4294967295
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	43d9      	mvns	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	4313      	orrs	r3, r2
         );
}
 8004162:	4618      	mov	r0, r3
 8004164:	3724      	adds	r7, #36	@ 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3b01      	subs	r3, #1
 800417c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004180:	d301      	bcc.n	8004186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004182:	2301      	movs	r3, #1
 8004184:	e00f      	b.n	80041a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004186:	4a0a      	ldr	r2, [pc, #40]	@ (80041b0 <SysTick_Config+0x40>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3b01      	subs	r3, #1
 800418c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800418e:	210f      	movs	r1, #15
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	f7ff ff8e 	bl	80040b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004198:	4b05      	ldr	r3, [pc, #20]	@ (80041b0 <SysTick_Config+0x40>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800419e:	4b04      	ldr	r3, [pc, #16]	@ (80041b0 <SysTick_Config+0x40>)
 80041a0:	2207      	movs	r2, #7
 80041a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	e000e010 	.word	0xe000e010

080041b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ff29 	bl	8004014 <__NVIC_SetPriorityGrouping>
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	4603      	mov	r3, r0
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041dc:	f7ff ff3e 	bl	800405c <__NVIC_GetPriorityGrouping>
 80041e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	6978      	ldr	r0, [r7, #20]
 80041e8:	f7ff ff8e 	bl	8004108 <NVIC_EncodePriority>
 80041ec:	4602      	mov	r2, r0
 80041ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ff5d 	bl	80040b4 <__NVIC_SetPriority>
}
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	4603      	mov	r3, r0
 800420a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800420c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff ff31 	bl	8004078 <__NVIC_EnableIRQ>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff ffa2 	bl	8004170 <SysTick_Config>
 800422c:	4603      	mov	r3, r0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d008      	beq.n	8004260 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2204      	movs	r2, #4
 8004252:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e022      	b.n	80042a6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 020e 	bic.w	r2, r2, #14
 800426e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004284:	f003 021c 	and.w	r2, r3, #28
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	2101      	movs	r1, #1
 800428e:	fa01 f202 	lsl.w	r2, r1, r2
 8004292:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d005      	beq.n	80042d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2204      	movs	r2, #4
 80042ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	e029      	b.n	800432a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 020e 	bic.w	r2, r2, #14
 80042e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0201 	bic.w	r2, r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f003 021c 	and.w	r2, r3, #28
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	2101      	movs	r1, #1
 8004304:	fa01 f202 	lsl.w	r2, r1, r2
 8004308:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
    }
  }
  return status;
 800432a:	7bfb      	ldrb	r3, [r7, #15]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004342:	e17f      	b.n	8004644 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	2101      	movs	r1, #1
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	4013      	ands	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8171 	beq.w	800463e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d005      	beq.n	8004374 <HAL_GPIO_Init+0x40>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d130      	bne.n	80043d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	2203      	movs	r2, #3
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4013      	ands	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043aa:	2201      	movs	r2, #1
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	f003 0201 	and.w	r2, r3, #1
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d118      	bne.n	8004414 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80043e8:	2201      	movs	r2, #1
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4013      	ands	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	08db      	lsrs	r3, r3, #3
 80043fe:	f003 0201 	and.w	r2, r3, #1
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b03      	cmp	r3, #3
 800441e:	d017      	beq.n	8004450 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2203      	movs	r2, #3
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d123      	bne.n	80044a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	08da      	lsrs	r2, r3, #3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3208      	adds	r2, #8
 8004464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004468:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	220f      	movs	r2, #15
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	08da      	lsrs	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3208      	adds	r2, #8
 800449e:	6939      	ldr	r1, [r7, #16]
 80044a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0203 	and.w	r2, r3, #3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80ac 	beq.w	800463e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004664 <HAL_GPIO_Init+0x330>)
 80044e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004664 <HAL_GPIO_Init+0x330>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80044f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004664 <HAL_GPIO_Init+0x330>)
 80044f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044fe:	4a5a      	ldr	r2, [pc, #360]	@ (8004668 <HAL_GPIO_Init+0x334>)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	3302      	adds	r3, #2
 8004506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800450a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	220f      	movs	r2, #15
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004528:	d025      	beq.n	8004576 <HAL_GPIO_Init+0x242>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4f      	ldr	r2, [pc, #316]	@ (800466c <HAL_GPIO_Init+0x338>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01f      	beq.n	8004572 <HAL_GPIO_Init+0x23e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a4e      	ldr	r2, [pc, #312]	@ (8004670 <HAL_GPIO_Init+0x33c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d019      	beq.n	800456e <HAL_GPIO_Init+0x23a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a4d      	ldr	r2, [pc, #308]	@ (8004674 <HAL_GPIO_Init+0x340>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_GPIO_Init+0x236>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4c      	ldr	r2, [pc, #304]	@ (8004678 <HAL_GPIO_Init+0x344>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00d      	beq.n	8004566 <HAL_GPIO_Init+0x232>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a4b      	ldr	r2, [pc, #300]	@ (800467c <HAL_GPIO_Init+0x348>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <HAL_GPIO_Init+0x22e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a4a      	ldr	r2, [pc, #296]	@ (8004680 <HAL_GPIO_Init+0x34c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d101      	bne.n	800455e <HAL_GPIO_Init+0x22a>
 800455a:	2306      	movs	r3, #6
 800455c:	e00c      	b.n	8004578 <HAL_GPIO_Init+0x244>
 800455e:	2307      	movs	r3, #7
 8004560:	e00a      	b.n	8004578 <HAL_GPIO_Init+0x244>
 8004562:	2305      	movs	r3, #5
 8004564:	e008      	b.n	8004578 <HAL_GPIO_Init+0x244>
 8004566:	2304      	movs	r3, #4
 8004568:	e006      	b.n	8004578 <HAL_GPIO_Init+0x244>
 800456a:	2303      	movs	r3, #3
 800456c:	e004      	b.n	8004578 <HAL_GPIO_Init+0x244>
 800456e:	2302      	movs	r3, #2
 8004570:	e002      	b.n	8004578 <HAL_GPIO_Init+0x244>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <HAL_GPIO_Init+0x244>
 8004576:	2300      	movs	r3, #0
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	f002 0203 	and.w	r2, r2, #3
 800457e:	0092      	lsls	r2, r2, #2
 8004580:	4093      	lsls	r3, r2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004588:	4937      	ldr	r1, [pc, #220]	@ (8004668 <HAL_GPIO_Init+0x334>)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	3302      	adds	r3, #2
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004596:	4b3b      	ldr	r3, [pc, #236]	@ (8004684 <HAL_GPIO_Init+0x350>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045ba:	4a32      	ldr	r2, [pc, #200]	@ (8004684 <HAL_GPIO_Init+0x350>)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045c0:	4b30      	ldr	r3, [pc, #192]	@ (8004684 <HAL_GPIO_Init+0x350>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045e4:	4a27      	ldr	r2, [pc, #156]	@ (8004684 <HAL_GPIO_Init+0x350>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045ea:	4b26      	ldr	r3, [pc, #152]	@ (8004684 <HAL_GPIO_Init+0x350>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800460e:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <HAL_GPIO_Init+0x350>)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004614:	4b1b      	ldr	r3, [pc, #108]	@ (8004684 <HAL_GPIO_Init+0x350>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	43db      	mvns	r3, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4013      	ands	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004638:	4a12      	ldr	r2, [pc, #72]	@ (8004684 <HAL_GPIO_Init+0x350>)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	3301      	adds	r3, #1
 8004642:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	f47f ae78 	bne.w	8004344 <HAL_GPIO_Init+0x10>
  }
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
 8004668:	40010000 	.word	0x40010000
 800466c:	48000400 	.word	0x48000400
 8004670:	48000800 	.word	0x48000800
 8004674:	48000c00 	.word	0x48000c00
 8004678:	48001000 	.word	0x48001000
 800467c:	48001400 	.word	0x48001400
 8004680:	48001800 	.word	0x48001800
 8004684:	40010400 	.word	0x40010400

08004688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
 8004694:	4613      	mov	r3, r2
 8004696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004698:	787b      	ldrb	r3, [r7, #1]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046a4:	e002      	b.n	80046ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046bc:	4b04      	ldr	r3, [pc, #16]	@ (80046d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40007000 	.word	0x40007000

080046d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e2:	d130      	bne.n	8004746 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e4:	4b23      	ldr	r3, [pc, #140]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f0:	d038      	beq.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f2:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004700:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004702:	4b1d      	ldr	r3, [pc, #116]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2232      	movs	r2, #50	@ 0x32
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	4a1b      	ldr	r2, [pc, #108]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	0c9b      	lsrs	r3, r3, #18
 8004714:	3301      	adds	r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004718:	e002      	b.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3b01      	subs	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004720:	4b14      	ldr	r3, [pc, #80]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472c:	d102      	bne.n	8004734 <HAL_PWREx_ControlVoltageScaling+0x60>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f2      	bne.n	800471a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004734:	4b0f      	ldr	r3, [pc, #60]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004740:	d110      	bne.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e00f      	b.n	8004766 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004746:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800474e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004752:	d007      	beq.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004754:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800475c:	4a05      	ldr	r2, [pc, #20]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004762:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40007000 	.word	0x40007000
 8004778:	20000004 	.word	0x20000004
 800477c:	431bde83 	.word	0x431bde83

08004780 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e3ca      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004792:	4b97      	ldr	r3, [pc, #604]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800479c:	4b94      	ldr	r3, [pc, #592]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80e4 	beq.w	800497c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <HAL_RCC_OscConfig+0x4a>
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	f040 808b 	bne.w	80048d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	f040 8087 	bne.w	80048d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047ca:	4b89      	ldr	r3, [pc, #548]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_RCC_OscConfig+0x62>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e3a2      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	4b82      	ldr	r3, [pc, #520]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <HAL_RCC_OscConfig+0x7c>
 80047f2:	4b7f      	ldr	r3, [pc, #508]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047fa:	e005      	b.n	8004808 <HAL_RCC_OscConfig+0x88>
 80047fc:	4b7c      	ldr	r3, [pc, #496]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80047fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004808:	4293      	cmp	r3, r2
 800480a:	d223      	bcs.n	8004854 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd55 	bl	80052c0 <RCC_SetFlashLatencyFromMSIRange>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e383      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004820:	4b73      	ldr	r3, [pc, #460]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a72      	ldr	r2, [pc, #456]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004826:	f043 0308 	orr.w	r3, r3, #8
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b70      	ldr	r3, [pc, #448]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	496d      	ldr	r1, [pc, #436]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483e:	4b6c      	ldr	r3, [pc, #432]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	4968      	ldr	r1, [pc, #416]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
 8004852:	e025      	b.n	80048a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004854:	4b66      	ldr	r3, [pc, #408]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a65      	ldr	r2, [pc, #404]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800485a:	f043 0308 	orr.w	r3, r3, #8
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b63      	ldr	r3, [pc, #396]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	4960      	ldr	r1, [pc, #384]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004872:	4b5f      	ldr	r3, [pc, #380]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	495b      	ldr	r1, [pc, #364]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fd15 	bl	80052c0 <RCC_SetFlashLatencyFromMSIRange>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e343      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048a0:	f000 fc4a 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b52      	ldr	r3, [pc, #328]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	4950      	ldr	r1, [pc, #320]	@ (80049f4 <HAL_RCC_OscConfig+0x274>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
 80048bc:	4a4e      	ldr	r2, [pc, #312]	@ (80049f8 <HAL_RCC_OscConfig+0x278>)
 80048be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048c0:	4b4e      	ldr	r3, [pc, #312]	@ (80049fc <HAL_RCC_OscConfig+0x27c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fd fef5 	bl	80026b4 <HAL_InitTick>
 80048ca:	4603      	mov	r3, r0
 80048cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d052      	beq.n	800497a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	e327      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d032      	beq.n	8004946 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048e0:	4b43      	ldr	r3, [pc, #268]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a42      	ldr	r2, [pc, #264]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048ec:	f7fd ff32 	bl	8002754 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048f4:	f7fd ff2e 	bl	8002754 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e310      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004906:	4b3a      	ldr	r3, [pc, #232]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004912:	4b37      	ldr	r3, [pc, #220]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a36      	ldr	r2, [pc, #216]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004918:	f043 0308 	orr.w	r3, r3, #8
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	4b34      	ldr	r3, [pc, #208]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4931      	ldr	r1, [pc, #196]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004930:	4b2f      	ldr	r3, [pc, #188]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	492c      	ldr	r1, [pc, #176]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
 8004944:	e01a      	b.n	800497c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004946:	4b2a      	ldr	r3, [pc, #168]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a29      	ldr	r2, [pc, #164]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004952:	f7fd feff 	bl	8002754 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800495a:	f7fd fefb 	bl	8002754 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e2dd      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800496c:	4b20      	ldr	r3, [pc, #128]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f0      	bne.n	800495a <HAL_RCC_OscConfig+0x1da>
 8004978:	e000      	b.n	800497c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800497a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d074      	beq.n	8004a72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b08      	cmp	r3, #8
 800498c:	d005      	beq.n	800499a <HAL_RCC_OscConfig+0x21a>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d10e      	bne.n	80049b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d10b      	bne.n	80049b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d064      	beq.n	8004a70 <HAL_RCC_OscConfig+0x2f0>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d160      	bne.n	8004a70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e2ba      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ba:	d106      	bne.n	80049ca <HAL_RCC_OscConfig+0x24a>
 80049bc:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0b      	ldr	r2, [pc, #44]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	e026      	b.n	8004a18 <HAL_RCC_OscConfig+0x298>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049d2:	d115      	bne.n	8004a00 <HAL_RCC_OscConfig+0x280>
 80049d4:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a05      	ldr	r2, [pc, #20]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b03      	ldr	r3, [pc, #12]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a02      	ldr	r2, [pc, #8]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e014      	b.n	8004a18 <HAL_RCC_OscConfig+0x298>
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000
 80049f4:	0800d2a8 	.word	0x0800d2a8
 80049f8:	20000004 	.word	0x20000004
 80049fc:	20000008 	.word	0x20000008
 8004a00:	4ba0      	ldr	r3, [pc, #640]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a9f      	ldr	r2, [pc, #636]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	4b9d      	ldr	r3, [pc, #628]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a9c      	ldr	r2, [pc, #624]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d013      	beq.n	8004a48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fd fe98 	bl	8002754 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a28:	f7fd fe94 	bl	8002754 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	@ 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e276      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a3a:	4b92      	ldr	r3, [pc, #584]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x2a8>
 8004a46:	e014      	b.n	8004a72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fd fe84 	bl	8002754 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a50:	f7fd fe80 	bl	8002754 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	@ 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e262      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a62:	4b88      	ldr	r3, [pc, #544]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2d0>
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d060      	beq.n	8004b40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d005      	beq.n	8004a90 <HAL_RCC_OscConfig+0x310>
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d119      	bne.n	8004abe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d116      	bne.n	8004abe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a90:	4b7c      	ldr	r3, [pc, #496]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x328>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e23f      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	4b76      	ldr	r3, [pc, #472]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	4973      	ldr	r1, [pc, #460]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004abc:	e040      	b.n	8004b40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d023      	beq.n	8004b0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a6e      	ldr	r2, [pc, #440]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fd fe3f 	bl	8002754 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ada:	f7fd fe3b 	bl	8002754 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e21d      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aec:	4b65      	ldr	r3, [pc, #404]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b62      	ldr	r3, [pc, #392]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	495f      	ldr	r1, [pc, #380]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
 8004b0c:	e018      	b.n	8004b40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a5c      	ldr	r2, [pc, #368]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1a:	f7fd fe1b 	bl	8002754 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b22:	f7fd fe17 	bl	8002754 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e1f9      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b34:	4b53      	ldr	r3, [pc, #332]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d03c      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01c      	beq.n	8004b8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b54:	4b4b      	ldr	r3, [pc, #300]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b64:	f7fd fdf6 	bl	8002754 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b6c:	f7fd fdf2 	bl	8002754 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e1d4      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b7e:	4b41      	ldr	r3, [pc, #260]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ef      	beq.n	8004b6c <HAL_RCC_OscConfig+0x3ec>
 8004b8c:	e01b      	b.n	8004bc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b94:	4a3b      	ldr	r2, [pc, #236]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9e:	f7fd fdd9 	bl	8002754 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba6:	f7fd fdd5 	bl	8002754 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e1b7      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb8:	4b32      	ldr	r3, [pc, #200]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1ef      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80a6 	beq.w	8004d20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be4:	4b27      	ldr	r3, [pc, #156]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be8:	4a26      	ldr	r2, [pc, #152]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bee:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bf0:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c00:	4b21      	ldr	r3, [pc, #132]	@ (8004c88 <HAL_RCC_OscConfig+0x508>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d118      	bne.n	8004c3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <HAL_RCC_OscConfig+0x508>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1d      	ldr	r2, [pc, #116]	@ (8004c88 <HAL_RCC_OscConfig+0x508>)
 8004c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c18:	f7fd fd9c 	bl	8002754 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c20:	f7fd fd98 	bl	8002754 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e17a      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c32:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <HAL_RCC_OscConfig+0x508>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d108      	bne.n	8004c58 <HAL_RCC_OscConfig+0x4d8>
 8004c46:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c56:	e029      	b.n	8004cac <HAL_RCC_OscConfig+0x52c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d115      	bne.n	8004c8c <HAL_RCC_OscConfig+0x50c>
 8004c60:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c66:	4a07      	ldr	r2, [pc, #28]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c70:	4b04      	ldr	r3, [pc, #16]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c76:	4a03      	ldr	r2, [pc, #12]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c80:	e014      	b.n	8004cac <HAL_RCC_OscConfig+0x52c>
 8004c82:	bf00      	nop
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40007000 	.word	0x40007000
 8004c8c:	4b9c      	ldr	r3, [pc, #624]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c92:	4a9b      	ldr	r2, [pc, #620]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c9c:	4b98      	ldr	r3, [pc, #608]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca2:	4a97      	ldr	r2, [pc, #604]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004ca4:	f023 0304 	bic.w	r3, r3, #4
 8004ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d016      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd fd4e 	bl	8002754 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cbc:	f7fd fd4a 	bl	8002754 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e12a      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd2:	4b8b      	ldr	r3, [pc, #556]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ed      	beq.n	8004cbc <HAL_RCC_OscConfig+0x53c>
 8004ce0:	e015      	b.n	8004d0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce2:	f7fd fd37 	bl	8002754 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce8:	e00a      	b.n	8004d00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	f7fd fd33 	bl	8002754 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e113      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d00:	4b7f      	ldr	r3, [pc, #508]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1ed      	bne.n	8004cea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0e:	7ffb      	ldrb	r3, [r7, #31]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d105      	bne.n	8004d20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d14:	4b7a      	ldr	r3, [pc, #488]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d18:	4a79      	ldr	r2, [pc, #484]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80fe 	beq.w	8004f26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	f040 80d0 	bne.w	8004ed4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d34:	4b72      	ldr	r3, [pc, #456]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0203 	and.w	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d130      	bne.n	8004daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d52:	3b01      	subs	r3, #1
 8004d54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d127      	bne.n	8004daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d11f      	bne.n	8004daa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d74:	2a07      	cmp	r2, #7
 8004d76:	bf14      	ite	ne
 8004d78:	2201      	movne	r2, #1
 8004d7a:	2200      	moveq	r2, #0
 8004d7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d113      	bne.n	8004daa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d109      	bne.n	8004daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	3b01      	subs	r3, #1
 8004da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d06e      	beq.n	8004e88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d069      	beq.n	8004e84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004db0:	4b53      	ldr	r3, [pc, #332]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004dbc:	4b50      	ldr	r3, [pc, #320]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0ad      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dcc:	4b4c      	ldr	r3, [pc, #304]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004dd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd8:	f7fd fcbc 	bl	8002754 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fd fcb8 	bl	8002754 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e09a      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df2:	4b43      	ldr	r3, [pc, #268]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dfe:	4b40      	ldr	r3, [pc, #256]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	4b40      	ldr	r3, [pc, #256]	@ (8004f04 <HAL_RCC_OscConfig+0x784>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e0e:	3a01      	subs	r2, #1
 8004e10:	0112      	lsls	r2, r2, #4
 8004e12:	4311      	orrs	r1, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e18:	0212      	lsls	r2, r2, #8
 8004e1a:	4311      	orrs	r1, r2
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e20:	0852      	lsrs	r2, r2, #1
 8004e22:	3a01      	subs	r2, #1
 8004e24:	0552      	lsls	r2, r2, #21
 8004e26:	4311      	orrs	r1, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e2c:	0852      	lsrs	r2, r2, #1
 8004e2e:	3a01      	subs	r2, #1
 8004e30:	0652      	lsls	r2, r2, #25
 8004e32:	4311      	orrs	r1, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e38:	0912      	lsrs	r2, r2, #4
 8004e3a:	0452      	lsls	r2, r2, #17
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	4930      	ldr	r1, [pc, #192]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e44:	4b2e      	ldr	r3, [pc, #184]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2d      	ldr	r2, [pc, #180]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e50:	4b2b      	ldr	r3, [pc, #172]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a2a      	ldr	r2, [pc, #168]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e5c:	f7fd fc7a 	bl	8002754 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e64:	f7fd fc76 	bl	8002754 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e058      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e76:	4b22      	ldr	r3, [pc, #136]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e82:	e050      	b.n	8004f26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e04f      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e88:	4b1d      	ldr	r3, [pc, #116]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d148      	bne.n	8004f26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e94:	4b1a      	ldr	r3, [pc, #104]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a19      	ldr	r2, [pc, #100]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ea0:	4b17      	ldr	r3, [pc, #92]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4a16      	ldr	r2, [pc, #88]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004ea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eac:	f7fd fc52 	bl	8002754 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fd fc4e 	bl	8002754 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e030      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x734>
 8004ed2:	e028      	b.n	8004f26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d023      	beq.n	8004f22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eda:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a08      	ldr	r2, [pc, #32]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004ee0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee6:	f7fd fc35 	bl	8002754 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eec:	e00c      	b.n	8004f08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eee:	f7fd fc31 	bl	8002754 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d905      	bls.n	8004f08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e013      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
 8004f00:	40021000 	.word	0x40021000
 8004f04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f08:	4b09      	ldr	r3, [pc, #36]	@ (8004f30 <HAL_RCC_OscConfig+0x7b0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1ec      	bne.n	8004eee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f14:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <HAL_RCC_OscConfig+0x7b0>)
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	4905      	ldr	r1, [pc, #20]	@ (8004f30 <HAL_RCC_OscConfig+0x7b0>)
 8004f1a:	4b06      	ldr	r3, [pc, #24]	@ (8004f34 <HAL_RCC_OscConfig+0x7b4>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	60cb      	str	r3, [r1, #12]
 8004f20:	e001      	b.n	8004f26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3720      	adds	r7, #32
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40021000 	.word	0x40021000
 8004f34:	feeefffc 	.word	0xfeeefffc

08004f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0e7      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b75      	ldr	r3, [pc, #468]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d910      	bls.n	8004f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b72      	ldr	r3, [pc, #456]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 0207 	bic.w	r2, r3, #7
 8004f62:	4970      	ldr	r1, [pc, #448]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b6e      	ldr	r3, [pc, #440]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0cf      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d010      	beq.n	8004faa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	4b66      	ldr	r3, [pc, #408]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d908      	bls.n	8004faa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f98:	4b63      	ldr	r3, [pc, #396]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4960      	ldr	r1, [pc, #384]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d04c      	beq.n	8005050 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fbe:	4b5a      	ldr	r3, [pc, #360]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d121      	bne.n	800500e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e0a6      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fd6:	4b54      	ldr	r3, [pc, #336]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d115      	bne.n	800500e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e09a      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fee:	4b4e      	ldr	r3, [pc, #312]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e08e      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e086      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800500e:	4b46      	ldr	r3, [pc, #280]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 0203 	bic.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4943      	ldr	r1, [pc, #268]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005020:	f7fd fb98 	bl	8002754 <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	e00a      	b.n	800503e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005028:	f7fd fb94 	bl	8002754 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e06e      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	4b3a      	ldr	r3, [pc, #232]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 020c 	and.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	429a      	cmp	r2, r3
 800504e:	d1eb      	bne.n	8005028 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d010      	beq.n	800507e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	4b31      	ldr	r3, [pc, #196]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005068:	429a      	cmp	r2, r3
 800506a:	d208      	bcs.n	800507e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b2e      	ldr	r3, [pc, #184]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	492b      	ldr	r1, [pc, #172]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800507e:	4b29      	ldr	r3, [pc, #164]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d210      	bcs.n	80050ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508c:	4b25      	ldr	r3, [pc, #148]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f023 0207 	bic.w	r2, r3, #7
 8005094:	4923      	ldr	r1, [pc, #140]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	4313      	orrs	r3, r2
 800509a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800509c:	4b21      	ldr	r3, [pc, #132]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d001      	beq.n	80050ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e036      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	4918      	ldr	r1, [pc, #96]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050d8:	4b13      	ldr	r3, [pc, #76]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4910      	ldr	r1, [pc, #64]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050ec:	f000 f824 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	490b      	ldr	r1, [pc, #44]	@ (800512c <HAL_RCC_ClockConfig+0x1f4>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	4a09      	ldr	r2, [pc, #36]	@ (8005130 <HAL_RCC_ClockConfig+0x1f8>)
 800510a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800510c:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <HAL_RCC_ClockConfig+0x1fc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f7fd facf 	bl	80026b4 <HAL_InitTick>
 8005116:	4603      	mov	r3, r0
 8005118:	72fb      	strb	r3, [r7, #11]

  return status;
 800511a:	7afb      	ldrb	r3, [r7, #11]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40022000 	.word	0x40022000
 8005128:	40021000 	.word	0x40021000
 800512c:	0800d2a8 	.word	0x0800d2a8
 8005130:	20000004 	.word	0x20000004
 8005134:	20000008 	.word	0x20000008

08005138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005138:	b480      	push	{r7}
 800513a:	b089      	sub	sp, #36	@ 0x24
 800513c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005146:	4b3e      	ldr	r3, [pc, #248]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005150:	4b3b      	ldr	r3, [pc, #236]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0x34>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b0c      	cmp	r3, #12
 8005164:	d121      	bne.n	80051aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d11e      	bne.n	80051aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800516c:	4b34      	ldr	r3, [pc, #208]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d107      	bne.n	8005188 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005178:	4b31      	ldr	r3, [pc, #196]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 800517a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e005      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005188:	4b2d      	ldr	r3, [pc, #180]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005194:	4a2b      	ldr	r2, [pc, #172]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10d      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051a8:	e00a      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d102      	bne.n	80051b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051b0:	4b25      	ldr	r3, [pc, #148]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x110>)
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	e004      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d101      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051bc:	4b23      	ldr	r3, [pc, #140]	@ (800524c <HAL_RCC_GetSysClockFreq+0x114>)
 80051be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b0c      	cmp	r3, #12
 80051c4:	d134      	bne.n	8005230 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d003      	beq.n	80051de <HAL_RCC_GetSysClockFreq+0xa6>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d003      	beq.n	80051e4 <HAL_RCC_GetSysClockFreq+0xac>
 80051dc:	e005      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051de:	4b1a      	ldr	r3, [pc, #104]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x110>)
 80051e0:	617b      	str	r3, [r7, #20]
      break;
 80051e2:	e005      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051e4:	4b19      	ldr	r3, [pc, #100]	@ (800524c <HAL_RCC_GetSysClockFreq+0x114>)
 80051e6:	617b      	str	r3, [r7, #20]
      break;
 80051e8:	e002      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	617b      	str	r3, [r7, #20]
      break;
 80051ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051f0:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	3301      	adds	r3, #1
 80051fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051fe:	4b10      	ldr	r3, [pc, #64]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	fb03 f202 	mul.w	r2, r3, r2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005216:	4b0a      	ldr	r3, [pc, #40]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	0e5b      	lsrs	r3, r3, #25
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	3301      	adds	r3, #1
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005230:	69bb      	ldr	r3, [r7, #24]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3724      	adds	r7, #36	@ 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40021000 	.word	0x40021000
 8005244:	0800d2c0 	.word	0x0800d2c0
 8005248:	00f42400 	.word	0x00f42400
 800524c:	007a1200 	.word	0x007a1200

08005250 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005254:	4b03      	ldr	r3, [pc, #12]	@ (8005264 <HAL_RCC_GetHCLKFreq+0x14>)
 8005256:	681b      	ldr	r3, [r3, #0]
}
 8005258:	4618      	mov	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000004 	.word	0x20000004

08005268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800526c:	f7ff fff0 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b06      	ldr	r3, [pc, #24]	@ (800528c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	4904      	ldr	r1, [pc, #16]	@ (8005290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40021000 	.word	0x40021000
 8005290:	0800d2b8 	.word	0x0800d2b8

08005294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005298:	f7ff ffda 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0adb      	lsrs	r3, r3, #11
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4904      	ldr	r1, [pc, #16]	@ (80052bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	0800d2b8 	.word	0x0800d2b8

080052c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052d8:	f7ff f9ee 	bl	80046b8 <HAL_PWREx_GetVoltageRange>
 80052dc:	6178      	str	r0, [r7, #20]
 80052de:	e014      	b.n	800530a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052e0:	4b25      	ldr	r3, [pc, #148]	@ (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e4:	4a24      	ldr	r2, [pc, #144]	@ (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ec:	4b22      	ldr	r3, [pc, #136]	@ (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052f8:	f7ff f9de 	bl	80046b8 <HAL_PWREx_GetVoltageRange>
 80052fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005302:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005304:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005308:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005310:	d10b      	bne.n	800532a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b80      	cmp	r3, #128	@ 0x80
 8005316:	d919      	bls.n	800534c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2ba0      	cmp	r3, #160	@ 0xa0
 800531c:	d902      	bls.n	8005324 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800531e:	2302      	movs	r3, #2
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	e013      	b.n	800534c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005324:	2301      	movs	r3, #1
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	e010      	b.n	800534c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b80      	cmp	r3, #128	@ 0x80
 800532e:	d902      	bls.n	8005336 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005330:	2303      	movs	r3, #3
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	e00a      	b.n	800534c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b80      	cmp	r3, #128	@ 0x80
 800533a:	d102      	bne.n	8005342 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800533c:	2302      	movs	r3, #2
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	e004      	b.n	800534c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b70      	cmp	r3, #112	@ 0x70
 8005346:	d101      	bne.n	800534c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005348:	2301      	movs	r3, #1
 800534a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800534c:	4b0b      	ldr	r3, [pc, #44]	@ (800537c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f023 0207 	bic.w	r2, r3, #7
 8005354:	4909      	ldr	r1, [pc, #36]	@ (800537c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800535c:	4b07      	ldr	r3, [pc, #28]	@ (800537c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	429a      	cmp	r2, r3
 8005368:	d001      	beq.n	800536e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40021000 	.word	0x40021000
 800537c:	40022000 	.word	0x40022000

08005380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005388:	2300      	movs	r3, #0
 800538a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800538c:	2300      	movs	r3, #0
 800538e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005398:	2b00      	cmp	r3, #0
 800539a:	d041      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80053a4:	d02a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80053a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80053aa:	d824      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053b0:	d008      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053b6:	d81e      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80053bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c0:	d010      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053c2:	e018      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053c4:	4b86      	ldr	r3, [pc, #536]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a85      	ldr	r2, [pc, #532]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053d0:	e015      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3304      	adds	r3, #4
 80053d6:	2100      	movs	r1, #0
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fabb 	bl	8005954 <RCCEx_PLLSAI1_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053e2:	e00c      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3320      	adds	r3, #32
 80053e8:	2100      	movs	r1, #0
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fba6 	bl	8005b3c <RCCEx_PLLSAI2_Config>
 80053f0:	4603      	mov	r3, r0
 80053f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053f4:	e003      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	74fb      	strb	r3, [r7, #19]
      break;
 80053fa:	e000      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80053fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053fe:	7cfb      	ldrb	r3, [r7, #19]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005404:	4b76      	ldr	r3, [pc, #472]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005412:	4973      	ldr	r1, [pc, #460]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800541a:	e001      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	7cfb      	ldrb	r3, [r7, #19]
 800541e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d041      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005430:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005434:	d02a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005436:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800543a:	d824      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800543c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005440:	d008      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005442:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005446:	d81e      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800544c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005450:	d010      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005452:	e018      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005454:	4b62      	ldr	r3, [pc, #392]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4a61      	ldr	r2, [pc, #388]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800545e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005460:	e015      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3304      	adds	r3, #4
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fa73 	bl	8005954 <RCCEx_PLLSAI1_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005472:	e00c      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3320      	adds	r3, #32
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fb5e 	bl	8005b3c <RCCEx_PLLSAI2_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005484:	e003      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	74fb      	strb	r3, [r7, #19]
      break;
 800548a:	e000      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800548c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10b      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005494:	4b52      	ldr	r3, [pc, #328]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054a2:	494f      	ldr	r1, [pc, #316]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80054aa:	e001      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 80a0 	beq.w	80055fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054be:	2300      	movs	r3, #0
 80054c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054c2:	4b47      	ldr	r3, [pc, #284]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d8:	4b41      	ldr	r3, [pc, #260]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054dc:	4a40      	ldr	r2, [pc, #256]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054e4:	4b3e      	ldr	r3, [pc, #248]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f0:	2301      	movs	r3, #1
 80054f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054f4:	4b3b      	ldr	r3, [pc, #236]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a3a      	ldr	r2, [pc, #232]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005500:	f7fd f928 	bl	8002754 <HAL_GetTick>
 8005504:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005506:	e009      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005508:	f7fd f924 	bl	8002754 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d902      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	74fb      	strb	r3, [r7, #19]
        break;
 800551a:	e005      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800551c:	4b31      	ldr	r3, [pc, #196]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ef      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d15c      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800552e:	4b2c      	ldr	r3, [pc, #176]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005538:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01f      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	429a      	cmp	r2, r3
 800554a:	d019      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800554c:	4b24      	ldr	r3, [pc, #144]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005556:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005558:	4b21      	ldr	r3, [pc, #132]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555e:	4a20      	ldr	r2, [pc, #128]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005568:	4b1d      	ldr	r3, [pc, #116]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556e:	4a1c      	ldr	r2, [pc, #112]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005578:	4a19      	ldr	r2, [pc, #100]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d016      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558a:	f7fd f8e3 	bl	8002754 <HAL_GetTick>
 800558e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005590:	e00b      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005592:	f7fd f8df 	bl	8002754 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d902      	bls.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	74fb      	strb	r3, [r7, #19]
            break;
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055aa:	4b0d      	ldr	r3, [pc, #52]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0ec      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055be:	4b08      	ldr	r3, [pc, #32]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ce:	4904      	ldr	r1, [pc, #16]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80055d6:	e009      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	74bb      	strb	r3, [r7, #18]
 80055dc:	e006      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ec:	7c7b      	ldrb	r3, [r7, #17]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d105      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f2:	4b9e      	ldr	r3, [pc, #632]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f6:	4a9d      	ldr	r2, [pc, #628]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800560a:	4b98      	ldr	r3, [pc, #608]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005610:	f023 0203 	bic.w	r2, r3, #3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	4994      	ldr	r1, [pc, #592]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800562c:	4b8f      	ldr	r3, [pc, #572]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f023 020c 	bic.w	r2, r3, #12
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563a:	498c      	ldr	r1, [pc, #560]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800564e:	4b87      	ldr	r3, [pc, #540]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565c:	4983      	ldr	r1, [pc, #524]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005670:	4b7e      	ldr	r3, [pc, #504]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	497b      	ldr	r1, [pc, #492]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005692:	4b76      	ldr	r3, [pc, #472]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a0:	4972      	ldr	r1, [pc, #456]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056b4:	4b6d      	ldr	r3, [pc, #436]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c2:	496a      	ldr	r1, [pc, #424]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056d6:	4b65      	ldr	r3, [pc, #404]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e4:	4961      	ldr	r1, [pc, #388]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056f8:	4b5c      	ldr	r3, [pc, #368]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005706:	4959      	ldr	r1, [pc, #356]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800571a:	4b54      	ldr	r3, [pc, #336]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005720:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005728:	4950      	ldr	r1, [pc, #320]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800573c:	4b4b      	ldr	r3, [pc, #300]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005742:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574a:	4948      	ldr	r1, [pc, #288]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800575e:	4b43      	ldr	r3, [pc, #268]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005764:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576c:	493f      	ldr	r1, [pc, #252]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d028      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005780:	4b3a      	ldr	r3, [pc, #232]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005786:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800578e:	4937      	ldr	r1, [pc, #220]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800579a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800579e:	d106      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a0:	4b32      	ldr	r3, [pc, #200]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4a31      	ldr	r2, [pc, #196]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057aa:	60d3      	str	r3, [r2, #12]
 80057ac:	e011      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b6:	d10c      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	2101      	movs	r1, #1
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f8c8 	bl	8005954 <RCCEx_PLLSAI1_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80057c8:	7cfb      	ldrb	r3, [r7, #19]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80057ce:	7cfb      	ldrb	r3, [r7, #19]
 80057d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d028      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057de:	4b23      	ldr	r3, [pc, #140]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ec:	491f      	ldr	r1, [pc, #124]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057fc:	d106      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057fe:	4b1b      	ldr	r3, [pc, #108]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4a1a      	ldr	r2, [pc, #104]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005804:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005808:	60d3      	str	r3, [r2, #12]
 800580a:	e011      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005814:	d10c      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3304      	adds	r3, #4
 800581a:	2101      	movs	r1, #1
 800581c:	4618      	mov	r0, r3
 800581e:	f000 f899 	bl	8005954 <RCCEx_PLLSAI1_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005826:	7cfb      	ldrb	r3, [r7, #19]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d02b      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800583c:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005842:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800584a:	4908      	ldr	r1, [pc, #32]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800585a:	d109      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800585c:	4b03      	ldr	r3, [pc, #12]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4a02      	ldr	r2, [pc, #8]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005866:	60d3      	str	r3, [r2, #12]
 8005868:	e014      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800586a:	bf00      	nop
 800586c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005874:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005878:	d10c      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	2101      	movs	r1, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f867 	bl	8005954 <RCCEx_PLLSAI1_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800588a:	7cfb      	ldrb	r3, [r7, #19]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005890:	7cfb      	ldrb	r3, [r7, #19]
 8005892:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d02f      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ae:	4928      	ldr	r1, [pc, #160]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058be:	d10d      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	2102      	movs	r1, #2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 f844 	bl	8005954 <RCCEx_PLLSAI1_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058d0:	7cfb      	ldrb	r3, [r7, #19]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d014      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80058d6:	7cfb      	ldrb	r3, [r7, #19]
 80058d8:	74bb      	strb	r3, [r7, #18]
 80058da:	e011      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058e4:	d10c      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3320      	adds	r3, #32
 80058ea:	2102      	movs	r1, #2
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f925 	bl	8005b3c <RCCEx_PLLSAI2_Config>
 80058f2:	4603      	mov	r3, r0
 80058f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058f6:	7cfb      	ldrb	r3, [r7, #19]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80058fc:	7cfb      	ldrb	r3, [r7, #19]
 80058fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800590c:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005912:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800591a:	490d      	ldr	r1, [pc, #52]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800592e:	4b08      	ldr	r3, [pc, #32]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005934:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800593e:	4904      	ldr	r1, [pc, #16]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005946:	7cbb      	ldrb	r3, [r7, #18]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000

08005954 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005962:	4b75      	ldr	r3, [pc, #468]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d018      	beq.n	80059a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800596e:	4b72      	ldr	r3, [pc, #456]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0203 	and.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d10d      	bne.n	800599a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
       ||
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005986:	4b6c      	ldr	r3, [pc, #432]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	091b      	lsrs	r3, r3, #4
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
       ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d047      	beq.n	8005a2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
 800599e:	e044      	b.n	8005a2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d018      	beq.n	80059da <RCCEx_PLLSAI1_Config+0x86>
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d825      	bhi.n	80059f8 <RCCEx_PLLSAI1_Config+0xa4>
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d002      	beq.n	80059b6 <RCCEx_PLLSAI1_Config+0x62>
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d009      	beq.n	80059c8 <RCCEx_PLLSAI1_Config+0x74>
 80059b4:	e020      	b.n	80059f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059b6:	4b60      	ldr	r3, [pc, #384]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d11d      	bne.n	80059fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c6:	e01a      	b.n	80059fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d116      	bne.n	8005a02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d8:	e013      	b.n	8005a02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059da:	4b57      	ldr	r3, [pc, #348]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10f      	bne.n	8005a06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059e6:	4b54      	ldr	r3, [pc, #336]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059f6:	e006      	b.n	8005a06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      break;
 80059fc:	e004      	b.n	8005a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059fe:	bf00      	nop
 8005a00:	e002      	b.n	8005a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10d      	bne.n	8005a2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6819      	ldr	r1, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	430b      	orrs	r3, r1
 8005a24:	4944      	ldr	r1, [pc, #272]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d17d      	bne.n	8005b2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a30:	4b41      	ldr	r3, [pc, #260]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a40      	ldr	r2, [pc, #256]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3c:	f7fc fe8a 	bl	8002754 <HAL_GetTick>
 8005a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a42:	e009      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a44:	f7fc fe86 	bl	8002754 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d902      	bls.n	8005a58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	73fb      	strb	r3, [r7, #15]
        break;
 8005a56:	e005      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a58:	4b37      	ldr	r3, [pc, #220]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1ef      	bne.n	8005a44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d160      	bne.n	8005b2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d111      	bne.n	8005a94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a70:	4b31      	ldr	r3, [pc, #196]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6892      	ldr	r2, [r2, #8]
 8005a80:	0211      	lsls	r1, r2, #8
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	68d2      	ldr	r2, [r2, #12]
 8005a86:	0912      	lsrs	r2, r2, #4
 8005a88:	0452      	lsls	r2, r2, #17
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	492a      	ldr	r1, [pc, #168]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	610b      	str	r3, [r1, #16]
 8005a92:	e027      	b.n	8005ae4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d112      	bne.n	8005ac0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a9a:	4b27      	ldr	r3, [pc, #156]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005aa2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6892      	ldr	r2, [r2, #8]
 8005aaa:	0211      	lsls	r1, r2, #8
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6912      	ldr	r2, [r2, #16]
 8005ab0:	0852      	lsrs	r2, r2, #1
 8005ab2:	3a01      	subs	r2, #1
 8005ab4:	0552      	lsls	r2, r2, #21
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	491f      	ldr	r1, [pc, #124]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	610b      	str	r3, [r1, #16]
 8005abe:	e011      	b.n	8005ae4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ac8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6892      	ldr	r2, [r2, #8]
 8005ad0:	0211      	lsls	r1, r2, #8
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6952      	ldr	r2, [r2, #20]
 8005ad6:	0852      	lsrs	r2, r2, #1
 8005ad8:	3a01      	subs	r2, #1
 8005ada:	0652      	lsls	r2, r2, #25
 8005adc:	430a      	orrs	r2, r1
 8005ade:	4916      	ldr	r1, [pc, #88]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ae4:	4b14      	ldr	r3, [pc, #80]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a13      	ldr	r2, [pc, #76]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005aee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af0:	f7fc fe30 	bl	8002754 <HAL_GetTick>
 8005af4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005af6:	e009      	b.n	8005b0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005af8:	f7fc fe2c 	bl	8002754 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d902      	bls.n	8005b0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	73fb      	strb	r3, [r7, #15]
          break;
 8005b0a:	e005      	b.n	8005b18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0ef      	beq.n	8005af8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b1e:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	4904      	ldr	r1, [pc, #16]	@ (8005b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40021000 	.word	0x40021000

08005b3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d018      	beq.n	8005b88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b56:	4b67      	ldr	r3, [pc, #412]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f003 0203 	and.w	r2, r3, #3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d10d      	bne.n	8005b82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
       ||
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b6e:	4b61      	ldr	r3, [pc, #388]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	091b      	lsrs	r3, r3, #4
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
       ||
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d047      	beq.n	8005c12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	73fb      	strb	r3, [r7, #15]
 8005b86:	e044      	b.n	8005c12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d018      	beq.n	8005bc2 <RCCEx_PLLSAI2_Config+0x86>
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d825      	bhi.n	8005be0 <RCCEx_PLLSAI2_Config+0xa4>
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d002      	beq.n	8005b9e <RCCEx_PLLSAI2_Config+0x62>
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d009      	beq.n	8005bb0 <RCCEx_PLLSAI2_Config+0x74>
 8005b9c:	e020      	b.n	8005be0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b9e:	4b55      	ldr	r3, [pc, #340]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d11d      	bne.n	8005be6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bae:	e01a      	b.n	8005be6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bb0:	4b50      	ldr	r3, [pc, #320]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d116      	bne.n	8005bea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bc0:	e013      	b.n	8005bea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10f      	bne.n	8005bee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bce:	4b49      	ldr	r3, [pc, #292]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bde:	e006      	b.n	8005bee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
      break;
 8005be4:	e004      	b.n	8005bf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005be6:	bf00      	nop
 8005be8:	e002      	b.n	8005bf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005bee:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10d      	bne.n	8005c12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	4939      	ldr	r1, [pc, #228]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d167      	bne.n	8005ce8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c18:	4b36      	ldr	r3, [pc, #216]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a35      	ldr	r2, [pc, #212]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c24:	f7fc fd96 	bl	8002754 <HAL_GetTick>
 8005c28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c2a:	e009      	b.n	8005c40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c2c:	f7fc fd92 	bl	8002754 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d902      	bls.n	8005c40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8005c3e:	e005      	b.n	8005c4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c40:	4b2c      	ldr	r3, [pc, #176]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1ef      	bne.n	8005c2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d14a      	bne.n	8005ce8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d111      	bne.n	8005c7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c58:	4b26      	ldr	r3, [pc, #152]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6892      	ldr	r2, [r2, #8]
 8005c68:	0211      	lsls	r1, r2, #8
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68d2      	ldr	r2, [r2, #12]
 8005c6e:	0912      	lsrs	r2, r2, #4
 8005c70:	0452      	lsls	r2, r2, #17
 8005c72:	430a      	orrs	r2, r1
 8005c74:	491f      	ldr	r1, [pc, #124]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	614b      	str	r3, [r1, #20]
 8005c7a:	e011      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6892      	ldr	r2, [r2, #8]
 8005c8c:	0211      	lsls	r1, r2, #8
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6912      	ldr	r2, [r2, #16]
 8005c92:	0852      	lsrs	r2, r2, #1
 8005c94:	3a01      	subs	r2, #1
 8005c96:	0652      	lsls	r2, r2, #25
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	4916      	ldr	r1, [pc, #88]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ca0:	4b14      	ldr	r3, [pc, #80]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a13      	ldr	r2, [pc, #76]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005caa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cac:	f7fc fd52 	bl	8002754 <HAL_GetTick>
 8005cb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cb2:	e009      	b.n	8005cc8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cb4:	f7fc fd4e 	bl	8002754 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d902      	bls.n	8005cc8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	73fb      	strb	r3, [r7, #15]
          break;
 8005cc6:	e005      	b.n	8005cd4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ef      	beq.n	8005cb4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005cda:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	4904      	ldr	r1, [pc, #16]	@ (8005cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000

08005cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e049      	b.n	8005d9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fc f9c6 	bl	80020b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f000 fe0a 	bl	8006950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d001      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e04f      	b.n	8005e60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a23      	ldr	r2, [pc, #140]	@ (8005e6c <HAL_TIM_Base_Start_IT+0xc4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01d      	beq.n	8005e1e <HAL_TIM_Base_Start_IT+0x76>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dea:	d018      	beq.n	8005e1e <HAL_TIM_Base_Start_IT+0x76>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e70 <HAL_TIM_Base_Start_IT+0xc8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_TIM_Base_Start_IT+0x76>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005e74 <HAL_TIM_Base_Start_IT+0xcc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00e      	beq.n	8005e1e <HAL_TIM_Base_Start_IT+0x76>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a1c      	ldr	r2, [pc, #112]	@ (8005e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_TIM_Base_Start_IT+0x76>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d004      	beq.n	8005e1e <HAL_TIM_Base_Start_IT+0x76>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a19      	ldr	r2, [pc, #100]	@ (8005e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d115      	bne.n	8005e4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	4b17      	ldr	r3, [pc, #92]	@ (8005e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b06      	cmp	r3, #6
 8005e2e:	d015      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0xb4>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e36:	d011      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e48:	e008      	b.n	8005e5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e000      	b.n	8005e5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40000c00 	.word	0x40000c00
 8005e7c:	40013400 	.word	0x40013400
 8005e80:	40014000 	.word	0x40014000
 8005e84:	00010007 	.word	0x00010007

08005e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e049      	b.n	8005f2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f841 	bl	8005f36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 fd42 	bl	8006950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <HAL_TIM_PWM_Start+0x24>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	e03c      	b.n	8005fea <HAL_TIM_PWM_Start+0x9e>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d109      	bne.n	8005f8a <HAL_TIM_PWM_Start+0x3e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	e02f      	b.n	8005fea <HAL_TIM_PWM_Start+0x9e>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d109      	bne.n	8005fa4 <HAL_TIM_PWM_Start+0x58>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	bf14      	ite	ne
 8005f9c:	2301      	movne	r3, #1
 8005f9e:	2300      	moveq	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	e022      	b.n	8005fea <HAL_TIM_PWM_Start+0x9e>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b0c      	cmp	r3, #12
 8005fa8:	d109      	bne.n	8005fbe <HAL_TIM_PWM_Start+0x72>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	bf14      	ite	ne
 8005fb6:	2301      	movne	r3, #1
 8005fb8:	2300      	moveq	r3, #0
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	e015      	b.n	8005fea <HAL_TIM_PWM_Start+0x9e>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b10      	cmp	r3, #16
 8005fc2:	d109      	bne.n	8005fd8 <HAL_TIM_PWM_Start+0x8c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	bf14      	ite	ne
 8005fd0:	2301      	movne	r3, #1
 8005fd2:	2300      	moveq	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	e008      	b.n	8005fea <HAL_TIM_PWM_Start+0x9e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e09c      	b.n	800612c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <HAL_TIM_PWM_Start+0xb6>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006000:	e023      	b.n	800604a <HAL_TIM_PWM_Start+0xfe>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b04      	cmp	r3, #4
 8006006:	d104      	bne.n	8006012 <HAL_TIM_PWM_Start+0xc6>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006010:	e01b      	b.n	800604a <HAL_TIM_PWM_Start+0xfe>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b08      	cmp	r3, #8
 8006016:	d104      	bne.n	8006022 <HAL_TIM_PWM_Start+0xd6>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006020:	e013      	b.n	800604a <HAL_TIM_PWM_Start+0xfe>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b0c      	cmp	r3, #12
 8006026:	d104      	bne.n	8006032 <HAL_TIM_PWM_Start+0xe6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006030:	e00b      	b.n	800604a <HAL_TIM_PWM_Start+0xfe>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b10      	cmp	r3, #16
 8006036:	d104      	bne.n	8006042 <HAL_TIM_PWM_Start+0xf6>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006040:	e003      	b.n	800604a <HAL_TIM_PWM_Start+0xfe>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2201      	movs	r2, #1
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f001 f9aa 	bl	80073ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a35      	ldr	r2, [pc, #212]	@ (8006134 <HAL_TIM_PWM_Start+0x1e8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <HAL_TIM_PWM_Start+0x13e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a34      	ldr	r2, [pc, #208]	@ (8006138 <HAL_TIM_PWM_Start+0x1ec>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00e      	beq.n	800608a <HAL_TIM_PWM_Start+0x13e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a32      	ldr	r2, [pc, #200]	@ (800613c <HAL_TIM_PWM_Start+0x1f0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d009      	beq.n	800608a <HAL_TIM_PWM_Start+0x13e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a31      	ldr	r2, [pc, #196]	@ (8006140 <HAL_TIM_PWM_Start+0x1f4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d004      	beq.n	800608a <HAL_TIM_PWM_Start+0x13e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2f      	ldr	r2, [pc, #188]	@ (8006144 <HAL_TIM_PWM_Start+0x1f8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d101      	bne.n	800608e <HAL_TIM_PWM_Start+0x142>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <HAL_TIM_PWM_Start+0x144>
 800608e:	2300      	movs	r3, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a22      	ldr	r2, [pc, #136]	@ (8006134 <HAL_TIM_PWM_Start+0x1e8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <HAL_TIM_PWM_Start+0x19e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b6:	d018      	beq.n	80060ea <HAL_TIM_PWM_Start+0x19e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a22      	ldr	r2, [pc, #136]	@ (8006148 <HAL_TIM_PWM_Start+0x1fc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <HAL_TIM_PWM_Start+0x19e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a21      	ldr	r2, [pc, #132]	@ (800614c <HAL_TIM_PWM_Start+0x200>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_TIM_PWM_Start+0x19e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006150 <HAL_TIM_PWM_Start+0x204>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_TIM_PWM_Start+0x19e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a17      	ldr	r2, [pc, #92]	@ (8006138 <HAL_TIM_PWM_Start+0x1ec>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_TIM_PWM_Start+0x19e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a15      	ldr	r2, [pc, #84]	@ (800613c <HAL_TIM_PWM_Start+0x1f0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d115      	bne.n	8006116 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	4b18      	ldr	r3, [pc, #96]	@ (8006154 <HAL_TIM_PWM_Start+0x208>)
 80060f2:	4013      	ands	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b06      	cmp	r3, #6
 80060fa:	d015      	beq.n	8006128 <HAL_TIM_PWM_Start+0x1dc>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006102:	d011      	beq.n	8006128 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006114:	e008      	b.n	8006128 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0201 	orr.w	r2, r2, #1
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	e000      	b.n	800612a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40012c00 	.word	0x40012c00
 8006138:	40013400 	.word	0x40013400
 800613c:	40014000 	.word	0x40014000
 8006140:	40014400 	.word	0x40014400
 8006144:	40014800 	.word	0x40014800
 8006148:	40000400 	.word	0x40000400
 800614c:	40000800 	.word	0x40000800
 8006150:	40000c00 	.word	0x40000c00
 8006154:	00010007 	.word	0x00010007

08006158 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e049      	b.n	80061fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fc f806 	bl	8002190 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f000 fbda 	bl	8006950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01b      	beq.n	800626a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f06f 0202 	mvn.w	r2, #2
 800623a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fb5e 	bl	8006912 <HAL_TIM_IC_CaptureCallback>
 8006256:	e005      	b.n	8006264 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fb50 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fb61 	bl	8006926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d020      	beq.n	80062b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01b      	beq.n	80062b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f06f 0204 	mvn.w	r2, #4
 8006286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fb38 	bl	8006912 <HAL_TIM_IC_CaptureCallback>
 80062a2:	e005      	b.n	80062b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fb2a 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fb3b 	bl	8006926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d020      	beq.n	8006302 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01b      	beq.n	8006302 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f06f 0208 	mvn.w	r2, #8
 80062d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2204      	movs	r2, #4
 80062d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	f003 0303 	and.w	r3, r3, #3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fb12 	bl	8006912 <HAL_TIM_IC_CaptureCallback>
 80062ee:	e005      	b.n	80062fc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fb04 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fb15 	bl	8006926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	d020      	beq.n	800634e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01b      	beq.n	800634e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f06f 0210 	mvn.w	r2, #16
 800631e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2208      	movs	r2, #8
 8006324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 faec 	bl	8006912 <HAL_TIM_IC_CaptureCallback>
 800633a:	e005      	b.n	8006348 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fade 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 faef 	bl	8006926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00c      	beq.n	8006372 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f06f 0201 	mvn.w	r2, #1
 800636a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fb f9c3 	bl	80016f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00c      	beq.n	8006396 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006382:	2b00      	cmp	r3, #0
 8006384:	d007      	beq.n	8006396 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800638e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 f8c3 	bl	800751c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00c      	beq.n	80063ba <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80063b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 f8bb 	bl	8007530 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00c      	beq.n	80063de <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 faae 	bl	800693a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00c      	beq.n	8006402 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f06f 0220 	mvn.w	r2, #32
 80063fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 f883 	bl	8007508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006424:	2302      	movs	r3, #2
 8006426:	e088      	b.n	800653a <HAL_TIM_IC_ConfigChannel+0x130>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d11b      	bne.n	800646e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006446:	f000 fdf3 	bl	8007030 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 020c 	bic.w	r2, r2, #12
 8006458:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6999      	ldr	r1, [r3, #24]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	619a      	str	r2, [r3, #24]
 800646c:	e060      	b.n	8006530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b04      	cmp	r3, #4
 8006472:	d11c      	bne.n	80064ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006484:	f000 fe71 	bl	800716a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006496:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6999      	ldr	r1, [r3, #24]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	021a      	lsls	r2, r3, #8
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	619a      	str	r2, [r3, #24]
 80064ac:	e040      	b.n	8006530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d11b      	bne.n	80064ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80064c4:	f000 febe 	bl	8007244 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69da      	ldr	r2, [r3, #28]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 020c 	bic.w	r2, r2, #12
 80064d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69d9      	ldr	r1, [r3, #28]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	61da      	str	r2, [r3, #28]
 80064ea:	e021      	b.n	8006530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b0c      	cmp	r3, #12
 80064f0:	d11c      	bne.n	800652c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006502:	f000 fedb 	bl	80072bc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006514:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69d9      	ldr	r1, [r3, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	021a      	lsls	r2, r3, #8
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	61da      	str	r2, [r3, #28]
 800652a:	e001      	b.n	8006530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006538:	7dfb      	ldrb	r3, [r7, #23]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800655e:	2302      	movs	r3, #2
 8006560:	e0ff      	b.n	8006762 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b14      	cmp	r3, #20
 800656e:	f200 80f0 	bhi.w	8006752 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006572:	a201      	add	r2, pc, #4	@ (adr r2, 8006578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	080065cd 	.word	0x080065cd
 800657c:	08006753 	.word	0x08006753
 8006580:	08006753 	.word	0x08006753
 8006584:	08006753 	.word	0x08006753
 8006588:	0800660d 	.word	0x0800660d
 800658c:	08006753 	.word	0x08006753
 8006590:	08006753 	.word	0x08006753
 8006594:	08006753 	.word	0x08006753
 8006598:	0800664f 	.word	0x0800664f
 800659c:	08006753 	.word	0x08006753
 80065a0:	08006753 	.word	0x08006753
 80065a4:	08006753 	.word	0x08006753
 80065a8:	0800668f 	.word	0x0800668f
 80065ac:	08006753 	.word	0x08006753
 80065b0:	08006753 	.word	0x08006753
 80065b4:	08006753 	.word	0x08006753
 80065b8:	080066d1 	.word	0x080066d1
 80065bc:	08006753 	.word	0x08006753
 80065c0:	08006753 	.word	0x08006753
 80065c4:	08006753 	.word	0x08006753
 80065c8:	08006711 	.word	0x08006711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fa56 	bl	8006a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0208 	orr.w	r2, r2, #8
 80065e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6999      	ldr	r1, [r3, #24]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	619a      	str	r2, [r3, #24]
      break;
 800660a:	e0a5      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fac6 	bl	8006ba4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6999      	ldr	r1, [r3, #24]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	021a      	lsls	r2, r3, #8
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	619a      	str	r2, [r3, #24]
      break;
 800664c:	e084      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fb2f 	bl	8006cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0208 	orr.w	r2, r2, #8
 8006668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0204 	bic.w	r2, r2, #4
 8006678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69d9      	ldr	r1, [r3, #28]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	61da      	str	r2, [r3, #28]
      break;
 800668c:	e064      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fb97 	bl	8006dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69d9      	ldr	r1, [r3, #28]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	021a      	lsls	r2, r3, #8
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	61da      	str	r2, [r3, #28]
      break;
 80066ce:	e043      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fbe0 	bl	8006e9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0208 	orr.w	r2, r2, #8
 80066ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0204 	bic.w	r2, r2, #4
 80066fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800670e:	e023      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fc24 	bl	8006f64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800672a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800673a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	021a      	lsls	r2, r3, #8
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006750:	e002      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]
      break;
 8006756:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006760:	7dfb      	ldrb	r3, [r7, #23]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop

0800676c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_TIM_ConfigClockSource+0x1c>
 8006784:	2302      	movs	r3, #2
 8006786:	e0b6      	b.n	80068f6 <HAL_TIM_ConfigClockSource+0x18a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80067aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c4:	d03e      	beq.n	8006844 <HAL_TIM_ConfigClockSource+0xd8>
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ca:	f200 8087 	bhi.w	80068dc <HAL_TIM_ConfigClockSource+0x170>
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d2:	f000 8086 	beq.w	80068e2 <HAL_TIM_ConfigClockSource+0x176>
 80067d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067da:	d87f      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x170>
 80067dc:	2b70      	cmp	r3, #112	@ 0x70
 80067de:	d01a      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0xaa>
 80067e0:	2b70      	cmp	r3, #112	@ 0x70
 80067e2:	d87b      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x170>
 80067e4:	2b60      	cmp	r3, #96	@ 0x60
 80067e6:	d050      	beq.n	800688a <HAL_TIM_ConfigClockSource+0x11e>
 80067e8:	2b60      	cmp	r3, #96	@ 0x60
 80067ea:	d877      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x170>
 80067ec:	2b50      	cmp	r3, #80	@ 0x50
 80067ee:	d03c      	beq.n	800686a <HAL_TIM_ConfigClockSource+0xfe>
 80067f0:	2b50      	cmp	r3, #80	@ 0x50
 80067f2:	d873      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x170>
 80067f4:	2b40      	cmp	r3, #64	@ 0x40
 80067f6:	d058      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x13e>
 80067f8:	2b40      	cmp	r3, #64	@ 0x40
 80067fa:	d86f      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x170>
 80067fc:	2b30      	cmp	r3, #48	@ 0x30
 80067fe:	d064      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15e>
 8006800:	2b30      	cmp	r3, #48	@ 0x30
 8006802:	d86b      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x170>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d060      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15e>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d867      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x170>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d05c      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15e>
 8006810:	2b10      	cmp	r3, #16
 8006812:	d05a      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15e>
 8006814:	e062      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006826:	f000 fda1 	bl	800736c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	609a      	str	r2, [r3, #8]
      break;
 8006842:	e04f      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006854:	f000 fd8a 	bl	800736c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006866:	609a      	str	r2, [r3, #8]
      break;
 8006868:	e03c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006876:	461a      	mov	r2, r3
 8006878:	f000 fc48 	bl	800710c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2150      	movs	r1, #80	@ 0x50
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fd57 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8006888:	e02c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006896:	461a      	mov	r2, r3
 8006898:	f000 fca4 	bl	80071e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2160      	movs	r1, #96	@ 0x60
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fd47 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 80068a8:	e01c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b6:	461a      	mov	r2, r3
 80068b8:	f000 fc28 	bl	800710c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2140      	movs	r1, #64	@ 0x40
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fd37 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 80068c8:	e00c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f000 fd2e 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 80068da:	e003      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
      break;
 80068e0:	e000      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80068e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a40      	ldr	r2, [pc, #256]	@ (8006a64 <TIM_Base_SetConfig+0x114>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d013      	beq.n	8006990 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696e:	d00f      	beq.n	8006990 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a3d      	ldr	r2, [pc, #244]	@ (8006a68 <TIM_Base_SetConfig+0x118>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00b      	beq.n	8006990 <TIM_Base_SetConfig+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a3c      	ldr	r2, [pc, #240]	@ (8006a6c <TIM_Base_SetConfig+0x11c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d007      	beq.n	8006990 <TIM_Base_SetConfig+0x40>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a3b      	ldr	r2, [pc, #236]	@ (8006a70 <TIM_Base_SetConfig+0x120>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_Base_SetConfig+0x40>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a3a      	ldr	r2, [pc, #232]	@ (8006a74 <TIM_Base_SetConfig+0x124>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d108      	bne.n	80069a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a2f      	ldr	r2, [pc, #188]	@ (8006a64 <TIM_Base_SetConfig+0x114>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d01f      	beq.n	80069ea <TIM_Base_SetConfig+0x9a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b0:	d01b      	beq.n	80069ea <TIM_Base_SetConfig+0x9a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006a68 <TIM_Base_SetConfig+0x118>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d017      	beq.n	80069ea <TIM_Base_SetConfig+0x9a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a2b      	ldr	r2, [pc, #172]	@ (8006a6c <TIM_Base_SetConfig+0x11c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d013      	beq.n	80069ea <TIM_Base_SetConfig+0x9a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006a70 <TIM_Base_SetConfig+0x120>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00f      	beq.n	80069ea <TIM_Base_SetConfig+0x9a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a29      	ldr	r2, [pc, #164]	@ (8006a74 <TIM_Base_SetConfig+0x124>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00b      	beq.n	80069ea <TIM_Base_SetConfig+0x9a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a28      	ldr	r2, [pc, #160]	@ (8006a78 <TIM_Base_SetConfig+0x128>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d007      	beq.n	80069ea <TIM_Base_SetConfig+0x9a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a27      	ldr	r2, [pc, #156]	@ (8006a7c <TIM_Base_SetConfig+0x12c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d003      	beq.n	80069ea <TIM_Base_SetConfig+0x9a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a26      	ldr	r2, [pc, #152]	@ (8006a80 <TIM_Base_SetConfig+0x130>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d108      	bne.n	80069fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a10      	ldr	r2, [pc, #64]	@ (8006a64 <TIM_Base_SetConfig+0x114>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d00f      	beq.n	8006a48 <TIM_Base_SetConfig+0xf8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a12      	ldr	r2, [pc, #72]	@ (8006a74 <TIM_Base_SetConfig+0x124>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00b      	beq.n	8006a48 <TIM_Base_SetConfig+0xf8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a11      	ldr	r2, [pc, #68]	@ (8006a78 <TIM_Base_SetConfig+0x128>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d007      	beq.n	8006a48 <TIM_Base_SetConfig+0xf8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a10      	ldr	r2, [pc, #64]	@ (8006a7c <TIM_Base_SetConfig+0x12c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d003      	beq.n	8006a48 <TIM_Base_SetConfig+0xf8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a0f      	ldr	r2, [pc, #60]	@ (8006a80 <TIM_Base_SetConfig+0x130>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d103      	bne.n	8006a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	615a      	str	r2, [r3, #20]
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40012c00 	.word	0x40012c00
 8006a68:	40000400 	.word	0x40000400
 8006a6c:	40000800 	.word	0x40000800
 8006a70:	40000c00 	.word	0x40000c00
 8006a74:	40013400 	.word	0x40013400
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	40014800 	.word	0x40014800

08006a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f023 0201 	bic.w	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0303 	bic.w	r3, r3, #3
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f023 0302 	bic.w	r3, r3, #2
 8006ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a2c      	ldr	r2, [pc, #176]	@ (8006b90 <TIM_OC1_SetConfig+0x10c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00f      	beq.n	8006b04 <TIM_OC1_SetConfig+0x80>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a2b      	ldr	r2, [pc, #172]	@ (8006b94 <TIM_OC1_SetConfig+0x110>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00b      	beq.n	8006b04 <TIM_OC1_SetConfig+0x80>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a2a      	ldr	r2, [pc, #168]	@ (8006b98 <TIM_OC1_SetConfig+0x114>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d007      	beq.n	8006b04 <TIM_OC1_SetConfig+0x80>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a29      	ldr	r2, [pc, #164]	@ (8006b9c <TIM_OC1_SetConfig+0x118>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_OC1_SetConfig+0x80>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a28      	ldr	r2, [pc, #160]	@ (8006ba0 <TIM_OC1_SetConfig+0x11c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d10c      	bne.n	8006b1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f023 0308 	bic.w	r3, r3, #8
 8006b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f023 0304 	bic.w	r3, r3, #4
 8006b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a1b      	ldr	r2, [pc, #108]	@ (8006b90 <TIM_OC1_SetConfig+0x10c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00f      	beq.n	8006b46 <TIM_OC1_SetConfig+0xc2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a1a      	ldr	r2, [pc, #104]	@ (8006b94 <TIM_OC1_SetConfig+0x110>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00b      	beq.n	8006b46 <TIM_OC1_SetConfig+0xc2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a19      	ldr	r2, [pc, #100]	@ (8006b98 <TIM_OC1_SetConfig+0x114>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d007      	beq.n	8006b46 <TIM_OC1_SetConfig+0xc2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a18      	ldr	r2, [pc, #96]	@ (8006b9c <TIM_OC1_SetConfig+0x118>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_OC1_SetConfig+0xc2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a17      	ldr	r2, [pc, #92]	@ (8006ba0 <TIM_OC1_SetConfig+0x11c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d111      	bne.n	8006b6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	621a      	str	r2, [r3, #32]
}
 8006b84:	bf00      	nop
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	40012c00 	.word	0x40012c00
 8006b94:	40013400 	.word	0x40013400
 8006b98:	40014000 	.word	0x40014000
 8006b9c:	40014400 	.word	0x40014400
 8006ba0:	40014800 	.word	0x40014800

08006ba4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f023 0210 	bic.w	r2, r3, #16
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	021b      	lsls	r3, r3, #8
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f023 0320 	bic.w	r3, r3, #32
 8006bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a28      	ldr	r2, [pc, #160]	@ (8006ca4 <TIM_OC2_SetConfig+0x100>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_OC2_SetConfig+0x6c>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a27      	ldr	r2, [pc, #156]	@ (8006ca8 <TIM_OC2_SetConfig+0x104>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d10d      	bne.n	8006c2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca4 <TIM_OC2_SetConfig+0x100>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00f      	beq.n	8006c54 <TIM_OC2_SetConfig+0xb0>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a1c      	ldr	r2, [pc, #112]	@ (8006ca8 <TIM_OC2_SetConfig+0x104>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00b      	beq.n	8006c54 <TIM_OC2_SetConfig+0xb0>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006cac <TIM_OC2_SetConfig+0x108>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d007      	beq.n	8006c54 <TIM_OC2_SetConfig+0xb0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb0 <TIM_OC2_SetConfig+0x10c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_OC2_SetConfig+0xb0>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a19      	ldr	r2, [pc, #100]	@ (8006cb4 <TIM_OC2_SetConfig+0x110>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d113      	bne.n	8006c7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40012c00 	.word	0x40012c00
 8006ca8:	40013400 	.word	0x40013400
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	40014400 	.word	0x40014400
 8006cb4:	40014800 	.word	0x40014800

08006cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a27      	ldr	r2, [pc, #156]	@ (8006db4 <TIM_OC3_SetConfig+0xfc>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_OC3_SetConfig+0x6a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a26      	ldr	r2, [pc, #152]	@ (8006db8 <TIM_OC3_SetConfig+0x100>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d10d      	bne.n	8006d3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a1c      	ldr	r2, [pc, #112]	@ (8006db4 <TIM_OC3_SetConfig+0xfc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00f      	beq.n	8006d66 <TIM_OC3_SetConfig+0xae>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a1b      	ldr	r2, [pc, #108]	@ (8006db8 <TIM_OC3_SetConfig+0x100>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00b      	beq.n	8006d66 <TIM_OC3_SetConfig+0xae>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a1a      	ldr	r2, [pc, #104]	@ (8006dbc <TIM_OC3_SetConfig+0x104>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d007      	beq.n	8006d66 <TIM_OC3_SetConfig+0xae>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a19      	ldr	r2, [pc, #100]	@ (8006dc0 <TIM_OC3_SetConfig+0x108>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_OC3_SetConfig+0xae>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a18      	ldr	r2, [pc, #96]	@ (8006dc4 <TIM_OC3_SetConfig+0x10c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d113      	bne.n	8006d8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	621a      	str	r2, [r3, #32]
}
 8006da8:	bf00      	nop
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40013400 	.word	0x40013400
 8006dbc:	40014000 	.word	0x40014000
 8006dc0:	40014400 	.word	0x40014400
 8006dc4:	40014800 	.word	0x40014800

08006dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	031b      	lsls	r3, r3, #12
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a18      	ldr	r2, [pc, #96]	@ (8006e88 <TIM_OC4_SetConfig+0xc0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00f      	beq.n	8006e4c <TIM_OC4_SetConfig+0x84>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a17      	ldr	r2, [pc, #92]	@ (8006e8c <TIM_OC4_SetConfig+0xc4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d00b      	beq.n	8006e4c <TIM_OC4_SetConfig+0x84>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a16      	ldr	r2, [pc, #88]	@ (8006e90 <TIM_OC4_SetConfig+0xc8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d007      	beq.n	8006e4c <TIM_OC4_SetConfig+0x84>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a15      	ldr	r2, [pc, #84]	@ (8006e94 <TIM_OC4_SetConfig+0xcc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_OC4_SetConfig+0x84>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a14      	ldr	r2, [pc, #80]	@ (8006e98 <TIM_OC4_SetConfig+0xd0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d109      	bne.n	8006e60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	019b      	lsls	r3, r3, #6
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	621a      	str	r2, [r3, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	40012c00 	.word	0x40012c00
 8006e8c:	40013400 	.word	0x40013400
 8006e90:	40014000 	.word	0x40014000
 8006e94:	40014400 	.word	0x40014400
 8006e98:	40014800 	.word	0x40014800

08006e9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ee0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	041b      	lsls	r3, r3, #16
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a17      	ldr	r2, [pc, #92]	@ (8006f50 <TIM_OC5_SetConfig+0xb4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00f      	beq.n	8006f16 <TIM_OC5_SetConfig+0x7a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a16      	ldr	r2, [pc, #88]	@ (8006f54 <TIM_OC5_SetConfig+0xb8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00b      	beq.n	8006f16 <TIM_OC5_SetConfig+0x7a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a15      	ldr	r2, [pc, #84]	@ (8006f58 <TIM_OC5_SetConfig+0xbc>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d007      	beq.n	8006f16 <TIM_OC5_SetConfig+0x7a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a14      	ldr	r2, [pc, #80]	@ (8006f5c <TIM_OC5_SetConfig+0xc0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d003      	beq.n	8006f16 <TIM_OC5_SetConfig+0x7a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a13      	ldr	r2, [pc, #76]	@ (8006f60 <TIM_OC5_SetConfig+0xc4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d109      	bne.n	8006f2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	621a      	str	r2, [r3, #32]
}
 8006f44:	bf00      	nop
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	40012c00 	.word	0x40012c00
 8006f54:	40013400 	.word	0x40013400
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40014400 	.word	0x40014400
 8006f60:	40014800 	.word	0x40014800

08006f64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	051b      	lsls	r3, r3, #20
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a18      	ldr	r2, [pc, #96]	@ (800701c <TIM_OC6_SetConfig+0xb8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00f      	beq.n	8006fe0 <TIM_OC6_SetConfig+0x7c>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a17      	ldr	r2, [pc, #92]	@ (8007020 <TIM_OC6_SetConfig+0xbc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00b      	beq.n	8006fe0 <TIM_OC6_SetConfig+0x7c>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a16      	ldr	r2, [pc, #88]	@ (8007024 <TIM_OC6_SetConfig+0xc0>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d007      	beq.n	8006fe0 <TIM_OC6_SetConfig+0x7c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a15      	ldr	r2, [pc, #84]	@ (8007028 <TIM_OC6_SetConfig+0xc4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_OC6_SetConfig+0x7c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a14      	ldr	r2, [pc, #80]	@ (800702c <TIM_OC6_SetConfig+0xc8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d109      	bne.n	8006ff4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	029b      	lsls	r3, r3, #10
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40012c00 	.word	0x40012c00
 8007020:	40013400 	.word	0x40013400
 8007024:	40014000 	.word	0x40014000
 8007028:	40014400 	.word	0x40014400
 800702c:	40014800 	.word	0x40014800

08007030 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	f023 0201 	bic.w	r2, r3, #1
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a26      	ldr	r2, [pc, #152]	@ (80070f4 <TIM_TI1_SetConfig+0xc4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d017      	beq.n	800708e <TIM_TI1_SetConfig+0x5e>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007064:	d013      	beq.n	800708e <TIM_TI1_SetConfig+0x5e>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4a23      	ldr	r2, [pc, #140]	@ (80070f8 <TIM_TI1_SetConfig+0xc8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00f      	beq.n	800708e <TIM_TI1_SetConfig+0x5e>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4a22      	ldr	r2, [pc, #136]	@ (80070fc <TIM_TI1_SetConfig+0xcc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00b      	beq.n	800708e <TIM_TI1_SetConfig+0x5e>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4a21      	ldr	r2, [pc, #132]	@ (8007100 <TIM_TI1_SetConfig+0xd0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d007      	beq.n	800708e <TIM_TI1_SetConfig+0x5e>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4a20      	ldr	r2, [pc, #128]	@ (8007104 <TIM_TI1_SetConfig+0xd4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d003      	beq.n	800708e <TIM_TI1_SetConfig+0x5e>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4a1f      	ldr	r2, [pc, #124]	@ (8007108 <TIM_TI1_SetConfig+0xd8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d101      	bne.n	8007092 <TIM_TI1_SetConfig+0x62>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <TIM_TI1_SetConfig+0x64>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 0303 	bic.w	r3, r3, #3
 800709e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	e003      	b.n	80070b2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f043 0301 	orr.w	r3, r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f023 030a 	bic.w	r3, r3, #10
 80070cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f003 030a 	and.w	r3, r3, #10
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	621a      	str	r2, [r3, #32]
}
 80070e6:	bf00      	nop
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40000400 	.word	0x40000400
 80070fc:	40000800 	.word	0x40000800
 8007100:	40000c00 	.word	0x40000c00
 8007104:	40013400 	.word	0x40013400
 8007108:	40014000 	.word	0x40014000

0800710c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f023 0201 	bic.w	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f023 030a 	bic.w	r3, r3, #10
 8007148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4313      	orrs	r3, r2
 8007150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	621a      	str	r2, [r3, #32]
}
 800715e:	bf00      	nop
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800716a:	b480      	push	{r7}
 800716c:	b087      	sub	sp, #28
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	607a      	str	r2, [r7, #4]
 8007176:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	f023 0210 	bic.w	r2, r3, #16
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	031b      	lsls	r3, r3, #12
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	621a      	str	r2, [r3, #32]
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f023 0210 	bic.w	r2, r3, #16
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800720e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	031b      	lsls	r3, r3, #12
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007220:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	621a      	str	r2, [r3, #32]
}
 8007238:	bf00      	nop
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f023 0303 	bic.w	r3, r3, #3
 8007270:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007280:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	b2db      	uxtb	r3, r3
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007294:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	621a      	str	r2, [r3, #32]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	031b      	lsls	r3, r3, #12
 8007300:	b29b      	uxth	r3, r3
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800730e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	031b      	lsls	r3, r3, #12
 8007314:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	f043 0307 	orr.w	r3, r3, #7
 8007358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	609a      	str	r2, [r3, #8]
}
 8007360:	bf00      	nop
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	021a      	lsls	r2, r3, #8
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	431a      	orrs	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4313      	orrs	r3, r2
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	bf00      	nop
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2201      	movs	r2, #1
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	43db      	mvns	r3, r3
 80073ce:	401a      	ands	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a1a      	ldr	r2, [r3, #32]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	fa01 f303 	lsl.w	r3, r1, r3
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800740c:	2302      	movs	r3, #2
 800740e:	e068      	b.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a2e      	ldr	r2, [pc, #184]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2d      	ldr	r2, [pc, #180]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d108      	bne.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800744a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1e      	ldr	r2, [pc, #120]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d01d      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007482:	d018      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a1b      	ldr	r2, [pc, #108]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00e      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d009      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a13      	ldr	r2, [pc, #76]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a14      	ldr	r2, [pc, #80]	@ (8007504 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d10c      	bne.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40013400 	.word	0x40013400
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	40014000 	.word	0x40014000

08007508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e040      	b.n	80075d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fa feaa 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2224      	movs	r2, #36	@ 0x24
 8007570:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0201 	bic.w	r2, r2, #1
 8007580:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fe36 	bl	80081fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fb7b 	bl	8007c8c <UART_SetConfig>
 8007596:	4603      	mov	r3, r0
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e01b      	b.n	80075d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0201 	orr.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 feb5 	bl	8008340 <UART_CheckIdleState>
 80075d6:	4603      	mov	r3, r0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	@ 0x28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d137      	bne.n	8007668 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <HAL_UART_Receive_IT+0x24>
 80075fe:	88fb      	ldrh	r3, [r7, #6]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e030      	b.n	800766a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a18      	ldr	r2, [pc, #96]	@ (8007674 <HAL_UART_Receive_IT+0x94>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d01f      	beq.n	8007658 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d018      	beq.n	8007658 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	613b      	str	r3, [r7, #16]
   return(result);
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	623b      	str	r3, [r7, #32]
 8007646:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	69f9      	ldr	r1, [r7, #28]
 800764a:	6a3a      	ldr	r2, [r7, #32]
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	61bb      	str	r3, [r7, #24]
   return(result);
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e6      	bne.n	8007626 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007658:	88fb      	ldrh	r3, [r7, #6]
 800765a:	461a      	mov	r2, r3
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 ff7e 	bl	8008560 <UART_Start_Receive_IT>
 8007664:	4603      	mov	r3, r0
 8007666:	e000      	b.n	800766a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007668:	2302      	movs	r3, #2
  }
}
 800766a:	4618      	mov	r0, r3
 800766c:	3728      	adds	r7, #40	@ 0x28
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	40008000 	.word	0x40008000

08007678 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b0ba      	sub	sp, #232	@ 0xe8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800769e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80076a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80076a6:	4013      	ands	r3, r2
 80076a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80076ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d115      	bne.n	80076e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80076b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00f      	beq.n	80076e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076c4:	f003 0320 	and.w	r3, r3, #32
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d009      	beq.n	80076e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 82ae 	beq.w	8007c32 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	4798      	blx	r3
      }
      return;
 80076de:	e2a8      	b.n	8007c32 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80076e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8117 	beq.w	8007918 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80076ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80076f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076fa:	4b85      	ldr	r3, [pc, #532]	@ (8007910 <HAL_UART_IRQHandler+0x298>)
 80076fc:	4013      	ands	r3, r2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 810a 	beq.w	8007918 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d011      	beq.n	8007734 <HAL_UART_IRQHandler+0xbc>
 8007710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2201      	movs	r2, #1
 8007722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800772a:	f043 0201 	orr.w	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d011      	beq.n	8007764 <HAL_UART_IRQHandler+0xec>
 8007740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2202      	movs	r2, #2
 8007752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800775a:	f043 0204 	orr.w	r2, r3, #4
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d011      	beq.n	8007794 <HAL_UART_IRQHandler+0x11c>
 8007770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2204      	movs	r2, #4
 8007782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800778a:	f043 0202 	orr.w	r2, r3, #2
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d017      	beq.n	80077d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2208      	movs	r2, #8
 80077be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077c6:	f043 0208 	orr.w	r2, r3, #8
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d012      	beq.n	8007802 <HAL_UART_IRQHandler+0x18a>
 80077dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00c      	beq.n	8007802 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077f8:	f043 0220 	orr.w	r2, r3, #32
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8214 	beq.w	8007c36 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00d      	beq.n	8007836 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800781a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800783c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800784a:	2b40      	cmp	r3, #64	@ 0x40
 800784c:	d005      	beq.n	800785a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800784e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007852:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007856:	2b00      	cmp	r3, #0
 8007858:	d04f      	beq.n	80078fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 ff46 	bl	80086ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d141      	bne.n	80078f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800788c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800789a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800789e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1d9      	bne.n	800786e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d013      	beq.n	80078ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078c6:	4a13      	ldr	r2, [pc, #76]	@ (8007914 <HAL_UART_IRQHandler+0x29c>)
 80078c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fc fcef 	bl	80042b2 <HAL_DMA_Abort_IT>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d017      	beq.n	800790a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80078e4:	4610      	mov	r0, r2
 80078e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e8:	e00f      	b.n	800790a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f9b8 	bl	8007c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	e00b      	b.n	800790a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f9b4 	bl	8007c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	e007      	b.n	800790a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f9b0 	bl	8007c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007908:	e195      	b.n	8007c36 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790a:	bf00      	nop
    return;
 800790c:	e193      	b.n	8007c36 <HAL_UART_IRQHandler+0x5be>
 800790e:	bf00      	nop
 8007910:	04000120 	.word	0x04000120
 8007914:	080087b5 	.word	0x080087b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800791c:	2b01      	cmp	r3, #1
 800791e:	f040 814e 	bne.w	8007bbe <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007926:	f003 0310 	and.w	r3, r3, #16
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8147 	beq.w	8007bbe <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 8140 	beq.w	8007bbe <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2210      	movs	r2, #16
 8007944:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007950:	2b40      	cmp	r3, #64	@ 0x40
 8007952:	f040 80b8 	bne.w	8007ac6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007962:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 8167 	beq.w	8007c3a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007976:	429a      	cmp	r2, r3
 8007978:	f080 815f 	bcs.w	8007c3a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007982:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	f040 8086 	bne.w	8007aa4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80079ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	461a      	mov	r2, r3
 80079be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80079ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80079da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1da      	bne.n	8007998 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3308      	adds	r3, #8
 80079e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079f4:	f023 0301 	bic.w	r3, r3, #1
 80079f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3308      	adds	r3, #8
 8007a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e1      	bne.n	80079e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e3      	bne.n	8007a1e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a74:	f023 0310 	bic.w	r3, r3, #16
 8007a78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e4      	bne.n	8007a64 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fc fbc9 	bl	8004236 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f8d8 	bl	8007c74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ac4:	e0b9      	b.n	8007c3a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80ab 	beq.w	8007c3e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80a6 	beq.w	8007c3e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e4      	bne.n	8007af2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	623b      	str	r3, [r7, #32]
   return(result);
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	f023 0301 	bic.w	r3, r3, #1
 8007b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3308      	adds	r3, #8
 8007b48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e3      	bne.n	8007b28 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2220      	movs	r2, #32
 8007b64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f023 0310 	bic.w	r3, r3, #16
 8007b88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b96:	61fb      	str	r3, [r7, #28]
 8007b98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	69b9      	ldr	r1, [r7, #24]
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e4      	bne.n	8007b74 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2202      	movs	r2, #2
 8007bae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f85c 	bl	8007c74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bbc:	e03f      	b.n	8007c3e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00e      	beq.n	8007be8 <HAL_UART_IRQHandler+0x570>
 8007bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d008      	beq.n	8007be8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007bde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 ffe3 	bl	8008bac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007be6:	e02d      	b.n	8007c44 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00e      	beq.n	8007c12 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d008      	beq.n	8007c12 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d01c      	beq.n	8007c42 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
    }
    return;
 8007c10:	e017      	b.n	8007c42 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d012      	beq.n	8007c44 <HAL_UART_IRQHandler+0x5cc>
 8007c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00c      	beq.n	8007c44 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fdd8 	bl	80087e0 <UART_EndTransmit_IT>
    return;
 8007c30:	e008      	b.n	8007c44 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007c32:	bf00      	nop
 8007c34:	e006      	b.n	8007c44 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007c36:	bf00      	nop
 8007c38:	e004      	b.n	8007c44 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007c3a:	bf00      	nop
 8007c3c:	e002      	b.n	8007c44 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007c3e:	bf00      	nop
 8007c40:	e000      	b.n	8007c44 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007c42:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007c44:	37e8      	adds	r7, #232	@ 0xe8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop

08007c4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c90:	b08a      	sub	sp, #40	@ 0x28
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	431a      	orrs	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4ba4      	ldr	r3, [pc, #656]	@ (8007f4c <UART_SetConfig+0x2c0>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	6812      	ldr	r2, [r2, #0]
 8007cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a99      	ldr	r2, [pc, #612]	@ (8007f50 <UART_SetConfig+0x2c4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d004      	beq.n	8007cf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a90      	ldr	r2, [pc, #576]	@ (8007f54 <UART_SetConfig+0x2c8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d126      	bne.n	8007d64 <UART_SetConfig+0xd8>
 8007d16:	4b90      	ldr	r3, [pc, #576]	@ (8007f58 <UART_SetConfig+0x2cc>)
 8007d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d1c:	f003 0303 	and.w	r3, r3, #3
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d81b      	bhi.n	8007d5c <UART_SetConfig+0xd0>
 8007d24:	a201      	add	r2, pc, #4	@ (adr r2, 8007d2c <UART_SetConfig+0xa0>)
 8007d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2a:	bf00      	nop
 8007d2c:	08007d3d 	.word	0x08007d3d
 8007d30:	08007d4d 	.word	0x08007d4d
 8007d34:	08007d45 	.word	0x08007d45
 8007d38:	08007d55 	.word	0x08007d55
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d42:	e116      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007d44:	2302      	movs	r3, #2
 8007d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d4a:	e112      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007d4c:	2304      	movs	r3, #4
 8007d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d52:	e10e      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007d54:	2308      	movs	r3, #8
 8007d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d5a:	e10a      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007d5c:	2310      	movs	r3, #16
 8007d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d62:	e106      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a7c      	ldr	r2, [pc, #496]	@ (8007f5c <UART_SetConfig+0x2d0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d138      	bne.n	8007de0 <UART_SetConfig+0x154>
 8007d6e:	4b7a      	ldr	r3, [pc, #488]	@ (8007f58 <UART_SetConfig+0x2cc>)
 8007d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d74:	f003 030c 	and.w	r3, r3, #12
 8007d78:	2b0c      	cmp	r3, #12
 8007d7a:	d82d      	bhi.n	8007dd8 <UART_SetConfig+0x14c>
 8007d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d84 <UART_SetConfig+0xf8>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007db9 	.word	0x08007db9
 8007d88:	08007dd9 	.word	0x08007dd9
 8007d8c:	08007dd9 	.word	0x08007dd9
 8007d90:	08007dd9 	.word	0x08007dd9
 8007d94:	08007dc9 	.word	0x08007dc9
 8007d98:	08007dd9 	.word	0x08007dd9
 8007d9c:	08007dd9 	.word	0x08007dd9
 8007da0:	08007dd9 	.word	0x08007dd9
 8007da4:	08007dc1 	.word	0x08007dc1
 8007da8:	08007dd9 	.word	0x08007dd9
 8007dac:	08007dd9 	.word	0x08007dd9
 8007db0:	08007dd9 	.word	0x08007dd9
 8007db4:	08007dd1 	.word	0x08007dd1
 8007db8:	2300      	movs	r3, #0
 8007dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dbe:	e0d8      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dc6:	e0d4      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dce:	e0d0      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007dd0:	2308      	movs	r3, #8
 8007dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dd6:	e0cc      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007dd8:	2310      	movs	r3, #16
 8007dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dde:	e0c8      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a5e      	ldr	r2, [pc, #376]	@ (8007f60 <UART_SetConfig+0x2d4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d125      	bne.n	8007e36 <UART_SetConfig+0x1aa>
 8007dea:	4b5b      	ldr	r3, [pc, #364]	@ (8007f58 <UART_SetConfig+0x2cc>)
 8007dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007df0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007df4:	2b30      	cmp	r3, #48	@ 0x30
 8007df6:	d016      	beq.n	8007e26 <UART_SetConfig+0x19a>
 8007df8:	2b30      	cmp	r3, #48	@ 0x30
 8007dfa:	d818      	bhi.n	8007e2e <UART_SetConfig+0x1a2>
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d00a      	beq.n	8007e16 <UART_SetConfig+0x18a>
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d814      	bhi.n	8007e2e <UART_SetConfig+0x1a2>
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <UART_SetConfig+0x182>
 8007e08:	2b10      	cmp	r3, #16
 8007e0a:	d008      	beq.n	8007e1e <UART_SetConfig+0x192>
 8007e0c:	e00f      	b.n	8007e2e <UART_SetConfig+0x1a2>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e14:	e0ad      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007e16:	2302      	movs	r3, #2
 8007e18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e1c:	e0a9      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007e1e:	2304      	movs	r3, #4
 8007e20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e24:	e0a5      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007e26:	2308      	movs	r3, #8
 8007e28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e2c:	e0a1      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007e2e:	2310      	movs	r3, #16
 8007e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e34:	e09d      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a4a      	ldr	r2, [pc, #296]	@ (8007f64 <UART_SetConfig+0x2d8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d125      	bne.n	8007e8c <UART_SetConfig+0x200>
 8007e40:	4b45      	ldr	r3, [pc, #276]	@ (8007f58 <UART_SetConfig+0x2cc>)
 8007e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007e4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e4c:	d016      	beq.n	8007e7c <UART_SetConfig+0x1f0>
 8007e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e50:	d818      	bhi.n	8007e84 <UART_SetConfig+0x1f8>
 8007e52:	2b80      	cmp	r3, #128	@ 0x80
 8007e54:	d00a      	beq.n	8007e6c <UART_SetConfig+0x1e0>
 8007e56:	2b80      	cmp	r3, #128	@ 0x80
 8007e58:	d814      	bhi.n	8007e84 <UART_SetConfig+0x1f8>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <UART_SetConfig+0x1d8>
 8007e5e:	2b40      	cmp	r3, #64	@ 0x40
 8007e60:	d008      	beq.n	8007e74 <UART_SetConfig+0x1e8>
 8007e62:	e00f      	b.n	8007e84 <UART_SetConfig+0x1f8>
 8007e64:	2300      	movs	r3, #0
 8007e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e6a:	e082      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e72:	e07e      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007e74:	2304      	movs	r3, #4
 8007e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e7a:	e07a      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e82:	e076      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007e84:	2310      	movs	r3, #16
 8007e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e8a:	e072      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a35      	ldr	r2, [pc, #212]	@ (8007f68 <UART_SetConfig+0x2dc>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d12a      	bne.n	8007eec <UART_SetConfig+0x260>
 8007e96:	4b30      	ldr	r3, [pc, #192]	@ (8007f58 <UART_SetConfig+0x2cc>)
 8007e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ea0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ea4:	d01a      	beq.n	8007edc <UART_SetConfig+0x250>
 8007ea6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eaa:	d81b      	bhi.n	8007ee4 <UART_SetConfig+0x258>
 8007eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eb0:	d00c      	beq.n	8007ecc <UART_SetConfig+0x240>
 8007eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eb6:	d815      	bhi.n	8007ee4 <UART_SetConfig+0x258>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <UART_SetConfig+0x238>
 8007ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec0:	d008      	beq.n	8007ed4 <UART_SetConfig+0x248>
 8007ec2:	e00f      	b.n	8007ee4 <UART_SetConfig+0x258>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eca:	e052      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ed2:	e04e      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eda:	e04a      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007edc:	2308      	movs	r3, #8
 8007ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ee2:	e046      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eea:	e042      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a17      	ldr	r2, [pc, #92]	@ (8007f50 <UART_SetConfig+0x2c4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d13a      	bne.n	8007f6c <UART_SetConfig+0x2e0>
 8007ef6:	4b18      	ldr	r3, [pc, #96]	@ (8007f58 <UART_SetConfig+0x2cc>)
 8007ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f04:	d01a      	beq.n	8007f3c <UART_SetConfig+0x2b0>
 8007f06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f0a:	d81b      	bhi.n	8007f44 <UART_SetConfig+0x2b8>
 8007f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f10:	d00c      	beq.n	8007f2c <UART_SetConfig+0x2a0>
 8007f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f16:	d815      	bhi.n	8007f44 <UART_SetConfig+0x2b8>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <UART_SetConfig+0x298>
 8007f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f20:	d008      	beq.n	8007f34 <UART_SetConfig+0x2a8>
 8007f22:	e00f      	b.n	8007f44 <UART_SetConfig+0x2b8>
 8007f24:	2300      	movs	r3, #0
 8007f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f2a:	e022      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f32:	e01e      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007f34:	2304      	movs	r3, #4
 8007f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f3a:	e01a      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007f3c:	2308      	movs	r3, #8
 8007f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f42:	e016      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007f44:	2310      	movs	r3, #16
 8007f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f4a:	e012      	b.n	8007f72 <UART_SetConfig+0x2e6>
 8007f4c:	efff69f3 	.word	0xefff69f3
 8007f50:	40008000 	.word	0x40008000
 8007f54:	40013800 	.word	0x40013800
 8007f58:	40021000 	.word	0x40021000
 8007f5c:	40004400 	.word	0x40004400
 8007f60:	40004800 	.word	0x40004800
 8007f64:	40004c00 	.word	0x40004c00
 8007f68:	40005000 	.word	0x40005000
 8007f6c:	2310      	movs	r3, #16
 8007f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a9f      	ldr	r2, [pc, #636]	@ (80081f4 <UART_SetConfig+0x568>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d17a      	bne.n	8008072 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d824      	bhi.n	8007fce <UART_SetConfig+0x342>
 8007f84:	a201      	add	r2, pc, #4	@ (adr r2, 8007f8c <UART_SetConfig+0x300>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08007fb1 	.word	0x08007fb1
 8007f90:	08007fcf 	.word	0x08007fcf
 8007f94:	08007fb9 	.word	0x08007fb9
 8007f98:	08007fcf 	.word	0x08007fcf
 8007f9c:	08007fbf 	.word	0x08007fbf
 8007fa0:	08007fcf 	.word	0x08007fcf
 8007fa4:	08007fcf 	.word	0x08007fcf
 8007fa8:	08007fcf 	.word	0x08007fcf
 8007fac:	08007fc7 	.word	0x08007fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fb0:	f7fd f95a 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 8007fb4:	61f8      	str	r0, [r7, #28]
        break;
 8007fb6:	e010      	b.n	8007fda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80081f8 <UART_SetConfig+0x56c>)
 8007fba:	61fb      	str	r3, [r7, #28]
        break;
 8007fbc:	e00d      	b.n	8007fda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fbe:	f7fd f8bb 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 8007fc2:	61f8      	str	r0, [r7, #28]
        break;
 8007fc4:	e009      	b.n	8007fda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fca:	61fb      	str	r3, [r7, #28]
        break;
 8007fcc:	e005      	b.n	8007fda <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007fd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 80fb 	beq.w	80081d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	4413      	add	r3, r2
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d305      	bcc.n	8007ffe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d903      	bls.n	8008006 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008004:	e0e8      	b.n	80081d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	2200      	movs	r2, #0
 800800a:	461c      	mov	r4, r3
 800800c:	4615      	mov	r5, r2
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	022b      	lsls	r3, r5, #8
 8008018:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800801c:	0222      	lsls	r2, r4, #8
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	6849      	ldr	r1, [r1, #4]
 8008022:	0849      	lsrs	r1, r1, #1
 8008024:	2000      	movs	r0, #0
 8008026:	4688      	mov	r8, r1
 8008028:	4681      	mov	r9, r0
 800802a:	eb12 0a08 	adds.w	sl, r2, r8
 800802e:	eb43 0b09 	adc.w	fp, r3, r9
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	603b      	str	r3, [r7, #0]
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008040:	4650      	mov	r0, sl
 8008042:	4659      	mov	r1, fp
 8008044:	f7f8 fe20 	bl	8000c88 <__aeabi_uldivmod>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4613      	mov	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008056:	d308      	bcc.n	800806a <UART_SetConfig+0x3de>
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800805e:	d204      	bcs.n	800806a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	60da      	str	r2, [r3, #12]
 8008068:	e0b6      	b.n	80081d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008070:	e0b2      	b.n	80081d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800807a:	d15e      	bne.n	800813a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800807c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008080:	2b08      	cmp	r3, #8
 8008082:	d828      	bhi.n	80080d6 <UART_SetConfig+0x44a>
 8008084:	a201      	add	r2, pc, #4	@ (adr r2, 800808c <UART_SetConfig+0x400>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	080080b1 	.word	0x080080b1
 8008090:	080080b9 	.word	0x080080b9
 8008094:	080080c1 	.word	0x080080c1
 8008098:	080080d7 	.word	0x080080d7
 800809c:	080080c7 	.word	0x080080c7
 80080a0:	080080d7 	.word	0x080080d7
 80080a4:	080080d7 	.word	0x080080d7
 80080a8:	080080d7 	.word	0x080080d7
 80080ac:	080080cf 	.word	0x080080cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080b0:	f7fd f8da 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 80080b4:	61f8      	str	r0, [r7, #28]
        break;
 80080b6:	e014      	b.n	80080e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080b8:	f7fd f8ec 	bl	8005294 <HAL_RCC_GetPCLK2Freq>
 80080bc:	61f8      	str	r0, [r7, #28]
        break;
 80080be:	e010      	b.n	80080e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080c0:	4b4d      	ldr	r3, [pc, #308]	@ (80081f8 <UART_SetConfig+0x56c>)
 80080c2:	61fb      	str	r3, [r7, #28]
        break;
 80080c4:	e00d      	b.n	80080e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080c6:	f7fd f837 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 80080ca:	61f8      	str	r0, [r7, #28]
        break;
 80080cc:	e009      	b.n	80080e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080d2:	61fb      	str	r3, [r7, #28]
        break;
 80080d4:	e005      	b.n	80080e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80080e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d077      	beq.n	80081d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	005a      	lsls	r2, r3, #1
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	085b      	lsrs	r3, r3, #1
 80080f2:	441a      	add	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b0f      	cmp	r3, #15
 8008102:	d916      	bls.n	8008132 <UART_SetConfig+0x4a6>
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800810a:	d212      	bcs.n	8008132 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	b29b      	uxth	r3, r3
 8008110:	f023 030f 	bic.w	r3, r3, #15
 8008114:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	085b      	lsrs	r3, r3, #1
 800811a:	b29b      	uxth	r3, r3
 800811c:	f003 0307 	and.w	r3, r3, #7
 8008120:	b29a      	uxth	r2, r3
 8008122:	8afb      	ldrh	r3, [r7, #22]
 8008124:	4313      	orrs	r3, r2
 8008126:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	8afa      	ldrh	r2, [r7, #22]
 800812e:	60da      	str	r2, [r3, #12]
 8008130:	e052      	b.n	80081d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008138:	e04e      	b.n	80081d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800813a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800813e:	2b08      	cmp	r3, #8
 8008140:	d827      	bhi.n	8008192 <UART_SetConfig+0x506>
 8008142:	a201      	add	r2, pc, #4	@ (adr r2, 8008148 <UART_SetConfig+0x4bc>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	0800816d 	.word	0x0800816d
 800814c:	08008175 	.word	0x08008175
 8008150:	0800817d 	.word	0x0800817d
 8008154:	08008193 	.word	0x08008193
 8008158:	08008183 	.word	0x08008183
 800815c:	08008193 	.word	0x08008193
 8008160:	08008193 	.word	0x08008193
 8008164:	08008193 	.word	0x08008193
 8008168:	0800818b 	.word	0x0800818b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800816c:	f7fd f87c 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 8008170:	61f8      	str	r0, [r7, #28]
        break;
 8008172:	e014      	b.n	800819e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008174:	f7fd f88e 	bl	8005294 <HAL_RCC_GetPCLK2Freq>
 8008178:	61f8      	str	r0, [r7, #28]
        break;
 800817a:	e010      	b.n	800819e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800817c:	4b1e      	ldr	r3, [pc, #120]	@ (80081f8 <UART_SetConfig+0x56c>)
 800817e:	61fb      	str	r3, [r7, #28]
        break;
 8008180:	e00d      	b.n	800819e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008182:	f7fc ffd9 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 8008186:	61f8      	str	r0, [r7, #28]
        break;
 8008188:	e009      	b.n	800819e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800818e:	61fb      	str	r3, [r7, #28]
        break;
 8008190:	e005      	b.n	800819e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800819c:	bf00      	nop
    }

    if (pclk != 0U)
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d019      	beq.n	80081d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	085a      	lsrs	r2, r3, #1
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	441a      	add	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	2b0f      	cmp	r3, #15
 80081bc:	d909      	bls.n	80081d2 <UART_SetConfig+0x546>
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081c4:	d205      	bcs.n	80081d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60da      	str	r2, [r3, #12]
 80081d0:	e002      	b.n	80081d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80081e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3728      	adds	r7, #40	@ 0x28
 80081ec:	46bd      	mov	sp, r7
 80081ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081f2:	bf00      	nop
 80081f4:	40008000 	.word	0x40008000
 80081f8:	00f42400 	.word	0x00f42400

080081fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008208:	f003 0308 	and.w	r3, r3, #8
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00a      	beq.n	800826a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00a      	beq.n	80082ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01a      	beq.n	8008312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082fa:	d10a      	bne.n	8008312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	605a      	str	r2, [r3, #4]
  }
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b098      	sub	sp, #96	@ 0x60
 8008344:	af02      	add	r7, sp, #8
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008350:	f7fa fa00 	bl	8002754 <HAL_GetTick>
 8008354:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0308 	and.w	r3, r3, #8
 8008360:	2b08      	cmp	r3, #8
 8008362:	d12e      	bne.n	80083c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008364:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800836c:	2200      	movs	r2, #0
 800836e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f88c 	bl	8008490 <UART_WaitOnFlagUntilTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d021      	beq.n	80083c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008392:	653b      	str	r3, [r7, #80]	@ 0x50
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800839c:	647b      	str	r3, [r7, #68]	@ 0x44
 800839e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e6      	bne.n	800837e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e062      	b.n	8008488 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d149      	bne.n	8008464 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083d8:	2200      	movs	r2, #0
 80083da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f856 	bl	8008490 <UART_WaitOnFlagUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d03c      	beq.n	8008464 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	623b      	str	r3, [r7, #32]
   return(result);
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008408:	633b      	str	r3, [r7, #48]	@ 0x30
 800840a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800840e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e6      	bne.n	80083ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	60fb      	str	r3, [r7, #12]
   return(result);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0301 	bic.w	r3, r3, #1
 8008432:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800843c:	61fa      	str	r2, [r7, #28]
 800843e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	69b9      	ldr	r1, [r7, #24]
 8008442:	69fa      	ldr	r2, [r7, #28]
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	617b      	str	r3, [r7, #20]
   return(result);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e5      	bne.n	800841c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2220      	movs	r2, #32
 8008454:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e011      	b.n	8008488 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2220      	movs	r2, #32
 800846e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3758      	adds	r7, #88	@ 0x58
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	603b      	str	r3, [r7, #0]
 800849c:	4613      	mov	r3, r2
 800849e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a0:	e049      	b.n	8008536 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a8:	d045      	beq.n	8008536 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084aa:	f7fa f953 	bl	8002754 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d302      	bcc.n	80084c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e048      	b.n	8008556 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d031      	beq.n	8008536 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	f003 0308 	and.w	r3, r3, #8
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d110      	bne.n	8008502 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2208      	movs	r2, #8
 80084e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 f8ff 	bl	80086ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2208      	movs	r2, #8
 80084f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e029      	b.n	8008556 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800850c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008510:	d111      	bne.n	8008536 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800851a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f8e5 	bl	80086ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2220      	movs	r2, #32
 8008526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e00f      	b.n	8008556 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69da      	ldr	r2, [r3, #28]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4013      	ands	r3, r2
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	429a      	cmp	r2, r3
 8008544:	bf0c      	ite	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	2300      	movne	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	429a      	cmp	r2, r3
 8008552:	d0a6      	beq.n	80084a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008560:	b480      	push	{r7}
 8008562:	b097      	sub	sp, #92	@ 0x5c
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	4613      	mov	r3, r2
 800856c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	88fa      	ldrh	r2, [r7, #6]
 8008578:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	88fa      	ldrh	r2, [r7, #6]
 8008580:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008592:	d10e      	bne.n	80085b2 <UART_Start_Receive_IT+0x52>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d105      	bne.n	80085a8 <UART_Start_Receive_IT+0x48>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80085a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085a6:	e02d      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	22ff      	movs	r2, #255	@ 0xff
 80085ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085b0:	e028      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10d      	bne.n	80085d6 <UART_Start_Receive_IT+0x76>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d104      	bne.n	80085cc <UART_Start_Receive_IT+0x6c>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	22ff      	movs	r2, #255	@ 0xff
 80085c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085ca:	e01b      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	227f      	movs	r2, #127	@ 0x7f
 80085d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085d4:	e016      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085de:	d10d      	bne.n	80085fc <UART_Start_Receive_IT+0x9c>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d104      	bne.n	80085f2 <UART_Start_Receive_IT+0x92>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	227f      	movs	r2, #127	@ 0x7f
 80085ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085f0:	e008      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	223f      	movs	r2, #63	@ 0x3f
 80085f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085fa:	e003      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2222      	movs	r2, #34	@ 0x22
 8008610:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3308      	adds	r3, #8
 800861a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	f043 0301 	orr.w	r3, r3, #1
 800862a:	657b      	str	r3, [r7, #84]	@ 0x54
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3308      	adds	r3, #8
 8008632:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008634:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008636:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800863a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e5      	bne.n	8008614 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008650:	d107      	bne.n	8008662 <UART_Start_Receive_IT+0x102>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d103      	bne.n	8008662 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4a21      	ldr	r2, [pc, #132]	@ (80086e4 <UART_Start_Receive_IT+0x184>)
 800865e:	669a      	str	r2, [r3, #104]	@ 0x68
 8008660:	e002      	b.n	8008668 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4a20      	ldr	r2, [pc, #128]	@ (80086e8 <UART_Start_Receive_IT+0x188>)
 8008666:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d019      	beq.n	80086a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800868e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008690:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e6      	bne.n	8008670 <UART_Start_Receive_IT+0x110>
 80086a2:	e018      	b.n	80086d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	613b      	str	r3, [r7, #16]
   return(result);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f043 0320 	orr.w	r3, r3, #32
 80086b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086c2:	623b      	str	r3, [r7, #32]
 80086c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	69f9      	ldr	r1, [r7, #28]
 80086c8:	6a3a      	ldr	r2, [r7, #32]
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e6      	bne.n	80086a4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	375c      	adds	r7, #92	@ 0x5c
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	080089f1 	.word	0x080089f1
 80086e8:	08008835 	.word	0x08008835

080086ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b095      	sub	sp, #84	@ 0x54
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008712:	643b      	str	r3, [r7, #64]	@ 0x40
 8008714:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008718:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e6      	bne.n	80086f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3308      	adds	r3, #8
 800872c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	61fb      	str	r3, [r7, #28]
   return(result);
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	f023 0301 	bic.w	r3, r3, #1
 800873c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3308      	adds	r3, #8
 8008744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800874c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e5      	bne.n	8008726 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800875e:	2b01      	cmp	r3, #1
 8008760:	d118      	bne.n	8008794 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f023 0310 	bic.w	r3, r3, #16
 8008776:	647b      	str	r3, [r7, #68]	@ 0x44
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008780:	61bb      	str	r3, [r7, #24]
 8008782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6979      	ldr	r1, [r7, #20]
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	613b      	str	r3, [r7, #16]
   return(result);
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e6      	bne.n	8008762 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80087a8:	bf00      	nop
 80087aa:	3754      	adds	r7, #84	@ 0x54
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff fa44 	bl	8007c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b088      	sub	sp, #32
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087fc:	61fb      	str	r3, [r7, #28]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	61bb      	str	r3, [r7, #24]
 8008808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880a:	6979      	ldr	r1, [r7, #20]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	e841 2300 	strex	r3, r2, [r1]
 8008812:	613b      	str	r3, [r7, #16]
   return(result);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1e6      	bne.n	80087e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2220      	movs	r2, #32
 800881e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff fa10 	bl	8007c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800882c:	bf00      	nop
 800882e:	3720      	adds	r7, #32
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b09c      	sub	sp, #112	@ 0x70
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008842:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800884c:	2b22      	cmp	r3, #34	@ 0x22
 800884e:	f040 80be 	bne.w	80089ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008858:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800885c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008860:	b2d9      	uxtb	r1, r3
 8008862:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008866:	b2da      	uxtb	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800886c:	400a      	ands	r2, r1
 800886e:	b2d2      	uxtb	r2, r2
 8008870:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008882:	b29b      	uxth	r3, r3
 8008884:	3b01      	subs	r3, #1
 8008886:	b29a      	uxth	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008894:	b29b      	uxth	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	f040 80a3 	bne.w	80089e2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088c2:	e841 2300 	strex	r3, r2, [r1]
 80088c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1e6      	bne.n	800889c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3308      	adds	r3, #8
 80088d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e0:	f023 0301 	bic.w	r3, r3, #1
 80088e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3308      	adds	r3, #8
 80088ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80088ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80088f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e5      	bne.n	80088ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2220      	movs	r2, #32
 8008906:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a34      	ldr	r2, [pc, #208]	@ (80089ec <UART_RxISR_8BIT+0x1b8>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d01f      	beq.n	8008960 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d018      	beq.n	8008960 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	623b      	str	r3, [r7, #32]
   return(result);
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008942:	663b      	str	r3, [r7, #96]	@ 0x60
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800894c:	633b      	str	r3, [r7, #48]	@ 0x30
 800894e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e6      	bne.n	800892e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008964:	2b01      	cmp	r3, #1
 8008966:	d12e      	bne.n	80089c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	e853 3f00 	ldrex	r3, [r3]
 800897a:	60fb      	str	r3, [r7, #12]
   return(result);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 0310 	bic.w	r3, r3, #16
 8008982:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800898c:	61fb      	str	r3, [r7, #28]
 800898e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	69b9      	ldr	r1, [r7, #24]
 8008992:	69fa      	ldr	r2, [r7, #28]
 8008994:	e841 2300 	strex	r3, r2, [r1]
 8008998:	617b      	str	r3, [r7, #20]
   return(result);
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e6      	bne.n	800896e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	f003 0310 	and.w	r3, r3, #16
 80089aa:	2b10      	cmp	r3, #16
 80089ac:	d103      	bne.n	80089b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2210      	movs	r2, #16
 80089b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff f958 	bl	8007c74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089c4:	e00d      	b.n	80089e2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7f8 fec0 	bl	800174c <HAL_UART_RxCpltCallback>
}
 80089cc:	e009      	b.n	80089e2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	8b1b      	ldrh	r3, [r3, #24]
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f042 0208 	orr.w	r2, r2, #8
 80089de:	b292      	uxth	r2, r2
 80089e0:	831a      	strh	r2, [r3, #24]
}
 80089e2:	bf00      	nop
 80089e4:	3770      	adds	r7, #112	@ 0x70
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	40008000 	.word	0x40008000

080089f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b09c      	sub	sp, #112	@ 0x70
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a08:	2b22      	cmp	r3, #34	@ 0x22
 8008a0a:	f040 80be 	bne.w	8008b8a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008a14:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a1e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a26:	4013      	ands	r3, r2
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a32:	1c9a      	adds	r2, r3, #2
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	3b01      	subs	r3, #1
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f040 80a3 	bne.w	8008b9e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a76:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a78:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e6      	bne.n	8008a58 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a94:	e853 3f00 	ldrex	r3, [r3]
 8008a98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	f023 0301 	bic.w	r3, r3, #1
 8008aa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008aaa:	643a      	str	r2, [r7, #64]	@ 0x40
 8008aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ab0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e5      	bne.n	8008a8a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a34      	ldr	r2, [pc, #208]	@ (8008ba8 <UART_RxISR_16BIT+0x1b8>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d01f      	beq.n	8008b1c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d018      	beq.n	8008b1c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b0a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e6      	bne.n	8008aea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d12e      	bne.n	8008b82 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f023 0310 	bic.w	r3, r3, #16
 8008b3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b48:	61bb      	str	r3, [r7, #24]
 8008b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6979      	ldr	r1, [r7, #20]
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	613b      	str	r3, [r7, #16]
   return(result);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e6      	bne.n	8008b2a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	f003 0310 	and.w	r3, r3, #16
 8008b66:	2b10      	cmp	r3, #16
 8008b68:	d103      	bne.n	8008b72 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2210      	movs	r2, #16
 8008b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff f87a 	bl	8007c74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b80:	e00d      	b.n	8008b9e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7f8 fde2 	bl	800174c <HAL_UART_RxCpltCallback>
}
 8008b88:	e009      	b.n	8008b9e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	8b1b      	ldrh	r3, [r3, #24]
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f042 0208 	orr.w	r2, r2, #8
 8008b9a:	b292      	uxth	r2, r2
 8008b9c:	831a      	strh	r2, [r3, #24]
}
 8008b9e:	bf00      	nop
 8008ba0:	3770      	adds	r7, #112	@ 0x70
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40008000 	.word	0x40008000

08008bac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <__cvt>:
 8008bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	ec57 6b10 	vmov	r6, r7, d0
 8008bc8:	2f00      	cmp	r7, #0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	4619      	mov	r1, r3
 8008bce:	463b      	mov	r3, r7
 8008bd0:	bfbb      	ittet	lt
 8008bd2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008bd6:	461f      	movlt	r7, r3
 8008bd8:	2300      	movge	r3, #0
 8008bda:	232d      	movlt	r3, #45	@ 0x2d
 8008bdc:	700b      	strb	r3, [r1, #0]
 8008bde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008be0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008be4:	4691      	mov	r9, r2
 8008be6:	f023 0820 	bic.w	r8, r3, #32
 8008bea:	bfbc      	itt	lt
 8008bec:	4632      	movlt	r2, r6
 8008bee:	4616      	movlt	r6, r2
 8008bf0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008bf4:	d005      	beq.n	8008c02 <__cvt+0x42>
 8008bf6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008bfa:	d100      	bne.n	8008bfe <__cvt+0x3e>
 8008bfc:	3401      	adds	r4, #1
 8008bfe:	2102      	movs	r1, #2
 8008c00:	e000      	b.n	8008c04 <__cvt+0x44>
 8008c02:	2103      	movs	r1, #3
 8008c04:	ab03      	add	r3, sp, #12
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	ab02      	add	r3, sp, #8
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	ec47 6b10 	vmov	d0, r6, r7
 8008c10:	4653      	mov	r3, sl
 8008c12:	4622      	mov	r2, r4
 8008c14:	f001 f874 	bl	8009d00 <_dtoa_r>
 8008c18:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	d119      	bne.n	8008c54 <__cvt+0x94>
 8008c20:	f019 0f01 	tst.w	r9, #1
 8008c24:	d00e      	beq.n	8008c44 <__cvt+0x84>
 8008c26:	eb00 0904 	add.w	r9, r0, r4
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4630      	mov	r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	f7f7 ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c36:	b108      	cbz	r0, 8008c3c <__cvt+0x7c>
 8008c38:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c3c:	2230      	movs	r2, #48	@ 0x30
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	454b      	cmp	r3, r9
 8008c42:	d31e      	bcc.n	8008c82 <__cvt+0xc2>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c48:	1b5b      	subs	r3, r3, r5
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	b004      	add	sp, #16
 8008c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c58:	eb00 0904 	add.w	r9, r0, r4
 8008c5c:	d1e5      	bne.n	8008c2a <__cvt+0x6a>
 8008c5e:	7803      	ldrb	r3, [r0, #0]
 8008c60:	2b30      	cmp	r3, #48	@ 0x30
 8008c62:	d10a      	bne.n	8008c7a <__cvt+0xba>
 8008c64:	2200      	movs	r2, #0
 8008c66:	2300      	movs	r3, #0
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7f7 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c70:	b918      	cbnz	r0, 8008c7a <__cvt+0xba>
 8008c72:	f1c4 0401 	rsb	r4, r4, #1
 8008c76:	f8ca 4000 	str.w	r4, [sl]
 8008c7a:	f8da 3000 	ldr.w	r3, [sl]
 8008c7e:	4499      	add	r9, r3
 8008c80:	e7d3      	b.n	8008c2a <__cvt+0x6a>
 8008c82:	1c59      	adds	r1, r3, #1
 8008c84:	9103      	str	r1, [sp, #12]
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	e7d9      	b.n	8008c3e <__cvt+0x7e>

08008c8a <__exponent>:
 8008c8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	bfba      	itte	lt
 8008c90:	4249      	neglt	r1, r1
 8008c92:	232d      	movlt	r3, #45	@ 0x2d
 8008c94:	232b      	movge	r3, #43	@ 0x2b
 8008c96:	2909      	cmp	r1, #9
 8008c98:	7002      	strb	r2, [r0, #0]
 8008c9a:	7043      	strb	r3, [r0, #1]
 8008c9c:	dd29      	ble.n	8008cf2 <__exponent+0x68>
 8008c9e:	f10d 0307 	add.w	r3, sp, #7
 8008ca2:	461d      	mov	r5, r3
 8008ca4:	270a      	movs	r7, #10
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	fbb1 f6f7 	udiv	r6, r1, r7
 8008cac:	fb07 1416 	mls	r4, r7, r6, r1
 8008cb0:	3430      	adds	r4, #48	@ 0x30
 8008cb2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	2c63      	cmp	r4, #99	@ 0x63
 8008cba:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	dcf1      	bgt.n	8008ca6 <__exponent+0x1c>
 8008cc2:	3130      	adds	r1, #48	@ 0x30
 8008cc4:	1e94      	subs	r4, r2, #2
 8008cc6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008cca:	1c41      	adds	r1, r0, #1
 8008ccc:	4623      	mov	r3, r4
 8008cce:	42ab      	cmp	r3, r5
 8008cd0:	d30a      	bcc.n	8008ce8 <__exponent+0x5e>
 8008cd2:	f10d 0309 	add.w	r3, sp, #9
 8008cd6:	1a9b      	subs	r3, r3, r2
 8008cd8:	42ac      	cmp	r4, r5
 8008cda:	bf88      	it	hi
 8008cdc:	2300      	movhi	r3, #0
 8008cde:	3302      	adds	r3, #2
 8008ce0:	4403      	add	r3, r0
 8008ce2:	1a18      	subs	r0, r3, r0
 8008ce4:	b003      	add	sp, #12
 8008ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008cec:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008cf0:	e7ed      	b.n	8008cce <__exponent+0x44>
 8008cf2:	2330      	movs	r3, #48	@ 0x30
 8008cf4:	3130      	adds	r1, #48	@ 0x30
 8008cf6:	7083      	strb	r3, [r0, #2]
 8008cf8:	70c1      	strb	r1, [r0, #3]
 8008cfa:	1d03      	adds	r3, r0, #4
 8008cfc:	e7f1      	b.n	8008ce2 <__exponent+0x58>
	...

08008d00 <_printf_float>:
 8008d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	b08d      	sub	sp, #52	@ 0x34
 8008d06:	460c      	mov	r4, r1
 8008d08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	461f      	mov	r7, r3
 8008d10:	4605      	mov	r5, r0
 8008d12:	f000 feef 	bl	8009af4 <_localeconv_r>
 8008d16:	6803      	ldr	r3, [r0, #0]
 8008d18:	9304      	str	r3, [sp, #16]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7f7 faa8 	bl	8000270 <strlen>
 8008d20:	2300      	movs	r3, #0
 8008d22:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d24:	f8d8 3000 	ldr.w	r3, [r8]
 8008d28:	9005      	str	r0, [sp, #20]
 8008d2a:	3307      	adds	r3, #7
 8008d2c:	f023 0307 	bic.w	r3, r3, #7
 8008d30:	f103 0208 	add.w	r2, r3, #8
 8008d34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d38:	f8d4 b000 	ldr.w	fp, [r4]
 8008d3c:	f8c8 2000 	str.w	r2, [r8]
 8008d40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d56:	4b9c      	ldr	r3, [pc, #624]	@ (8008fc8 <_printf_float+0x2c8>)
 8008d58:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5c:	f7f7 fee6 	bl	8000b2c <__aeabi_dcmpun>
 8008d60:	bb70      	cbnz	r0, 8008dc0 <_printf_float+0xc0>
 8008d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d66:	4b98      	ldr	r3, [pc, #608]	@ (8008fc8 <_printf_float+0x2c8>)
 8008d68:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6c:	f7f7 fec0 	bl	8000af0 <__aeabi_dcmple>
 8008d70:	bb30      	cbnz	r0, 8008dc0 <_printf_float+0xc0>
 8008d72:	2200      	movs	r2, #0
 8008d74:	2300      	movs	r3, #0
 8008d76:	4640      	mov	r0, r8
 8008d78:	4649      	mov	r1, r9
 8008d7a:	f7f7 feaf 	bl	8000adc <__aeabi_dcmplt>
 8008d7e:	b110      	cbz	r0, 8008d86 <_printf_float+0x86>
 8008d80:	232d      	movs	r3, #45	@ 0x2d
 8008d82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d86:	4a91      	ldr	r2, [pc, #580]	@ (8008fcc <_printf_float+0x2cc>)
 8008d88:	4b91      	ldr	r3, [pc, #580]	@ (8008fd0 <_printf_float+0x2d0>)
 8008d8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d8e:	bf94      	ite	ls
 8008d90:	4690      	movls	r8, r2
 8008d92:	4698      	movhi	r8, r3
 8008d94:	2303      	movs	r3, #3
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	f02b 0304 	bic.w	r3, fp, #4
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	f04f 0900 	mov.w	r9, #0
 8008da2:	9700      	str	r7, [sp, #0]
 8008da4:	4633      	mov	r3, r6
 8008da6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008da8:	4621      	mov	r1, r4
 8008daa:	4628      	mov	r0, r5
 8008dac:	f000 f9d2 	bl	8009154 <_printf_common>
 8008db0:	3001      	adds	r0, #1
 8008db2:	f040 808d 	bne.w	8008ed0 <_printf_float+0x1d0>
 8008db6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dba:	b00d      	add	sp, #52	@ 0x34
 8008dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc0:	4642      	mov	r2, r8
 8008dc2:	464b      	mov	r3, r9
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	f7f7 feb0 	bl	8000b2c <__aeabi_dcmpun>
 8008dcc:	b140      	cbz	r0, 8008de0 <_printf_float+0xe0>
 8008dce:	464b      	mov	r3, r9
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	bfbc      	itt	lt
 8008dd4:	232d      	movlt	r3, #45	@ 0x2d
 8008dd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008dda:	4a7e      	ldr	r2, [pc, #504]	@ (8008fd4 <_printf_float+0x2d4>)
 8008ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8008fd8 <_printf_float+0x2d8>)
 8008dde:	e7d4      	b.n	8008d8a <_printf_float+0x8a>
 8008de0:	6863      	ldr	r3, [r4, #4]
 8008de2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008de6:	9206      	str	r2, [sp, #24]
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	d13b      	bne.n	8008e64 <_printf_float+0x164>
 8008dec:	2306      	movs	r3, #6
 8008dee:	6063      	str	r3, [r4, #4]
 8008df0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008df4:	2300      	movs	r3, #0
 8008df6:	6022      	str	r2, [r4, #0]
 8008df8:	9303      	str	r3, [sp, #12]
 8008dfa:	ab0a      	add	r3, sp, #40	@ 0x28
 8008dfc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008e00:	ab09      	add	r3, sp, #36	@ 0x24
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	6861      	ldr	r1, [r4, #4]
 8008e06:	ec49 8b10 	vmov	d0, r8, r9
 8008e0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f7ff fed6 	bl	8008bc0 <__cvt>
 8008e14:	9b06      	ldr	r3, [sp, #24]
 8008e16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e18:	2b47      	cmp	r3, #71	@ 0x47
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	d129      	bne.n	8008e72 <_printf_float+0x172>
 8008e1e:	1cc8      	adds	r0, r1, #3
 8008e20:	db02      	blt.n	8008e28 <_printf_float+0x128>
 8008e22:	6863      	ldr	r3, [r4, #4]
 8008e24:	4299      	cmp	r1, r3
 8008e26:	dd41      	ble.n	8008eac <_printf_float+0x1ac>
 8008e28:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e2c:	fa5f fa8a 	uxtb.w	sl, sl
 8008e30:	3901      	subs	r1, #1
 8008e32:	4652      	mov	r2, sl
 8008e34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e38:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e3a:	f7ff ff26 	bl	8008c8a <__exponent>
 8008e3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e40:	1813      	adds	r3, r2, r0
 8008e42:	2a01      	cmp	r2, #1
 8008e44:	4681      	mov	r9, r0
 8008e46:	6123      	str	r3, [r4, #16]
 8008e48:	dc02      	bgt.n	8008e50 <_printf_float+0x150>
 8008e4a:	6822      	ldr	r2, [r4, #0]
 8008e4c:	07d2      	lsls	r2, r2, #31
 8008e4e:	d501      	bpl.n	8008e54 <_printf_float+0x154>
 8008e50:	3301      	adds	r3, #1
 8008e52:	6123      	str	r3, [r4, #16]
 8008e54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0a2      	beq.n	8008da2 <_printf_float+0xa2>
 8008e5c:	232d      	movs	r3, #45	@ 0x2d
 8008e5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e62:	e79e      	b.n	8008da2 <_printf_float+0xa2>
 8008e64:	9a06      	ldr	r2, [sp, #24]
 8008e66:	2a47      	cmp	r2, #71	@ 0x47
 8008e68:	d1c2      	bne.n	8008df0 <_printf_float+0xf0>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1c0      	bne.n	8008df0 <_printf_float+0xf0>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e7bd      	b.n	8008dee <_printf_float+0xee>
 8008e72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e76:	d9db      	bls.n	8008e30 <_printf_float+0x130>
 8008e78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e7c:	d118      	bne.n	8008eb0 <_printf_float+0x1b0>
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	6863      	ldr	r3, [r4, #4]
 8008e82:	dd0b      	ble.n	8008e9c <_printf_float+0x19c>
 8008e84:	6121      	str	r1, [r4, #16]
 8008e86:	b913      	cbnz	r3, 8008e8e <_printf_float+0x18e>
 8008e88:	6822      	ldr	r2, [r4, #0]
 8008e8a:	07d0      	lsls	r0, r2, #31
 8008e8c:	d502      	bpl.n	8008e94 <_printf_float+0x194>
 8008e8e:	3301      	adds	r3, #1
 8008e90:	440b      	add	r3, r1
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e96:	f04f 0900 	mov.w	r9, #0
 8008e9a:	e7db      	b.n	8008e54 <_printf_float+0x154>
 8008e9c:	b913      	cbnz	r3, 8008ea4 <_printf_float+0x1a4>
 8008e9e:	6822      	ldr	r2, [r4, #0]
 8008ea0:	07d2      	lsls	r2, r2, #31
 8008ea2:	d501      	bpl.n	8008ea8 <_printf_float+0x1a8>
 8008ea4:	3302      	adds	r3, #2
 8008ea6:	e7f4      	b.n	8008e92 <_printf_float+0x192>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e7f2      	b.n	8008e92 <_printf_float+0x192>
 8008eac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008eb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eb2:	4299      	cmp	r1, r3
 8008eb4:	db05      	blt.n	8008ec2 <_printf_float+0x1c2>
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	6121      	str	r1, [r4, #16]
 8008eba:	07d8      	lsls	r0, r3, #31
 8008ebc:	d5ea      	bpl.n	8008e94 <_printf_float+0x194>
 8008ebe:	1c4b      	adds	r3, r1, #1
 8008ec0:	e7e7      	b.n	8008e92 <_printf_float+0x192>
 8008ec2:	2900      	cmp	r1, #0
 8008ec4:	bfd4      	ite	le
 8008ec6:	f1c1 0202 	rsble	r2, r1, #2
 8008eca:	2201      	movgt	r2, #1
 8008ecc:	4413      	add	r3, r2
 8008ece:	e7e0      	b.n	8008e92 <_printf_float+0x192>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	055a      	lsls	r2, r3, #21
 8008ed4:	d407      	bmi.n	8008ee6 <_printf_float+0x1e6>
 8008ed6:	6923      	ldr	r3, [r4, #16]
 8008ed8:	4642      	mov	r2, r8
 8008eda:	4631      	mov	r1, r6
 8008edc:	4628      	mov	r0, r5
 8008ede:	47b8      	blx	r7
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d12b      	bne.n	8008f3c <_printf_float+0x23c>
 8008ee4:	e767      	b.n	8008db6 <_printf_float+0xb6>
 8008ee6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008eea:	f240 80dd 	bls.w	80090a8 <_printf_float+0x3a8>
 8008eee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f7f7 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d033      	beq.n	8008f66 <_printf_float+0x266>
 8008efe:	4a37      	ldr	r2, [pc, #220]	@ (8008fdc <_printf_float+0x2dc>)
 8008f00:	2301      	movs	r3, #1
 8008f02:	4631      	mov	r1, r6
 8008f04:	4628      	mov	r0, r5
 8008f06:	47b8      	blx	r7
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f43f af54 	beq.w	8008db6 <_printf_float+0xb6>
 8008f0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008f12:	4543      	cmp	r3, r8
 8008f14:	db02      	blt.n	8008f1c <_printf_float+0x21c>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	07d8      	lsls	r0, r3, #31
 8008f1a:	d50f      	bpl.n	8008f3c <_printf_float+0x23c>
 8008f1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f20:	4631      	mov	r1, r6
 8008f22:	4628      	mov	r0, r5
 8008f24:	47b8      	blx	r7
 8008f26:	3001      	adds	r0, #1
 8008f28:	f43f af45 	beq.w	8008db6 <_printf_float+0xb6>
 8008f2c:	f04f 0900 	mov.w	r9, #0
 8008f30:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f34:	f104 0a1a 	add.w	sl, r4, #26
 8008f38:	45c8      	cmp	r8, r9
 8008f3a:	dc09      	bgt.n	8008f50 <_printf_float+0x250>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	079b      	lsls	r3, r3, #30
 8008f40:	f100 8103 	bmi.w	800914a <_printf_float+0x44a>
 8008f44:	68e0      	ldr	r0, [r4, #12]
 8008f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f48:	4298      	cmp	r0, r3
 8008f4a:	bfb8      	it	lt
 8008f4c:	4618      	movlt	r0, r3
 8008f4e:	e734      	b.n	8008dba <_printf_float+0xba>
 8008f50:	2301      	movs	r3, #1
 8008f52:	4652      	mov	r2, sl
 8008f54:	4631      	mov	r1, r6
 8008f56:	4628      	mov	r0, r5
 8008f58:	47b8      	blx	r7
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	f43f af2b 	beq.w	8008db6 <_printf_float+0xb6>
 8008f60:	f109 0901 	add.w	r9, r9, #1
 8008f64:	e7e8      	b.n	8008f38 <_printf_float+0x238>
 8008f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dc39      	bgt.n	8008fe0 <_printf_float+0x2e0>
 8008f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8008fdc <_printf_float+0x2dc>)
 8008f6e:	2301      	movs	r3, #1
 8008f70:	4631      	mov	r1, r6
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b8      	blx	r7
 8008f76:	3001      	adds	r0, #1
 8008f78:	f43f af1d 	beq.w	8008db6 <_printf_float+0xb6>
 8008f7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008f80:	ea59 0303 	orrs.w	r3, r9, r3
 8008f84:	d102      	bne.n	8008f8c <_printf_float+0x28c>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	07d9      	lsls	r1, r3, #31
 8008f8a:	d5d7      	bpl.n	8008f3c <_printf_float+0x23c>
 8008f8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	47b8      	blx	r7
 8008f96:	3001      	adds	r0, #1
 8008f98:	f43f af0d 	beq.w	8008db6 <_printf_float+0xb6>
 8008f9c:	f04f 0a00 	mov.w	sl, #0
 8008fa0:	f104 0b1a 	add.w	fp, r4, #26
 8008fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa6:	425b      	negs	r3, r3
 8008fa8:	4553      	cmp	r3, sl
 8008faa:	dc01      	bgt.n	8008fb0 <_printf_float+0x2b0>
 8008fac:	464b      	mov	r3, r9
 8008fae:	e793      	b.n	8008ed8 <_printf_float+0x1d8>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	465a      	mov	r2, fp
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b8      	blx	r7
 8008fba:	3001      	adds	r0, #1
 8008fbc:	f43f aefb 	beq.w	8008db6 <_printf_float+0xb6>
 8008fc0:	f10a 0a01 	add.w	sl, sl, #1
 8008fc4:	e7ee      	b.n	8008fa4 <_printf_float+0x2a4>
 8008fc6:	bf00      	nop
 8008fc8:	7fefffff 	.word	0x7fefffff
 8008fcc:	0800d2f0 	.word	0x0800d2f0
 8008fd0:	0800d2f4 	.word	0x0800d2f4
 8008fd4:	0800d2f8 	.word	0x0800d2f8
 8008fd8:	0800d2fc 	.word	0x0800d2fc
 8008fdc:	0800d300 	.word	0x0800d300
 8008fe0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fe2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fe6:	4553      	cmp	r3, sl
 8008fe8:	bfa8      	it	ge
 8008fea:	4653      	movge	r3, sl
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	4699      	mov	r9, r3
 8008ff0:	dc36      	bgt.n	8009060 <_printf_float+0x360>
 8008ff2:	f04f 0b00 	mov.w	fp, #0
 8008ff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ffa:	f104 021a 	add.w	r2, r4, #26
 8008ffe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009000:	9306      	str	r3, [sp, #24]
 8009002:	eba3 0309 	sub.w	r3, r3, r9
 8009006:	455b      	cmp	r3, fp
 8009008:	dc31      	bgt.n	800906e <_printf_float+0x36e>
 800900a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800900c:	459a      	cmp	sl, r3
 800900e:	dc3a      	bgt.n	8009086 <_printf_float+0x386>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	07da      	lsls	r2, r3, #31
 8009014:	d437      	bmi.n	8009086 <_printf_float+0x386>
 8009016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009018:	ebaa 0903 	sub.w	r9, sl, r3
 800901c:	9b06      	ldr	r3, [sp, #24]
 800901e:	ebaa 0303 	sub.w	r3, sl, r3
 8009022:	4599      	cmp	r9, r3
 8009024:	bfa8      	it	ge
 8009026:	4699      	movge	r9, r3
 8009028:	f1b9 0f00 	cmp.w	r9, #0
 800902c:	dc33      	bgt.n	8009096 <_printf_float+0x396>
 800902e:	f04f 0800 	mov.w	r8, #0
 8009032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009036:	f104 0b1a 	add.w	fp, r4, #26
 800903a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800903c:	ebaa 0303 	sub.w	r3, sl, r3
 8009040:	eba3 0309 	sub.w	r3, r3, r9
 8009044:	4543      	cmp	r3, r8
 8009046:	f77f af79 	ble.w	8008f3c <_printf_float+0x23c>
 800904a:	2301      	movs	r3, #1
 800904c:	465a      	mov	r2, fp
 800904e:	4631      	mov	r1, r6
 8009050:	4628      	mov	r0, r5
 8009052:	47b8      	blx	r7
 8009054:	3001      	adds	r0, #1
 8009056:	f43f aeae 	beq.w	8008db6 <_printf_float+0xb6>
 800905a:	f108 0801 	add.w	r8, r8, #1
 800905e:	e7ec      	b.n	800903a <_printf_float+0x33a>
 8009060:	4642      	mov	r2, r8
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	d1c2      	bne.n	8008ff2 <_printf_float+0x2f2>
 800906c:	e6a3      	b.n	8008db6 <_printf_float+0xb6>
 800906e:	2301      	movs	r3, #1
 8009070:	4631      	mov	r1, r6
 8009072:	4628      	mov	r0, r5
 8009074:	9206      	str	r2, [sp, #24]
 8009076:	47b8      	blx	r7
 8009078:	3001      	adds	r0, #1
 800907a:	f43f ae9c 	beq.w	8008db6 <_printf_float+0xb6>
 800907e:	9a06      	ldr	r2, [sp, #24]
 8009080:	f10b 0b01 	add.w	fp, fp, #1
 8009084:	e7bb      	b.n	8008ffe <_printf_float+0x2fe>
 8009086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800908a:	4631      	mov	r1, r6
 800908c:	4628      	mov	r0, r5
 800908e:	47b8      	blx	r7
 8009090:	3001      	adds	r0, #1
 8009092:	d1c0      	bne.n	8009016 <_printf_float+0x316>
 8009094:	e68f      	b.n	8008db6 <_printf_float+0xb6>
 8009096:	9a06      	ldr	r2, [sp, #24]
 8009098:	464b      	mov	r3, r9
 800909a:	4442      	add	r2, r8
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	47b8      	blx	r7
 80090a2:	3001      	adds	r0, #1
 80090a4:	d1c3      	bne.n	800902e <_printf_float+0x32e>
 80090a6:	e686      	b.n	8008db6 <_printf_float+0xb6>
 80090a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090ac:	f1ba 0f01 	cmp.w	sl, #1
 80090b0:	dc01      	bgt.n	80090b6 <_printf_float+0x3b6>
 80090b2:	07db      	lsls	r3, r3, #31
 80090b4:	d536      	bpl.n	8009124 <_printf_float+0x424>
 80090b6:	2301      	movs	r3, #1
 80090b8:	4642      	mov	r2, r8
 80090ba:	4631      	mov	r1, r6
 80090bc:	4628      	mov	r0, r5
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	f43f ae78 	beq.w	8008db6 <_printf_float+0xb6>
 80090c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ca:	4631      	mov	r1, r6
 80090cc:	4628      	mov	r0, r5
 80090ce:	47b8      	blx	r7
 80090d0:	3001      	adds	r0, #1
 80090d2:	f43f ae70 	beq.w	8008db6 <_printf_float+0xb6>
 80090d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090da:	2200      	movs	r2, #0
 80090dc:	2300      	movs	r3, #0
 80090de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090e2:	f7f7 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80090e6:	b9c0      	cbnz	r0, 800911a <_printf_float+0x41a>
 80090e8:	4653      	mov	r3, sl
 80090ea:	f108 0201 	add.w	r2, r8, #1
 80090ee:	4631      	mov	r1, r6
 80090f0:	4628      	mov	r0, r5
 80090f2:	47b8      	blx	r7
 80090f4:	3001      	adds	r0, #1
 80090f6:	d10c      	bne.n	8009112 <_printf_float+0x412>
 80090f8:	e65d      	b.n	8008db6 <_printf_float+0xb6>
 80090fa:	2301      	movs	r3, #1
 80090fc:	465a      	mov	r2, fp
 80090fe:	4631      	mov	r1, r6
 8009100:	4628      	mov	r0, r5
 8009102:	47b8      	blx	r7
 8009104:	3001      	adds	r0, #1
 8009106:	f43f ae56 	beq.w	8008db6 <_printf_float+0xb6>
 800910a:	f108 0801 	add.w	r8, r8, #1
 800910e:	45d0      	cmp	r8, sl
 8009110:	dbf3      	blt.n	80090fa <_printf_float+0x3fa>
 8009112:	464b      	mov	r3, r9
 8009114:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009118:	e6df      	b.n	8008eda <_printf_float+0x1da>
 800911a:	f04f 0800 	mov.w	r8, #0
 800911e:	f104 0b1a 	add.w	fp, r4, #26
 8009122:	e7f4      	b.n	800910e <_printf_float+0x40e>
 8009124:	2301      	movs	r3, #1
 8009126:	4642      	mov	r2, r8
 8009128:	e7e1      	b.n	80090ee <_printf_float+0x3ee>
 800912a:	2301      	movs	r3, #1
 800912c:	464a      	mov	r2, r9
 800912e:	4631      	mov	r1, r6
 8009130:	4628      	mov	r0, r5
 8009132:	47b8      	blx	r7
 8009134:	3001      	adds	r0, #1
 8009136:	f43f ae3e 	beq.w	8008db6 <_printf_float+0xb6>
 800913a:	f108 0801 	add.w	r8, r8, #1
 800913e:	68e3      	ldr	r3, [r4, #12]
 8009140:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009142:	1a5b      	subs	r3, r3, r1
 8009144:	4543      	cmp	r3, r8
 8009146:	dcf0      	bgt.n	800912a <_printf_float+0x42a>
 8009148:	e6fc      	b.n	8008f44 <_printf_float+0x244>
 800914a:	f04f 0800 	mov.w	r8, #0
 800914e:	f104 0919 	add.w	r9, r4, #25
 8009152:	e7f4      	b.n	800913e <_printf_float+0x43e>

08009154 <_printf_common>:
 8009154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009158:	4616      	mov	r6, r2
 800915a:	4698      	mov	r8, r3
 800915c:	688a      	ldr	r2, [r1, #8]
 800915e:	690b      	ldr	r3, [r1, #16]
 8009160:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009164:	4293      	cmp	r3, r2
 8009166:	bfb8      	it	lt
 8009168:	4613      	movlt	r3, r2
 800916a:	6033      	str	r3, [r6, #0]
 800916c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009170:	4607      	mov	r7, r0
 8009172:	460c      	mov	r4, r1
 8009174:	b10a      	cbz	r2, 800917a <_printf_common+0x26>
 8009176:	3301      	adds	r3, #1
 8009178:	6033      	str	r3, [r6, #0]
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	0699      	lsls	r1, r3, #26
 800917e:	bf42      	ittt	mi
 8009180:	6833      	ldrmi	r3, [r6, #0]
 8009182:	3302      	addmi	r3, #2
 8009184:	6033      	strmi	r3, [r6, #0]
 8009186:	6825      	ldr	r5, [r4, #0]
 8009188:	f015 0506 	ands.w	r5, r5, #6
 800918c:	d106      	bne.n	800919c <_printf_common+0x48>
 800918e:	f104 0a19 	add.w	sl, r4, #25
 8009192:	68e3      	ldr	r3, [r4, #12]
 8009194:	6832      	ldr	r2, [r6, #0]
 8009196:	1a9b      	subs	r3, r3, r2
 8009198:	42ab      	cmp	r3, r5
 800919a:	dc26      	bgt.n	80091ea <_printf_common+0x96>
 800919c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091a0:	6822      	ldr	r2, [r4, #0]
 80091a2:	3b00      	subs	r3, #0
 80091a4:	bf18      	it	ne
 80091a6:	2301      	movne	r3, #1
 80091a8:	0692      	lsls	r2, r2, #26
 80091aa:	d42b      	bmi.n	8009204 <_printf_common+0xb0>
 80091ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091b0:	4641      	mov	r1, r8
 80091b2:	4638      	mov	r0, r7
 80091b4:	47c8      	blx	r9
 80091b6:	3001      	adds	r0, #1
 80091b8:	d01e      	beq.n	80091f8 <_printf_common+0xa4>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	6922      	ldr	r2, [r4, #16]
 80091be:	f003 0306 	and.w	r3, r3, #6
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	bf02      	ittt	eq
 80091c6:	68e5      	ldreq	r5, [r4, #12]
 80091c8:	6833      	ldreq	r3, [r6, #0]
 80091ca:	1aed      	subeq	r5, r5, r3
 80091cc:	68a3      	ldr	r3, [r4, #8]
 80091ce:	bf0c      	ite	eq
 80091d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091d4:	2500      	movne	r5, #0
 80091d6:	4293      	cmp	r3, r2
 80091d8:	bfc4      	itt	gt
 80091da:	1a9b      	subgt	r3, r3, r2
 80091dc:	18ed      	addgt	r5, r5, r3
 80091de:	2600      	movs	r6, #0
 80091e0:	341a      	adds	r4, #26
 80091e2:	42b5      	cmp	r5, r6
 80091e4:	d11a      	bne.n	800921c <_printf_common+0xc8>
 80091e6:	2000      	movs	r0, #0
 80091e8:	e008      	b.n	80091fc <_printf_common+0xa8>
 80091ea:	2301      	movs	r3, #1
 80091ec:	4652      	mov	r2, sl
 80091ee:	4641      	mov	r1, r8
 80091f0:	4638      	mov	r0, r7
 80091f2:	47c8      	blx	r9
 80091f4:	3001      	adds	r0, #1
 80091f6:	d103      	bne.n	8009200 <_printf_common+0xac>
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009200:	3501      	adds	r5, #1
 8009202:	e7c6      	b.n	8009192 <_printf_common+0x3e>
 8009204:	18e1      	adds	r1, r4, r3
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	2030      	movs	r0, #48	@ 0x30
 800920a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800920e:	4422      	add	r2, r4
 8009210:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009214:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009218:	3302      	adds	r3, #2
 800921a:	e7c7      	b.n	80091ac <_printf_common+0x58>
 800921c:	2301      	movs	r3, #1
 800921e:	4622      	mov	r2, r4
 8009220:	4641      	mov	r1, r8
 8009222:	4638      	mov	r0, r7
 8009224:	47c8      	blx	r9
 8009226:	3001      	adds	r0, #1
 8009228:	d0e6      	beq.n	80091f8 <_printf_common+0xa4>
 800922a:	3601      	adds	r6, #1
 800922c:	e7d9      	b.n	80091e2 <_printf_common+0x8e>
	...

08009230 <_printf_i>:
 8009230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009234:	7e0f      	ldrb	r7, [r1, #24]
 8009236:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009238:	2f78      	cmp	r7, #120	@ 0x78
 800923a:	4691      	mov	r9, r2
 800923c:	4680      	mov	r8, r0
 800923e:	460c      	mov	r4, r1
 8009240:	469a      	mov	sl, r3
 8009242:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009246:	d807      	bhi.n	8009258 <_printf_i+0x28>
 8009248:	2f62      	cmp	r7, #98	@ 0x62
 800924a:	d80a      	bhi.n	8009262 <_printf_i+0x32>
 800924c:	2f00      	cmp	r7, #0
 800924e:	f000 80d2 	beq.w	80093f6 <_printf_i+0x1c6>
 8009252:	2f58      	cmp	r7, #88	@ 0x58
 8009254:	f000 80b9 	beq.w	80093ca <_printf_i+0x19a>
 8009258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800925c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009260:	e03a      	b.n	80092d8 <_printf_i+0xa8>
 8009262:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009266:	2b15      	cmp	r3, #21
 8009268:	d8f6      	bhi.n	8009258 <_printf_i+0x28>
 800926a:	a101      	add	r1, pc, #4	@ (adr r1, 8009270 <_printf_i+0x40>)
 800926c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009270:	080092c9 	.word	0x080092c9
 8009274:	080092dd 	.word	0x080092dd
 8009278:	08009259 	.word	0x08009259
 800927c:	08009259 	.word	0x08009259
 8009280:	08009259 	.word	0x08009259
 8009284:	08009259 	.word	0x08009259
 8009288:	080092dd 	.word	0x080092dd
 800928c:	08009259 	.word	0x08009259
 8009290:	08009259 	.word	0x08009259
 8009294:	08009259 	.word	0x08009259
 8009298:	08009259 	.word	0x08009259
 800929c:	080093dd 	.word	0x080093dd
 80092a0:	08009307 	.word	0x08009307
 80092a4:	08009397 	.word	0x08009397
 80092a8:	08009259 	.word	0x08009259
 80092ac:	08009259 	.word	0x08009259
 80092b0:	080093ff 	.word	0x080093ff
 80092b4:	08009259 	.word	0x08009259
 80092b8:	08009307 	.word	0x08009307
 80092bc:	08009259 	.word	0x08009259
 80092c0:	08009259 	.word	0x08009259
 80092c4:	0800939f 	.word	0x0800939f
 80092c8:	6833      	ldr	r3, [r6, #0]
 80092ca:	1d1a      	adds	r2, r3, #4
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6032      	str	r2, [r6, #0]
 80092d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092d8:	2301      	movs	r3, #1
 80092da:	e09d      	b.n	8009418 <_printf_i+0x1e8>
 80092dc:	6833      	ldr	r3, [r6, #0]
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	1d19      	adds	r1, r3, #4
 80092e2:	6031      	str	r1, [r6, #0]
 80092e4:	0606      	lsls	r6, r0, #24
 80092e6:	d501      	bpl.n	80092ec <_printf_i+0xbc>
 80092e8:	681d      	ldr	r5, [r3, #0]
 80092ea:	e003      	b.n	80092f4 <_printf_i+0xc4>
 80092ec:	0645      	lsls	r5, r0, #25
 80092ee:	d5fb      	bpl.n	80092e8 <_printf_i+0xb8>
 80092f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	da03      	bge.n	8009300 <_printf_i+0xd0>
 80092f8:	232d      	movs	r3, #45	@ 0x2d
 80092fa:	426d      	negs	r5, r5
 80092fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009300:	4859      	ldr	r0, [pc, #356]	@ (8009468 <_printf_i+0x238>)
 8009302:	230a      	movs	r3, #10
 8009304:	e011      	b.n	800932a <_printf_i+0xfa>
 8009306:	6821      	ldr	r1, [r4, #0]
 8009308:	6833      	ldr	r3, [r6, #0]
 800930a:	0608      	lsls	r0, r1, #24
 800930c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009310:	d402      	bmi.n	8009318 <_printf_i+0xe8>
 8009312:	0649      	lsls	r1, r1, #25
 8009314:	bf48      	it	mi
 8009316:	b2ad      	uxthmi	r5, r5
 8009318:	2f6f      	cmp	r7, #111	@ 0x6f
 800931a:	4853      	ldr	r0, [pc, #332]	@ (8009468 <_printf_i+0x238>)
 800931c:	6033      	str	r3, [r6, #0]
 800931e:	bf14      	ite	ne
 8009320:	230a      	movne	r3, #10
 8009322:	2308      	moveq	r3, #8
 8009324:	2100      	movs	r1, #0
 8009326:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800932a:	6866      	ldr	r6, [r4, #4]
 800932c:	60a6      	str	r6, [r4, #8]
 800932e:	2e00      	cmp	r6, #0
 8009330:	bfa2      	ittt	ge
 8009332:	6821      	ldrge	r1, [r4, #0]
 8009334:	f021 0104 	bicge.w	r1, r1, #4
 8009338:	6021      	strge	r1, [r4, #0]
 800933a:	b90d      	cbnz	r5, 8009340 <_printf_i+0x110>
 800933c:	2e00      	cmp	r6, #0
 800933e:	d04b      	beq.n	80093d8 <_printf_i+0x1a8>
 8009340:	4616      	mov	r6, r2
 8009342:	fbb5 f1f3 	udiv	r1, r5, r3
 8009346:	fb03 5711 	mls	r7, r3, r1, r5
 800934a:	5dc7      	ldrb	r7, [r0, r7]
 800934c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009350:	462f      	mov	r7, r5
 8009352:	42bb      	cmp	r3, r7
 8009354:	460d      	mov	r5, r1
 8009356:	d9f4      	bls.n	8009342 <_printf_i+0x112>
 8009358:	2b08      	cmp	r3, #8
 800935a:	d10b      	bne.n	8009374 <_printf_i+0x144>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	07df      	lsls	r7, r3, #31
 8009360:	d508      	bpl.n	8009374 <_printf_i+0x144>
 8009362:	6923      	ldr	r3, [r4, #16]
 8009364:	6861      	ldr	r1, [r4, #4]
 8009366:	4299      	cmp	r1, r3
 8009368:	bfde      	ittt	le
 800936a:	2330      	movle	r3, #48	@ 0x30
 800936c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009370:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009374:	1b92      	subs	r2, r2, r6
 8009376:	6122      	str	r2, [r4, #16]
 8009378:	f8cd a000 	str.w	sl, [sp]
 800937c:	464b      	mov	r3, r9
 800937e:	aa03      	add	r2, sp, #12
 8009380:	4621      	mov	r1, r4
 8009382:	4640      	mov	r0, r8
 8009384:	f7ff fee6 	bl	8009154 <_printf_common>
 8009388:	3001      	adds	r0, #1
 800938a:	d14a      	bne.n	8009422 <_printf_i+0x1f2>
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	b004      	add	sp, #16
 8009392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	f043 0320 	orr.w	r3, r3, #32
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	4833      	ldr	r0, [pc, #204]	@ (800946c <_printf_i+0x23c>)
 80093a0:	2778      	movs	r7, #120	@ 0x78
 80093a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	6831      	ldr	r1, [r6, #0]
 80093aa:	061f      	lsls	r7, r3, #24
 80093ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80093b0:	d402      	bmi.n	80093b8 <_printf_i+0x188>
 80093b2:	065f      	lsls	r7, r3, #25
 80093b4:	bf48      	it	mi
 80093b6:	b2ad      	uxthmi	r5, r5
 80093b8:	6031      	str	r1, [r6, #0]
 80093ba:	07d9      	lsls	r1, r3, #31
 80093bc:	bf44      	itt	mi
 80093be:	f043 0320 	orrmi.w	r3, r3, #32
 80093c2:	6023      	strmi	r3, [r4, #0]
 80093c4:	b11d      	cbz	r5, 80093ce <_printf_i+0x19e>
 80093c6:	2310      	movs	r3, #16
 80093c8:	e7ac      	b.n	8009324 <_printf_i+0xf4>
 80093ca:	4827      	ldr	r0, [pc, #156]	@ (8009468 <_printf_i+0x238>)
 80093cc:	e7e9      	b.n	80093a2 <_printf_i+0x172>
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	f023 0320 	bic.w	r3, r3, #32
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	e7f6      	b.n	80093c6 <_printf_i+0x196>
 80093d8:	4616      	mov	r6, r2
 80093da:	e7bd      	b.n	8009358 <_printf_i+0x128>
 80093dc:	6833      	ldr	r3, [r6, #0]
 80093de:	6825      	ldr	r5, [r4, #0]
 80093e0:	6961      	ldr	r1, [r4, #20]
 80093e2:	1d18      	adds	r0, r3, #4
 80093e4:	6030      	str	r0, [r6, #0]
 80093e6:	062e      	lsls	r6, r5, #24
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	d501      	bpl.n	80093f0 <_printf_i+0x1c0>
 80093ec:	6019      	str	r1, [r3, #0]
 80093ee:	e002      	b.n	80093f6 <_printf_i+0x1c6>
 80093f0:	0668      	lsls	r0, r5, #25
 80093f2:	d5fb      	bpl.n	80093ec <_printf_i+0x1bc>
 80093f4:	8019      	strh	r1, [r3, #0]
 80093f6:	2300      	movs	r3, #0
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	4616      	mov	r6, r2
 80093fc:	e7bc      	b.n	8009378 <_printf_i+0x148>
 80093fe:	6833      	ldr	r3, [r6, #0]
 8009400:	1d1a      	adds	r2, r3, #4
 8009402:	6032      	str	r2, [r6, #0]
 8009404:	681e      	ldr	r6, [r3, #0]
 8009406:	6862      	ldr	r2, [r4, #4]
 8009408:	2100      	movs	r1, #0
 800940a:	4630      	mov	r0, r6
 800940c:	f7f6 fee0 	bl	80001d0 <memchr>
 8009410:	b108      	cbz	r0, 8009416 <_printf_i+0x1e6>
 8009412:	1b80      	subs	r0, r0, r6
 8009414:	6060      	str	r0, [r4, #4]
 8009416:	6863      	ldr	r3, [r4, #4]
 8009418:	6123      	str	r3, [r4, #16]
 800941a:	2300      	movs	r3, #0
 800941c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009420:	e7aa      	b.n	8009378 <_printf_i+0x148>
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	4632      	mov	r2, r6
 8009426:	4649      	mov	r1, r9
 8009428:	4640      	mov	r0, r8
 800942a:	47d0      	blx	sl
 800942c:	3001      	adds	r0, #1
 800942e:	d0ad      	beq.n	800938c <_printf_i+0x15c>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	079b      	lsls	r3, r3, #30
 8009434:	d413      	bmi.n	800945e <_printf_i+0x22e>
 8009436:	68e0      	ldr	r0, [r4, #12]
 8009438:	9b03      	ldr	r3, [sp, #12]
 800943a:	4298      	cmp	r0, r3
 800943c:	bfb8      	it	lt
 800943e:	4618      	movlt	r0, r3
 8009440:	e7a6      	b.n	8009390 <_printf_i+0x160>
 8009442:	2301      	movs	r3, #1
 8009444:	4632      	mov	r2, r6
 8009446:	4649      	mov	r1, r9
 8009448:	4640      	mov	r0, r8
 800944a:	47d0      	blx	sl
 800944c:	3001      	adds	r0, #1
 800944e:	d09d      	beq.n	800938c <_printf_i+0x15c>
 8009450:	3501      	adds	r5, #1
 8009452:	68e3      	ldr	r3, [r4, #12]
 8009454:	9903      	ldr	r1, [sp, #12]
 8009456:	1a5b      	subs	r3, r3, r1
 8009458:	42ab      	cmp	r3, r5
 800945a:	dcf2      	bgt.n	8009442 <_printf_i+0x212>
 800945c:	e7eb      	b.n	8009436 <_printf_i+0x206>
 800945e:	2500      	movs	r5, #0
 8009460:	f104 0619 	add.w	r6, r4, #25
 8009464:	e7f5      	b.n	8009452 <_printf_i+0x222>
 8009466:	bf00      	nop
 8009468:	0800d302 	.word	0x0800d302
 800946c:	0800d313 	.word	0x0800d313

08009470 <_scanf_float>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	b087      	sub	sp, #28
 8009476:	4617      	mov	r7, r2
 8009478:	9303      	str	r3, [sp, #12]
 800947a:	688b      	ldr	r3, [r1, #8]
 800947c:	1e5a      	subs	r2, r3, #1
 800947e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009482:	bf81      	itttt	hi
 8009484:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009488:	eb03 0b05 	addhi.w	fp, r3, r5
 800948c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009490:	608b      	strhi	r3, [r1, #8]
 8009492:	680b      	ldr	r3, [r1, #0]
 8009494:	460a      	mov	r2, r1
 8009496:	f04f 0500 	mov.w	r5, #0
 800949a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800949e:	f842 3b1c 	str.w	r3, [r2], #28
 80094a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80094a6:	4680      	mov	r8, r0
 80094a8:	460c      	mov	r4, r1
 80094aa:	bf98      	it	ls
 80094ac:	f04f 0b00 	movls.w	fp, #0
 80094b0:	9201      	str	r2, [sp, #4]
 80094b2:	4616      	mov	r6, r2
 80094b4:	46aa      	mov	sl, r5
 80094b6:	46a9      	mov	r9, r5
 80094b8:	9502      	str	r5, [sp, #8]
 80094ba:	68a2      	ldr	r2, [r4, #8]
 80094bc:	b152      	cbz	r2, 80094d4 <_scanf_float+0x64>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	2b4e      	cmp	r3, #78	@ 0x4e
 80094c4:	d864      	bhi.n	8009590 <_scanf_float+0x120>
 80094c6:	2b40      	cmp	r3, #64	@ 0x40
 80094c8:	d83c      	bhi.n	8009544 <_scanf_float+0xd4>
 80094ca:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80094ce:	b2c8      	uxtb	r0, r1
 80094d0:	280e      	cmp	r0, #14
 80094d2:	d93a      	bls.n	800954a <_scanf_float+0xda>
 80094d4:	f1b9 0f00 	cmp.w	r9, #0
 80094d8:	d003      	beq.n	80094e2 <_scanf_float+0x72>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094e6:	f1ba 0f01 	cmp.w	sl, #1
 80094ea:	f200 8117 	bhi.w	800971c <_scanf_float+0x2ac>
 80094ee:	9b01      	ldr	r3, [sp, #4]
 80094f0:	429e      	cmp	r6, r3
 80094f2:	f200 8108 	bhi.w	8009706 <_scanf_float+0x296>
 80094f6:	2001      	movs	r0, #1
 80094f8:	b007      	add	sp, #28
 80094fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009502:	2a0d      	cmp	r2, #13
 8009504:	d8e6      	bhi.n	80094d4 <_scanf_float+0x64>
 8009506:	a101      	add	r1, pc, #4	@ (adr r1, 800950c <_scanf_float+0x9c>)
 8009508:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800950c:	08009653 	.word	0x08009653
 8009510:	080094d5 	.word	0x080094d5
 8009514:	080094d5 	.word	0x080094d5
 8009518:	080094d5 	.word	0x080094d5
 800951c:	080096b3 	.word	0x080096b3
 8009520:	0800968b 	.word	0x0800968b
 8009524:	080094d5 	.word	0x080094d5
 8009528:	080094d5 	.word	0x080094d5
 800952c:	08009661 	.word	0x08009661
 8009530:	080094d5 	.word	0x080094d5
 8009534:	080094d5 	.word	0x080094d5
 8009538:	080094d5 	.word	0x080094d5
 800953c:	080094d5 	.word	0x080094d5
 8009540:	08009619 	.word	0x08009619
 8009544:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009548:	e7db      	b.n	8009502 <_scanf_float+0x92>
 800954a:	290e      	cmp	r1, #14
 800954c:	d8c2      	bhi.n	80094d4 <_scanf_float+0x64>
 800954e:	a001      	add	r0, pc, #4	@ (adr r0, 8009554 <_scanf_float+0xe4>)
 8009550:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009554:	08009609 	.word	0x08009609
 8009558:	080094d5 	.word	0x080094d5
 800955c:	08009609 	.word	0x08009609
 8009560:	0800969f 	.word	0x0800969f
 8009564:	080094d5 	.word	0x080094d5
 8009568:	080095b1 	.word	0x080095b1
 800956c:	080095ef 	.word	0x080095ef
 8009570:	080095ef 	.word	0x080095ef
 8009574:	080095ef 	.word	0x080095ef
 8009578:	080095ef 	.word	0x080095ef
 800957c:	080095ef 	.word	0x080095ef
 8009580:	080095ef 	.word	0x080095ef
 8009584:	080095ef 	.word	0x080095ef
 8009588:	080095ef 	.word	0x080095ef
 800958c:	080095ef 	.word	0x080095ef
 8009590:	2b6e      	cmp	r3, #110	@ 0x6e
 8009592:	d809      	bhi.n	80095a8 <_scanf_float+0x138>
 8009594:	2b60      	cmp	r3, #96	@ 0x60
 8009596:	d8b2      	bhi.n	80094fe <_scanf_float+0x8e>
 8009598:	2b54      	cmp	r3, #84	@ 0x54
 800959a:	d07b      	beq.n	8009694 <_scanf_float+0x224>
 800959c:	2b59      	cmp	r3, #89	@ 0x59
 800959e:	d199      	bne.n	80094d4 <_scanf_float+0x64>
 80095a0:	2d07      	cmp	r5, #7
 80095a2:	d197      	bne.n	80094d4 <_scanf_float+0x64>
 80095a4:	2508      	movs	r5, #8
 80095a6:	e02c      	b.n	8009602 <_scanf_float+0x192>
 80095a8:	2b74      	cmp	r3, #116	@ 0x74
 80095aa:	d073      	beq.n	8009694 <_scanf_float+0x224>
 80095ac:	2b79      	cmp	r3, #121	@ 0x79
 80095ae:	e7f6      	b.n	800959e <_scanf_float+0x12e>
 80095b0:	6821      	ldr	r1, [r4, #0]
 80095b2:	05c8      	lsls	r0, r1, #23
 80095b4:	d51b      	bpl.n	80095ee <_scanf_float+0x17e>
 80095b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80095ba:	6021      	str	r1, [r4, #0]
 80095bc:	f109 0901 	add.w	r9, r9, #1
 80095c0:	f1bb 0f00 	cmp.w	fp, #0
 80095c4:	d003      	beq.n	80095ce <_scanf_float+0x15e>
 80095c6:	3201      	adds	r2, #1
 80095c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095cc:	60a2      	str	r2, [r4, #8]
 80095ce:	68a3      	ldr	r3, [r4, #8]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	60a3      	str	r3, [r4, #8]
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	3301      	adds	r3, #1
 80095d8:	6123      	str	r3, [r4, #16]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3b01      	subs	r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	607b      	str	r3, [r7, #4]
 80095e2:	f340 8087 	ble.w	80096f4 <_scanf_float+0x284>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	3301      	adds	r3, #1
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	e765      	b.n	80094ba <_scanf_float+0x4a>
 80095ee:	eb1a 0105 	adds.w	r1, sl, r5
 80095f2:	f47f af6f 	bne.w	80094d4 <_scanf_float+0x64>
 80095f6:	6822      	ldr	r2, [r4, #0]
 80095f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80095fc:	6022      	str	r2, [r4, #0]
 80095fe:	460d      	mov	r5, r1
 8009600:	468a      	mov	sl, r1
 8009602:	f806 3b01 	strb.w	r3, [r6], #1
 8009606:	e7e2      	b.n	80095ce <_scanf_float+0x15e>
 8009608:	6822      	ldr	r2, [r4, #0]
 800960a:	0610      	lsls	r0, r2, #24
 800960c:	f57f af62 	bpl.w	80094d4 <_scanf_float+0x64>
 8009610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009614:	6022      	str	r2, [r4, #0]
 8009616:	e7f4      	b.n	8009602 <_scanf_float+0x192>
 8009618:	f1ba 0f00 	cmp.w	sl, #0
 800961c:	d10e      	bne.n	800963c <_scanf_float+0x1cc>
 800961e:	f1b9 0f00 	cmp.w	r9, #0
 8009622:	d10e      	bne.n	8009642 <_scanf_float+0x1d2>
 8009624:	6822      	ldr	r2, [r4, #0]
 8009626:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800962a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800962e:	d108      	bne.n	8009642 <_scanf_float+0x1d2>
 8009630:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009634:	6022      	str	r2, [r4, #0]
 8009636:	f04f 0a01 	mov.w	sl, #1
 800963a:	e7e2      	b.n	8009602 <_scanf_float+0x192>
 800963c:	f1ba 0f02 	cmp.w	sl, #2
 8009640:	d055      	beq.n	80096ee <_scanf_float+0x27e>
 8009642:	2d01      	cmp	r5, #1
 8009644:	d002      	beq.n	800964c <_scanf_float+0x1dc>
 8009646:	2d04      	cmp	r5, #4
 8009648:	f47f af44 	bne.w	80094d4 <_scanf_float+0x64>
 800964c:	3501      	adds	r5, #1
 800964e:	b2ed      	uxtb	r5, r5
 8009650:	e7d7      	b.n	8009602 <_scanf_float+0x192>
 8009652:	f1ba 0f01 	cmp.w	sl, #1
 8009656:	f47f af3d 	bne.w	80094d4 <_scanf_float+0x64>
 800965a:	f04f 0a02 	mov.w	sl, #2
 800965e:	e7d0      	b.n	8009602 <_scanf_float+0x192>
 8009660:	b97d      	cbnz	r5, 8009682 <_scanf_float+0x212>
 8009662:	f1b9 0f00 	cmp.w	r9, #0
 8009666:	f47f af38 	bne.w	80094da <_scanf_float+0x6a>
 800966a:	6822      	ldr	r2, [r4, #0]
 800966c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009670:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009674:	f040 8108 	bne.w	8009888 <_scanf_float+0x418>
 8009678:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800967c:	6022      	str	r2, [r4, #0]
 800967e:	2501      	movs	r5, #1
 8009680:	e7bf      	b.n	8009602 <_scanf_float+0x192>
 8009682:	2d03      	cmp	r5, #3
 8009684:	d0e2      	beq.n	800964c <_scanf_float+0x1dc>
 8009686:	2d05      	cmp	r5, #5
 8009688:	e7de      	b.n	8009648 <_scanf_float+0x1d8>
 800968a:	2d02      	cmp	r5, #2
 800968c:	f47f af22 	bne.w	80094d4 <_scanf_float+0x64>
 8009690:	2503      	movs	r5, #3
 8009692:	e7b6      	b.n	8009602 <_scanf_float+0x192>
 8009694:	2d06      	cmp	r5, #6
 8009696:	f47f af1d 	bne.w	80094d4 <_scanf_float+0x64>
 800969a:	2507      	movs	r5, #7
 800969c:	e7b1      	b.n	8009602 <_scanf_float+0x192>
 800969e:	6822      	ldr	r2, [r4, #0]
 80096a0:	0591      	lsls	r1, r2, #22
 80096a2:	f57f af17 	bpl.w	80094d4 <_scanf_float+0x64>
 80096a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80096aa:	6022      	str	r2, [r4, #0]
 80096ac:	f8cd 9008 	str.w	r9, [sp, #8]
 80096b0:	e7a7      	b.n	8009602 <_scanf_float+0x192>
 80096b2:	6822      	ldr	r2, [r4, #0]
 80096b4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80096b8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80096bc:	d006      	beq.n	80096cc <_scanf_float+0x25c>
 80096be:	0550      	lsls	r0, r2, #21
 80096c0:	f57f af08 	bpl.w	80094d4 <_scanf_float+0x64>
 80096c4:	f1b9 0f00 	cmp.w	r9, #0
 80096c8:	f000 80de 	beq.w	8009888 <_scanf_float+0x418>
 80096cc:	0591      	lsls	r1, r2, #22
 80096ce:	bf58      	it	pl
 80096d0:	9902      	ldrpl	r1, [sp, #8]
 80096d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80096d6:	bf58      	it	pl
 80096d8:	eba9 0101 	subpl.w	r1, r9, r1
 80096dc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80096e0:	bf58      	it	pl
 80096e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80096e6:	6022      	str	r2, [r4, #0]
 80096e8:	f04f 0900 	mov.w	r9, #0
 80096ec:	e789      	b.n	8009602 <_scanf_float+0x192>
 80096ee:	f04f 0a03 	mov.w	sl, #3
 80096f2:	e786      	b.n	8009602 <_scanf_float+0x192>
 80096f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80096f8:	4639      	mov	r1, r7
 80096fa:	4640      	mov	r0, r8
 80096fc:	4798      	blx	r3
 80096fe:	2800      	cmp	r0, #0
 8009700:	f43f aedb 	beq.w	80094ba <_scanf_float+0x4a>
 8009704:	e6e6      	b.n	80094d4 <_scanf_float+0x64>
 8009706:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800970a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800970e:	463a      	mov	r2, r7
 8009710:	4640      	mov	r0, r8
 8009712:	4798      	blx	r3
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	3b01      	subs	r3, #1
 8009718:	6123      	str	r3, [r4, #16]
 800971a:	e6e8      	b.n	80094ee <_scanf_float+0x7e>
 800971c:	1e6b      	subs	r3, r5, #1
 800971e:	2b06      	cmp	r3, #6
 8009720:	d824      	bhi.n	800976c <_scanf_float+0x2fc>
 8009722:	2d02      	cmp	r5, #2
 8009724:	d836      	bhi.n	8009794 <_scanf_float+0x324>
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	429e      	cmp	r6, r3
 800972a:	f67f aee4 	bls.w	80094f6 <_scanf_float+0x86>
 800972e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009736:	463a      	mov	r2, r7
 8009738:	4640      	mov	r0, r8
 800973a:	4798      	blx	r3
 800973c:	6923      	ldr	r3, [r4, #16]
 800973e:	3b01      	subs	r3, #1
 8009740:	6123      	str	r3, [r4, #16]
 8009742:	e7f0      	b.n	8009726 <_scanf_float+0x2b6>
 8009744:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009748:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800974c:	463a      	mov	r2, r7
 800974e:	4640      	mov	r0, r8
 8009750:	4798      	blx	r3
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	3b01      	subs	r3, #1
 8009756:	6123      	str	r3, [r4, #16]
 8009758:	f10a 3aff 	add.w	sl, sl, #4294967295
 800975c:	fa5f fa8a 	uxtb.w	sl, sl
 8009760:	f1ba 0f02 	cmp.w	sl, #2
 8009764:	d1ee      	bne.n	8009744 <_scanf_float+0x2d4>
 8009766:	3d03      	subs	r5, #3
 8009768:	b2ed      	uxtb	r5, r5
 800976a:	1b76      	subs	r6, r6, r5
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	05da      	lsls	r2, r3, #23
 8009770:	d530      	bpl.n	80097d4 <_scanf_float+0x364>
 8009772:	055b      	lsls	r3, r3, #21
 8009774:	d511      	bpl.n	800979a <_scanf_float+0x32a>
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	429e      	cmp	r6, r3
 800977a:	f67f aebc 	bls.w	80094f6 <_scanf_float+0x86>
 800977e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009782:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009786:	463a      	mov	r2, r7
 8009788:	4640      	mov	r0, r8
 800978a:	4798      	blx	r3
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	3b01      	subs	r3, #1
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	e7f0      	b.n	8009776 <_scanf_float+0x306>
 8009794:	46aa      	mov	sl, r5
 8009796:	46b3      	mov	fp, r6
 8009798:	e7de      	b.n	8009758 <_scanf_float+0x2e8>
 800979a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	2965      	cmp	r1, #101	@ 0x65
 80097a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80097a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80097aa:	6123      	str	r3, [r4, #16]
 80097ac:	d00c      	beq.n	80097c8 <_scanf_float+0x358>
 80097ae:	2945      	cmp	r1, #69	@ 0x45
 80097b0:	d00a      	beq.n	80097c8 <_scanf_float+0x358>
 80097b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097b6:	463a      	mov	r2, r7
 80097b8:	4640      	mov	r0, r8
 80097ba:	4798      	blx	r3
 80097bc:	6923      	ldr	r3, [r4, #16]
 80097be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	1eb5      	subs	r5, r6, #2
 80097c6:	6123      	str	r3, [r4, #16]
 80097c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097cc:	463a      	mov	r2, r7
 80097ce:	4640      	mov	r0, r8
 80097d0:	4798      	blx	r3
 80097d2:	462e      	mov	r6, r5
 80097d4:	6822      	ldr	r2, [r4, #0]
 80097d6:	f012 0210 	ands.w	r2, r2, #16
 80097da:	d001      	beq.n	80097e0 <_scanf_float+0x370>
 80097dc:	2000      	movs	r0, #0
 80097de:	e68b      	b.n	80094f8 <_scanf_float+0x88>
 80097e0:	7032      	strb	r2, [r6, #0]
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80097e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ec:	d11c      	bne.n	8009828 <_scanf_float+0x3b8>
 80097ee:	9b02      	ldr	r3, [sp, #8]
 80097f0:	454b      	cmp	r3, r9
 80097f2:	eba3 0209 	sub.w	r2, r3, r9
 80097f6:	d123      	bne.n	8009840 <_scanf_float+0x3d0>
 80097f8:	9901      	ldr	r1, [sp, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	4640      	mov	r0, r8
 80097fe:	f002 fbf7 	bl	800bff0 <_strtod_r>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	6821      	ldr	r1, [r4, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f011 0f02 	tst.w	r1, #2
 800980c:	ec57 6b10 	vmov	r6, r7, d0
 8009810:	f103 0204 	add.w	r2, r3, #4
 8009814:	d01f      	beq.n	8009856 <_scanf_float+0x3e6>
 8009816:	9903      	ldr	r1, [sp, #12]
 8009818:	600a      	str	r2, [r1, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	e9c3 6700 	strd	r6, r7, [r3]
 8009820:	68e3      	ldr	r3, [r4, #12]
 8009822:	3301      	adds	r3, #1
 8009824:	60e3      	str	r3, [r4, #12]
 8009826:	e7d9      	b.n	80097dc <_scanf_float+0x36c>
 8009828:	9b04      	ldr	r3, [sp, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0e4      	beq.n	80097f8 <_scanf_float+0x388>
 800982e:	9905      	ldr	r1, [sp, #20]
 8009830:	230a      	movs	r3, #10
 8009832:	3101      	adds	r1, #1
 8009834:	4640      	mov	r0, r8
 8009836:	f002 fc5b 	bl	800c0f0 <_strtol_r>
 800983a:	9b04      	ldr	r3, [sp, #16]
 800983c:	9e05      	ldr	r6, [sp, #20]
 800983e:	1ac2      	subs	r2, r0, r3
 8009840:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009844:	429e      	cmp	r6, r3
 8009846:	bf28      	it	cs
 8009848:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800984c:	4910      	ldr	r1, [pc, #64]	@ (8009890 <_scanf_float+0x420>)
 800984e:	4630      	mov	r0, r6
 8009850:	f000 f8e4 	bl	8009a1c <siprintf>
 8009854:	e7d0      	b.n	80097f8 <_scanf_float+0x388>
 8009856:	f011 0f04 	tst.w	r1, #4
 800985a:	9903      	ldr	r1, [sp, #12]
 800985c:	600a      	str	r2, [r1, #0]
 800985e:	d1dc      	bne.n	800981a <_scanf_float+0x3aa>
 8009860:	681d      	ldr	r5, [r3, #0]
 8009862:	4632      	mov	r2, r6
 8009864:	463b      	mov	r3, r7
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f7 f95f 	bl	8000b2c <__aeabi_dcmpun>
 800986e:	b128      	cbz	r0, 800987c <_scanf_float+0x40c>
 8009870:	4808      	ldr	r0, [pc, #32]	@ (8009894 <_scanf_float+0x424>)
 8009872:	f000 f9b7 	bl	8009be4 <nanf>
 8009876:	ed85 0a00 	vstr	s0, [r5]
 800987a:	e7d1      	b.n	8009820 <_scanf_float+0x3b0>
 800987c:	4630      	mov	r0, r6
 800987e:	4639      	mov	r1, r7
 8009880:	f7f7 f9b2 	bl	8000be8 <__aeabi_d2f>
 8009884:	6028      	str	r0, [r5, #0]
 8009886:	e7cb      	b.n	8009820 <_scanf_float+0x3b0>
 8009888:	f04f 0900 	mov.w	r9, #0
 800988c:	e629      	b.n	80094e2 <_scanf_float+0x72>
 800988e:	bf00      	nop
 8009890:	0800d324 	.word	0x0800d324
 8009894:	0800d6bd 	.word	0x0800d6bd

08009898 <std>:
 8009898:	2300      	movs	r3, #0
 800989a:	b510      	push	{r4, lr}
 800989c:	4604      	mov	r4, r0
 800989e:	e9c0 3300 	strd	r3, r3, [r0]
 80098a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098a6:	6083      	str	r3, [r0, #8]
 80098a8:	8181      	strh	r1, [r0, #12]
 80098aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80098ac:	81c2      	strh	r2, [r0, #14]
 80098ae:	6183      	str	r3, [r0, #24]
 80098b0:	4619      	mov	r1, r3
 80098b2:	2208      	movs	r2, #8
 80098b4:	305c      	adds	r0, #92	@ 0x5c
 80098b6:	f000 f914 	bl	8009ae2 <memset>
 80098ba:	4b0d      	ldr	r3, [pc, #52]	@ (80098f0 <std+0x58>)
 80098bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80098be:	4b0d      	ldr	r3, [pc, #52]	@ (80098f4 <std+0x5c>)
 80098c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80098c2:	4b0d      	ldr	r3, [pc, #52]	@ (80098f8 <std+0x60>)
 80098c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80098c6:	4b0d      	ldr	r3, [pc, #52]	@ (80098fc <std+0x64>)
 80098c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80098ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009900 <std+0x68>)
 80098cc:	6224      	str	r4, [r4, #32]
 80098ce:	429c      	cmp	r4, r3
 80098d0:	d006      	beq.n	80098e0 <std+0x48>
 80098d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80098d6:	4294      	cmp	r4, r2
 80098d8:	d002      	beq.n	80098e0 <std+0x48>
 80098da:	33d0      	adds	r3, #208	@ 0xd0
 80098dc:	429c      	cmp	r4, r3
 80098de:	d105      	bne.n	80098ec <std+0x54>
 80098e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80098e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098e8:	f000 b978 	b.w	8009bdc <__retarget_lock_init_recursive>
 80098ec:	bd10      	pop	{r4, pc}
 80098ee:	bf00      	nop
 80098f0:	08009a5d 	.word	0x08009a5d
 80098f4:	08009a7f 	.word	0x08009a7f
 80098f8:	08009ab7 	.word	0x08009ab7
 80098fc:	08009adb 	.word	0x08009adb
 8009900:	20000420 	.word	0x20000420

08009904 <stdio_exit_handler>:
 8009904:	4a02      	ldr	r2, [pc, #8]	@ (8009910 <stdio_exit_handler+0xc>)
 8009906:	4903      	ldr	r1, [pc, #12]	@ (8009914 <stdio_exit_handler+0x10>)
 8009908:	4803      	ldr	r0, [pc, #12]	@ (8009918 <stdio_exit_handler+0x14>)
 800990a:	f000 b869 	b.w	80099e0 <_fwalk_sglue>
 800990e:	bf00      	nop
 8009910:	20000010 	.word	0x20000010
 8009914:	0800c4ad 	.word	0x0800c4ad
 8009918:	20000020 	.word	0x20000020

0800991c <cleanup_stdio>:
 800991c:	6841      	ldr	r1, [r0, #4]
 800991e:	4b0c      	ldr	r3, [pc, #48]	@ (8009950 <cleanup_stdio+0x34>)
 8009920:	4299      	cmp	r1, r3
 8009922:	b510      	push	{r4, lr}
 8009924:	4604      	mov	r4, r0
 8009926:	d001      	beq.n	800992c <cleanup_stdio+0x10>
 8009928:	f002 fdc0 	bl	800c4ac <_fflush_r>
 800992c:	68a1      	ldr	r1, [r4, #8]
 800992e:	4b09      	ldr	r3, [pc, #36]	@ (8009954 <cleanup_stdio+0x38>)
 8009930:	4299      	cmp	r1, r3
 8009932:	d002      	beq.n	800993a <cleanup_stdio+0x1e>
 8009934:	4620      	mov	r0, r4
 8009936:	f002 fdb9 	bl	800c4ac <_fflush_r>
 800993a:	68e1      	ldr	r1, [r4, #12]
 800993c:	4b06      	ldr	r3, [pc, #24]	@ (8009958 <cleanup_stdio+0x3c>)
 800993e:	4299      	cmp	r1, r3
 8009940:	d004      	beq.n	800994c <cleanup_stdio+0x30>
 8009942:	4620      	mov	r0, r4
 8009944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009948:	f002 bdb0 	b.w	800c4ac <_fflush_r>
 800994c:	bd10      	pop	{r4, pc}
 800994e:	bf00      	nop
 8009950:	20000420 	.word	0x20000420
 8009954:	20000488 	.word	0x20000488
 8009958:	200004f0 	.word	0x200004f0

0800995c <global_stdio_init.part.0>:
 800995c:	b510      	push	{r4, lr}
 800995e:	4b0b      	ldr	r3, [pc, #44]	@ (800998c <global_stdio_init.part.0+0x30>)
 8009960:	4c0b      	ldr	r4, [pc, #44]	@ (8009990 <global_stdio_init.part.0+0x34>)
 8009962:	4a0c      	ldr	r2, [pc, #48]	@ (8009994 <global_stdio_init.part.0+0x38>)
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	4620      	mov	r0, r4
 8009968:	2200      	movs	r2, #0
 800996a:	2104      	movs	r1, #4
 800996c:	f7ff ff94 	bl	8009898 <std>
 8009970:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009974:	2201      	movs	r2, #1
 8009976:	2109      	movs	r1, #9
 8009978:	f7ff ff8e 	bl	8009898 <std>
 800997c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009980:	2202      	movs	r2, #2
 8009982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009986:	2112      	movs	r1, #18
 8009988:	f7ff bf86 	b.w	8009898 <std>
 800998c:	20000558 	.word	0x20000558
 8009990:	20000420 	.word	0x20000420
 8009994:	08009905 	.word	0x08009905

08009998 <__sfp_lock_acquire>:
 8009998:	4801      	ldr	r0, [pc, #4]	@ (80099a0 <__sfp_lock_acquire+0x8>)
 800999a:	f000 b920 	b.w	8009bde <__retarget_lock_acquire_recursive>
 800999e:	bf00      	nop
 80099a0:	20000561 	.word	0x20000561

080099a4 <__sfp_lock_release>:
 80099a4:	4801      	ldr	r0, [pc, #4]	@ (80099ac <__sfp_lock_release+0x8>)
 80099a6:	f000 b91b 	b.w	8009be0 <__retarget_lock_release_recursive>
 80099aa:	bf00      	nop
 80099ac:	20000561 	.word	0x20000561

080099b0 <__sinit>:
 80099b0:	b510      	push	{r4, lr}
 80099b2:	4604      	mov	r4, r0
 80099b4:	f7ff fff0 	bl	8009998 <__sfp_lock_acquire>
 80099b8:	6a23      	ldr	r3, [r4, #32]
 80099ba:	b11b      	cbz	r3, 80099c4 <__sinit+0x14>
 80099bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c0:	f7ff bff0 	b.w	80099a4 <__sfp_lock_release>
 80099c4:	4b04      	ldr	r3, [pc, #16]	@ (80099d8 <__sinit+0x28>)
 80099c6:	6223      	str	r3, [r4, #32]
 80099c8:	4b04      	ldr	r3, [pc, #16]	@ (80099dc <__sinit+0x2c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1f5      	bne.n	80099bc <__sinit+0xc>
 80099d0:	f7ff ffc4 	bl	800995c <global_stdio_init.part.0>
 80099d4:	e7f2      	b.n	80099bc <__sinit+0xc>
 80099d6:	bf00      	nop
 80099d8:	0800991d 	.word	0x0800991d
 80099dc:	20000558 	.word	0x20000558

080099e0 <_fwalk_sglue>:
 80099e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e4:	4607      	mov	r7, r0
 80099e6:	4688      	mov	r8, r1
 80099e8:	4614      	mov	r4, r2
 80099ea:	2600      	movs	r6, #0
 80099ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099f0:	f1b9 0901 	subs.w	r9, r9, #1
 80099f4:	d505      	bpl.n	8009a02 <_fwalk_sglue+0x22>
 80099f6:	6824      	ldr	r4, [r4, #0]
 80099f8:	2c00      	cmp	r4, #0
 80099fa:	d1f7      	bne.n	80099ec <_fwalk_sglue+0xc>
 80099fc:	4630      	mov	r0, r6
 80099fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a02:	89ab      	ldrh	r3, [r5, #12]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d907      	bls.n	8009a18 <_fwalk_sglue+0x38>
 8009a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	d003      	beq.n	8009a18 <_fwalk_sglue+0x38>
 8009a10:	4629      	mov	r1, r5
 8009a12:	4638      	mov	r0, r7
 8009a14:	47c0      	blx	r8
 8009a16:	4306      	orrs	r6, r0
 8009a18:	3568      	adds	r5, #104	@ 0x68
 8009a1a:	e7e9      	b.n	80099f0 <_fwalk_sglue+0x10>

08009a1c <siprintf>:
 8009a1c:	b40e      	push	{r1, r2, r3}
 8009a1e:	b500      	push	{lr}
 8009a20:	b09c      	sub	sp, #112	@ 0x70
 8009a22:	ab1d      	add	r3, sp, #116	@ 0x74
 8009a24:	9002      	str	r0, [sp, #8]
 8009a26:	9006      	str	r0, [sp, #24]
 8009a28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a2c:	4809      	ldr	r0, [pc, #36]	@ (8009a54 <siprintf+0x38>)
 8009a2e:	9107      	str	r1, [sp, #28]
 8009a30:	9104      	str	r1, [sp, #16]
 8009a32:	4909      	ldr	r1, [pc, #36]	@ (8009a58 <siprintf+0x3c>)
 8009a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a38:	9105      	str	r1, [sp, #20]
 8009a3a:	6800      	ldr	r0, [r0, #0]
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	a902      	add	r1, sp, #8
 8009a40:	f002 fbb4 	bl	800c1ac <_svfiprintf_r>
 8009a44:	9b02      	ldr	r3, [sp, #8]
 8009a46:	2200      	movs	r2, #0
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	b01c      	add	sp, #112	@ 0x70
 8009a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a50:	b003      	add	sp, #12
 8009a52:	4770      	bx	lr
 8009a54:	2000001c 	.word	0x2000001c
 8009a58:	ffff0208 	.word	0xffff0208

08009a5c <__sread>:
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	460c      	mov	r4, r1
 8009a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a64:	f000 f86c 	bl	8009b40 <_read_r>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	bfab      	itete	ge
 8009a6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a70:	181b      	addge	r3, r3, r0
 8009a72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a76:	bfac      	ite	ge
 8009a78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a7a:	81a3      	strhlt	r3, [r4, #12]
 8009a7c:	bd10      	pop	{r4, pc}

08009a7e <__swrite>:
 8009a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a82:	461f      	mov	r7, r3
 8009a84:	898b      	ldrh	r3, [r1, #12]
 8009a86:	05db      	lsls	r3, r3, #23
 8009a88:	4605      	mov	r5, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	4616      	mov	r6, r2
 8009a8e:	d505      	bpl.n	8009a9c <__swrite+0x1e>
 8009a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a94:	2302      	movs	r3, #2
 8009a96:	2200      	movs	r2, #0
 8009a98:	f000 f840 	bl	8009b1c <_lseek_r>
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	463b      	mov	r3, r7
 8009aac:	4628      	mov	r0, r5
 8009aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab2:	f000 b857 	b.w	8009b64 <_write_r>

08009ab6 <__sseek>:
 8009ab6:	b510      	push	{r4, lr}
 8009ab8:	460c      	mov	r4, r1
 8009aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009abe:	f000 f82d 	bl	8009b1c <_lseek_r>
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	bf15      	itete	ne
 8009ac8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009aca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ace:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ad2:	81a3      	strheq	r3, [r4, #12]
 8009ad4:	bf18      	it	ne
 8009ad6:	81a3      	strhne	r3, [r4, #12]
 8009ad8:	bd10      	pop	{r4, pc}

08009ada <__sclose>:
 8009ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ade:	f000 b80d 	b.w	8009afc <_close_r>

08009ae2 <memset>:
 8009ae2:	4402      	add	r2, r0
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d100      	bne.n	8009aec <memset+0xa>
 8009aea:	4770      	bx	lr
 8009aec:	f803 1b01 	strb.w	r1, [r3], #1
 8009af0:	e7f9      	b.n	8009ae6 <memset+0x4>
	...

08009af4 <_localeconv_r>:
 8009af4:	4800      	ldr	r0, [pc, #0]	@ (8009af8 <_localeconv_r+0x4>)
 8009af6:	4770      	bx	lr
 8009af8:	2000015c 	.word	0x2000015c

08009afc <_close_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d06      	ldr	r5, [pc, #24]	@ (8009b18 <_close_r+0x1c>)
 8009b00:	2300      	movs	r3, #0
 8009b02:	4604      	mov	r4, r0
 8009b04:	4608      	mov	r0, r1
 8009b06:	602b      	str	r3, [r5, #0]
 8009b08:	f7f8 fd0e 	bl	8002528 <_close>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_close_r+0x1a>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_close_r+0x1a>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	2000055c 	.word	0x2000055c

08009b1c <_lseek_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d07      	ldr	r5, [pc, #28]	@ (8009b3c <_lseek_r+0x20>)
 8009b20:	4604      	mov	r4, r0
 8009b22:	4608      	mov	r0, r1
 8009b24:	4611      	mov	r1, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	602a      	str	r2, [r5, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f7f8 fd23 	bl	8002576 <_lseek>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_lseek_r+0x1e>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_lseek_r+0x1e>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	2000055c 	.word	0x2000055c

08009b40 <_read_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	@ (8009b60 <_read_r+0x20>)
 8009b44:	4604      	mov	r4, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f7f8 fcb1 	bl	80024b6 <_read>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_read_r+0x1e>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_read_r+0x1e>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	2000055c 	.word	0x2000055c

08009b64 <_write_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4d07      	ldr	r5, [pc, #28]	@ (8009b84 <_write_r+0x20>)
 8009b68:	4604      	mov	r4, r0
 8009b6a:	4608      	mov	r0, r1
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	2200      	movs	r2, #0
 8009b70:	602a      	str	r2, [r5, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	f7f8 fcbc 	bl	80024f0 <_write>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d102      	bne.n	8009b82 <_write_r+0x1e>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b103      	cbz	r3, 8009b82 <_write_r+0x1e>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	2000055c 	.word	0x2000055c

08009b88 <__errno>:
 8009b88:	4b01      	ldr	r3, [pc, #4]	@ (8009b90 <__errno+0x8>)
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	2000001c 	.word	0x2000001c

08009b94 <__libc_init_array>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	4d0d      	ldr	r5, [pc, #52]	@ (8009bcc <__libc_init_array+0x38>)
 8009b98:	4c0d      	ldr	r4, [pc, #52]	@ (8009bd0 <__libc_init_array+0x3c>)
 8009b9a:	1b64      	subs	r4, r4, r5
 8009b9c:	10a4      	asrs	r4, r4, #2
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	42a6      	cmp	r6, r4
 8009ba2:	d109      	bne.n	8009bb8 <__libc_init_array+0x24>
 8009ba4:	4d0b      	ldr	r5, [pc, #44]	@ (8009bd4 <__libc_init_array+0x40>)
 8009ba6:	4c0c      	ldr	r4, [pc, #48]	@ (8009bd8 <__libc_init_array+0x44>)
 8009ba8:	f003 fb70 	bl	800d28c <_init>
 8009bac:	1b64      	subs	r4, r4, r5
 8009bae:	10a4      	asrs	r4, r4, #2
 8009bb0:	2600      	movs	r6, #0
 8009bb2:	42a6      	cmp	r6, r4
 8009bb4:	d105      	bne.n	8009bc2 <__libc_init_array+0x2e>
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bbc:	4798      	blx	r3
 8009bbe:	3601      	adds	r6, #1
 8009bc0:	e7ee      	b.n	8009ba0 <__libc_init_array+0xc>
 8009bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc6:	4798      	blx	r3
 8009bc8:	3601      	adds	r6, #1
 8009bca:	e7f2      	b.n	8009bb2 <__libc_init_array+0x1e>
 8009bcc:	0800d728 	.word	0x0800d728
 8009bd0:	0800d728 	.word	0x0800d728
 8009bd4:	0800d728 	.word	0x0800d728
 8009bd8:	0800d72c 	.word	0x0800d72c

08009bdc <__retarget_lock_init_recursive>:
 8009bdc:	4770      	bx	lr

08009bde <__retarget_lock_acquire_recursive>:
 8009bde:	4770      	bx	lr

08009be0 <__retarget_lock_release_recursive>:
 8009be0:	4770      	bx	lr
	...

08009be4 <nanf>:
 8009be4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009bec <nanf+0x8>
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	7fc00000 	.word	0x7fc00000

08009bf0 <quorem>:
 8009bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf4:	6903      	ldr	r3, [r0, #16]
 8009bf6:	690c      	ldr	r4, [r1, #16]
 8009bf8:	42a3      	cmp	r3, r4
 8009bfa:	4607      	mov	r7, r0
 8009bfc:	db7e      	blt.n	8009cfc <quorem+0x10c>
 8009bfe:	3c01      	subs	r4, #1
 8009c00:	f101 0814 	add.w	r8, r1, #20
 8009c04:	00a3      	lsls	r3, r4, #2
 8009c06:	f100 0514 	add.w	r5, r0, #20
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c22:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c26:	d32e      	bcc.n	8009c86 <quorem+0x96>
 8009c28:	f04f 0a00 	mov.w	sl, #0
 8009c2c:	46c4      	mov	ip, r8
 8009c2e:	46ae      	mov	lr, r5
 8009c30:	46d3      	mov	fp, sl
 8009c32:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c36:	b298      	uxth	r0, r3
 8009c38:	fb06 a000 	mla	r0, r6, r0, sl
 8009c3c:	0c02      	lsrs	r2, r0, #16
 8009c3e:	0c1b      	lsrs	r3, r3, #16
 8009c40:	fb06 2303 	mla	r3, r6, r3, r2
 8009c44:	f8de 2000 	ldr.w	r2, [lr]
 8009c48:	b280      	uxth	r0, r0
 8009c4a:	b292      	uxth	r2, r2
 8009c4c:	1a12      	subs	r2, r2, r0
 8009c4e:	445a      	add	r2, fp
 8009c50:	f8de 0000 	ldr.w	r0, [lr]
 8009c54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009c5e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009c62:	b292      	uxth	r2, r2
 8009c64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c68:	45e1      	cmp	r9, ip
 8009c6a:	f84e 2b04 	str.w	r2, [lr], #4
 8009c6e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c72:	d2de      	bcs.n	8009c32 <quorem+0x42>
 8009c74:	9b00      	ldr	r3, [sp, #0]
 8009c76:	58eb      	ldr	r3, [r5, r3]
 8009c78:	b92b      	cbnz	r3, 8009c86 <quorem+0x96>
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	3b04      	subs	r3, #4
 8009c7e:	429d      	cmp	r5, r3
 8009c80:	461a      	mov	r2, r3
 8009c82:	d32f      	bcc.n	8009ce4 <quorem+0xf4>
 8009c84:	613c      	str	r4, [r7, #16]
 8009c86:	4638      	mov	r0, r7
 8009c88:	f001 f9c2 	bl	800b010 <__mcmp>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	db25      	blt.n	8009cdc <quorem+0xec>
 8009c90:	4629      	mov	r1, r5
 8009c92:	2000      	movs	r0, #0
 8009c94:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c98:	f8d1 c000 	ldr.w	ip, [r1]
 8009c9c:	fa1f fe82 	uxth.w	lr, r2
 8009ca0:	fa1f f38c 	uxth.w	r3, ip
 8009ca4:	eba3 030e 	sub.w	r3, r3, lr
 8009ca8:	4403      	add	r3, r0
 8009caa:	0c12      	lsrs	r2, r2, #16
 8009cac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009cb0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cba:	45c1      	cmp	r9, r8
 8009cbc:	f841 3b04 	str.w	r3, [r1], #4
 8009cc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009cc4:	d2e6      	bcs.n	8009c94 <quorem+0xa4>
 8009cc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cce:	b922      	cbnz	r2, 8009cda <quorem+0xea>
 8009cd0:	3b04      	subs	r3, #4
 8009cd2:	429d      	cmp	r5, r3
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	d30b      	bcc.n	8009cf0 <quorem+0x100>
 8009cd8:	613c      	str	r4, [r7, #16]
 8009cda:	3601      	adds	r6, #1
 8009cdc:	4630      	mov	r0, r6
 8009cde:	b003      	add	sp, #12
 8009ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	6812      	ldr	r2, [r2, #0]
 8009ce6:	3b04      	subs	r3, #4
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	d1cb      	bne.n	8009c84 <quorem+0x94>
 8009cec:	3c01      	subs	r4, #1
 8009cee:	e7c6      	b.n	8009c7e <quorem+0x8e>
 8009cf0:	6812      	ldr	r2, [r2, #0]
 8009cf2:	3b04      	subs	r3, #4
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	d1ef      	bne.n	8009cd8 <quorem+0xe8>
 8009cf8:	3c01      	subs	r4, #1
 8009cfa:	e7ea      	b.n	8009cd2 <quorem+0xe2>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	e7ee      	b.n	8009cde <quorem+0xee>

08009d00 <_dtoa_r>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	69c7      	ldr	r7, [r0, #28]
 8009d06:	b099      	sub	sp, #100	@ 0x64
 8009d08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d0c:	ec55 4b10 	vmov	r4, r5, d0
 8009d10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009d12:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d14:	4683      	mov	fp, r0
 8009d16:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d1a:	b97f      	cbnz	r7, 8009d3c <_dtoa_r+0x3c>
 8009d1c:	2010      	movs	r0, #16
 8009d1e:	f000 fdfd 	bl	800a91c <malloc>
 8009d22:	4602      	mov	r2, r0
 8009d24:	f8cb 001c 	str.w	r0, [fp, #28]
 8009d28:	b920      	cbnz	r0, 8009d34 <_dtoa_r+0x34>
 8009d2a:	4ba7      	ldr	r3, [pc, #668]	@ (8009fc8 <_dtoa_r+0x2c8>)
 8009d2c:	21ef      	movs	r1, #239	@ 0xef
 8009d2e:	48a7      	ldr	r0, [pc, #668]	@ (8009fcc <_dtoa_r+0x2cc>)
 8009d30:	f002 fc36 	bl	800c5a0 <__assert_func>
 8009d34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d38:	6007      	str	r7, [r0, #0]
 8009d3a:	60c7      	str	r7, [r0, #12]
 8009d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d40:	6819      	ldr	r1, [r3, #0]
 8009d42:	b159      	cbz	r1, 8009d5c <_dtoa_r+0x5c>
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	604a      	str	r2, [r1, #4]
 8009d48:	2301      	movs	r3, #1
 8009d4a:	4093      	lsls	r3, r2
 8009d4c:	608b      	str	r3, [r1, #8]
 8009d4e:	4658      	mov	r0, fp
 8009d50:	f000 feda 	bl	800ab08 <_Bfree>
 8009d54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	1e2b      	subs	r3, r5, #0
 8009d5e:	bfb9      	ittee	lt
 8009d60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009d64:	9303      	strlt	r3, [sp, #12]
 8009d66:	2300      	movge	r3, #0
 8009d68:	6033      	strge	r3, [r6, #0]
 8009d6a:	9f03      	ldr	r7, [sp, #12]
 8009d6c:	4b98      	ldr	r3, [pc, #608]	@ (8009fd0 <_dtoa_r+0x2d0>)
 8009d6e:	bfbc      	itt	lt
 8009d70:	2201      	movlt	r2, #1
 8009d72:	6032      	strlt	r2, [r6, #0]
 8009d74:	43bb      	bics	r3, r7
 8009d76:	d112      	bne.n	8009d9e <_dtoa_r+0x9e>
 8009d78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d84:	4323      	orrs	r3, r4
 8009d86:	f000 854d 	beq.w	800a824 <_dtoa_r+0xb24>
 8009d8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009fe4 <_dtoa_r+0x2e4>
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 854f 	beq.w	800a834 <_dtoa_r+0xb34>
 8009d96:	f10a 0303 	add.w	r3, sl, #3
 8009d9a:	f000 bd49 	b.w	800a830 <_dtoa_r+0xb30>
 8009d9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009da2:	2200      	movs	r2, #0
 8009da4:	ec51 0b17 	vmov	r0, r1, d7
 8009da8:	2300      	movs	r3, #0
 8009daa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009dae:	f7f6 fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009db2:	4680      	mov	r8, r0
 8009db4:	b158      	cbz	r0, 8009dce <_dtoa_r+0xce>
 8009db6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009db8:	2301      	movs	r3, #1
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dbe:	b113      	cbz	r3, 8009dc6 <_dtoa_r+0xc6>
 8009dc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009dc2:	4b84      	ldr	r3, [pc, #528]	@ (8009fd4 <_dtoa_r+0x2d4>)
 8009dc4:	6013      	str	r3, [r2, #0]
 8009dc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009fe8 <_dtoa_r+0x2e8>
 8009dca:	f000 bd33 	b.w	800a834 <_dtoa_r+0xb34>
 8009dce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009dd2:	aa16      	add	r2, sp, #88	@ 0x58
 8009dd4:	a917      	add	r1, sp, #92	@ 0x5c
 8009dd6:	4658      	mov	r0, fp
 8009dd8:	f001 fa3a 	bl	800b250 <__d2b>
 8009ddc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009de0:	4681      	mov	r9, r0
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	d077      	beq.n	8009ed6 <_dtoa_r+0x1d6>
 8009de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009de8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009df4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009df8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009dfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e00:	4619      	mov	r1, r3
 8009e02:	2200      	movs	r2, #0
 8009e04:	4b74      	ldr	r3, [pc, #464]	@ (8009fd8 <_dtoa_r+0x2d8>)
 8009e06:	f7f6 fa3f 	bl	8000288 <__aeabi_dsub>
 8009e0a:	a369      	add	r3, pc, #420	@ (adr r3, 8009fb0 <_dtoa_r+0x2b0>)
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	f7f6 fbf2 	bl	80005f8 <__aeabi_dmul>
 8009e14:	a368      	add	r3, pc, #416	@ (adr r3, 8009fb8 <_dtoa_r+0x2b8>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f7f6 fa37 	bl	800028c <__adddf3>
 8009e1e:	4604      	mov	r4, r0
 8009e20:	4630      	mov	r0, r6
 8009e22:	460d      	mov	r5, r1
 8009e24:	f7f6 fb7e 	bl	8000524 <__aeabi_i2d>
 8009e28:	a365      	add	r3, pc, #404	@ (adr r3, 8009fc0 <_dtoa_r+0x2c0>)
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	f7f6 fbe3 	bl	80005f8 <__aeabi_dmul>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	4620      	mov	r0, r4
 8009e38:	4629      	mov	r1, r5
 8009e3a:	f7f6 fa27 	bl	800028c <__adddf3>
 8009e3e:	4604      	mov	r4, r0
 8009e40:	460d      	mov	r5, r1
 8009e42:	f7f6 fe89 	bl	8000b58 <__aeabi_d2iz>
 8009e46:	2200      	movs	r2, #0
 8009e48:	4607      	mov	r7, r0
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	4629      	mov	r1, r5
 8009e50:	f7f6 fe44 	bl	8000adc <__aeabi_dcmplt>
 8009e54:	b140      	cbz	r0, 8009e68 <_dtoa_r+0x168>
 8009e56:	4638      	mov	r0, r7
 8009e58:	f7f6 fb64 	bl	8000524 <__aeabi_i2d>
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	462b      	mov	r3, r5
 8009e60:	f7f6 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e64:	b900      	cbnz	r0, 8009e68 <_dtoa_r+0x168>
 8009e66:	3f01      	subs	r7, #1
 8009e68:	2f16      	cmp	r7, #22
 8009e6a:	d851      	bhi.n	8009f10 <_dtoa_r+0x210>
 8009e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8009fdc <_dtoa_r+0x2dc>)
 8009e6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e7a:	f7f6 fe2f 	bl	8000adc <__aeabi_dcmplt>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d048      	beq.n	8009f14 <_dtoa_r+0x214>
 8009e82:	3f01      	subs	r7, #1
 8009e84:	2300      	movs	r3, #0
 8009e86:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e8a:	1b9b      	subs	r3, r3, r6
 8009e8c:	1e5a      	subs	r2, r3, #1
 8009e8e:	bf44      	itt	mi
 8009e90:	f1c3 0801 	rsbmi	r8, r3, #1
 8009e94:	2300      	movmi	r3, #0
 8009e96:	9208      	str	r2, [sp, #32]
 8009e98:	bf54      	ite	pl
 8009e9a:	f04f 0800 	movpl.w	r8, #0
 8009e9e:	9308      	strmi	r3, [sp, #32]
 8009ea0:	2f00      	cmp	r7, #0
 8009ea2:	db39      	blt.n	8009f18 <_dtoa_r+0x218>
 8009ea4:	9b08      	ldr	r3, [sp, #32]
 8009ea6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009ea8:	443b      	add	r3, r7
 8009eaa:	9308      	str	r3, [sp, #32]
 8009eac:	2300      	movs	r3, #0
 8009eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8009eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eb2:	2b09      	cmp	r3, #9
 8009eb4:	d864      	bhi.n	8009f80 <_dtoa_r+0x280>
 8009eb6:	2b05      	cmp	r3, #5
 8009eb8:	bfc4      	itt	gt
 8009eba:	3b04      	subgt	r3, #4
 8009ebc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec0:	f1a3 0302 	sub.w	r3, r3, #2
 8009ec4:	bfcc      	ite	gt
 8009ec6:	2400      	movgt	r4, #0
 8009ec8:	2401      	movle	r4, #1
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d863      	bhi.n	8009f96 <_dtoa_r+0x296>
 8009ece:	e8df f003 	tbb	[pc, r3]
 8009ed2:	372a      	.short	0x372a
 8009ed4:	5535      	.short	0x5535
 8009ed6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009eda:	441e      	add	r6, r3
 8009edc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009ee0:	2b20      	cmp	r3, #32
 8009ee2:	bfc1      	itttt	gt
 8009ee4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009ee8:	409f      	lslgt	r7, r3
 8009eea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009eee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009ef2:	bfd6      	itet	le
 8009ef4:	f1c3 0320 	rsble	r3, r3, #32
 8009ef8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009efc:	fa04 f003 	lslle.w	r0, r4, r3
 8009f00:	f7f6 fb00 	bl	8000504 <__aeabi_ui2d>
 8009f04:	2201      	movs	r2, #1
 8009f06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f0a:	3e01      	subs	r6, #1
 8009f0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009f0e:	e777      	b.n	8009e00 <_dtoa_r+0x100>
 8009f10:	2301      	movs	r3, #1
 8009f12:	e7b8      	b.n	8009e86 <_dtoa_r+0x186>
 8009f14:	9012      	str	r0, [sp, #72]	@ 0x48
 8009f16:	e7b7      	b.n	8009e88 <_dtoa_r+0x188>
 8009f18:	427b      	negs	r3, r7
 8009f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	eba8 0807 	sub.w	r8, r8, r7
 8009f22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f24:	e7c4      	b.n	8009eb0 <_dtoa_r+0x1b0>
 8009f26:	2300      	movs	r3, #0
 8009f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	dc35      	bgt.n	8009f9c <_dtoa_r+0x29c>
 8009f30:	2301      	movs	r3, #1
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	9307      	str	r3, [sp, #28]
 8009f36:	461a      	mov	r2, r3
 8009f38:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f3a:	e00b      	b.n	8009f54 <_dtoa_r+0x254>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e7f3      	b.n	8009f28 <_dtoa_r+0x228>
 8009f40:	2300      	movs	r3, #0
 8009f42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f46:	18fb      	adds	r3, r7, r3
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	9307      	str	r3, [sp, #28]
 8009f50:	bfb8      	it	lt
 8009f52:	2301      	movlt	r3, #1
 8009f54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009f58:	2100      	movs	r1, #0
 8009f5a:	2204      	movs	r2, #4
 8009f5c:	f102 0514 	add.w	r5, r2, #20
 8009f60:	429d      	cmp	r5, r3
 8009f62:	d91f      	bls.n	8009fa4 <_dtoa_r+0x2a4>
 8009f64:	6041      	str	r1, [r0, #4]
 8009f66:	4658      	mov	r0, fp
 8009f68:	f000 fd8e 	bl	800aa88 <_Balloc>
 8009f6c:	4682      	mov	sl, r0
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d13c      	bne.n	8009fec <_dtoa_r+0x2ec>
 8009f72:	4b1b      	ldr	r3, [pc, #108]	@ (8009fe0 <_dtoa_r+0x2e0>)
 8009f74:	4602      	mov	r2, r0
 8009f76:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f7a:	e6d8      	b.n	8009d2e <_dtoa_r+0x2e>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e7e0      	b.n	8009f42 <_dtoa_r+0x242>
 8009f80:	2401      	movs	r4, #1
 8009f82:	2300      	movs	r3, #0
 8009f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f88:	f04f 33ff 	mov.w	r3, #4294967295
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	9307      	str	r3, [sp, #28]
 8009f90:	2200      	movs	r2, #0
 8009f92:	2312      	movs	r3, #18
 8009f94:	e7d0      	b.n	8009f38 <_dtoa_r+0x238>
 8009f96:	2301      	movs	r3, #1
 8009f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f9a:	e7f5      	b.n	8009f88 <_dtoa_r+0x288>
 8009f9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	9307      	str	r3, [sp, #28]
 8009fa2:	e7d7      	b.n	8009f54 <_dtoa_r+0x254>
 8009fa4:	3101      	adds	r1, #1
 8009fa6:	0052      	lsls	r2, r2, #1
 8009fa8:	e7d8      	b.n	8009f5c <_dtoa_r+0x25c>
 8009faa:	bf00      	nop
 8009fac:	f3af 8000 	nop.w
 8009fb0:	636f4361 	.word	0x636f4361
 8009fb4:	3fd287a7 	.word	0x3fd287a7
 8009fb8:	8b60c8b3 	.word	0x8b60c8b3
 8009fbc:	3fc68a28 	.word	0x3fc68a28
 8009fc0:	509f79fb 	.word	0x509f79fb
 8009fc4:	3fd34413 	.word	0x3fd34413
 8009fc8:	0800d336 	.word	0x0800d336
 8009fcc:	0800d34d 	.word	0x0800d34d
 8009fd0:	7ff00000 	.word	0x7ff00000
 8009fd4:	0800d301 	.word	0x0800d301
 8009fd8:	3ff80000 	.word	0x3ff80000
 8009fdc:	0800d448 	.word	0x0800d448
 8009fe0:	0800d3a5 	.word	0x0800d3a5
 8009fe4:	0800d332 	.word	0x0800d332
 8009fe8:	0800d300 	.word	0x0800d300
 8009fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ff0:	6018      	str	r0, [r3, #0]
 8009ff2:	9b07      	ldr	r3, [sp, #28]
 8009ff4:	2b0e      	cmp	r3, #14
 8009ff6:	f200 80a4 	bhi.w	800a142 <_dtoa_r+0x442>
 8009ffa:	2c00      	cmp	r4, #0
 8009ffc:	f000 80a1 	beq.w	800a142 <_dtoa_r+0x442>
 800a000:	2f00      	cmp	r7, #0
 800a002:	dd33      	ble.n	800a06c <_dtoa_r+0x36c>
 800a004:	4bad      	ldr	r3, [pc, #692]	@ (800a2bc <_dtoa_r+0x5bc>)
 800a006:	f007 020f 	and.w	r2, r7, #15
 800a00a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a00e:	ed93 7b00 	vldr	d7, [r3]
 800a012:	05f8      	lsls	r0, r7, #23
 800a014:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a018:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a01c:	d516      	bpl.n	800a04c <_dtoa_r+0x34c>
 800a01e:	4ba8      	ldr	r3, [pc, #672]	@ (800a2c0 <_dtoa_r+0x5c0>)
 800a020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a028:	f7f6 fc10 	bl	800084c <__aeabi_ddiv>
 800a02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a030:	f004 040f 	and.w	r4, r4, #15
 800a034:	2603      	movs	r6, #3
 800a036:	4da2      	ldr	r5, [pc, #648]	@ (800a2c0 <_dtoa_r+0x5c0>)
 800a038:	b954      	cbnz	r4, 800a050 <_dtoa_r+0x350>
 800a03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a042:	f7f6 fc03 	bl	800084c <__aeabi_ddiv>
 800a046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a04a:	e028      	b.n	800a09e <_dtoa_r+0x39e>
 800a04c:	2602      	movs	r6, #2
 800a04e:	e7f2      	b.n	800a036 <_dtoa_r+0x336>
 800a050:	07e1      	lsls	r1, r4, #31
 800a052:	d508      	bpl.n	800a066 <_dtoa_r+0x366>
 800a054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a05c:	f7f6 facc 	bl	80005f8 <__aeabi_dmul>
 800a060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a064:	3601      	adds	r6, #1
 800a066:	1064      	asrs	r4, r4, #1
 800a068:	3508      	adds	r5, #8
 800a06a:	e7e5      	b.n	800a038 <_dtoa_r+0x338>
 800a06c:	f000 80d2 	beq.w	800a214 <_dtoa_r+0x514>
 800a070:	427c      	negs	r4, r7
 800a072:	4b92      	ldr	r3, [pc, #584]	@ (800a2bc <_dtoa_r+0x5bc>)
 800a074:	4d92      	ldr	r5, [pc, #584]	@ (800a2c0 <_dtoa_r+0x5c0>)
 800a076:	f004 020f 	and.w	r2, r4, #15
 800a07a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a086:	f7f6 fab7 	bl	80005f8 <__aeabi_dmul>
 800a08a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a08e:	1124      	asrs	r4, r4, #4
 800a090:	2300      	movs	r3, #0
 800a092:	2602      	movs	r6, #2
 800a094:	2c00      	cmp	r4, #0
 800a096:	f040 80b2 	bne.w	800a1fe <_dtoa_r+0x4fe>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1d3      	bne.n	800a046 <_dtoa_r+0x346>
 800a09e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 80b7 	beq.w	800a218 <_dtoa_r+0x518>
 800a0aa:	4b86      	ldr	r3, [pc, #536]	@ (800a2c4 <_dtoa_r+0x5c4>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	f7f6 fd13 	bl	8000adc <__aeabi_dcmplt>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	f000 80ae 	beq.w	800a218 <_dtoa_r+0x518>
 800a0bc:	9b07      	ldr	r3, [sp, #28]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 80aa 	beq.w	800a218 <_dtoa_r+0x518>
 800a0c4:	9b00      	ldr	r3, [sp, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	dd37      	ble.n	800a13a <_dtoa_r+0x43a>
 800a0ca:	1e7b      	subs	r3, r7, #1
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4b7d      	ldr	r3, [pc, #500]	@ (800a2c8 <_dtoa_r+0x5c8>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	f7f6 fa8f 	bl	80005f8 <__aeabi_dmul>
 800a0da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0de:	9c00      	ldr	r4, [sp, #0]
 800a0e0:	3601      	adds	r6, #1
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7f6 fa1e 	bl	8000524 <__aeabi_i2d>
 800a0e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0ec:	f7f6 fa84 	bl	80005f8 <__aeabi_dmul>
 800a0f0:	4b76      	ldr	r3, [pc, #472]	@ (800a2cc <_dtoa_r+0x5cc>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f7f6 f8ca 	bl	800028c <__adddf3>
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a0fe:	2c00      	cmp	r4, #0
 800a100:	f040 808d 	bne.w	800a21e <_dtoa_r+0x51e>
 800a104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a108:	4b71      	ldr	r3, [pc, #452]	@ (800a2d0 <_dtoa_r+0x5d0>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	f7f6 f8bc 	bl	8000288 <__aeabi_dsub>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a118:	462a      	mov	r2, r5
 800a11a:	4633      	mov	r3, r6
 800a11c:	f7f6 fcfc 	bl	8000b18 <__aeabi_dcmpgt>
 800a120:	2800      	cmp	r0, #0
 800a122:	f040 828b 	bne.w	800a63c <_dtoa_r+0x93c>
 800a126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a12a:	462a      	mov	r2, r5
 800a12c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a130:	f7f6 fcd4 	bl	8000adc <__aeabi_dcmplt>
 800a134:	2800      	cmp	r0, #0
 800a136:	f040 8128 	bne.w	800a38a <_dtoa_r+0x68a>
 800a13a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a13e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a142:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a144:	2b00      	cmp	r3, #0
 800a146:	f2c0 815a 	blt.w	800a3fe <_dtoa_r+0x6fe>
 800a14a:	2f0e      	cmp	r7, #14
 800a14c:	f300 8157 	bgt.w	800a3fe <_dtoa_r+0x6fe>
 800a150:	4b5a      	ldr	r3, [pc, #360]	@ (800a2bc <_dtoa_r+0x5bc>)
 800a152:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a156:	ed93 7b00 	vldr	d7, [r3]
 800a15a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	ed8d 7b00 	vstr	d7, [sp]
 800a162:	da03      	bge.n	800a16c <_dtoa_r+0x46c>
 800a164:	9b07      	ldr	r3, [sp, #28]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f340 8101 	ble.w	800a36e <_dtoa_r+0x66e>
 800a16c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a170:	4656      	mov	r6, sl
 800a172:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	f7f6 fb67 	bl	800084c <__aeabi_ddiv>
 800a17e:	f7f6 fceb 	bl	8000b58 <__aeabi_d2iz>
 800a182:	4680      	mov	r8, r0
 800a184:	f7f6 f9ce 	bl	8000524 <__aeabi_i2d>
 800a188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a18c:	f7f6 fa34 	bl	80005f8 <__aeabi_dmul>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	4620      	mov	r0, r4
 800a196:	4629      	mov	r1, r5
 800a198:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a19c:	f7f6 f874 	bl	8000288 <__aeabi_dsub>
 800a1a0:	f806 4b01 	strb.w	r4, [r6], #1
 800a1a4:	9d07      	ldr	r5, [sp, #28]
 800a1a6:	eba6 040a 	sub.w	r4, r6, sl
 800a1aa:	42a5      	cmp	r5, r4
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	f040 8117 	bne.w	800a3e2 <_dtoa_r+0x6e2>
 800a1b4:	f7f6 f86a 	bl	800028c <__adddf3>
 800a1b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1bc:	4604      	mov	r4, r0
 800a1be:	460d      	mov	r5, r1
 800a1c0:	f7f6 fcaa 	bl	8000b18 <__aeabi_dcmpgt>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	f040 80f9 	bne.w	800a3bc <_dtoa_r+0x6bc>
 800a1ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	f7f6 fc79 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1d6:	b118      	cbz	r0, 800a1e0 <_dtoa_r+0x4e0>
 800a1d8:	f018 0f01 	tst.w	r8, #1
 800a1dc:	f040 80ee 	bne.w	800a3bc <_dtoa_r+0x6bc>
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	4658      	mov	r0, fp
 800a1e4:	f000 fc90 	bl	800ab08 <_Bfree>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	7033      	strb	r3, [r6, #0]
 800a1ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a1ee:	3701      	adds	r7, #1
 800a1f0:	601f      	str	r7, [r3, #0]
 800a1f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 831d 	beq.w	800a834 <_dtoa_r+0xb34>
 800a1fa:	601e      	str	r6, [r3, #0]
 800a1fc:	e31a      	b.n	800a834 <_dtoa_r+0xb34>
 800a1fe:	07e2      	lsls	r2, r4, #31
 800a200:	d505      	bpl.n	800a20e <_dtoa_r+0x50e>
 800a202:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a206:	f7f6 f9f7 	bl	80005f8 <__aeabi_dmul>
 800a20a:	3601      	adds	r6, #1
 800a20c:	2301      	movs	r3, #1
 800a20e:	1064      	asrs	r4, r4, #1
 800a210:	3508      	adds	r5, #8
 800a212:	e73f      	b.n	800a094 <_dtoa_r+0x394>
 800a214:	2602      	movs	r6, #2
 800a216:	e742      	b.n	800a09e <_dtoa_r+0x39e>
 800a218:	9c07      	ldr	r4, [sp, #28]
 800a21a:	9704      	str	r7, [sp, #16]
 800a21c:	e761      	b.n	800a0e2 <_dtoa_r+0x3e2>
 800a21e:	4b27      	ldr	r3, [pc, #156]	@ (800a2bc <_dtoa_r+0x5bc>)
 800a220:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a222:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a226:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a22a:	4454      	add	r4, sl
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d053      	beq.n	800a2d8 <_dtoa_r+0x5d8>
 800a230:	4928      	ldr	r1, [pc, #160]	@ (800a2d4 <_dtoa_r+0x5d4>)
 800a232:	2000      	movs	r0, #0
 800a234:	f7f6 fb0a 	bl	800084c <__aeabi_ddiv>
 800a238:	4633      	mov	r3, r6
 800a23a:	462a      	mov	r2, r5
 800a23c:	f7f6 f824 	bl	8000288 <__aeabi_dsub>
 800a240:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a244:	4656      	mov	r6, sl
 800a246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a24a:	f7f6 fc85 	bl	8000b58 <__aeabi_d2iz>
 800a24e:	4605      	mov	r5, r0
 800a250:	f7f6 f968 	bl	8000524 <__aeabi_i2d>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a25c:	f7f6 f814 	bl	8000288 <__aeabi_dsub>
 800a260:	3530      	adds	r5, #48	@ 0x30
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a26a:	f806 5b01 	strb.w	r5, [r6], #1
 800a26e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a272:	f7f6 fc33 	bl	8000adc <__aeabi_dcmplt>
 800a276:	2800      	cmp	r0, #0
 800a278:	d171      	bne.n	800a35e <_dtoa_r+0x65e>
 800a27a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a27e:	4911      	ldr	r1, [pc, #68]	@ (800a2c4 <_dtoa_r+0x5c4>)
 800a280:	2000      	movs	r0, #0
 800a282:	f7f6 f801 	bl	8000288 <__aeabi_dsub>
 800a286:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a28a:	f7f6 fc27 	bl	8000adc <__aeabi_dcmplt>
 800a28e:	2800      	cmp	r0, #0
 800a290:	f040 8095 	bne.w	800a3be <_dtoa_r+0x6be>
 800a294:	42a6      	cmp	r6, r4
 800a296:	f43f af50 	beq.w	800a13a <_dtoa_r+0x43a>
 800a29a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a29e:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c8 <_dtoa_r+0x5c8>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f7f6 f9a9 	bl	80005f8 <__aeabi_dmul>
 800a2a6:	4b08      	ldr	r3, [pc, #32]	@ (800a2c8 <_dtoa_r+0x5c8>)
 800a2a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b2:	f7f6 f9a1 	bl	80005f8 <__aeabi_dmul>
 800a2b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ba:	e7c4      	b.n	800a246 <_dtoa_r+0x546>
 800a2bc:	0800d448 	.word	0x0800d448
 800a2c0:	0800d420 	.word	0x0800d420
 800a2c4:	3ff00000 	.word	0x3ff00000
 800a2c8:	40240000 	.word	0x40240000
 800a2cc:	401c0000 	.word	0x401c0000
 800a2d0:	40140000 	.word	0x40140000
 800a2d4:	3fe00000 	.word	0x3fe00000
 800a2d8:	4631      	mov	r1, r6
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f7f6 f98c 	bl	80005f8 <__aeabi_dmul>
 800a2e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a2e6:	4656      	mov	r6, sl
 800a2e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ec:	f7f6 fc34 	bl	8000b58 <__aeabi_d2iz>
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	f7f6 f917 	bl	8000524 <__aeabi_i2d>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2fe:	f7f5 ffc3 	bl	8000288 <__aeabi_dsub>
 800a302:	3530      	adds	r5, #48	@ 0x30
 800a304:	f806 5b01 	strb.w	r5, [r6], #1
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	42a6      	cmp	r6, r4
 800a30e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a312:	f04f 0200 	mov.w	r2, #0
 800a316:	d124      	bne.n	800a362 <_dtoa_r+0x662>
 800a318:	4bac      	ldr	r3, [pc, #688]	@ (800a5cc <_dtoa_r+0x8cc>)
 800a31a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a31e:	f7f5 ffb5 	bl	800028c <__adddf3>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a32a:	f7f6 fbf5 	bl	8000b18 <__aeabi_dcmpgt>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d145      	bne.n	800a3be <_dtoa_r+0x6be>
 800a332:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a336:	49a5      	ldr	r1, [pc, #660]	@ (800a5cc <_dtoa_r+0x8cc>)
 800a338:	2000      	movs	r0, #0
 800a33a:	f7f5 ffa5 	bl	8000288 <__aeabi_dsub>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a346:	f7f6 fbc9 	bl	8000adc <__aeabi_dcmplt>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	f43f aef5 	beq.w	800a13a <_dtoa_r+0x43a>
 800a350:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a352:	1e73      	subs	r3, r6, #1
 800a354:	9315      	str	r3, [sp, #84]	@ 0x54
 800a356:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a35a:	2b30      	cmp	r3, #48	@ 0x30
 800a35c:	d0f8      	beq.n	800a350 <_dtoa_r+0x650>
 800a35e:	9f04      	ldr	r7, [sp, #16]
 800a360:	e73e      	b.n	800a1e0 <_dtoa_r+0x4e0>
 800a362:	4b9b      	ldr	r3, [pc, #620]	@ (800a5d0 <_dtoa_r+0x8d0>)
 800a364:	f7f6 f948 	bl	80005f8 <__aeabi_dmul>
 800a368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a36c:	e7bc      	b.n	800a2e8 <_dtoa_r+0x5e8>
 800a36e:	d10c      	bne.n	800a38a <_dtoa_r+0x68a>
 800a370:	4b98      	ldr	r3, [pc, #608]	@ (800a5d4 <_dtoa_r+0x8d4>)
 800a372:	2200      	movs	r2, #0
 800a374:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a378:	f7f6 f93e 	bl	80005f8 <__aeabi_dmul>
 800a37c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a380:	f7f6 fbc0 	bl	8000b04 <__aeabi_dcmpge>
 800a384:	2800      	cmp	r0, #0
 800a386:	f000 8157 	beq.w	800a638 <_dtoa_r+0x938>
 800a38a:	2400      	movs	r4, #0
 800a38c:	4625      	mov	r5, r4
 800a38e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a390:	43db      	mvns	r3, r3
 800a392:	9304      	str	r3, [sp, #16]
 800a394:	4656      	mov	r6, sl
 800a396:	2700      	movs	r7, #0
 800a398:	4621      	mov	r1, r4
 800a39a:	4658      	mov	r0, fp
 800a39c:	f000 fbb4 	bl	800ab08 <_Bfree>
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	d0dc      	beq.n	800a35e <_dtoa_r+0x65e>
 800a3a4:	b12f      	cbz	r7, 800a3b2 <_dtoa_r+0x6b2>
 800a3a6:	42af      	cmp	r7, r5
 800a3a8:	d003      	beq.n	800a3b2 <_dtoa_r+0x6b2>
 800a3aa:	4639      	mov	r1, r7
 800a3ac:	4658      	mov	r0, fp
 800a3ae:	f000 fbab 	bl	800ab08 <_Bfree>
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	4658      	mov	r0, fp
 800a3b6:	f000 fba7 	bl	800ab08 <_Bfree>
 800a3ba:	e7d0      	b.n	800a35e <_dtoa_r+0x65e>
 800a3bc:	9704      	str	r7, [sp, #16]
 800a3be:	4633      	mov	r3, r6
 800a3c0:	461e      	mov	r6, r3
 800a3c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3c6:	2a39      	cmp	r2, #57	@ 0x39
 800a3c8:	d107      	bne.n	800a3da <_dtoa_r+0x6da>
 800a3ca:	459a      	cmp	sl, r3
 800a3cc:	d1f8      	bne.n	800a3c0 <_dtoa_r+0x6c0>
 800a3ce:	9a04      	ldr	r2, [sp, #16]
 800a3d0:	3201      	adds	r2, #1
 800a3d2:	9204      	str	r2, [sp, #16]
 800a3d4:	2230      	movs	r2, #48	@ 0x30
 800a3d6:	f88a 2000 	strb.w	r2, [sl]
 800a3da:	781a      	ldrb	r2, [r3, #0]
 800a3dc:	3201      	adds	r2, #1
 800a3de:	701a      	strb	r2, [r3, #0]
 800a3e0:	e7bd      	b.n	800a35e <_dtoa_r+0x65e>
 800a3e2:	4b7b      	ldr	r3, [pc, #492]	@ (800a5d0 <_dtoa_r+0x8d0>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f7f6 f907 	bl	80005f8 <__aeabi_dmul>
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	460d      	mov	r5, r1
 800a3f2:	f7f6 fb69 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f43f aebb 	beq.w	800a172 <_dtoa_r+0x472>
 800a3fc:	e6f0      	b.n	800a1e0 <_dtoa_r+0x4e0>
 800a3fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a400:	2a00      	cmp	r2, #0
 800a402:	f000 80db 	beq.w	800a5bc <_dtoa_r+0x8bc>
 800a406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a408:	2a01      	cmp	r2, #1
 800a40a:	f300 80bf 	bgt.w	800a58c <_dtoa_r+0x88c>
 800a40e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a410:	2a00      	cmp	r2, #0
 800a412:	f000 80b7 	beq.w	800a584 <_dtoa_r+0x884>
 800a416:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a41a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a41c:	4646      	mov	r6, r8
 800a41e:	9a08      	ldr	r2, [sp, #32]
 800a420:	2101      	movs	r1, #1
 800a422:	441a      	add	r2, r3
 800a424:	4658      	mov	r0, fp
 800a426:	4498      	add	r8, r3
 800a428:	9208      	str	r2, [sp, #32]
 800a42a:	f000 fc6b 	bl	800ad04 <__i2b>
 800a42e:	4605      	mov	r5, r0
 800a430:	b15e      	cbz	r6, 800a44a <_dtoa_r+0x74a>
 800a432:	9b08      	ldr	r3, [sp, #32]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dd08      	ble.n	800a44a <_dtoa_r+0x74a>
 800a438:	42b3      	cmp	r3, r6
 800a43a:	9a08      	ldr	r2, [sp, #32]
 800a43c:	bfa8      	it	ge
 800a43e:	4633      	movge	r3, r6
 800a440:	eba8 0803 	sub.w	r8, r8, r3
 800a444:	1af6      	subs	r6, r6, r3
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	9308      	str	r3, [sp, #32]
 800a44a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a44c:	b1f3      	cbz	r3, 800a48c <_dtoa_r+0x78c>
 800a44e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 80b7 	beq.w	800a5c4 <_dtoa_r+0x8c4>
 800a456:	b18c      	cbz	r4, 800a47c <_dtoa_r+0x77c>
 800a458:	4629      	mov	r1, r5
 800a45a:	4622      	mov	r2, r4
 800a45c:	4658      	mov	r0, fp
 800a45e:	f000 fd11 	bl	800ae84 <__pow5mult>
 800a462:	464a      	mov	r2, r9
 800a464:	4601      	mov	r1, r0
 800a466:	4605      	mov	r5, r0
 800a468:	4658      	mov	r0, fp
 800a46a:	f000 fc61 	bl	800ad30 <__multiply>
 800a46e:	4649      	mov	r1, r9
 800a470:	9004      	str	r0, [sp, #16]
 800a472:	4658      	mov	r0, fp
 800a474:	f000 fb48 	bl	800ab08 <_Bfree>
 800a478:	9b04      	ldr	r3, [sp, #16]
 800a47a:	4699      	mov	r9, r3
 800a47c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a47e:	1b1a      	subs	r2, r3, r4
 800a480:	d004      	beq.n	800a48c <_dtoa_r+0x78c>
 800a482:	4649      	mov	r1, r9
 800a484:	4658      	mov	r0, fp
 800a486:	f000 fcfd 	bl	800ae84 <__pow5mult>
 800a48a:	4681      	mov	r9, r0
 800a48c:	2101      	movs	r1, #1
 800a48e:	4658      	mov	r0, fp
 800a490:	f000 fc38 	bl	800ad04 <__i2b>
 800a494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a496:	4604      	mov	r4, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 81cf 	beq.w	800a83c <_dtoa_r+0xb3c>
 800a49e:	461a      	mov	r2, r3
 800a4a0:	4601      	mov	r1, r0
 800a4a2:	4658      	mov	r0, fp
 800a4a4:	f000 fcee 	bl	800ae84 <__pow5mult>
 800a4a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	f300 8095 	bgt.w	800a5dc <_dtoa_r+0x8dc>
 800a4b2:	9b02      	ldr	r3, [sp, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f040 8087 	bne.w	800a5c8 <_dtoa_r+0x8c8>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f040 8089 	bne.w	800a5d8 <_dtoa_r+0x8d8>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4cc:	0d1b      	lsrs	r3, r3, #20
 800a4ce:	051b      	lsls	r3, r3, #20
 800a4d0:	b12b      	cbz	r3, 800a4de <_dtoa_r+0x7de>
 800a4d2:	9b08      	ldr	r3, [sp, #32]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	9308      	str	r3, [sp, #32]
 800a4d8:	f108 0801 	add.w	r8, r8, #1
 800a4dc:	2301      	movs	r3, #1
 800a4de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 81b0 	beq.w	800a848 <_dtoa_r+0xb48>
 800a4e8:	6923      	ldr	r3, [r4, #16]
 800a4ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4ee:	6918      	ldr	r0, [r3, #16]
 800a4f0:	f000 fbbc 	bl	800ac6c <__hi0bits>
 800a4f4:	f1c0 0020 	rsb	r0, r0, #32
 800a4f8:	9b08      	ldr	r3, [sp, #32]
 800a4fa:	4418      	add	r0, r3
 800a4fc:	f010 001f 	ands.w	r0, r0, #31
 800a500:	d077      	beq.n	800a5f2 <_dtoa_r+0x8f2>
 800a502:	f1c0 0320 	rsb	r3, r0, #32
 800a506:	2b04      	cmp	r3, #4
 800a508:	dd6b      	ble.n	800a5e2 <_dtoa_r+0x8e2>
 800a50a:	9b08      	ldr	r3, [sp, #32]
 800a50c:	f1c0 001c 	rsb	r0, r0, #28
 800a510:	4403      	add	r3, r0
 800a512:	4480      	add	r8, r0
 800a514:	4406      	add	r6, r0
 800a516:	9308      	str	r3, [sp, #32]
 800a518:	f1b8 0f00 	cmp.w	r8, #0
 800a51c:	dd05      	ble.n	800a52a <_dtoa_r+0x82a>
 800a51e:	4649      	mov	r1, r9
 800a520:	4642      	mov	r2, r8
 800a522:	4658      	mov	r0, fp
 800a524:	f000 fd08 	bl	800af38 <__lshift>
 800a528:	4681      	mov	r9, r0
 800a52a:	9b08      	ldr	r3, [sp, #32]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	dd05      	ble.n	800a53c <_dtoa_r+0x83c>
 800a530:	4621      	mov	r1, r4
 800a532:	461a      	mov	r2, r3
 800a534:	4658      	mov	r0, fp
 800a536:	f000 fcff 	bl	800af38 <__lshift>
 800a53a:	4604      	mov	r4, r0
 800a53c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d059      	beq.n	800a5f6 <_dtoa_r+0x8f6>
 800a542:	4621      	mov	r1, r4
 800a544:	4648      	mov	r0, r9
 800a546:	f000 fd63 	bl	800b010 <__mcmp>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	da53      	bge.n	800a5f6 <_dtoa_r+0x8f6>
 800a54e:	1e7b      	subs	r3, r7, #1
 800a550:	9304      	str	r3, [sp, #16]
 800a552:	4649      	mov	r1, r9
 800a554:	2300      	movs	r3, #0
 800a556:	220a      	movs	r2, #10
 800a558:	4658      	mov	r0, fp
 800a55a:	f000 faf7 	bl	800ab4c <__multadd>
 800a55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a560:	4681      	mov	r9, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 8172 	beq.w	800a84c <_dtoa_r+0xb4c>
 800a568:	2300      	movs	r3, #0
 800a56a:	4629      	mov	r1, r5
 800a56c:	220a      	movs	r2, #10
 800a56e:	4658      	mov	r0, fp
 800a570:	f000 faec 	bl	800ab4c <__multadd>
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	4605      	mov	r5, r0
 800a57a:	dc67      	bgt.n	800a64c <_dtoa_r+0x94c>
 800a57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a57e:	2b02      	cmp	r3, #2
 800a580:	dc41      	bgt.n	800a606 <_dtoa_r+0x906>
 800a582:	e063      	b.n	800a64c <_dtoa_r+0x94c>
 800a584:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a586:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a58a:	e746      	b.n	800a41a <_dtoa_r+0x71a>
 800a58c:	9b07      	ldr	r3, [sp, #28]
 800a58e:	1e5c      	subs	r4, r3, #1
 800a590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a592:	42a3      	cmp	r3, r4
 800a594:	bfbf      	itttt	lt
 800a596:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a598:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a59a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a59c:	1ae3      	sublt	r3, r4, r3
 800a59e:	bfb4      	ite	lt
 800a5a0:	18d2      	addlt	r2, r2, r3
 800a5a2:	1b1c      	subge	r4, r3, r4
 800a5a4:	9b07      	ldr	r3, [sp, #28]
 800a5a6:	bfbc      	itt	lt
 800a5a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a5aa:	2400      	movlt	r4, #0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bfb5      	itete	lt
 800a5b0:	eba8 0603 	sublt.w	r6, r8, r3
 800a5b4:	9b07      	ldrge	r3, [sp, #28]
 800a5b6:	2300      	movlt	r3, #0
 800a5b8:	4646      	movge	r6, r8
 800a5ba:	e730      	b.n	800a41e <_dtoa_r+0x71e>
 800a5bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a5be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a5c0:	4646      	mov	r6, r8
 800a5c2:	e735      	b.n	800a430 <_dtoa_r+0x730>
 800a5c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5c6:	e75c      	b.n	800a482 <_dtoa_r+0x782>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	e788      	b.n	800a4de <_dtoa_r+0x7de>
 800a5cc:	3fe00000 	.word	0x3fe00000
 800a5d0:	40240000 	.word	0x40240000
 800a5d4:	40140000 	.word	0x40140000
 800a5d8:	9b02      	ldr	r3, [sp, #8]
 800a5da:	e780      	b.n	800a4de <_dtoa_r+0x7de>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5e0:	e782      	b.n	800a4e8 <_dtoa_r+0x7e8>
 800a5e2:	d099      	beq.n	800a518 <_dtoa_r+0x818>
 800a5e4:	9a08      	ldr	r2, [sp, #32]
 800a5e6:	331c      	adds	r3, #28
 800a5e8:	441a      	add	r2, r3
 800a5ea:	4498      	add	r8, r3
 800a5ec:	441e      	add	r6, r3
 800a5ee:	9208      	str	r2, [sp, #32]
 800a5f0:	e792      	b.n	800a518 <_dtoa_r+0x818>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	e7f6      	b.n	800a5e4 <_dtoa_r+0x8e4>
 800a5f6:	9b07      	ldr	r3, [sp, #28]
 800a5f8:	9704      	str	r7, [sp, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	dc20      	bgt.n	800a640 <_dtoa_r+0x940>
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a602:	2b02      	cmp	r3, #2
 800a604:	dd1e      	ble.n	800a644 <_dtoa_r+0x944>
 800a606:	9b00      	ldr	r3, [sp, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f47f aec0 	bne.w	800a38e <_dtoa_r+0x68e>
 800a60e:	4621      	mov	r1, r4
 800a610:	2205      	movs	r2, #5
 800a612:	4658      	mov	r0, fp
 800a614:	f000 fa9a 	bl	800ab4c <__multadd>
 800a618:	4601      	mov	r1, r0
 800a61a:	4604      	mov	r4, r0
 800a61c:	4648      	mov	r0, r9
 800a61e:	f000 fcf7 	bl	800b010 <__mcmp>
 800a622:	2800      	cmp	r0, #0
 800a624:	f77f aeb3 	ble.w	800a38e <_dtoa_r+0x68e>
 800a628:	4656      	mov	r6, sl
 800a62a:	2331      	movs	r3, #49	@ 0x31
 800a62c:	f806 3b01 	strb.w	r3, [r6], #1
 800a630:	9b04      	ldr	r3, [sp, #16]
 800a632:	3301      	adds	r3, #1
 800a634:	9304      	str	r3, [sp, #16]
 800a636:	e6ae      	b.n	800a396 <_dtoa_r+0x696>
 800a638:	9c07      	ldr	r4, [sp, #28]
 800a63a:	9704      	str	r7, [sp, #16]
 800a63c:	4625      	mov	r5, r4
 800a63e:	e7f3      	b.n	800a628 <_dtoa_r+0x928>
 800a640:	9b07      	ldr	r3, [sp, #28]
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 8104 	beq.w	800a854 <_dtoa_r+0xb54>
 800a64c:	2e00      	cmp	r6, #0
 800a64e:	dd05      	ble.n	800a65c <_dtoa_r+0x95c>
 800a650:	4629      	mov	r1, r5
 800a652:	4632      	mov	r2, r6
 800a654:	4658      	mov	r0, fp
 800a656:	f000 fc6f 	bl	800af38 <__lshift>
 800a65a:	4605      	mov	r5, r0
 800a65c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d05a      	beq.n	800a718 <_dtoa_r+0xa18>
 800a662:	6869      	ldr	r1, [r5, #4]
 800a664:	4658      	mov	r0, fp
 800a666:	f000 fa0f 	bl	800aa88 <_Balloc>
 800a66a:	4606      	mov	r6, r0
 800a66c:	b928      	cbnz	r0, 800a67a <_dtoa_r+0x97a>
 800a66e:	4b84      	ldr	r3, [pc, #528]	@ (800a880 <_dtoa_r+0xb80>)
 800a670:	4602      	mov	r2, r0
 800a672:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a676:	f7ff bb5a 	b.w	8009d2e <_dtoa_r+0x2e>
 800a67a:	692a      	ldr	r2, [r5, #16]
 800a67c:	3202      	adds	r2, #2
 800a67e:	0092      	lsls	r2, r2, #2
 800a680:	f105 010c 	add.w	r1, r5, #12
 800a684:	300c      	adds	r0, #12
 800a686:	f001 ff75 	bl	800c574 <memcpy>
 800a68a:	2201      	movs	r2, #1
 800a68c:	4631      	mov	r1, r6
 800a68e:	4658      	mov	r0, fp
 800a690:	f000 fc52 	bl	800af38 <__lshift>
 800a694:	f10a 0301 	add.w	r3, sl, #1
 800a698:	9307      	str	r3, [sp, #28]
 800a69a:	9b00      	ldr	r3, [sp, #0]
 800a69c:	4453      	add	r3, sl
 800a69e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6a0:	9b02      	ldr	r3, [sp, #8]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	462f      	mov	r7, r5
 800a6a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	9b07      	ldr	r3, [sp, #28]
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	4648      	mov	r0, r9
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	f7ff fa9b 	bl	8009bf0 <quorem>
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	9002      	str	r0, [sp, #8]
 800a6be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6c2:	4648      	mov	r0, r9
 800a6c4:	f000 fca4 	bl	800b010 <__mcmp>
 800a6c8:	462a      	mov	r2, r5
 800a6ca:	9008      	str	r0, [sp, #32]
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4658      	mov	r0, fp
 800a6d0:	f000 fcba 	bl	800b048 <__mdiff>
 800a6d4:	68c2      	ldr	r2, [r0, #12]
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	bb02      	cbnz	r2, 800a71c <_dtoa_r+0xa1c>
 800a6da:	4601      	mov	r1, r0
 800a6dc:	4648      	mov	r0, r9
 800a6de:	f000 fc97 	bl	800b010 <__mcmp>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	4631      	mov	r1, r6
 800a6e6:	4658      	mov	r0, fp
 800a6e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6ea:	f000 fa0d 	bl	800ab08 <_Bfree>
 800a6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6f2:	9e07      	ldr	r6, [sp, #28]
 800a6f4:	ea43 0102 	orr.w	r1, r3, r2
 800a6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6fa:	4319      	orrs	r1, r3
 800a6fc:	d110      	bne.n	800a720 <_dtoa_r+0xa20>
 800a6fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a702:	d029      	beq.n	800a758 <_dtoa_r+0xa58>
 800a704:	9b08      	ldr	r3, [sp, #32]
 800a706:	2b00      	cmp	r3, #0
 800a708:	dd02      	ble.n	800a710 <_dtoa_r+0xa10>
 800a70a:	9b02      	ldr	r3, [sp, #8]
 800a70c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a710:	9b00      	ldr	r3, [sp, #0]
 800a712:	f883 8000 	strb.w	r8, [r3]
 800a716:	e63f      	b.n	800a398 <_dtoa_r+0x698>
 800a718:	4628      	mov	r0, r5
 800a71a:	e7bb      	b.n	800a694 <_dtoa_r+0x994>
 800a71c:	2201      	movs	r2, #1
 800a71e:	e7e1      	b.n	800a6e4 <_dtoa_r+0x9e4>
 800a720:	9b08      	ldr	r3, [sp, #32]
 800a722:	2b00      	cmp	r3, #0
 800a724:	db04      	blt.n	800a730 <_dtoa_r+0xa30>
 800a726:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a728:	430b      	orrs	r3, r1
 800a72a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a72c:	430b      	orrs	r3, r1
 800a72e:	d120      	bne.n	800a772 <_dtoa_r+0xa72>
 800a730:	2a00      	cmp	r2, #0
 800a732:	dded      	ble.n	800a710 <_dtoa_r+0xa10>
 800a734:	4649      	mov	r1, r9
 800a736:	2201      	movs	r2, #1
 800a738:	4658      	mov	r0, fp
 800a73a:	f000 fbfd 	bl	800af38 <__lshift>
 800a73e:	4621      	mov	r1, r4
 800a740:	4681      	mov	r9, r0
 800a742:	f000 fc65 	bl	800b010 <__mcmp>
 800a746:	2800      	cmp	r0, #0
 800a748:	dc03      	bgt.n	800a752 <_dtoa_r+0xa52>
 800a74a:	d1e1      	bne.n	800a710 <_dtoa_r+0xa10>
 800a74c:	f018 0f01 	tst.w	r8, #1
 800a750:	d0de      	beq.n	800a710 <_dtoa_r+0xa10>
 800a752:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a756:	d1d8      	bne.n	800a70a <_dtoa_r+0xa0a>
 800a758:	9a00      	ldr	r2, [sp, #0]
 800a75a:	2339      	movs	r3, #57	@ 0x39
 800a75c:	7013      	strb	r3, [r2, #0]
 800a75e:	4633      	mov	r3, r6
 800a760:	461e      	mov	r6, r3
 800a762:	3b01      	subs	r3, #1
 800a764:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a768:	2a39      	cmp	r2, #57	@ 0x39
 800a76a:	d052      	beq.n	800a812 <_dtoa_r+0xb12>
 800a76c:	3201      	adds	r2, #1
 800a76e:	701a      	strb	r2, [r3, #0]
 800a770:	e612      	b.n	800a398 <_dtoa_r+0x698>
 800a772:	2a00      	cmp	r2, #0
 800a774:	dd07      	ble.n	800a786 <_dtoa_r+0xa86>
 800a776:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a77a:	d0ed      	beq.n	800a758 <_dtoa_r+0xa58>
 800a77c:	9a00      	ldr	r2, [sp, #0]
 800a77e:	f108 0301 	add.w	r3, r8, #1
 800a782:	7013      	strb	r3, [r2, #0]
 800a784:	e608      	b.n	800a398 <_dtoa_r+0x698>
 800a786:	9b07      	ldr	r3, [sp, #28]
 800a788:	9a07      	ldr	r2, [sp, #28]
 800a78a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a78e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a790:	4293      	cmp	r3, r2
 800a792:	d028      	beq.n	800a7e6 <_dtoa_r+0xae6>
 800a794:	4649      	mov	r1, r9
 800a796:	2300      	movs	r3, #0
 800a798:	220a      	movs	r2, #10
 800a79a:	4658      	mov	r0, fp
 800a79c:	f000 f9d6 	bl	800ab4c <__multadd>
 800a7a0:	42af      	cmp	r7, r5
 800a7a2:	4681      	mov	r9, r0
 800a7a4:	f04f 0300 	mov.w	r3, #0
 800a7a8:	f04f 020a 	mov.w	r2, #10
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	4658      	mov	r0, fp
 800a7b0:	d107      	bne.n	800a7c2 <_dtoa_r+0xac2>
 800a7b2:	f000 f9cb 	bl	800ab4c <__multadd>
 800a7b6:	4607      	mov	r7, r0
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	9b07      	ldr	r3, [sp, #28]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	9307      	str	r3, [sp, #28]
 800a7c0:	e774      	b.n	800a6ac <_dtoa_r+0x9ac>
 800a7c2:	f000 f9c3 	bl	800ab4c <__multadd>
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	4607      	mov	r7, r0
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	220a      	movs	r2, #10
 800a7ce:	4658      	mov	r0, fp
 800a7d0:	f000 f9bc 	bl	800ab4c <__multadd>
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	e7f0      	b.n	800a7ba <_dtoa_r+0xaba>
 800a7d8:	9b00      	ldr	r3, [sp, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	bfcc      	ite	gt
 800a7de:	461e      	movgt	r6, r3
 800a7e0:	2601      	movle	r6, #1
 800a7e2:	4456      	add	r6, sl
 800a7e4:	2700      	movs	r7, #0
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	4658      	mov	r0, fp
 800a7ec:	f000 fba4 	bl	800af38 <__lshift>
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	4681      	mov	r9, r0
 800a7f4:	f000 fc0c 	bl	800b010 <__mcmp>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	dcb0      	bgt.n	800a75e <_dtoa_r+0xa5e>
 800a7fc:	d102      	bne.n	800a804 <_dtoa_r+0xb04>
 800a7fe:	f018 0f01 	tst.w	r8, #1
 800a802:	d1ac      	bne.n	800a75e <_dtoa_r+0xa5e>
 800a804:	4633      	mov	r3, r6
 800a806:	461e      	mov	r6, r3
 800a808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a80c:	2a30      	cmp	r2, #48	@ 0x30
 800a80e:	d0fa      	beq.n	800a806 <_dtoa_r+0xb06>
 800a810:	e5c2      	b.n	800a398 <_dtoa_r+0x698>
 800a812:	459a      	cmp	sl, r3
 800a814:	d1a4      	bne.n	800a760 <_dtoa_r+0xa60>
 800a816:	9b04      	ldr	r3, [sp, #16]
 800a818:	3301      	adds	r3, #1
 800a81a:	9304      	str	r3, [sp, #16]
 800a81c:	2331      	movs	r3, #49	@ 0x31
 800a81e:	f88a 3000 	strb.w	r3, [sl]
 800a822:	e5b9      	b.n	800a398 <_dtoa_r+0x698>
 800a824:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a826:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a884 <_dtoa_r+0xb84>
 800a82a:	b11b      	cbz	r3, 800a834 <_dtoa_r+0xb34>
 800a82c:	f10a 0308 	add.w	r3, sl, #8
 800a830:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a832:	6013      	str	r3, [r2, #0]
 800a834:	4650      	mov	r0, sl
 800a836:	b019      	add	sp, #100	@ 0x64
 800a838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83e:	2b01      	cmp	r3, #1
 800a840:	f77f ae37 	ble.w	800a4b2 <_dtoa_r+0x7b2>
 800a844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a846:	930a      	str	r3, [sp, #40]	@ 0x28
 800a848:	2001      	movs	r0, #1
 800a84a:	e655      	b.n	800a4f8 <_dtoa_r+0x7f8>
 800a84c:	9b00      	ldr	r3, [sp, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f77f aed6 	ble.w	800a600 <_dtoa_r+0x900>
 800a854:	4656      	mov	r6, sl
 800a856:	4621      	mov	r1, r4
 800a858:	4648      	mov	r0, r9
 800a85a:	f7ff f9c9 	bl	8009bf0 <quorem>
 800a85e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a862:	f806 8b01 	strb.w	r8, [r6], #1
 800a866:	9b00      	ldr	r3, [sp, #0]
 800a868:	eba6 020a 	sub.w	r2, r6, sl
 800a86c:	4293      	cmp	r3, r2
 800a86e:	ddb3      	ble.n	800a7d8 <_dtoa_r+0xad8>
 800a870:	4649      	mov	r1, r9
 800a872:	2300      	movs	r3, #0
 800a874:	220a      	movs	r2, #10
 800a876:	4658      	mov	r0, fp
 800a878:	f000 f968 	bl	800ab4c <__multadd>
 800a87c:	4681      	mov	r9, r0
 800a87e:	e7ea      	b.n	800a856 <_dtoa_r+0xb56>
 800a880:	0800d3a5 	.word	0x0800d3a5
 800a884:	0800d329 	.word	0x0800d329

0800a888 <_free_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4605      	mov	r5, r0
 800a88c:	2900      	cmp	r1, #0
 800a88e:	d041      	beq.n	800a914 <_free_r+0x8c>
 800a890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a894:	1f0c      	subs	r4, r1, #4
 800a896:	2b00      	cmp	r3, #0
 800a898:	bfb8      	it	lt
 800a89a:	18e4      	addlt	r4, r4, r3
 800a89c:	f000 f8e8 	bl	800aa70 <__malloc_lock>
 800a8a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a918 <_free_r+0x90>)
 800a8a2:	6813      	ldr	r3, [r2, #0]
 800a8a4:	b933      	cbnz	r3, 800a8b4 <_free_r+0x2c>
 800a8a6:	6063      	str	r3, [r4, #4]
 800a8a8:	6014      	str	r4, [r2, #0]
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8b0:	f000 b8e4 	b.w	800aa7c <__malloc_unlock>
 800a8b4:	42a3      	cmp	r3, r4
 800a8b6:	d908      	bls.n	800a8ca <_free_r+0x42>
 800a8b8:	6820      	ldr	r0, [r4, #0]
 800a8ba:	1821      	adds	r1, r4, r0
 800a8bc:	428b      	cmp	r3, r1
 800a8be:	bf01      	itttt	eq
 800a8c0:	6819      	ldreq	r1, [r3, #0]
 800a8c2:	685b      	ldreq	r3, [r3, #4]
 800a8c4:	1809      	addeq	r1, r1, r0
 800a8c6:	6021      	streq	r1, [r4, #0]
 800a8c8:	e7ed      	b.n	800a8a6 <_free_r+0x1e>
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	b10b      	cbz	r3, 800a8d4 <_free_r+0x4c>
 800a8d0:	42a3      	cmp	r3, r4
 800a8d2:	d9fa      	bls.n	800a8ca <_free_r+0x42>
 800a8d4:	6811      	ldr	r1, [r2, #0]
 800a8d6:	1850      	adds	r0, r2, r1
 800a8d8:	42a0      	cmp	r0, r4
 800a8da:	d10b      	bne.n	800a8f4 <_free_r+0x6c>
 800a8dc:	6820      	ldr	r0, [r4, #0]
 800a8de:	4401      	add	r1, r0
 800a8e0:	1850      	adds	r0, r2, r1
 800a8e2:	4283      	cmp	r3, r0
 800a8e4:	6011      	str	r1, [r2, #0]
 800a8e6:	d1e0      	bne.n	800a8aa <_free_r+0x22>
 800a8e8:	6818      	ldr	r0, [r3, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	6053      	str	r3, [r2, #4]
 800a8ee:	4408      	add	r0, r1
 800a8f0:	6010      	str	r0, [r2, #0]
 800a8f2:	e7da      	b.n	800a8aa <_free_r+0x22>
 800a8f4:	d902      	bls.n	800a8fc <_free_r+0x74>
 800a8f6:	230c      	movs	r3, #12
 800a8f8:	602b      	str	r3, [r5, #0]
 800a8fa:	e7d6      	b.n	800a8aa <_free_r+0x22>
 800a8fc:	6820      	ldr	r0, [r4, #0]
 800a8fe:	1821      	adds	r1, r4, r0
 800a900:	428b      	cmp	r3, r1
 800a902:	bf04      	itt	eq
 800a904:	6819      	ldreq	r1, [r3, #0]
 800a906:	685b      	ldreq	r3, [r3, #4]
 800a908:	6063      	str	r3, [r4, #4]
 800a90a:	bf04      	itt	eq
 800a90c:	1809      	addeq	r1, r1, r0
 800a90e:	6021      	streq	r1, [r4, #0]
 800a910:	6054      	str	r4, [r2, #4]
 800a912:	e7ca      	b.n	800a8aa <_free_r+0x22>
 800a914:	bd38      	pop	{r3, r4, r5, pc}
 800a916:	bf00      	nop
 800a918:	20000568 	.word	0x20000568

0800a91c <malloc>:
 800a91c:	4b02      	ldr	r3, [pc, #8]	@ (800a928 <malloc+0xc>)
 800a91e:	4601      	mov	r1, r0
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	f000 b825 	b.w	800a970 <_malloc_r>
 800a926:	bf00      	nop
 800a928:	2000001c 	.word	0x2000001c

0800a92c <sbrk_aligned>:
 800a92c:	b570      	push	{r4, r5, r6, lr}
 800a92e:	4e0f      	ldr	r6, [pc, #60]	@ (800a96c <sbrk_aligned+0x40>)
 800a930:	460c      	mov	r4, r1
 800a932:	6831      	ldr	r1, [r6, #0]
 800a934:	4605      	mov	r5, r0
 800a936:	b911      	cbnz	r1, 800a93e <sbrk_aligned+0x12>
 800a938:	f001 fe0c 	bl	800c554 <_sbrk_r>
 800a93c:	6030      	str	r0, [r6, #0]
 800a93e:	4621      	mov	r1, r4
 800a940:	4628      	mov	r0, r5
 800a942:	f001 fe07 	bl	800c554 <_sbrk_r>
 800a946:	1c43      	adds	r3, r0, #1
 800a948:	d103      	bne.n	800a952 <sbrk_aligned+0x26>
 800a94a:	f04f 34ff 	mov.w	r4, #4294967295
 800a94e:	4620      	mov	r0, r4
 800a950:	bd70      	pop	{r4, r5, r6, pc}
 800a952:	1cc4      	adds	r4, r0, #3
 800a954:	f024 0403 	bic.w	r4, r4, #3
 800a958:	42a0      	cmp	r0, r4
 800a95a:	d0f8      	beq.n	800a94e <sbrk_aligned+0x22>
 800a95c:	1a21      	subs	r1, r4, r0
 800a95e:	4628      	mov	r0, r5
 800a960:	f001 fdf8 	bl	800c554 <_sbrk_r>
 800a964:	3001      	adds	r0, #1
 800a966:	d1f2      	bne.n	800a94e <sbrk_aligned+0x22>
 800a968:	e7ef      	b.n	800a94a <sbrk_aligned+0x1e>
 800a96a:	bf00      	nop
 800a96c:	20000564 	.word	0x20000564

0800a970 <_malloc_r>:
 800a970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a974:	1ccd      	adds	r5, r1, #3
 800a976:	f025 0503 	bic.w	r5, r5, #3
 800a97a:	3508      	adds	r5, #8
 800a97c:	2d0c      	cmp	r5, #12
 800a97e:	bf38      	it	cc
 800a980:	250c      	movcc	r5, #12
 800a982:	2d00      	cmp	r5, #0
 800a984:	4606      	mov	r6, r0
 800a986:	db01      	blt.n	800a98c <_malloc_r+0x1c>
 800a988:	42a9      	cmp	r1, r5
 800a98a:	d904      	bls.n	800a996 <_malloc_r+0x26>
 800a98c:	230c      	movs	r3, #12
 800a98e:	6033      	str	r3, [r6, #0]
 800a990:	2000      	movs	r0, #0
 800a992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa6c <_malloc_r+0xfc>
 800a99a:	f000 f869 	bl	800aa70 <__malloc_lock>
 800a99e:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a2:	461c      	mov	r4, r3
 800a9a4:	bb44      	cbnz	r4, 800a9f8 <_malloc_r+0x88>
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f7ff ffbf 	bl	800a92c <sbrk_aligned>
 800a9ae:	1c43      	adds	r3, r0, #1
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	d158      	bne.n	800aa66 <_malloc_r+0xf6>
 800a9b4:	f8d8 4000 	ldr.w	r4, [r8]
 800a9b8:	4627      	mov	r7, r4
 800a9ba:	2f00      	cmp	r7, #0
 800a9bc:	d143      	bne.n	800aa46 <_malloc_r+0xd6>
 800a9be:	2c00      	cmp	r4, #0
 800a9c0:	d04b      	beq.n	800aa5a <_malloc_r+0xea>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	4639      	mov	r1, r7
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	eb04 0903 	add.w	r9, r4, r3
 800a9cc:	f001 fdc2 	bl	800c554 <_sbrk_r>
 800a9d0:	4581      	cmp	r9, r0
 800a9d2:	d142      	bne.n	800aa5a <_malloc_r+0xea>
 800a9d4:	6821      	ldr	r1, [r4, #0]
 800a9d6:	1a6d      	subs	r5, r5, r1
 800a9d8:	4629      	mov	r1, r5
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f7ff ffa6 	bl	800a92c <sbrk_aligned>
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d03a      	beq.n	800aa5a <_malloc_r+0xea>
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	442b      	add	r3, r5
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	bb62      	cbnz	r2, 800aa4c <_malloc_r+0xdc>
 800a9f2:	f8c8 7000 	str.w	r7, [r8]
 800a9f6:	e00f      	b.n	800aa18 <_malloc_r+0xa8>
 800a9f8:	6822      	ldr	r2, [r4, #0]
 800a9fa:	1b52      	subs	r2, r2, r5
 800a9fc:	d420      	bmi.n	800aa40 <_malloc_r+0xd0>
 800a9fe:	2a0b      	cmp	r2, #11
 800aa00:	d917      	bls.n	800aa32 <_malloc_r+0xc2>
 800aa02:	1961      	adds	r1, r4, r5
 800aa04:	42a3      	cmp	r3, r4
 800aa06:	6025      	str	r5, [r4, #0]
 800aa08:	bf18      	it	ne
 800aa0a:	6059      	strne	r1, [r3, #4]
 800aa0c:	6863      	ldr	r3, [r4, #4]
 800aa0e:	bf08      	it	eq
 800aa10:	f8c8 1000 	streq.w	r1, [r8]
 800aa14:	5162      	str	r2, [r4, r5]
 800aa16:	604b      	str	r3, [r1, #4]
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f000 f82f 	bl	800aa7c <__malloc_unlock>
 800aa1e:	f104 000b 	add.w	r0, r4, #11
 800aa22:	1d23      	adds	r3, r4, #4
 800aa24:	f020 0007 	bic.w	r0, r0, #7
 800aa28:	1ac2      	subs	r2, r0, r3
 800aa2a:	bf1c      	itt	ne
 800aa2c:	1a1b      	subne	r3, r3, r0
 800aa2e:	50a3      	strne	r3, [r4, r2]
 800aa30:	e7af      	b.n	800a992 <_malloc_r+0x22>
 800aa32:	6862      	ldr	r2, [r4, #4]
 800aa34:	42a3      	cmp	r3, r4
 800aa36:	bf0c      	ite	eq
 800aa38:	f8c8 2000 	streq.w	r2, [r8]
 800aa3c:	605a      	strne	r2, [r3, #4]
 800aa3e:	e7eb      	b.n	800aa18 <_malloc_r+0xa8>
 800aa40:	4623      	mov	r3, r4
 800aa42:	6864      	ldr	r4, [r4, #4]
 800aa44:	e7ae      	b.n	800a9a4 <_malloc_r+0x34>
 800aa46:	463c      	mov	r4, r7
 800aa48:	687f      	ldr	r7, [r7, #4]
 800aa4a:	e7b6      	b.n	800a9ba <_malloc_r+0x4a>
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	d1fb      	bne.n	800aa4c <_malloc_r+0xdc>
 800aa54:	2300      	movs	r3, #0
 800aa56:	6053      	str	r3, [r2, #4]
 800aa58:	e7de      	b.n	800aa18 <_malloc_r+0xa8>
 800aa5a:	230c      	movs	r3, #12
 800aa5c:	6033      	str	r3, [r6, #0]
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f000 f80c 	bl	800aa7c <__malloc_unlock>
 800aa64:	e794      	b.n	800a990 <_malloc_r+0x20>
 800aa66:	6005      	str	r5, [r0, #0]
 800aa68:	e7d6      	b.n	800aa18 <_malloc_r+0xa8>
 800aa6a:	bf00      	nop
 800aa6c:	20000568 	.word	0x20000568

0800aa70 <__malloc_lock>:
 800aa70:	4801      	ldr	r0, [pc, #4]	@ (800aa78 <__malloc_lock+0x8>)
 800aa72:	f7ff b8b4 	b.w	8009bde <__retarget_lock_acquire_recursive>
 800aa76:	bf00      	nop
 800aa78:	20000560 	.word	0x20000560

0800aa7c <__malloc_unlock>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	@ (800aa84 <__malloc_unlock+0x8>)
 800aa7e:	f7ff b8af 	b.w	8009be0 <__retarget_lock_release_recursive>
 800aa82:	bf00      	nop
 800aa84:	20000560 	.word	0x20000560

0800aa88 <_Balloc>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	69c6      	ldr	r6, [r0, #28]
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	460d      	mov	r5, r1
 800aa90:	b976      	cbnz	r6, 800aab0 <_Balloc+0x28>
 800aa92:	2010      	movs	r0, #16
 800aa94:	f7ff ff42 	bl	800a91c <malloc>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	61e0      	str	r0, [r4, #28]
 800aa9c:	b920      	cbnz	r0, 800aaa8 <_Balloc+0x20>
 800aa9e:	4b18      	ldr	r3, [pc, #96]	@ (800ab00 <_Balloc+0x78>)
 800aaa0:	4818      	ldr	r0, [pc, #96]	@ (800ab04 <_Balloc+0x7c>)
 800aaa2:	216b      	movs	r1, #107	@ 0x6b
 800aaa4:	f001 fd7c 	bl	800c5a0 <__assert_func>
 800aaa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaac:	6006      	str	r6, [r0, #0]
 800aaae:	60c6      	str	r6, [r0, #12]
 800aab0:	69e6      	ldr	r6, [r4, #28]
 800aab2:	68f3      	ldr	r3, [r6, #12]
 800aab4:	b183      	cbz	r3, 800aad8 <_Balloc+0x50>
 800aab6:	69e3      	ldr	r3, [r4, #28]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aabe:	b9b8      	cbnz	r0, 800aaf0 <_Balloc+0x68>
 800aac0:	2101      	movs	r1, #1
 800aac2:	fa01 f605 	lsl.w	r6, r1, r5
 800aac6:	1d72      	adds	r2, r6, #5
 800aac8:	0092      	lsls	r2, r2, #2
 800aaca:	4620      	mov	r0, r4
 800aacc:	f001 fd86 	bl	800c5dc <_calloc_r>
 800aad0:	b160      	cbz	r0, 800aaec <_Balloc+0x64>
 800aad2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aad6:	e00e      	b.n	800aaf6 <_Balloc+0x6e>
 800aad8:	2221      	movs	r2, #33	@ 0x21
 800aada:	2104      	movs	r1, #4
 800aadc:	4620      	mov	r0, r4
 800aade:	f001 fd7d 	bl	800c5dc <_calloc_r>
 800aae2:	69e3      	ldr	r3, [r4, #28]
 800aae4:	60f0      	str	r0, [r6, #12]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e4      	bne.n	800aab6 <_Balloc+0x2e>
 800aaec:	2000      	movs	r0, #0
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	6802      	ldr	r2, [r0, #0]
 800aaf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aafc:	e7f7      	b.n	800aaee <_Balloc+0x66>
 800aafe:	bf00      	nop
 800ab00:	0800d336 	.word	0x0800d336
 800ab04:	0800d3b6 	.word	0x0800d3b6

0800ab08 <_Bfree>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	69c6      	ldr	r6, [r0, #28]
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	460c      	mov	r4, r1
 800ab10:	b976      	cbnz	r6, 800ab30 <_Bfree+0x28>
 800ab12:	2010      	movs	r0, #16
 800ab14:	f7ff ff02 	bl	800a91c <malloc>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	61e8      	str	r0, [r5, #28]
 800ab1c:	b920      	cbnz	r0, 800ab28 <_Bfree+0x20>
 800ab1e:	4b09      	ldr	r3, [pc, #36]	@ (800ab44 <_Bfree+0x3c>)
 800ab20:	4809      	ldr	r0, [pc, #36]	@ (800ab48 <_Bfree+0x40>)
 800ab22:	218f      	movs	r1, #143	@ 0x8f
 800ab24:	f001 fd3c 	bl	800c5a0 <__assert_func>
 800ab28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab2c:	6006      	str	r6, [r0, #0]
 800ab2e:	60c6      	str	r6, [r0, #12]
 800ab30:	b13c      	cbz	r4, 800ab42 <_Bfree+0x3a>
 800ab32:	69eb      	ldr	r3, [r5, #28]
 800ab34:	6862      	ldr	r2, [r4, #4]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab3c:	6021      	str	r1, [r4, #0]
 800ab3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	0800d336 	.word	0x0800d336
 800ab48:	0800d3b6 	.word	0x0800d3b6

0800ab4c <__multadd>:
 800ab4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab50:	690d      	ldr	r5, [r1, #16]
 800ab52:	4607      	mov	r7, r0
 800ab54:	460c      	mov	r4, r1
 800ab56:	461e      	mov	r6, r3
 800ab58:	f101 0c14 	add.w	ip, r1, #20
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	f8dc 3000 	ldr.w	r3, [ip]
 800ab62:	b299      	uxth	r1, r3
 800ab64:	fb02 6101 	mla	r1, r2, r1, r6
 800ab68:	0c1e      	lsrs	r6, r3, #16
 800ab6a:	0c0b      	lsrs	r3, r1, #16
 800ab6c:	fb02 3306 	mla	r3, r2, r6, r3
 800ab70:	b289      	uxth	r1, r1
 800ab72:	3001      	adds	r0, #1
 800ab74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab78:	4285      	cmp	r5, r0
 800ab7a:	f84c 1b04 	str.w	r1, [ip], #4
 800ab7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab82:	dcec      	bgt.n	800ab5e <__multadd+0x12>
 800ab84:	b30e      	cbz	r6, 800abca <__multadd+0x7e>
 800ab86:	68a3      	ldr	r3, [r4, #8]
 800ab88:	42ab      	cmp	r3, r5
 800ab8a:	dc19      	bgt.n	800abc0 <__multadd+0x74>
 800ab8c:	6861      	ldr	r1, [r4, #4]
 800ab8e:	4638      	mov	r0, r7
 800ab90:	3101      	adds	r1, #1
 800ab92:	f7ff ff79 	bl	800aa88 <_Balloc>
 800ab96:	4680      	mov	r8, r0
 800ab98:	b928      	cbnz	r0, 800aba6 <__multadd+0x5a>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	4b0c      	ldr	r3, [pc, #48]	@ (800abd0 <__multadd+0x84>)
 800ab9e:	480d      	ldr	r0, [pc, #52]	@ (800abd4 <__multadd+0x88>)
 800aba0:	21ba      	movs	r1, #186	@ 0xba
 800aba2:	f001 fcfd 	bl	800c5a0 <__assert_func>
 800aba6:	6922      	ldr	r2, [r4, #16]
 800aba8:	3202      	adds	r2, #2
 800abaa:	f104 010c 	add.w	r1, r4, #12
 800abae:	0092      	lsls	r2, r2, #2
 800abb0:	300c      	adds	r0, #12
 800abb2:	f001 fcdf 	bl	800c574 <memcpy>
 800abb6:	4621      	mov	r1, r4
 800abb8:	4638      	mov	r0, r7
 800abba:	f7ff ffa5 	bl	800ab08 <_Bfree>
 800abbe:	4644      	mov	r4, r8
 800abc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abc4:	3501      	adds	r5, #1
 800abc6:	615e      	str	r6, [r3, #20]
 800abc8:	6125      	str	r5, [r4, #16]
 800abca:	4620      	mov	r0, r4
 800abcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd0:	0800d3a5 	.word	0x0800d3a5
 800abd4:	0800d3b6 	.word	0x0800d3b6

0800abd8 <__s2b>:
 800abd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abdc:	460c      	mov	r4, r1
 800abde:	4615      	mov	r5, r2
 800abe0:	461f      	mov	r7, r3
 800abe2:	2209      	movs	r2, #9
 800abe4:	3308      	adds	r3, #8
 800abe6:	4606      	mov	r6, r0
 800abe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800abec:	2100      	movs	r1, #0
 800abee:	2201      	movs	r2, #1
 800abf0:	429a      	cmp	r2, r3
 800abf2:	db09      	blt.n	800ac08 <__s2b+0x30>
 800abf4:	4630      	mov	r0, r6
 800abf6:	f7ff ff47 	bl	800aa88 <_Balloc>
 800abfa:	b940      	cbnz	r0, 800ac0e <__s2b+0x36>
 800abfc:	4602      	mov	r2, r0
 800abfe:	4b19      	ldr	r3, [pc, #100]	@ (800ac64 <__s2b+0x8c>)
 800ac00:	4819      	ldr	r0, [pc, #100]	@ (800ac68 <__s2b+0x90>)
 800ac02:	21d3      	movs	r1, #211	@ 0xd3
 800ac04:	f001 fccc 	bl	800c5a0 <__assert_func>
 800ac08:	0052      	lsls	r2, r2, #1
 800ac0a:	3101      	adds	r1, #1
 800ac0c:	e7f0      	b.n	800abf0 <__s2b+0x18>
 800ac0e:	9b08      	ldr	r3, [sp, #32]
 800ac10:	6143      	str	r3, [r0, #20]
 800ac12:	2d09      	cmp	r5, #9
 800ac14:	f04f 0301 	mov.w	r3, #1
 800ac18:	6103      	str	r3, [r0, #16]
 800ac1a:	dd16      	ble.n	800ac4a <__s2b+0x72>
 800ac1c:	f104 0909 	add.w	r9, r4, #9
 800ac20:	46c8      	mov	r8, r9
 800ac22:	442c      	add	r4, r5
 800ac24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac28:	4601      	mov	r1, r0
 800ac2a:	3b30      	subs	r3, #48	@ 0x30
 800ac2c:	220a      	movs	r2, #10
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f7ff ff8c 	bl	800ab4c <__multadd>
 800ac34:	45a0      	cmp	r8, r4
 800ac36:	d1f5      	bne.n	800ac24 <__s2b+0x4c>
 800ac38:	f1a5 0408 	sub.w	r4, r5, #8
 800ac3c:	444c      	add	r4, r9
 800ac3e:	1b2d      	subs	r5, r5, r4
 800ac40:	1963      	adds	r3, r4, r5
 800ac42:	42bb      	cmp	r3, r7
 800ac44:	db04      	blt.n	800ac50 <__s2b+0x78>
 800ac46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac4a:	340a      	adds	r4, #10
 800ac4c:	2509      	movs	r5, #9
 800ac4e:	e7f6      	b.n	800ac3e <__s2b+0x66>
 800ac50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac54:	4601      	mov	r1, r0
 800ac56:	3b30      	subs	r3, #48	@ 0x30
 800ac58:	220a      	movs	r2, #10
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f7ff ff76 	bl	800ab4c <__multadd>
 800ac60:	e7ee      	b.n	800ac40 <__s2b+0x68>
 800ac62:	bf00      	nop
 800ac64:	0800d3a5 	.word	0x0800d3a5
 800ac68:	0800d3b6 	.word	0x0800d3b6

0800ac6c <__hi0bits>:
 800ac6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ac70:	4603      	mov	r3, r0
 800ac72:	bf36      	itet	cc
 800ac74:	0403      	lslcc	r3, r0, #16
 800ac76:	2000      	movcs	r0, #0
 800ac78:	2010      	movcc	r0, #16
 800ac7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac7e:	bf3c      	itt	cc
 800ac80:	021b      	lslcc	r3, r3, #8
 800ac82:	3008      	addcc	r0, #8
 800ac84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac88:	bf3c      	itt	cc
 800ac8a:	011b      	lslcc	r3, r3, #4
 800ac8c:	3004      	addcc	r0, #4
 800ac8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac92:	bf3c      	itt	cc
 800ac94:	009b      	lslcc	r3, r3, #2
 800ac96:	3002      	addcc	r0, #2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	db05      	blt.n	800aca8 <__hi0bits+0x3c>
 800ac9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aca0:	f100 0001 	add.w	r0, r0, #1
 800aca4:	bf08      	it	eq
 800aca6:	2020      	moveq	r0, #32
 800aca8:	4770      	bx	lr

0800acaa <__lo0bits>:
 800acaa:	6803      	ldr	r3, [r0, #0]
 800acac:	4602      	mov	r2, r0
 800acae:	f013 0007 	ands.w	r0, r3, #7
 800acb2:	d00b      	beq.n	800accc <__lo0bits+0x22>
 800acb4:	07d9      	lsls	r1, r3, #31
 800acb6:	d421      	bmi.n	800acfc <__lo0bits+0x52>
 800acb8:	0798      	lsls	r0, r3, #30
 800acba:	bf49      	itett	mi
 800acbc:	085b      	lsrmi	r3, r3, #1
 800acbe:	089b      	lsrpl	r3, r3, #2
 800acc0:	2001      	movmi	r0, #1
 800acc2:	6013      	strmi	r3, [r2, #0]
 800acc4:	bf5c      	itt	pl
 800acc6:	6013      	strpl	r3, [r2, #0]
 800acc8:	2002      	movpl	r0, #2
 800acca:	4770      	bx	lr
 800accc:	b299      	uxth	r1, r3
 800acce:	b909      	cbnz	r1, 800acd4 <__lo0bits+0x2a>
 800acd0:	0c1b      	lsrs	r3, r3, #16
 800acd2:	2010      	movs	r0, #16
 800acd4:	b2d9      	uxtb	r1, r3
 800acd6:	b909      	cbnz	r1, 800acdc <__lo0bits+0x32>
 800acd8:	3008      	adds	r0, #8
 800acda:	0a1b      	lsrs	r3, r3, #8
 800acdc:	0719      	lsls	r1, r3, #28
 800acde:	bf04      	itt	eq
 800ace0:	091b      	lsreq	r3, r3, #4
 800ace2:	3004      	addeq	r0, #4
 800ace4:	0799      	lsls	r1, r3, #30
 800ace6:	bf04      	itt	eq
 800ace8:	089b      	lsreq	r3, r3, #2
 800acea:	3002      	addeq	r0, #2
 800acec:	07d9      	lsls	r1, r3, #31
 800acee:	d403      	bmi.n	800acf8 <__lo0bits+0x4e>
 800acf0:	085b      	lsrs	r3, r3, #1
 800acf2:	f100 0001 	add.w	r0, r0, #1
 800acf6:	d003      	beq.n	800ad00 <__lo0bits+0x56>
 800acf8:	6013      	str	r3, [r2, #0]
 800acfa:	4770      	bx	lr
 800acfc:	2000      	movs	r0, #0
 800acfe:	4770      	bx	lr
 800ad00:	2020      	movs	r0, #32
 800ad02:	4770      	bx	lr

0800ad04 <__i2b>:
 800ad04:	b510      	push	{r4, lr}
 800ad06:	460c      	mov	r4, r1
 800ad08:	2101      	movs	r1, #1
 800ad0a:	f7ff febd 	bl	800aa88 <_Balloc>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	b928      	cbnz	r0, 800ad1e <__i2b+0x1a>
 800ad12:	4b05      	ldr	r3, [pc, #20]	@ (800ad28 <__i2b+0x24>)
 800ad14:	4805      	ldr	r0, [pc, #20]	@ (800ad2c <__i2b+0x28>)
 800ad16:	f240 1145 	movw	r1, #325	@ 0x145
 800ad1a:	f001 fc41 	bl	800c5a0 <__assert_func>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	6144      	str	r4, [r0, #20]
 800ad22:	6103      	str	r3, [r0, #16]
 800ad24:	bd10      	pop	{r4, pc}
 800ad26:	bf00      	nop
 800ad28:	0800d3a5 	.word	0x0800d3a5
 800ad2c:	0800d3b6 	.word	0x0800d3b6

0800ad30 <__multiply>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	4614      	mov	r4, r2
 800ad36:	690a      	ldr	r2, [r1, #16]
 800ad38:	6923      	ldr	r3, [r4, #16]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	bfa8      	it	ge
 800ad3e:	4623      	movge	r3, r4
 800ad40:	460f      	mov	r7, r1
 800ad42:	bfa4      	itt	ge
 800ad44:	460c      	movge	r4, r1
 800ad46:	461f      	movge	r7, r3
 800ad48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ad4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ad50:	68a3      	ldr	r3, [r4, #8]
 800ad52:	6861      	ldr	r1, [r4, #4]
 800ad54:	eb0a 0609 	add.w	r6, sl, r9
 800ad58:	42b3      	cmp	r3, r6
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	bfb8      	it	lt
 800ad5e:	3101      	addlt	r1, #1
 800ad60:	f7ff fe92 	bl	800aa88 <_Balloc>
 800ad64:	b930      	cbnz	r0, 800ad74 <__multiply+0x44>
 800ad66:	4602      	mov	r2, r0
 800ad68:	4b44      	ldr	r3, [pc, #272]	@ (800ae7c <__multiply+0x14c>)
 800ad6a:	4845      	ldr	r0, [pc, #276]	@ (800ae80 <__multiply+0x150>)
 800ad6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad70:	f001 fc16 	bl	800c5a0 <__assert_func>
 800ad74:	f100 0514 	add.w	r5, r0, #20
 800ad78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad7c:	462b      	mov	r3, r5
 800ad7e:	2200      	movs	r2, #0
 800ad80:	4543      	cmp	r3, r8
 800ad82:	d321      	bcc.n	800adc8 <__multiply+0x98>
 800ad84:	f107 0114 	add.w	r1, r7, #20
 800ad88:	f104 0214 	add.w	r2, r4, #20
 800ad8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ad90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ad94:	9302      	str	r3, [sp, #8]
 800ad96:	1b13      	subs	r3, r2, r4
 800ad98:	3b15      	subs	r3, #21
 800ad9a:	f023 0303 	bic.w	r3, r3, #3
 800ad9e:	3304      	adds	r3, #4
 800ada0:	f104 0715 	add.w	r7, r4, #21
 800ada4:	42ba      	cmp	r2, r7
 800ada6:	bf38      	it	cc
 800ada8:	2304      	movcc	r3, #4
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	9b02      	ldr	r3, [sp, #8]
 800adae:	9103      	str	r1, [sp, #12]
 800adb0:	428b      	cmp	r3, r1
 800adb2:	d80c      	bhi.n	800adce <__multiply+0x9e>
 800adb4:	2e00      	cmp	r6, #0
 800adb6:	dd03      	ble.n	800adc0 <__multiply+0x90>
 800adb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d05b      	beq.n	800ae78 <__multiply+0x148>
 800adc0:	6106      	str	r6, [r0, #16]
 800adc2:	b005      	add	sp, #20
 800adc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc8:	f843 2b04 	str.w	r2, [r3], #4
 800adcc:	e7d8      	b.n	800ad80 <__multiply+0x50>
 800adce:	f8b1 a000 	ldrh.w	sl, [r1]
 800add2:	f1ba 0f00 	cmp.w	sl, #0
 800add6:	d024      	beq.n	800ae22 <__multiply+0xf2>
 800add8:	f104 0e14 	add.w	lr, r4, #20
 800addc:	46a9      	mov	r9, r5
 800adde:	f04f 0c00 	mov.w	ip, #0
 800ade2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ade6:	f8d9 3000 	ldr.w	r3, [r9]
 800adea:	fa1f fb87 	uxth.w	fp, r7
 800adee:	b29b      	uxth	r3, r3
 800adf0:	fb0a 330b 	mla	r3, sl, fp, r3
 800adf4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800adf8:	f8d9 7000 	ldr.w	r7, [r9]
 800adfc:	4463      	add	r3, ip
 800adfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae02:	fb0a c70b 	mla	r7, sl, fp, ip
 800ae06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae10:	4572      	cmp	r2, lr
 800ae12:	f849 3b04 	str.w	r3, [r9], #4
 800ae16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae1a:	d8e2      	bhi.n	800ade2 <__multiply+0xb2>
 800ae1c:	9b01      	ldr	r3, [sp, #4]
 800ae1e:	f845 c003 	str.w	ip, [r5, r3]
 800ae22:	9b03      	ldr	r3, [sp, #12]
 800ae24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae28:	3104      	adds	r1, #4
 800ae2a:	f1b9 0f00 	cmp.w	r9, #0
 800ae2e:	d021      	beq.n	800ae74 <__multiply+0x144>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	f104 0c14 	add.w	ip, r4, #20
 800ae36:	46ae      	mov	lr, r5
 800ae38:	f04f 0a00 	mov.w	sl, #0
 800ae3c:	f8bc b000 	ldrh.w	fp, [ip]
 800ae40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ae44:	fb09 770b 	mla	r7, r9, fp, r7
 800ae48:	4457      	add	r7, sl
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae50:	f84e 3b04 	str.w	r3, [lr], #4
 800ae54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae5c:	f8be 3000 	ldrh.w	r3, [lr]
 800ae60:	fb09 330a 	mla	r3, r9, sl, r3
 800ae64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ae68:	4562      	cmp	r2, ip
 800ae6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae6e:	d8e5      	bhi.n	800ae3c <__multiply+0x10c>
 800ae70:	9f01      	ldr	r7, [sp, #4]
 800ae72:	51eb      	str	r3, [r5, r7]
 800ae74:	3504      	adds	r5, #4
 800ae76:	e799      	b.n	800adac <__multiply+0x7c>
 800ae78:	3e01      	subs	r6, #1
 800ae7a:	e79b      	b.n	800adb4 <__multiply+0x84>
 800ae7c:	0800d3a5 	.word	0x0800d3a5
 800ae80:	0800d3b6 	.word	0x0800d3b6

0800ae84 <__pow5mult>:
 800ae84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae88:	4615      	mov	r5, r2
 800ae8a:	f012 0203 	ands.w	r2, r2, #3
 800ae8e:	4607      	mov	r7, r0
 800ae90:	460e      	mov	r6, r1
 800ae92:	d007      	beq.n	800aea4 <__pow5mult+0x20>
 800ae94:	4c25      	ldr	r4, [pc, #148]	@ (800af2c <__pow5mult+0xa8>)
 800ae96:	3a01      	subs	r2, #1
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae9e:	f7ff fe55 	bl	800ab4c <__multadd>
 800aea2:	4606      	mov	r6, r0
 800aea4:	10ad      	asrs	r5, r5, #2
 800aea6:	d03d      	beq.n	800af24 <__pow5mult+0xa0>
 800aea8:	69fc      	ldr	r4, [r7, #28]
 800aeaa:	b97c      	cbnz	r4, 800aecc <__pow5mult+0x48>
 800aeac:	2010      	movs	r0, #16
 800aeae:	f7ff fd35 	bl	800a91c <malloc>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	61f8      	str	r0, [r7, #28]
 800aeb6:	b928      	cbnz	r0, 800aec4 <__pow5mult+0x40>
 800aeb8:	4b1d      	ldr	r3, [pc, #116]	@ (800af30 <__pow5mult+0xac>)
 800aeba:	481e      	ldr	r0, [pc, #120]	@ (800af34 <__pow5mult+0xb0>)
 800aebc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aec0:	f001 fb6e 	bl	800c5a0 <__assert_func>
 800aec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aec8:	6004      	str	r4, [r0, #0]
 800aeca:	60c4      	str	r4, [r0, #12]
 800aecc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aed4:	b94c      	cbnz	r4, 800aeea <__pow5mult+0x66>
 800aed6:	f240 2171 	movw	r1, #625	@ 0x271
 800aeda:	4638      	mov	r0, r7
 800aedc:	f7ff ff12 	bl	800ad04 <__i2b>
 800aee0:	2300      	movs	r3, #0
 800aee2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aee6:	4604      	mov	r4, r0
 800aee8:	6003      	str	r3, [r0, #0]
 800aeea:	f04f 0900 	mov.w	r9, #0
 800aeee:	07eb      	lsls	r3, r5, #31
 800aef0:	d50a      	bpl.n	800af08 <__pow5mult+0x84>
 800aef2:	4631      	mov	r1, r6
 800aef4:	4622      	mov	r2, r4
 800aef6:	4638      	mov	r0, r7
 800aef8:	f7ff ff1a 	bl	800ad30 <__multiply>
 800aefc:	4631      	mov	r1, r6
 800aefe:	4680      	mov	r8, r0
 800af00:	4638      	mov	r0, r7
 800af02:	f7ff fe01 	bl	800ab08 <_Bfree>
 800af06:	4646      	mov	r6, r8
 800af08:	106d      	asrs	r5, r5, #1
 800af0a:	d00b      	beq.n	800af24 <__pow5mult+0xa0>
 800af0c:	6820      	ldr	r0, [r4, #0]
 800af0e:	b938      	cbnz	r0, 800af20 <__pow5mult+0x9c>
 800af10:	4622      	mov	r2, r4
 800af12:	4621      	mov	r1, r4
 800af14:	4638      	mov	r0, r7
 800af16:	f7ff ff0b 	bl	800ad30 <__multiply>
 800af1a:	6020      	str	r0, [r4, #0]
 800af1c:	f8c0 9000 	str.w	r9, [r0]
 800af20:	4604      	mov	r4, r0
 800af22:	e7e4      	b.n	800aeee <__pow5mult+0x6a>
 800af24:	4630      	mov	r0, r6
 800af26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af2a:	bf00      	nop
 800af2c:	0800d410 	.word	0x0800d410
 800af30:	0800d336 	.word	0x0800d336
 800af34:	0800d3b6 	.word	0x0800d3b6

0800af38 <__lshift>:
 800af38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	460c      	mov	r4, r1
 800af3e:	6849      	ldr	r1, [r1, #4]
 800af40:	6923      	ldr	r3, [r4, #16]
 800af42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af46:	68a3      	ldr	r3, [r4, #8]
 800af48:	4607      	mov	r7, r0
 800af4a:	4691      	mov	r9, r2
 800af4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af50:	f108 0601 	add.w	r6, r8, #1
 800af54:	42b3      	cmp	r3, r6
 800af56:	db0b      	blt.n	800af70 <__lshift+0x38>
 800af58:	4638      	mov	r0, r7
 800af5a:	f7ff fd95 	bl	800aa88 <_Balloc>
 800af5e:	4605      	mov	r5, r0
 800af60:	b948      	cbnz	r0, 800af76 <__lshift+0x3e>
 800af62:	4602      	mov	r2, r0
 800af64:	4b28      	ldr	r3, [pc, #160]	@ (800b008 <__lshift+0xd0>)
 800af66:	4829      	ldr	r0, [pc, #164]	@ (800b00c <__lshift+0xd4>)
 800af68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af6c:	f001 fb18 	bl	800c5a0 <__assert_func>
 800af70:	3101      	adds	r1, #1
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	e7ee      	b.n	800af54 <__lshift+0x1c>
 800af76:	2300      	movs	r3, #0
 800af78:	f100 0114 	add.w	r1, r0, #20
 800af7c:	f100 0210 	add.w	r2, r0, #16
 800af80:	4618      	mov	r0, r3
 800af82:	4553      	cmp	r3, sl
 800af84:	db33      	blt.n	800afee <__lshift+0xb6>
 800af86:	6920      	ldr	r0, [r4, #16]
 800af88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af8c:	f104 0314 	add.w	r3, r4, #20
 800af90:	f019 091f 	ands.w	r9, r9, #31
 800af94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af9c:	d02b      	beq.n	800aff6 <__lshift+0xbe>
 800af9e:	f1c9 0e20 	rsb	lr, r9, #32
 800afa2:	468a      	mov	sl, r1
 800afa4:	2200      	movs	r2, #0
 800afa6:	6818      	ldr	r0, [r3, #0]
 800afa8:	fa00 f009 	lsl.w	r0, r0, r9
 800afac:	4310      	orrs	r0, r2
 800afae:	f84a 0b04 	str.w	r0, [sl], #4
 800afb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800afb6:	459c      	cmp	ip, r3
 800afb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800afbc:	d8f3      	bhi.n	800afa6 <__lshift+0x6e>
 800afbe:	ebac 0304 	sub.w	r3, ip, r4
 800afc2:	3b15      	subs	r3, #21
 800afc4:	f023 0303 	bic.w	r3, r3, #3
 800afc8:	3304      	adds	r3, #4
 800afca:	f104 0015 	add.w	r0, r4, #21
 800afce:	4584      	cmp	ip, r0
 800afd0:	bf38      	it	cc
 800afd2:	2304      	movcc	r3, #4
 800afd4:	50ca      	str	r2, [r1, r3]
 800afd6:	b10a      	cbz	r2, 800afdc <__lshift+0xa4>
 800afd8:	f108 0602 	add.w	r6, r8, #2
 800afdc:	3e01      	subs	r6, #1
 800afde:	4638      	mov	r0, r7
 800afe0:	612e      	str	r6, [r5, #16]
 800afe2:	4621      	mov	r1, r4
 800afe4:	f7ff fd90 	bl	800ab08 <_Bfree>
 800afe8:	4628      	mov	r0, r5
 800afea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afee:	f842 0f04 	str.w	r0, [r2, #4]!
 800aff2:	3301      	adds	r3, #1
 800aff4:	e7c5      	b.n	800af82 <__lshift+0x4a>
 800aff6:	3904      	subs	r1, #4
 800aff8:	f853 2b04 	ldr.w	r2, [r3], #4
 800affc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b000:	459c      	cmp	ip, r3
 800b002:	d8f9      	bhi.n	800aff8 <__lshift+0xc0>
 800b004:	e7ea      	b.n	800afdc <__lshift+0xa4>
 800b006:	bf00      	nop
 800b008:	0800d3a5 	.word	0x0800d3a5
 800b00c:	0800d3b6 	.word	0x0800d3b6

0800b010 <__mcmp>:
 800b010:	690a      	ldr	r2, [r1, #16]
 800b012:	4603      	mov	r3, r0
 800b014:	6900      	ldr	r0, [r0, #16]
 800b016:	1a80      	subs	r0, r0, r2
 800b018:	b530      	push	{r4, r5, lr}
 800b01a:	d10e      	bne.n	800b03a <__mcmp+0x2a>
 800b01c:	3314      	adds	r3, #20
 800b01e:	3114      	adds	r1, #20
 800b020:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b024:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b028:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b02c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b030:	4295      	cmp	r5, r2
 800b032:	d003      	beq.n	800b03c <__mcmp+0x2c>
 800b034:	d205      	bcs.n	800b042 <__mcmp+0x32>
 800b036:	f04f 30ff 	mov.w	r0, #4294967295
 800b03a:	bd30      	pop	{r4, r5, pc}
 800b03c:	42a3      	cmp	r3, r4
 800b03e:	d3f3      	bcc.n	800b028 <__mcmp+0x18>
 800b040:	e7fb      	b.n	800b03a <__mcmp+0x2a>
 800b042:	2001      	movs	r0, #1
 800b044:	e7f9      	b.n	800b03a <__mcmp+0x2a>
	...

0800b048 <__mdiff>:
 800b048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	4689      	mov	r9, r1
 800b04e:	4606      	mov	r6, r0
 800b050:	4611      	mov	r1, r2
 800b052:	4648      	mov	r0, r9
 800b054:	4614      	mov	r4, r2
 800b056:	f7ff ffdb 	bl	800b010 <__mcmp>
 800b05a:	1e05      	subs	r5, r0, #0
 800b05c:	d112      	bne.n	800b084 <__mdiff+0x3c>
 800b05e:	4629      	mov	r1, r5
 800b060:	4630      	mov	r0, r6
 800b062:	f7ff fd11 	bl	800aa88 <_Balloc>
 800b066:	4602      	mov	r2, r0
 800b068:	b928      	cbnz	r0, 800b076 <__mdiff+0x2e>
 800b06a:	4b3f      	ldr	r3, [pc, #252]	@ (800b168 <__mdiff+0x120>)
 800b06c:	f240 2137 	movw	r1, #567	@ 0x237
 800b070:	483e      	ldr	r0, [pc, #248]	@ (800b16c <__mdiff+0x124>)
 800b072:	f001 fa95 	bl	800c5a0 <__assert_func>
 800b076:	2301      	movs	r3, #1
 800b078:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b07c:	4610      	mov	r0, r2
 800b07e:	b003      	add	sp, #12
 800b080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b084:	bfbc      	itt	lt
 800b086:	464b      	movlt	r3, r9
 800b088:	46a1      	movlt	r9, r4
 800b08a:	4630      	mov	r0, r6
 800b08c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b090:	bfba      	itte	lt
 800b092:	461c      	movlt	r4, r3
 800b094:	2501      	movlt	r5, #1
 800b096:	2500      	movge	r5, #0
 800b098:	f7ff fcf6 	bl	800aa88 <_Balloc>
 800b09c:	4602      	mov	r2, r0
 800b09e:	b918      	cbnz	r0, 800b0a8 <__mdiff+0x60>
 800b0a0:	4b31      	ldr	r3, [pc, #196]	@ (800b168 <__mdiff+0x120>)
 800b0a2:	f240 2145 	movw	r1, #581	@ 0x245
 800b0a6:	e7e3      	b.n	800b070 <__mdiff+0x28>
 800b0a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b0ac:	6926      	ldr	r6, [r4, #16]
 800b0ae:	60c5      	str	r5, [r0, #12]
 800b0b0:	f109 0310 	add.w	r3, r9, #16
 800b0b4:	f109 0514 	add.w	r5, r9, #20
 800b0b8:	f104 0e14 	add.w	lr, r4, #20
 800b0bc:	f100 0b14 	add.w	fp, r0, #20
 800b0c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b0c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	46d9      	mov	r9, fp
 800b0cc:	f04f 0c00 	mov.w	ip, #0
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b0d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	fa1f f38a 	uxth.w	r3, sl
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	b283      	uxth	r3, r0
 800b0e4:	1acb      	subs	r3, r1, r3
 800b0e6:	0c00      	lsrs	r0, r0, #16
 800b0e8:	4463      	add	r3, ip
 800b0ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b0ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b0f8:	4576      	cmp	r6, lr
 800b0fa:	f849 3b04 	str.w	r3, [r9], #4
 800b0fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b102:	d8e5      	bhi.n	800b0d0 <__mdiff+0x88>
 800b104:	1b33      	subs	r3, r6, r4
 800b106:	3b15      	subs	r3, #21
 800b108:	f023 0303 	bic.w	r3, r3, #3
 800b10c:	3415      	adds	r4, #21
 800b10e:	3304      	adds	r3, #4
 800b110:	42a6      	cmp	r6, r4
 800b112:	bf38      	it	cc
 800b114:	2304      	movcc	r3, #4
 800b116:	441d      	add	r5, r3
 800b118:	445b      	add	r3, fp
 800b11a:	461e      	mov	r6, r3
 800b11c:	462c      	mov	r4, r5
 800b11e:	4544      	cmp	r4, r8
 800b120:	d30e      	bcc.n	800b140 <__mdiff+0xf8>
 800b122:	f108 0103 	add.w	r1, r8, #3
 800b126:	1b49      	subs	r1, r1, r5
 800b128:	f021 0103 	bic.w	r1, r1, #3
 800b12c:	3d03      	subs	r5, #3
 800b12e:	45a8      	cmp	r8, r5
 800b130:	bf38      	it	cc
 800b132:	2100      	movcc	r1, #0
 800b134:	440b      	add	r3, r1
 800b136:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b13a:	b191      	cbz	r1, 800b162 <__mdiff+0x11a>
 800b13c:	6117      	str	r7, [r2, #16]
 800b13e:	e79d      	b.n	800b07c <__mdiff+0x34>
 800b140:	f854 1b04 	ldr.w	r1, [r4], #4
 800b144:	46e6      	mov	lr, ip
 800b146:	0c08      	lsrs	r0, r1, #16
 800b148:	fa1c fc81 	uxtah	ip, ip, r1
 800b14c:	4471      	add	r1, lr
 800b14e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b152:	b289      	uxth	r1, r1
 800b154:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b158:	f846 1b04 	str.w	r1, [r6], #4
 800b15c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b160:	e7dd      	b.n	800b11e <__mdiff+0xd6>
 800b162:	3f01      	subs	r7, #1
 800b164:	e7e7      	b.n	800b136 <__mdiff+0xee>
 800b166:	bf00      	nop
 800b168:	0800d3a5 	.word	0x0800d3a5
 800b16c:	0800d3b6 	.word	0x0800d3b6

0800b170 <__ulp>:
 800b170:	b082      	sub	sp, #8
 800b172:	ed8d 0b00 	vstr	d0, [sp]
 800b176:	9a01      	ldr	r2, [sp, #4]
 800b178:	4b0f      	ldr	r3, [pc, #60]	@ (800b1b8 <__ulp+0x48>)
 800b17a:	4013      	ands	r3, r2
 800b17c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b180:	2b00      	cmp	r3, #0
 800b182:	dc08      	bgt.n	800b196 <__ulp+0x26>
 800b184:	425b      	negs	r3, r3
 800b186:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b18a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b18e:	da04      	bge.n	800b19a <__ulp+0x2a>
 800b190:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b194:	4113      	asrs	r3, r2
 800b196:	2200      	movs	r2, #0
 800b198:	e008      	b.n	800b1ac <__ulp+0x3c>
 800b19a:	f1a2 0314 	sub.w	r3, r2, #20
 800b19e:	2b1e      	cmp	r3, #30
 800b1a0:	bfda      	itte	le
 800b1a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b1a6:	40da      	lsrle	r2, r3
 800b1a8:	2201      	movgt	r2, #1
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	ec41 0b10 	vmov	d0, r0, r1
 800b1b4:	b002      	add	sp, #8
 800b1b6:	4770      	bx	lr
 800b1b8:	7ff00000 	.word	0x7ff00000

0800b1bc <__b2d>:
 800b1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c0:	6906      	ldr	r6, [r0, #16]
 800b1c2:	f100 0814 	add.w	r8, r0, #20
 800b1c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b1ca:	1f37      	subs	r7, r6, #4
 800b1cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	f7ff fd4b 	bl	800ac6c <__hi0bits>
 800b1d6:	f1c0 0320 	rsb	r3, r0, #32
 800b1da:	280a      	cmp	r0, #10
 800b1dc:	600b      	str	r3, [r1, #0]
 800b1de:	491b      	ldr	r1, [pc, #108]	@ (800b24c <__b2d+0x90>)
 800b1e0:	dc15      	bgt.n	800b20e <__b2d+0x52>
 800b1e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b1e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b1ea:	45b8      	cmp	r8, r7
 800b1ec:	ea43 0501 	orr.w	r5, r3, r1
 800b1f0:	bf34      	ite	cc
 800b1f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b1f6:	2300      	movcs	r3, #0
 800b1f8:	3015      	adds	r0, #21
 800b1fa:	fa02 f000 	lsl.w	r0, r2, r0
 800b1fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800b202:	4303      	orrs	r3, r0
 800b204:	461c      	mov	r4, r3
 800b206:	ec45 4b10 	vmov	d0, r4, r5
 800b20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b20e:	45b8      	cmp	r8, r7
 800b210:	bf3a      	itte	cc
 800b212:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b216:	f1a6 0708 	subcc.w	r7, r6, #8
 800b21a:	2300      	movcs	r3, #0
 800b21c:	380b      	subs	r0, #11
 800b21e:	d012      	beq.n	800b246 <__b2d+0x8a>
 800b220:	f1c0 0120 	rsb	r1, r0, #32
 800b224:	fa23 f401 	lsr.w	r4, r3, r1
 800b228:	4082      	lsls	r2, r0
 800b22a:	4322      	orrs	r2, r4
 800b22c:	4547      	cmp	r7, r8
 800b22e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b232:	bf8c      	ite	hi
 800b234:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b238:	2200      	movls	r2, #0
 800b23a:	4083      	lsls	r3, r0
 800b23c:	40ca      	lsrs	r2, r1
 800b23e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b242:	4313      	orrs	r3, r2
 800b244:	e7de      	b.n	800b204 <__b2d+0x48>
 800b246:	ea42 0501 	orr.w	r5, r2, r1
 800b24a:	e7db      	b.n	800b204 <__b2d+0x48>
 800b24c:	3ff00000 	.word	0x3ff00000

0800b250 <__d2b>:
 800b250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b254:	460f      	mov	r7, r1
 800b256:	2101      	movs	r1, #1
 800b258:	ec59 8b10 	vmov	r8, r9, d0
 800b25c:	4616      	mov	r6, r2
 800b25e:	f7ff fc13 	bl	800aa88 <_Balloc>
 800b262:	4604      	mov	r4, r0
 800b264:	b930      	cbnz	r0, 800b274 <__d2b+0x24>
 800b266:	4602      	mov	r2, r0
 800b268:	4b23      	ldr	r3, [pc, #140]	@ (800b2f8 <__d2b+0xa8>)
 800b26a:	4824      	ldr	r0, [pc, #144]	@ (800b2fc <__d2b+0xac>)
 800b26c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b270:	f001 f996 	bl	800c5a0 <__assert_func>
 800b274:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b27c:	b10d      	cbz	r5, 800b282 <__d2b+0x32>
 800b27e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b282:	9301      	str	r3, [sp, #4]
 800b284:	f1b8 0300 	subs.w	r3, r8, #0
 800b288:	d023      	beq.n	800b2d2 <__d2b+0x82>
 800b28a:	4668      	mov	r0, sp
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	f7ff fd0c 	bl	800acaa <__lo0bits>
 800b292:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b296:	b1d0      	cbz	r0, 800b2ce <__d2b+0x7e>
 800b298:	f1c0 0320 	rsb	r3, r0, #32
 800b29c:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a0:	430b      	orrs	r3, r1
 800b2a2:	40c2      	lsrs	r2, r0
 800b2a4:	6163      	str	r3, [r4, #20]
 800b2a6:	9201      	str	r2, [sp, #4]
 800b2a8:	9b01      	ldr	r3, [sp, #4]
 800b2aa:	61a3      	str	r3, [r4, #24]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bf0c      	ite	eq
 800b2b0:	2201      	moveq	r2, #1
 800b2b2:	2202      	movne	r2, #2
 800b2b4:	6122      	str	r2, [r4, #16]
 800b2b6:	b1a5      	cbz	r5, 800b2e2 <__d2b+0x92>
 800b2b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2bc:	4405      	add	r5, r0
 800b2be:	603d      	str	r5, [r7, #0]
 800b2c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2c4:	6030      	str	r0, [r6, #0]
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	b003      	add	sp, #12
 800b2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2ce:	6161      	str	r1, [r4, #20]
 800b2d0:	e7ea      	b.n	800b2a8 <__d2b+0x58>
 800b2d2:	a801      	add	r0, sp, #4
 800b2d4:	f7ff fce9 	bl	800acaa <__lo0bits>
 800b2d8:	9b01      	ldr	r3, [sp, #4]
 800b2da:	6163      	str	r3, [r4, #20]
 800b2dc:	3020      	adds	r0, #32
 800b2de:	2201      	movs	r2, #1
 800b2e0:	e7e8      	b.n	800b2b4 <__d2b+0x64>
 800b2e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b2ea:	6038      	str	r0, [r7, #0]
 800b2ec:	6918      	ldr	r0, [r3, #16]
 800b2ee:	f7ff fcbd 	bl	800ac6c <__hi0bits>
 800b2f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2f6:	e7e5      	b.n	800b2c4 <__d2b+0x74>
 800b2f8:	0800d3a5 	.word	0x0800d3a5
 800b2fc:	0800d3b6 	.word	0x0800d3b6

0800b300 <__ratio>:
 800b300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b304:	b085      	sub	sp, #20
 800b306:	e9cd 1000 	strd	r1, r0, [sp]
 800b30a:	a902      	add	r1, sp, #8
 800b30c:	f7ff ff56 	bl	800b1bc <__b2d>
 800b310:	9800      	ldr	r0, [sp, #0]
 800b312:	a903      	add	r1, sp, #12
 800b314:	ec55 4b10 	vmov	r4, r5, d0
 800b318:	f7ff ff50 	bl	800b1bc <__b2d>
 800b31c:	9b01      	ldr	r3, [sp, #4]
 800b31e:	6919      	ldr	r1, [r3, #16]
 800b320:	9b00      	ldr	r3, [sp, #0]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	1ac9      	subs	r1, r1, r3
 800b326:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b32a:	1a9b      	subs	r3, r3, r2
 800b32c:	ec5b ab10 	vmov	sl, fp, d0
 800b330:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b334:	2b00      	cmp	r3, #0
 800b336:	bfce      	itee	gt
 800b338:	462a      	movgt	r2, r5
 800b33a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b33e:	465a      	movle	r2, fp
 800b340:	462f      	mov	r7, r5
 800b342:	46d9      	mov	r9, fp
 800b344:	bfcc      	ite	gt
 800b346:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b34a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b34e:	464b      	mov	r3, r9
 800b350:	4652      	mov	r2, sl
 800b352:	4620      	mov	r0, r4
 800b354:	4639      	mov	r1, r7
 800b356:	f7f5 fa79 	bl	800084c <__aeabi_ddiv>
 800b35a:	ec41 0b10 	vmov	d0, r0, r1
 800b35e:	b005      	add	sp, #20
 800b360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b364 <__copybits>:
 800b364:	3901      	subs	r1, #1
 800b366:	b570      	push	{r4, r5, r6, lr}
 800b368:	1149      	asrs	r1, r1, #5
 800b36a:	6914      	ldr	r4, [r2, #16]
 800b36c:	3101      	adds	r1, #1
 800b36e:	f102 0314 	add.w	r3, r2, #20
 800b372:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b376:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b37a:	1f05      	subs	r5, r0, #4
 800b37c:	42a3      	cmp	r3, r4
 800b37e:	d30c      	bcc.n	800b39a <__copybits+0x36>
 800b380:	1aa3      	subs	r3, r4, r2
 800b382:	3b11      	subs	r3, #17
 800b384:	f023 0303 	bic.w	r3, r3, #3
 800b388:	3211      	adds	r2, #17
 800b38a:	42a2      	cmp	r2, r4
 800b38c:	bf88      	it	hi
 800b38e:	2300      	movhi	r3, #0
 800b390:	4418      	add	r0, r3
 800b392:	2300      	movs	r3, #0
 800b394:	4288      	cmp	r0, r1
 800b396:	d305      	bcc.n	800b3a4 <__copybits+0x40>
 800b398:	bd70      	pop	{r4, r5, r6, pc}
 800b39a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b39e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3a2:	e7eb      	b.n	800b37c <__copybits+0x18>
 800b3a4:	f840 3b04 	str.w	r3, [r0], #4
 800b3a8:	e7f4      	b.n	800b394 <__copybits+0x30>

0800b3aa <__any_on>:
 800b3aa:	f100 0214 	add.w	r2, r0, #20
 800b3ae:	6900      	ldr	r0, [r0, #16]
 800b3b0:	114b      	asrs	r3, r1, #5
 800b3b2:	4298      	cmp	r0, r3
 800b3b4:	b510      	push	{r4, lr}
 800b3b6:	db11      	blt.n	800b3dc <__any_on+0x32>
 800b3b8:	dd0a      	ble.n	800b3d0 <__any_on+0x26>
 800b3ba:	f011 011f 	ands.w	r1, r1, #31
 800b3be:	d007      	beq.n	800b3d0 <__any_on+0x26>
 800b3c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3c4:	fa24 f001 	lsr.w	r0, r4, r1
 800b3c8:	fa00 f101 	lsl.w	r1, r0, r1
 800b3cc:	428c      	cmp	r4, r1
 800b3ce:	d10b      	bne.n	800b3e8 <__any_on+0x3e>
 800b3d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d803      	bhi.n	800b3e0 <__any_on+0x36>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	bd10      	pop	{r4, pc}
 800b3dc:	4603      	mov	r3, r0
 800b3de:	e7f7      	b.n	800b3d0 <__any_on+0x26>
 800b3e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3e4:	2900      	cmp	r1, #0
 800b3e6:	d0f5      	beq.n	800b3d4 <__any_on+0x2a>
 800b3e8:	2001      	movs	r0, #1
 800b3ea:	e7f6      	b.n	800b3da <__any_on+0x30>

0800b3ec <sulp>:
 800b3ec:	b570      	push	{r4, r5, r6, lr}
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	460d      	mov	r5, r1
 800b3f2:	ec45 4b10 	vmov	d0, r4, r5
 800b3f6:	4616      	mov	r6, r2
 800b3f8:	f7ff feba 	bl	800b170 <__ulp>
 800b3fc:	ec51 0b10 	vmov	r0, r1, d0
 800b400:	b17e      	cbz	r6, 800b422 <sulp+0x36>
 800b402:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b406:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	dd09      	ble.n	800b422 <sulp+0x36>
 800b40e:	051b      	lsls	r3, r3, #20
 800b410:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b414:	2400      	movs	r4, #0
 800b416:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b41a:	4622      	mov	r2, r4
 800b41c:	462b      	mov	r3, r5
 800b41e:	f7f5 f8eb 	bl	80005f8 <__aeabi_dmul>
 800b422:	ec41 0b10 	vmov	d0, r0, r1
 800b426:	bd70      	pop	{r4, r5, r6, pc}

0800b428 <_strtod_l>:
 800b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42c:	b09f      	sub	sp, #124	@ 0x7c
 800b42e:	460c      	mov	r4, r1
 800b430:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b432:	2200      	movs	r2, #0
 800b434:	921a      	str	r2, [sp, #104]	@ 0x68
 800b436:	9005      	str	r0, [sp, #20]
 800b438:	f04f 0a00 	mov.w	sl, #0
 800b43c:	f04f 0b00 	mov.w	fp, #0
 800b440:	460a      	mov	r2, r1
 800b442:	9219      	str	r2, [sp, #100]	@ 0x64
 800b444:	7811      	ldrb	r1, [r2, #0]
 800b446:	292b      	cmp	r1, #43	@ 0x2b
 800b448:	d04a      	beq.n	800b4e0 <_strtod_l+0xb8>
 800b44a:	d838      	bhi.n	800b4be <_strtod_l+0x96>
 800b44c:	290d      	cmp	r1, #13
 800b44e:	d832      	bhi.n	800b4b6 <_strtod_l+0x8e>
 800b450:	2908      	cmp	r1, #8
 800b452:	d832      	bhi.n	800b4ba <_strtod_l+0x92>
 800b454:	2900      	cmp	r1, #0
 800b456:	d03b      	beq.n	800b4d0 <_strtod_l+0xa8>
 800b458:	2200      	movs	r2, #0
 800b45a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b45c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b45e:	782a      	ldrb	r2, [r5, #0]
 800b460:	2a30      	cmp	r2, #48	@ 0x30
 800b462:	f040 80b3 	bne.w	800b5cc <_strtod_l+0x1a4>
 800b466:	786a      	ldrb	r2, [r5, #1]
 800b468:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b46c:	2a58      	cmp	r2, #88	@ 0x58
 800b46e:	d16e      	bne.n	800b54e <_strtod_l+0x126>
 800b470:	9302      	str	r3, [sp, #8]
 800b472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	ab1a      	add	r3, sp, #104	@ 0x68
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	4a8e      	ldr	r2, [pc, #568]	@ (800b6b4 <_strtod_l+0x28c>)
 800b47c:	9805      	ldr	r0, [sp, #20]
 800b47e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b480:	a919      	add	r1, sp, #100	@ 0x64
 800b482:	f001 f927 	bl	800c6d4 <__gethex>
 800b486:	f010 060f 	ands.w	r6, r0, #15
 800b48a:	4604      	mov	r4, r0
 800b48c:	d005      	beq.n	800b49a <_strtod_l+0x72>
 800b48e:	2e06      	cmp	r6, #6
 800b490:	d128      	bne.n	800b4e4 <_strtod_l+0xbc>
 800b492:	3501      	adds	r5, #1
 800b494:	2300      	movs	r3, #0
 800b496:	9519      	str	r5, [sp, #100]	@ 0x64
 800b498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b49a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f040 858e 	bne.w	800bfbe <_strtod_l+0xb96>
 800b4a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4a4:	b1cb      	cbz	r3, 800b4da <_strtod_l+0xb2>
 800b4a6:	4652      	mov	r2, sl
 800b4a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b4ac:	ec43 2b10 	vmov	d0, r2, r3
 800b4b0:	b01f      	add	sp, #124	@ 0x7c
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	2920      	cmp	r1, #32
 800b4b8:	d1ce      	bne.n	800b458 <_strtod_l+0x30>
 800b4ba:	3201      	adds	r2, #1
 800b4bc:	e7c1      	b.n	800b442 <_strtod_l+0x1a>
 800b4be:	292d      	cmp	r1, #45	@ 0x2d
 800b4c0:	d1ca      	bne.n	800b458 <_strtod_l+0x30>
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b4c6:	1c51      	adds	r1, r2, #1
 800b4c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b4ca:	7852      	ldrb	r2, [r2, #1]
 800b4cc:	2a00      	cmp	r2, #0
 800b4ce:	d1c5      	bne.n	800b45c <_strtod_l+0x34>
 800b4d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f040 8570 	bne.w	800bfba <_strtod_l+0xb92>
 800b4da:	4652      	mov	r2, sl
 800b4dc:	465b      	mov	r3, fp
 800b4de:	e7e5      	b.n	800b4ac <_strtod_l+0x84>
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	e7ef      	b.n	800b4c4 <_strtod_l+0x9c>
 800b4e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b4e6:	b13a      	cbz	r2, 800b4f8 <_strtod_l+0xd0>
 800b4e8:	2135      	movs	r1, #53	@ 0x35
 800b4ea:	a81c      	add	r0, sp, #112	@ 0x70
 800b4ec:	f7ff ff3a 	bl	800b364 <__copybits>
 800b4f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4f2:	9805      	ldr	r0, [sp, #20]
 800b4f4:	f7ff fb08 	bl	800ab08 <_Bfree>
 800b4f8:	3e01      	subs	r6, #1
 800b4fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b4fc:	2e04      	cmp	r6, #4
 800b4fe:	d806      	bhi.n	800b50e <_strtod_l+0xe6>
 800b500:	e8df f006 	tbb	[pc, r6]
 800b504:	201d0314 	.word	0x201d0314
 800b508:	14          	.byte	0x14
 800b509:	00          	.byte	0x00
 800b50a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b50e:	05e1      	lsls	r1, r4, #23
 800b510:	bf48      	it	mi
 800b512:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b516:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b51a:	0d1b      	lsrs	r3, r3, #20
 800b51c:	051b      	lsls	r3, r3, #20
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1bb      	bne.n	800b49a <_strtod_l+0x72>
 800b522:	f7fe fb31 	bl	8009b88 <__errno>
 800b526:	2322      	movs	r3, #34	@ 0x22
 800b528:	6003      	str	r3, [r0, #0]
 800b52a:	e7b6      	b.n	800b49a <_strtod_l+0x72>
 800b52c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b530:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b534:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b538:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b53c:	e7e7      	b.n	800b50e <_strtod_l+0xe6>
 800b53e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b6bc <_strtod_l+0x294>
 800b542:	e7e4      	b.n	800b50e <_strtod_l+0xe6>
 800b544:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b548:	f04f 3aff 	mov.w	sl, #4294967295
 800b54c:	e7df      	b.n	800b50e <_strtod_l+0xe6>
 800b54e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	9219      	str	r2, [sp, #100]	@ 0x64
 800b554:	785b      	ldrb	r3, [r3, #1]
 800b556:	2b30      	cmp	r3, #48	@ 0x30
 800b558:	d0f9      	beq.n	800b54e <_strtod_l+0x126>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d09d      	beq.n	800b49a <_strtod_l+0x72>
 800b55e:	2301      	movs	r3, #1
 800b560:	9309      	str	r3, [sp, #36]	@ 0x24
 800b562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b564:	930c      	str	r3, [sp, #48]	@ 0x30
 800b566:	2300      	movs	r3, #0
 800b568:	9308      	str	r3, [sp, #32]
 800b56a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b56c:	461f      	mov	r7, r3
 800b56e:	220a      	movs	r2, #10
 800b570:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b572:	7805      	ldrb	r5, [r0, #0]
 800b574:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b578:	b2d9      	uxtb	r1, r3
 800b57a:	2909      	cmp	r1, #9
 800b57c:	d928      	bls.n	800b5d0 <_strtod_l+0x1a8>
 800b57e:	494e      	ldr	r1, [pc, #312]	@ (800b6b8 <_strtod_l+0x290>)
 800b580:	2201      	movs	r2, #1
 800b582:	f000 ffd5 	bl	800c530 <strncmp>
 800b586:	2800      	cmp	r0, #0
 800b588:	d032      	beq.n	800b5f0 <_strtod_l+0x1c8>
 800b58a:	2000      	movs	r0, #0
 800b58c:	462a      	mov	r2, r5
 800b58e:	4681      	mov	r9, r0
 800b590:	463d      	mov	r5, r7
 800b592:	4603      	mov	r3, r0
 800b594:	2a65      	cmp	r2, #101	@ 0x65
 800b596:	d001      	beq.n	800b59c <_strtod_l+0x174>
 800b598:	2a45      	cmp	r2, #69	@ 0x45
 800b59a:	d114      	bne.n	800b5c6 <_strtod_l+0x19e>
 800b59c:	b91d      	cbnz	r5, 800b5a6 <_strtod_l+0x17e>
 800b59e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5a0:	4302      	orrs	r2, r0
 800b5a2:	d095      	beq.n	800b4d0 <_strtod_l+0xa8>
 800b5a4:	2500      	movs	r5, #0
 800b5a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b5a8:	1c62      	adds	r2, r4, #1
 800b5aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5ac:	7862      	ldrb	r2, [r4, #1]
 800b5ae:	2a2b      	cmp	r2, #43	@ 0x2b
 800b5b0:	d077      	beq.n	800b6a2 <_strtod_l+0x27a>
 800b5b2:	2a2d      	cmp	r2, #45	@ 0x2d
 800b5b4:	d07b      	beq.n	800b6ae <_strtod_l+0x286>
 800b5b6:	f04f 0c00 	mov.w	ip, #0
 800b5ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b5be:	2909      	cmp	r1, #9
 800b5c0:	f240 8082 	bls.w	800b6c8 <_strtod_l+0x2a0>
 800b5c4:	9419      	str	r4, [sp, #100]	@ 0x64
 800b5c6:	f04f 0800 	mov.w	r8, #0
 800b5ca:	e0a2      	b.n	800b712 <_strtod_l+0x2ea>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e7c7      	b.n	800b560 <_strtod_l+0x138>
 800b5d0:	2f08      	cmp	r7, #8
 800b5d2:	bfd5      	itete	le
 800b5d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b5d6:	9908      	ldrgt	r1, [sp, #32]
 800b5d8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b5dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b5e0:	f100 0001 	add.w	r0, r0, #1
 800b5e4:	bfd4      	ite	le
 800b5e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b5e8:	9308      	strgt	r3, [sp, #32]
 800b5ea:	3701      	adds	r7, #1
 800b5ec:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5ee:	e7bf      	b.n	800b570 <_strtod_l+0x148>
 800b5f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5f2:	1c5a      	adds	r2, r3, #1
 800b5f4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5f6:	785a      	ldrb	r2, [r3, #1]
 800b5f8:	b37f      	cbz	r7, 800b65a <_strtod_l+0x232>
 800b5fa:	4681      	mov	r9, r0
 800b5fc:	463d      	mov	r5, r7
 800b5fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b602:	2b09      	cmp	r3, #9
 800b604:	d912      	bls.n	800b62c <_strtod_l+0x204>
 800b606:	2301      	movs	r3, #1
 800b608:	e7c4      	b.n	800b594 <_strtod_l+0x16c>
 800b60a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b60c:	1c5a      	adds	r2, r3, #1
 800b60e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b610:	785a      	ldrb	r2, [r3, #1]
 800b612:	3001      	adds	r0, #1
 800b614:	2a30      	cmp	r2, #48	@ 0x30
 800b616:	d0f8      	beq.n	800b60a <_strtod_l+0x1e2>
 800b618:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b61c:	2b08      	cmp	r3, #8
 800b61e:	f200 84d3 	bhi.w	800bfc8 <_strtod_l+0xba0>
 800b622:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b624:	930c      	str	r3, [sp, #48]	@ 0x30
 800b626:	4681      	mov	r9, r0
 800b628:	2000      	movs	r0, #0
 800b62a:	4605      	mov	r5, r0
 800b62c:	3a30      	subs	r2, #48	@ 0x30
 800b62e:	f100 0301 	add.w	r3, r0, #1
 800b632:	d02a      	beq.n	800b68a <_strtod_l+0x262>
 800b634:	4499      	add	r9, r3
 800b636:	eb00 0c05 	add.w	ip, r0, r5
 800b63a:	462b      	mov	r3, r5
 800b63c:	210a      	movs	r1, #10
 800b63e:	4563      	cmp	r3, ip
 800b640:	d10d      	bne.n	800b65e <_strtod_l+0x236>
 800b642:	1c69      	adds	r1, r5, #1
 800b644:	4401      	add	r1, r0
 800b646:	4428      	add	r0, r5
 800b648:	2808      	cmp	r0, #8
 800b64a:	dc16      	bgt.n	800b67a <_strtod_l+0x252>
 800b64c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b64e:	230a      	movs	r3, #10
 800b650:	fb03 2300 	mla	r3, r3, r0, r2
 800b654:	930a      	str	r3, [sp, #40]	@ 0x28
 800b656:	2300      	movs	r3, #0
 800b658:	e018      	b.n	800b68c <_strtod_l+0x264>
 800b65a:	4638      	mov	r0, r7
 800b65c:	e7da      	b.n	800b614 <_strtod_l+0x1ec>
 800b65e:	2b08      	cmp	r3, #8
 800b660:	f103 0301 	add.w	r3, r3, #1
 800b664:	dc03      	bgt.n	800b66e <_strtod_l+0x246>
 800b666:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b668:	434e      	muls	r6, r1
 800b66a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b66c:	e7e7      	b.n	800b63e <_strtod_l+0x216>
 800b66e:	2b10      	cmp	r3, #16
 800b670:	bfde      	ittt	le
 800b672:	9e08      	ldrle	r6, [sp, #32]
 800b674:	434e      	mulle	r6, r1
 800b676:	9608      	strle	r6, [sp, #32]
 800b678:	e7e1      	b.n	800b63e <_strtod_l+0x216>
 800b67a:	280f      	cmp	r0, #15
 800b67c:	dceb      	bgt.n	800b656 <_strtod_l+0x22e>
 800b67e:	9808      	ldr	r0, [sp, #32]
 800b680:	230a      	movs	r3, #10
 800b682:	fb03 2300 	mla	r3, r3, r0, r2
 800b686:	9308      	str	r3, [sp, #32]
 800b688:	e7e5      	b.n	800b656 <_strtod_l+0x22e>
 800b68a:	4629      	mov	r1, r5
 800b68c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b68e:	1c50      	adds	r0, r2, #1
 800b690:	9019      	str	r0, [sp, #100]	@ 0x64
 800b692:	7852      	ldrb	r2, [r2, #1]
 800b694:	4618      	mov	r0, r3
 800b696:	460d      	mov	r5, r1
 800b698:	e7b1      	b.n	800b5fe <_strtod_l+0x1d6>
 800b69a:	f04f 0900 	mov.w	r9, #0
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e77d      	b.n	800b59e <_strtod_l+0x176>
 800b6a2:	f04f 0c00 	mov.w	ip, #0
 800b6a6:	1ca2      	adds	r2, r4, #2
 800b6a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6aa:	78a2      	ldrb	r2, [r4, #2]
 800b6ac:	e785      	b.n	800b5ba <_strtod_l+0x192>
 800b6ae:	f04f 0c01 	mov.w	ip, #1
 800b6b2:	e7f8      	b.n	800b6a6 <_strtod_l+0x27e>
 800b6b4:	0800d528 	.word	0x0800d528
 800b6b8:	0800d510 	.word	0x0800d510
 800b6bc:	7ff00000 	.word	0x7ff00000
 800b6c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6c2:	1c51      	adds	r1, r2, #1
 800b6c4:	9119      	str	r1, [sp, #100]	@ 0x64
 800b6c6:	7852      	ldrb	r2, [r2, #1]
 800b6c8:	2a30      	cmp	r2, #48	@ 0x30
 800b6ca:	d0f9      	beq.n	800b6c0 <_strtod_l+0x298>
 800b6cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b6d0:	2908      	cmp	r1, #8
 800b6d2:	f63f af78 	bhi.w	800b5c6 <_strtod_l+0x19e>
 800b6d6:	3a30      	subs	r2, #48	@ 0x30
 800b6d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b6de:	f04f 080a 	mov.w	r8, #10
 800b6e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6e4:	1c56      	adds	r6, r2, #1
 800b6e6:	9619      	str	r6, [sp, #100]	@ 0x64
 800b6e8:	7852      	ldrb	r2, [r2, #1]
 800b6ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b6ee:	f1be 0f09 	cmp.w	lr, #9
 800b6f2:	d939      	bls.n	800b768 <_strtod_l+0x340>
 800b6f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b6f6:	1a76      	subs	r6, r6, r1
 800b6f8:	2e08      	cmp	r6, #8
 800b6fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b6fe:	dc03      	bgt.n	800b708 <_strtod_l+0x2e0>
 800b700:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b702:	4588      	cmp	r8, r1
 800b704:	bfa8      	it	ge
 800b706:	4688      	movge	r8, r1
 800b708:	f1bc 0f00 	cmp.w	ip, #0
 800b70c:	d001      	beq.n	800b712 <_strtod_l+0x2ea>
 800b70e:	f1c8 0800 	rsb	r8, r8, #0
 800b712:	2d00      	cmp	r5, #0
 800b714:	d14e      	bne.n	800b7b4 <_strtod_l+0x38c>
 800b716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b718:	4308      	orrs	r0, r1
 800b71a:	f47f aebe 	bne.w	800b49a <_strtod_l+0x72>
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f47f aed6 	bne.w	800b4d0 <_strtod_l+0xa8>
 800b724:	2a69      	cmp	r2, #105	@ 0x69
 800b726:	d028      	beq.n	800b77a <_strtod_l+0x352>
 800b728:	dc25      	bgt.n	800b776 <_strtod_l+0x34e>
 800b72a:	2a49      	cmp	r2, #73	@ 0x49
 800b72c:	d025      	beq.n	800b77a <_strtod_l+0x352>
 800b72e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b730:	f47f aece 	bne.w	800b4d0 <_strtod_l+0xa8>
 800b734:	499b      	ldr	r1, [pc, #620]	@ (800b9a4 <_strtod_l+0x57c>)
 800b736:	a819      	add	r0, sp, #100	@ 0x64
 800b738:	f001 f9ee 	bl	800cb18 <__match>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	f43f aec7 	beq.w	800b4d0 <_strtod_l+0xa8>
 800b742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	2b28      	cmp	r3, #40	@ 0x28
 800b748:	d12e      	bne.n	800b7a8 <_strtod_l+0x380>
 800b74a:	4997      	ldr	r1, [pc, #604]	@ (800b9a8 <_strtod_l+0x580>)
 800b74c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b74e:	a819      	add	r0, sp, #100	@ 0x64
 800b750:	f001 f9f6 	bl	800cb40 <__hexnan>
 800b754:	2805      	cmp	r0, #5
 800b756:	d127      	bne.n	800b7a8 <_strtod_l+0x380>
 800b758:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b75a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b75e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b762:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b766:	e698      	b.n	800b49a <_strtod_l+0x72>
 800b768:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b76a:	fb08 2101 	mla	r1, r8, r1, r2
 800b76e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b772:	920e      	str	r2, [sp, #56]	@ 0x38
 800b774:	e7b5      	b.n	800b6e2 <_strtod_l+0x2ba>
 800b776:	2a6e      	cmp	r2, #110	@ 0x6e
 800b778:	e7da      	b.n	800b730 <_strtod_l+0x308>
 800b77a:	498c      	ldr	r1, [pc, #560]	@ (800b9ac <_strtod_l+0x584>)
 800b77c:	a819      	add	r0, sp, #100	@ 0x64
 800b77e:	f001 f9cb 	bl	800cb18 <__match>
 800b782:	2800      	cmp	r0, #0
 800b784:	f43f aea4 	beq.w	800b4d0 <_strtod_l+0xa8>
 800b788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b78a:	4989      	ldr	r1, [pc, #548]	@ (800b9b0 <_strtod_l+0x588>)
 800b78c:	3b01      	subs	r3, #1
 800b78e:	a819      	add	r0, sp, #100	@ 0x64
 800b790:	9319      	str	r3, [sp, #100]	@ 0x64
 800b792:	f001 f9c1 	bl	800cb18 <__match>
 800b796:	b910      	cbnz	r0, 800b79e <_strtod_l+0x376>
 800b798:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b79a:	3301      	adds	r3, #1
 800b79c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b79e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b9c0 <_strtod_l+0x598>
 800b7a2:	f04f 0a00 	mov.w	sl, #0
 800b7a6:	e678      	b.n	800b49a <_strtod_l+0x72>
 800b7a8:	4882      	ldr	r0, [pc, #520]	@ (800b9b4 <_strtod_l+0x58c>)
 800b7aa:	f000 fef1 	bl	800c590 <nan>
 800b7ae:	ec5b ab10 	vmov	sl, fp, d0
 800b7b2:	e672      	b.n	800b49a <_strtod_l+0x72>
 800b7b4:	eba8 0309 	sub.w	r3, r8, r9
 800b7b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b7ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7bc:	2f00      	cmp	r7, #0
 800b7be:	bf08      	it	eq
 800b7c0:	462f      	moveq	r7, r5
 800b7c2:	2d10      	cmp	r5, #16
 800b7c4:	462c      	mov	r4, r5
 800b7c6:	bfa8      	it	ge
 800b7c8:	2410      	movge	r4, #16
 800b7ca:	f7f4 fe9b 	bl	8000504 <__aeabi_ui2d>
 800b7ce:	2d09      	cmp	r5, #9
 800b7d0:	4682      	mov	sl, r0
 800b7d2:	468b      	mov	fp, r1
 800b7d4:	dc13      	bgt.n	800b7fe <_strtod_l+0x3d6>
 800b7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f43f ae5e 	beq.w	800b49a <_strtod_l+0x72>
 800b7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7e0:	dd78      	ble.n	800b8d4 <_strtod_l+0x4ac>
 800b7e2:	2b16      	cmp	r3, #22
 800b7e4:	dc5f      	bgt.n	800b8a6 <_strtod_l+0x47e>
 800b7e6:	4974      	ldr	r1, [pc, #464]	@ (800b9b8 <_strtod_l+0x590>)
 800b7e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7f0:	4652      	mov	r2, sl
 800b7f2:	465b      	mov	r3, fp
 800b7f4:	f7f4 ff00 	bl	80005f8 <__aeabi_dmul>
 800b7f8:	4682      	mov	sl, r0
 800b7fa:	468b      	mov	fp, r1
 800b7fc:	e64d      	b.n	800b49a <_strtod_l+0x72>
 800b7fe:	4b6e      	ldr	r3, [pc, #440]	@ (800b9b8 <_strtod_l+0x590>)
 800b800:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b804:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b808:	f7f4 fef6 	bl	80005f8 <__aeabi_dmul>
 800b80c:	4682      	mov	sl, r0
 800b80e:	9808      	ldr	r0, [sp, #32]
 800b810:	468b      	mov	fp, r1
 800b812:	f7f4 fe77 	bl	8000504 <__aeabi_ui2d>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	4650      	mov	r0, sl
 800b81c:	4659      	mov	r1, fp
 800b81e:	f7f4 fd35 	bl	800028c <__adddf3>
 800b822:	2d0f      	cmp	r5, #15
 800b824:	4682      	mov	sl, r0
 800b826:	468b      	mov	fp, r1
 800b828:	ddd5      	ble.n	800b7d6 <_strtod_l+0x3ae>
 800b82a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b82c:	1b2c      	subs	r4, r5, r4
 800b82e:	441c      	add	r4, r3
 800b830:	2c00      	cmp	r4, #0
 800b832:	f340 8096 	ble.w	800b962 <_strtod_l+0x53a>
 800b836:	f014 030f 	ands.w	r3, r4, #15
 800b83a:	d00a      	beq.n	800b852 <_strtod_l+0x42a>
 800b83c:	495e      	ldr	r1, [pc, #376]	@ (800b9b8 <_strtod_l+0x590>)
 800b83e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b842:	4652      	mov	r2, sl
 800b844:	465b      	mov	r3, fp
 800b846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b84a:	f7f4 fed5 	bl	80005f8 <__aeabi_dmul>
 800b84e:	4682      	mov	sl, r0
 800b850:	468b      	mov	fp, r1
 800b852:	f034 040f 	bics.w	r4, r4, #15
 800b856:	d073      	beq.n	800b940 <_strtod_l+0x518>
 800b858:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b85c:	dd48      	ble.n	800b8f0 <_strtod_l+0x4c8>
 800b85e:	2400      	movs	r4, #0
 800b860:	46a0      	mov	r8, r4
 800b862:	940a      	str	r4, [sp, #40]	@ 0x28
 800b864:	46a1      	mov	r9, r4
 800b866:	9a05      	ldr	r2, [sp, #20]
 800b868:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b9c0 <_strtod_l+0x598>
 800b86c:	2322      	movs	r3, #34	@ 0x22
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	f04f 0a00 	mov.w	sl, #0
 800b874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b876:	2b00      	cmp	r3, #0
 800b878:	f43f ae0f 	beq.w	800b49a <_strtod_l+0x72>
 800b87c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b87e:	9805      	ldr	r0, [sp, #20]
 800b880:	f7ff f942 	bl	800ab08 <_Bfree>
 800b884:	9805      	ldr	r0, [sp, #20]
 800b886:	4649      	mov	r1, r9
 800b888:	f7ff f93e 	bl	800ab08 <_Bfree>
 800b88c:	9805      	ldr	r0, [sp, #20]
 800b88e:	4641      	mov	r1, r8
 800b890:	f7ff f93a 	bl	800ab08 <_Bfree>
 800b894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b896:	9805      	ldr	r0, [sp, #20]
 800b898:	f7ff f936 	bl	800ab08 <_Bfree>
 800b89c:	9805      	ldr	r0, [sp, #20]
 800b89e:	4621      	mov	r1, r4
 800b8a0:	f7ff f932 	bl	800ab08 <_Bfree>
 800b8a4:	e5f9      	b.n	800b49a <_strtod_l+0x72>
 800b8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	dbbc      	blt.n	800b82a <_strtod_l+0x402>
 800b8b0:	4c41      	ldr	r4, [pc, #260]	@ (800b9b8 <_strtod_l+0x590>)
 800b8b2:	f1c5 050f 	rsb	r5, r5, #15
 800b8b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b8ba:	4652      	mov	r2, sl
 800b8bc:	465b      	mov	r3, fp
 800b8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8c2:	f7f4 fe99 	bl	80005f8 <__aeabi_dmul>
 800b8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c8:	1b5d      	subs	r5, r3, r5
 800b8ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b8ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b8d2:	e78f      	b.n	800b7f4 <_strtod_l+0x3cc>
 800b8d4:	3316      	adds	r3, #22
 800b8d6:	dba8      	blt.n	800b82a <_strtod_l+0x402>
 800b8d8:	4b37      	ldr	r3, [pc, #220]	@ (800b9b8 <_strtod_l+0x590>)
 800b8da:	eba9 0808 	sub.w	r8, r9, r8
 800b8de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b8e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b8e6:	4650      	mov	r0, sl
 800b8e8:	4659      	mov	r1, fp
 800b8ea:	f7f4 ffaf 	bl	800084c <__aeabi_ddiv>
 800b8ee:	e783      	b.n	800b7f8 <_strtod_l+0x3d0>
 800b8f0:	4b32      	ldr	r3, [pc, #200]	@ (800b9bc <_strtod_l+0x594>)
 800b8f2:	9308      	str	r3, [sp, #32]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	1124      	asrs	r4, r4, #4
 800b8f8:	4650      	mov	r0, sl
 800b8fa:	4659      	mov	r1, fp
 800b8fc:	461e      	mov	r6, r3
 800b8fe:	2c01      	cmp	r4, #1
 800b900:	dc21      	bgt.n	800b946 <_strtod_l+0x51e>
 800b902:	b10b      	cbz	r3, 800b908 <_strtod_l+0x4e0>
 800b904:	4682      	mov	sl, r0
 800b906:	468b      	mov	fp, r1
 800b908:	492c      	ldr	r1, [pc, #176]	@ (800b9bc <_strtod_l+0x594>)
 800b90a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b90e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b912:	4652      	mov	r2, sl
 800b914:	465b      	mov	r3, fp
 800b916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b91a:	f7f4 fe6d 	bl	80005f8 <__aeabi_dmul>
 800b91e:	4b28      	ldr	r3, [pc, #160]	@ (800b9c0 <_strtod_l+0x598>)
 800b920:	460a      	mov	r2, r1
 800b922:	400b      	ands	r3, r1
 800b924:	4927      	ldr	r1, [pc, #156]	@ (800b9c4 <_strtod_l+0x59c>)
 800b926:	428b      	cmp	r3, r1
 800b928:	4682      	mov	sl, r0
 800b92a:	d898      	bhi.n	800b85e <_strtod_l+0x436>
 800b92c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b930:	428b      	cmp	r3, r1
 800b932:	bf86      	itte	hi
 800b934:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b9c8 <_strtod_l+0x5a0>
 800b938:	f04f 3aff 	movhi.w	sl, #4294967295
 800b93c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b940:	2300      	movs	r3, #0
 800b942:	9308      	str	r3, [sp, #32]
 800b944:	e07a      	b.n	800ba3c <_strtod_l+0x614>
 800b946:	07e2      	lsls	r2, r4, #31
 800b948:	d505      	bpl.n	800b956 <_strtod_l+0x52e>
 800b94a:	9b08      	ldr	r3, [sp, #32]
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	f7f4 fe52 	bl	80005f8 <__aeabi_dmul>
 800b954:	2301      	movs	r3, #1
 800b956:	9a08      	ldr	r2, [sp, #32]
 800b958:	3208      	adds	r2, #8
 800b95a:	3601      	adds	r6, #1
 800b95c:	1064      	asrs	r4, r4, #1
 800b95e:	9208      	str	r2, [sp, #32]
 800b960:	e7cd      	b.n	800b8fe <_strtod_l+0x4d6>
 800b962:	d0ed      	beq.n	800b940 <_strtod_l+0x518>
 800b964:	4264      	negs	r4, r4
 800b966:	f014 020f 	ands.w	r2, r4, #15
 800b96a:	d00a      	beq.n	800b982 <_strtod_l+0x55a>
 800b96c:	4b12      	ldr	r3, [pc, #72]	@ (800b9b8 <_strtod_l+0x590>)
 800b96e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b972:	4650      	mov	r0, sl
 800b974:	4659      	mov	r1, fp
 800b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97a:	f7f4 ff67 	bl	800084c <__aeabi_ddiv>
 800b97e:	4682      	mov	sl, r0
 800b980:	468b      	mov	fp, r1
 800b982:	1124      	asrs	r4, r4, #4
 800b984:	d0dc      	beq.n	800b940 <_strtod_l+0x518>
 800b986:	2c1f      	cmp	r4, #31
 800b988:	dd20      	ble.n	800b9cc <_strtod_l+0x5a4>
 800b98a:	2400      	movs	r4, #0
 800b98c:	46a0      	mov	r8, r4
 800b98e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b990:	46a1      	mov	r9, r4
 800b992:	9a05      	ldr	r2, [sp, #20]
 800b994:	2322      	movs	r3, #34	@ 0x22
 800b996:	f04f 0a00 	mov.w	sl, #0
 800b99a:	f04f 0b00 	mov.w	fp, #0
 800b99e:	6013      	str	r3, [r2, #0]
 800b9a0:	e768      	b.n	800b874 <_strtod_l+0x44c>
 800b9a2:	bf00      	nop
 800b9a4:	0800d2fd 	.word	0x0800d2fd
 800b9a8:	0800d514 	.word	0x0800d514
 800b9ac:	0800d2f5 	.word	0x0800d2f5
 800b9b0:	0800d32c 	.word	0x0800d32c
 800b9b4:	0800d6bd 	.word	0x0800d6bd
 800b9b8:	0800d448 	.word	0x0800d448
 800b9bc:	0800d420 	.word	0x0800d420
 800b9c0:	7ff00000 	.word	0x7ff00000
 800b9c4:	7ca00000 	.word	0x7ca00000
 800b9c8:	7fefffff 	.word	0x7fefffff
 800b9cc:	f014 0310 	ands.w	r3, r4, #16
 800b9d0:	bf18      	it	ne
 800b9d2:	236a      	movne	r3, #106	@ 0x6a
 800b9d4:	4ea9      	ldr	r6, [pc, #676]	@ (800bc7c <_strtod_l+0x854>)
 800b9d6:	9308      	str	r3, [sp, #32]
 800b9d8:	4650      	mov	r0, sl
 800b9da:	4659      	mov	r1, fp
 800b9dc:	2300      	movs	r3, #0
 800b9de:	07e2      	lsls	r2, r4, #31
 800b9e0:	d504      	bpl.n	800b9ec <_strtod_l+0x5c4>
 800b9e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9e6:	f7f4 fe07 	bl	80005f8 <__aeabi_dmul>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	1064      	asrs	r4, r4, #1
 800b9ee:	f106 0608 	add.w	r6, r6, #8
 800b9f2:	d1f4      	bne.n	800b9de <_strtod_l+0x5b6>
 800b9f4:	b10b      	cbz	r3, 800b9fa <_strtod_l+0x5d2>
 800b9f6:	4682      	mov	sl, r0
 800b9f8:	468b      	mov	fp, r1
 800b9fa:	9b08      	ldr	r3, [sp, #32]
 800b9fc:	b1b3      	cbz	r3, 800ba2c <_strtod_l+0x604>
 800b9fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ba02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	4659      	mov	r1, fp
 800ba0a:	dd0f      	ble.n	800ba2c <_strtod_l+0x604>
 800ba0c:	2b1f      	cmp	r3, #31
 800ba0e:	dd55      	ble.n	800babc <_strtod_l+0x694>
 800ba10:	2b34      	cmp	r3, #52	@ 0x34
 800ba12:	bfde      	ittt	le
 800ba14:	f04f 33ff 	movle.w	r3, #4294967295
 800ba18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ba1c:	4093      	lslle	r3, r2
 800ba1e:	f04f 0a00 	mov.w	sl, #0
 800ba22:	bfcc      	ite	gt
 800ba24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ba28:	ea03 0b01 	andle.w	fp, r3, r1
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4650      	mov	r0, sl
 800ba32:	4659      	mov	r1, fp
 800ba34:	f7f5 f848 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	d1a6      	bne.n	800b98a <_strtod_l+0x562>
 800ba3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba42:	9805      	ldr	r0, [sp, #20]
 800ba44:	462b      	mov	r3, r5
 800ba46:	463a      	mov	r2, r7
 800ba48:	f7ff f8c6 	bl	800abd8 <__s2b>
 800ba4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f43f af05 	beq.w	800b85e <_strtod_l+0x436>
 800ba54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba56:	2a00      	cmp	r2, #0
 800ba58:	eba9 0308 	sub.w	r3, r9, r8
 800ba5c:	bfa8      	it	ge
 800ba5e:	2300      	movge	r3, #0
 800ba60:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba62:	2400      	movs	r4, #0
 800ba64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba68:	9316      	str	r3, [sp, #88]	@ 0x58
 800ba6a:	46a0      	mov	r8, r4
 800ba6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba6e:	9805      	ldr	r0, [sp, #20]
 800ba70:	6859      	ldr	r1, [r3, #4]
 800ba72:	f7ff f809 	bl	800aa88 <_Balloc>
 800ba76:	4681      	mov	r9, r0
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	f43f aef4 	beq.w	800b866 <_strtod_l+0x43e>
 800ba7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba80:	691a      	ldr	r2, [r3, #16]
 800ba82:	3202      	adds	r2, #2
 800ba84:	f103 010c 	add.w	r1, r3, #12
 800ba88:	0092      	lsls	r2, r2, #2
 800ba8a:	300c      	adds	r0, #12
 800ba8c:	f000 fd72 	bl	800c574 <memcpy>
 800ba90:	ec4b ab10 	vmov	d0, sl, fp
 800ba94:	9805      	ldr	r0, [sp, #20]
 800ba96:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba98:	a91b      	add	r1, sp, #108	@ 0x6c
 800ba9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ba9e:	f7ff fbd7 	bl	800b250 <__d2b>
 800baa2:	901a      	str	r0, [sp, #104]	@ 0x68
 800baa4:	2800      	cmp	r0, #0
 800baa6:	f43f aede 	beq.w	800b866 <_strtod_l+0x43e>
 800baaa:	9805      	ldr	r0, [sp, #20]
 800baac:	2101      	movs	r1, #1
 800baae:	f7ff f929 	bl	800ad04 <__i2b>
 800bab2:	4680      	mov	r8, r0
 800bab4:	b948      	cbnz	r0, 800baca <_strtod_l+0x6a2>
 800bab6:	f04f 0800 	mov.w	r8, #0
 800baba:	e6d4      	b.n	800b866 <_strtod_l+0x43e>
 800babc:	f04f 32ff 	mov.w	r2, #4294967295
 800bac0:	fa02 f303 	lsl.w	r3, r2, r3
 800bac4:	ea03 0a0a 	and.w	sl, r3, sl
 800bac8:	e7b0      	b.n	800ba2c <_strtod_l+0x604>
 800baca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bacc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bace:	2d00      	cmp	r5, #0
 800bad0:	bfab      	itete	ge
 800bad2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bad4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bad6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bad8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bada:	bfac      	ite	ge
 800badc:	18ef      	addge	r7, r5, r3
 800bade:	1b5e      	sublt	r6, r3, r5
 800bae0:	9b08      	ldr	r3, [sp, #32]
 800bae2:	1aed      	subs	r5, r5, r3
 800bae4:	4415      	add	r5, r2
 800bae6:	4b66      	ldr	r3, [pc, #408]	@ (800bc80 <_strtod_l+0x858>)
 800bae8:	3d01      	subs	r5, #1
 800baea:	429d      	cmp	r5, r3
 800baec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800baf0:	da50      	bge.n	800bb94 <_strtod_l+0x76c>
 800baf2:	1b5b      	subs	r3, r3, r5
 800baf4:	2b1f      	cmp	r3, #31
 800baf6:	eba2 0203 	sub.w	r2, r2, r3
 800bafa:	f04f 0101 	mov.w	r1, #1
 800bafe:	dc3d      	bgt.n	800bb7c <_strtod_l+0x754>
 800bb00:	fa01 f303 	lsl.w	r3, r1, r3
 800bb04:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb06:	2300      	movs	r3, #0
 800bb08:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb0a:	18bd      	adds	r5, r7, r2
 800bb0c:	9b08      	ldr	r3, [sp, #32]
 800bb0e:	42af      	cmp	r7, r5
 800bb10:	4416      	add	r6, r2
 800bb12:	441e      	add	r6, r3
 800bb14:	463b      	mov	r3, r7
 800bb16:	bfa8      	it	ge
 800bb18:	462b      	movge	r3, r5
 800bb1a:	42b3      	cmp	r3, r6
 800bb1c:	bfa8      	it	ge
 800bb1e:	4633      	movge	r3, r6
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	bfc2      	ittt	gt
 800bb24:	1aed      	subgt	r5, r5, r3
 800bb26:	1af6      	subgt	r6, r6, r3
 800bb28:	1aff      	subgt	r7, r7, r3
 800bb2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	dd16      	ble.n	800bb5e <_strtod_l+0x736>
 800bb30:	4641      	mov	r1, r8
 800bb32:	9805      	ldr	r0, [sp, #20]
 800bb34:	461a      	mov	r2, r3
 800bb36:	f7ff f9a5 	bl	800ae84 <__pow5mult>
 800bb3a:	4680      	mov	r8, r0
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d0ba      	beq.n	800bab6 <_strtod_l+0x68e>
 800bb40:	4601      	mov	r1, r0
 800bb42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb44:	9805      	ldr	r0, [sp, #20]
 800bb46:	f7ff f8f3 	bl	800ad30 <__multiply>
 800bb4a:	900e      	str	r0, [sp, #56]	@ 0x38
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	f43f ae8a 	beq.w	800b866 <_strtod_l+0x43e>
 800bb52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb54:	9805      	ldr	r0, [sp, #20]
 800bb56:	f7fe ffd7 	bl	800ab08 <_Bfree>
 800bb5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb5e:	2d00      	cmp	r5, #0
 800bb60:	dc1d      	bgt.n	800bb9e <_strtod_l+0x776>
 800bb62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	dd23      	ble.n	800bbb0 <_strtod_l+0x788>
 800bb68:	4649      	mov	r1, r9
 800bb6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bb6c:	9805      	ldr	r0, [sp, #20]
 800bb6e:	f7ff f989 	bl	800ae84 <__pow5mult>
 800bb72:	4681      	mov	r9, r0
 800bb74:	b9e0      	cbnz	r0, 800bbb0 <_strtod_l+0x788>
 800bb76:	f04f 0900 	mov.w	r9, #0
 800bb7a:	e674      	b.n	800b866 <_strtod_l+0x43e>
 800bb7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bb80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bb84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bb88:	35e2      	adds	r5, #226	@ 0xe2
 800bb8a:	fa01 f305 	lsl.w	r3, r1, r5
 800bb8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb90:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bb92:	e7ba      	b.n	800bb0a <_strtod_l+0x6e2>
 800bb94:	2300      	movs	r3, #0
 800bb96:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb98:	2301      	movs	r3, #1
 800bb9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb9c:	e7b5      	b.n	800bb0a <_strtod_l+0x6e2>
 800bb9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bba0:	9805      	ldr	r0, [sp, #20]
 800bba2:	462a      	mov	r2, r5
 800bba4:	f7ff f9c8 	bl	800af38 <__lshift>
 800bba8:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d1d9      	bne.n	800bb62 <_strtod_l+0x73a>
 800bbae:	e65a      	b.n	800b866 <_strtod_l+0x43e>
 800bbb0:	2e00      	cmp	r6, #0
 800bbb2:	dd07      	ble.n	800bbc4 <_strtod_l+0x79c>
 800bbb4:	4649      	mov	r1, r9
 800bbb6:	9805      	ldr	r0, [sp, #20]
 800bbb8:	4632      	mov	r2, r6
 800bbba:	f7ff f9bd 	bl	800af38 <__lshift>
 800bbbe:	4681      	mov	r9, r0
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d0d8      	beq.n	800bb76 <_strtod_l+0x74e>
 800bbc4:	2f00      	cmp	r7, #0
 800bbc6:	dd08      	ble.n	800bbda <_strtod_l+0x7b2>
 800bbc8:	4641      	mov	r1, r8
 800bbca:	9805      	ldr	r0, [sp, #20]
 800bbcc:	463a      	mov	r2, r7
 800bbce:	f7ff f9b3 	bl	800af38 <__lshift>
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	f43f ae46 	beq.w	800b866 <_strtod_l+0x43e>
 800bbda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbdc:	9805      	ldr	r0, [sp, #20]
 800bbde:	464a      	mov	r2, r9
 800bbe0:	f7ff fa32 	bl	800b048 <__mdiff>
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f43f ae3d 	beq.w	800b866 <_strtod_l+0x43e>
 800bbec:	68c3      	ldr	r3, [r0, #12]
 800bbee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	60c3      	str	r3, [r0, #12]
 800bbf4:	4641      	mov	r1, r8
 800bbf6:	f7ff fa0b 	bl	800b010 <__mcmp>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	da46      	bge.n	800bc8c <_strtod_l+0x864>
 800bbfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc00:	ea53 030a 	orrs.w	r3, r3, sl
 800bc04:	d16c      	bne.n	800bce0 <_strtod_l+0x8b8>
 800bc06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d168      	bne.n	800bce0 <_strtod_l+0x8b8>
 800bc0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc12:	0d1b      	lsrs	r3, r3, #20
 800bc14:	051b      	lsls	r3, r3, #20
 800bc16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc1a:	d961      	bls.n	800bce0 <_strtod_l+0x8b8>
 800bc1c:	6963      	ldr	r3, [r4, #20]
 800bc1e:	b913      	cbnz	r3, 800bc26 <_strtod_l+0x7fe>
 800bc20:	6923      	ldr	r3, [r4, #16]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	dd5c      	ble.n	800bce0 <_strtod_l+0x8b8>
 800bc26:	4621      	mov	r1, r4
 800bc28:	2201      	movs	r2, #1
 800bc2a:	9805      	ldr	r0, [sp, #20]
 800bc2c:	f7ff f984 	bl	800af38 <__lshift>
 800bc30:	4641      	mov	r1, r8
 800bc32:	4604      	mov	r4, r0
 800bc34:	f7ff f9ec 	bl	800b010 <__mcmp>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	dd51      	ble.n	800bce0 <_strtod_l+0x8b8>
 800bc3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc40:	9a08      	ldr	r2, [sp, #32]
 800bc42:	0d1b      	lsrs	r3, r3, #20
 800bc44:	051b      	lsls	r3, r3, #20
 800bc46:	2a00      	cmp	r2, #0
 800bc48:	d06b      	beq.n	800bd22 <_strtod_l+0x8fa>
 800bc4a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc4e:	d868      	bhi.n	800bd22 <_strtod_l+0x8fa>
 800bc50:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc54:	f67f ae9d 	bls.w	800b992 <_strtod_l+0x56a>
 800bc58:	4b0a      	ldr	r3, [pc, #40]	@ (800bc84 <_strtod_l+0x85c>)
 800bc5a:	4650      	mov	r0, sl
 800bc5c:	4659      	mov	r1, fp
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f7f4 fcca 	bl	80005f8 <__aeabi_dmul>
 800bc64:	4b08      	ldr	r3, [pc, #32]	@ (800bc88 <_strtod_l+0x860>)
 800bc66:	400b      	ands	r3, r1
 800bc68:	4682      	mov	sl, r0
 800bc6a:	468b      	mov	fp, r1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f47f ae05 	bne.w	800b87c <_strtod_l+0x454>
 800bc72:	9a05      	ldr	r2, [sp, #20]
 800bc74:	2322      	movs	r3, #34	@ 0x22
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	e600      	b.n	800b87c <_strtod_l+0x454>
 800bc7a:	bf00      	nop
 800bc7c:	0800d540 	.word	0x0800d540
 800bc80:	fffffc02 	.word	0xfffffc02
 800bc84:	39500000 	.word	0x39500000
 800bc88:	7ff00000 	.word	0x7ff00000
 800bc8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bc90:	d165      	bne.n	800bd5e <_strtod_l+0x936>
 800bc92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc98:	b35a      	cbz	r2, 800bcf2 <_strtod_l+0x8ca>
 800bc9a:	4a9f      	ldr	r2, [pc, #636]	@ (800bf18 <_strtod_l+0xaf0>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d12b      	bne.n	800bcf8 <_strtod_l+0x8d0>
 800bca0:	9b08      	ldr	r3, [sp, #32]
 800bca2:	4651      	mov	r1, sl
 800bca4:	b303      	cbz	r3, 800bce8 <_strtod_l+0x8c0>
 800bca6:	4b9d      	ldr	r3, [pc, #628]	@ (800bf1c <_strtod_l+0xaf4>)
 800bca8:	465a      	mov	r2, fp
 800bcaa:	4013      	ands	r3, r2
 800bcac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bcb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb4:	d81b      	bhi.n	800bcee <_strtod_l+0x8c6>
 800bcb6:	0d1b      	lsrs	r3, r3, #20
 800bcb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bcbc:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc0:	4299      	cmp	r1, r3
 800bcc2:	d119      	bne.n	800bcf8 <_strtod_l+0x8d0>
 800bcc4:	4b96      	ldr	r3, [pc, #600]	@ (800bf20 <_strtod_l+0xaf8>)
 800bcc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d102      	bne.n	800bcd2 <_strtod_l+0x8aa>
 800bccc:	3101      	adds	r1, #1
 800bcce:	f43f adca 	beq.w	800b866 <_strtod_l+0x43e>
 800bcd2:	4b92      	ldr	r3, [pc, #584]	@ (800bf1c <_strtod_l+0xaf4>)
 800bcd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcd6:	401a      	ands	r2, r3
 800bcd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bcdc:	f04f 0a00 	mov.w	sl, #0
 800bce0:	9b08      	ldr	r3, [sp, #32]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1b8      	bne.n	800bc58 <_strtod_l+0x830>
 800bce6:	e5c9      	b.n	800b87c <_strtod_l+0x454>
 800bce8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcec:	e7e8      	b.n	800bcc0 <_strtod_l+0x898>
 800bcee:	4613      	mov	r3, r2
 800bcf0:	e7e6      	b.n	800bcc0 <_strtod_l+0x898>
 800bcf2:	ea53 030a 	orrs.w	r3, r3, sl
 800bcf6:	d0a1      	beq.n	800bc3c <_strtod_l+0x814>
 800bcf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcfa:	b1db      	cbz	r3, 800bd34 <_strtod_l+0x90c>
 800bcfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcfe:	4213      	tst	r3, r2
 800bd00:	d0ee      	beq.n	800bce0 <_strtod_l+0x8b8>
 800bd02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd04:	9a08      	ldr	r2, [sp, #32]
 800bd06:	4650      	mov	r0, sl
 800bd08:	4659      	mov	r1, fp
 800bd0a:	b1bb      	cbz	r3, 800bd3c <_strtod_l+0x914>
 800bd0c:	f7ff fb6e 	bl	800b3ec <sulp>
 800bd10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd14:	ec53 2b10 	vmov	r2, r3, d0
 800bd18:	f7f4 fab8 	bl	800028c <__adddf3>
 800bd1c:	4682      	mov	sl, r0
 800bd1e:	468b      	mov	fp, r1
 800bd20:	e7de      	b.n	800bce0 <_strtod_l+0x8b8>
 800bd22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bd26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd2e:	f04f 3aff 	mov.w	sl, #4294967295
 800bd32:	e7d5      	b.n	800bce0 <_strtod_l+0x8b8>
 800bd34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd36:	ea13 0f0a 	tst.w	r3, sl
 800bd3a:	e7e1      	b.n	800bd00 <_strtod_l+0x8d8>
 800bd3c:	f7ff fb56 	bl	800b3ec <sulp>
 800bd40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd44:	ec53 2b10 	vmov	r2, r3, d0
 800bd48:	f7f4 fa9e 	bl	8000288 <__aeabi_dsub>
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	2300      	movs	r3, #0
 800bd50:	4682      	mov	sl, r0
 800bd52:	468b      	mov	fp, r1
 800bd54:	f7f4 feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d0c1      	beq.n	800bce0 <_strtod_l+0x8b8>
 800bd5c:	e619      	b.n	800b992 <_strtod_l+0x56a>
 800bd5e:	4641      	mov	r1, r8
 800bd60:	4620      	mov	r0, r4
 800bd62:	f7ff facd 	bl	800b300 <__ratio>
 800bd66:	ec57 6b10 	vmov	r6, r7, d0
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bd70:	4630      	mov	r0, r6
 800bd72:	4639      	mov	r1, r7
 800bd74:	f7f4 febc 	bl	8000af0 <__aeabi_dcmple>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d06f      	beq.n	800be5c <_strtod_l+0xa34>
 800bd7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d17a      	bne.n	800be78 <_strtod_l+0xa50>
 800bd82:	f1ba 0f00 	cmp.w	sl, #0
 800bd86:	d158      	bne.n	800be3a <_strtod_l+0xa12>
 800bd88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d15a      	bne.n	800be48 <_strtod_l+0xa20>
 800bd92:	4b64      	ldr	r3, [pc, #400]	@ (800bf24 <_strtod_l+0xafc>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	4630      	mov	r0, r6
 800bd98:	4639      	mov	r1, r7
 800bd9a:	f7f4 fe9f 	bl	8000adc <__aeabi_dcmplt>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d159      	bne.n	800be56 <_strtod_l+0xa2e>
 800bda2:	4630      	mov	r0, r6
 800bda4:	4639      	mov	r1, r7
 800bda6:	4b60      	ldr	r3, [pc, #384]	@ (800bf28 <_strtod_l+0xb00>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f7f4 fc25 	bl	80005f8 <__aeabi_dmul>
 800bdae:	4606      	mov	r6, r0
 800bdb0:	460f      	mov	r7, r1
 800bdb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bdb6:	9606      	str	r6, [sp, #24]
 800bdb8:	9307      	str	r3, [sp, #28]
 800bdba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdbe:	4d57      	ldr	r5, [pc, #348]	@ (800bf1c <_strtod_l+0xaf4>)
 800bdc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bdc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdc6:	401d      	ands	r5, r3
 800bdc8:	4b58      	ldr	r3, [pc, #352]	@ (800bf2c <_strtod_l+0xb04>)
 800bdca:	429d      	cmp	r5, r3
 800bdcc:	f040 80b2 	bne.w	800bf34 <_strtod_l+0xb0c>
 800bdd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bdd6:	ec4b ab10 	vmov	d0, sl, fp
 800bdda:	f7ff f9c9 	bl	800b170 <__ulp>
 800bdde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bde2:	ec51 0b10 	vmov	r0, r1, d0
 800bde6:	f7f4 fc07 	bl	80005f8 <__aeabi_dmul>
 800bdea:	4652      	mov	r2, sl
 800bdec:	465b      	mov	r3, fp
 800bdee:	f7f4 fa4d 	bl	800028c <__adddf3>
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	4949      	ldr	r1, [pc, #292]	@ (800bf1c <_strtod_l+0xaf4>)
 800bdf6:	4a4e      	ldr	r2, [pc, #312]	@ (800bf30 <_strtod_l+0xb08>)
 800bdf8:	4019      	ands	r1, r3
 800bdfa:	4291      	cmp	r1, r2
 800bdfc:	4682      	mov	sl, r0
 800bdfe:	d942      	bls.n	800be86 <_strtod_l+0xa5e>
 800be00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be02:	4b47      	ldr	r3, [pc, #284]	@ (800bf20 <_strtod_l+0xaf8>)
 800be04:	429a      	cmp	r2, r3
 800be06:	d103      	bne.n	800be10 <_strtod_l+0x9e8>
 800be08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be0a:	3301      	adds	r3, #1
 800be0c:	f43f ad2b 	beq.w	800b866 <_strtod_l+0x43e>
 800be10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bf20 <_strtod_l+0xaf8>
 800be14:	f04f 3aff 	mov.w	sl, #4294967295
 800be18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be1a:	9805      	ldr	r0, [sp, #20]
 800be1c:	f7fe fe74 	bl	800ab08 <_Bfree>
 800be20:	9805      	ldr	r0, [sp, #20]
 800be22:	4649      	mov	r1, r9
 800be24:	f7fe fe70 	bl	800ab08 <_Bfree>
 800be28:	9805      	ldr	r0, [sp, #20]
 800be2a:	4641      	mov	r1, r8
 800be2c:	f7fe fe6c 	bl	800ab08 <_Bfree>
 800be30:	9805      	ldr	r0, [sp, #20]
 800be32:	4621      	mov	r1, r4
 800be34:	f7fe fe68 	bl	800ab08 <_Bfree>
 800be38:	e618      	b.n	800ba6c <_strtod_l+0x644>
 800be3a:	f1ba 0f01 	cmp.w	sl, #1
 800be3e:	d103      	bne.n	800be48 <_strtod_l+0xa20>
 800be40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be42:	2b00      	cmp	r3, #0
 800be44:	f43f ada5 	beq.w	800b992 <_strtod_l+0x56a>
 800be48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bef8 <_strtod_l+0xad0>
 800be4c:	4f35      	ldr	r7, [pc, #212]	@ (800bf24 <_strtod_l+0xafc>)
 800be4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be52:	2600      	movs	r6, #0
 800be54:	e7b1      	b.n	800bdba <_strtod_l+0x992>
 800be56:	4f34      	ldr	r7, [pc, #208]	@ (800bf28 <_strtod_l+0xb00>)
 800be58:	2600      	movs	r6, #0
 800be5a:	e7aa      	b.n	800bdb2 <_strtod_l+0x98a>
 800be5c:	4b32      	ldr	r3, [pc, #200]	@ (800bf28 <_strtod_l+0xb00>)
 800be5e:	4630      	mov	r0, r6
 800be60:	4639      	mov	r1, r7
 800be62:	2200      	movs	r2, #0
 800be64:	f7f4 fbc8 	bl	80005f8 <__aeabi_dmul>
 800be68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d09f      	beq.n	800bdb2 <_strtod_l+0x98a>
 800be72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be76:	e7a0      	b.n	800bdba <_strtod_l+0x992>
 800be78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bf00 <_strtod_l+0xad8>
 800be7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be80:	ec57 6b17 	vmov	r6, r7, d7
 800be84:	e799      	b.n	800bdba <_strtod_l+0x992>
 800be86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800be8a:	9b08      	ldr	r3, [sp, #32]
 800be8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1c1      	bne.n	800be18 <_strtod_l+0x9f0>
 800be94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be98:	0d1b      	lsrs	r3, r3, #20
 800be9a:	051b      	lsls	r3, r3, #20
 800be9c:	429d      	cmp	r5, r3
 800be9e:	d1bb      	bne.n	800be18 <_strtod_l+0x9f0>
 800bea0:	4630      	mov	r0, r6
 800bea2:	4639      	mov	r1, r7
 800bea4:	f7f4 ff08 	bl	8000cb8 <__aeabi_d2lz>
 800bea8:	f7f4 fb78 	bl	800059c <__aeabi_l2d>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 f9e8 	bl	8000288 <__aeabi_dsub>
 800beb8:	460b      	mov	r3, r1
 800beba:	4602      	mov	r2, r0
 800bebc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bec0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bec6:	ea46 060a 	orr.w	r6, r6, sl
 800beca:	431e      	orrs	r6, r3
 800becc:	d06f      	beq.n	800bfae <_strtod_l+0xb86>
 800bece:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf08 <_strtod_l+0xae0>)
 800bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed4:	f7f4 fe02 	bl	8000adc <__aeabi_dcmplt>
 800bed8:	2800      	cmp	r0, #0
 800beda:	f47f accf 	bne.w	800b87c <_strtod_l+0x454>
 800bede:	a30c      	add	r3, pc, #48	@ (adr r3, 800bf10 <_strtod_l+0xae8>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bee8:	f7f4 fe16 	bl	8000b18 <__aeabi_dcmpgt>
 800beec:	2800      	cmp	r0, #0
 800beee:	d093      	beq.n	800be18 <_strtod_l+0x9f0>
 800bef0:	e4c4      	b.n	800b87c <_strtod_l+0x454>
 800bef2:	bf00      	nop
 800bef4:	f3af 8000 	nop.w
 800bef8:	00000000 	.word	0x00000000
 800befc:	bff00000 	.word	0xbff00000
 800bf00:	00000000 	.word	0x00000000
 800bf04:	3ff00000 	.word	0x3ff00000
 800bf08:	94a03595 	.word	0x94a03595
 800bf0c:	3fdfffff 	.word	0x3fdfffff
 800bf10:	35afe535 	.word	0x35afe535
 800bf14:	3fe00000 	.word	0x3fe00000
 800bf18:	000fffff 	.word	0x000fffff
 800bf1c:	7ff00000 	.word	0x7ff00000
 800bf20:	7fefffff 	.word	0x7fefffff
 800bf24:	3ff00000 	.word	0x3ff00000
 800bf28:	3fe00000 	.word	0x3fe00000
 800bf2c:	7fe00000 	.word	0x7fe00000
 800bf30:	7c9fffff 	.word	0x7c9fffff
 800bf34:	9b08      	ldr	r3, [sp, #32]
 800bf36:	b323      	cbz	r3, 800bf82 <_strtod_l+0xb5a>
 800bf38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bf3c:	d821      	bhi.n	800bf82 <_strtod_l+0xb5a>
 800bf3e:	a328      	add	r3, pc, #160	@ (adr r3, 800bfe0 <_strtod_l+0xbb8>)
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	4630      	mov	r0, r6
 800bf46:	4639      	mov	r1, r7
 800bf48:	f7f4 fdd2 	bl	8000af0 <__aeabi_dcmple>
 800bf4c:	b1a0      	cbz	r0, 800bf78 <_strtod_l+0xb50>
 800bf4e:	4639      	mov	r1, r7
 800bf50:	4630      	mov	r0, r6
 800bf52:	f7f4 fe29 	bl	8000ba8 <__aeabi_d2uiz>
 800bf56:	2801      	cmp	r0, #1
 800bf58:	bf38      	it	cc
 800bf5a:	2001      	movcc	r0, #1
 800bf5c:	f7f4 fad2 	bl	8000504 <__aeabi_ui2d>
 800bf60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf62:	4606      	mov	r6, r0
 800bf64:	460f      	mov	r7, r1
 800bf66:	b9fb      	cbnz	r3, 800bfa8 <_strtod_l+0xb80>
 800bf68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf6c:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf6e:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bf74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bf7e:	1b5b      	subs	r3, r3, r5
 800bf80:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bf86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bf8a:	f7ff f8f1 	bl	800b170 <__ulp>
 800bf8e:	4650      	mov	r0, sl
 800bf90:	ec53 2b10 	vmov	r2, r3, d0
 800bf94:	4659      	mov	r1, fp
 800bf96:	f7f4 fb2f 	bl	80005f8 <__aeabi_dmul>
 800bf9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf9e:	f7f4 f975 	bl	800028c <__adddf3>
 800bfa2:	4682      	mov	sl, r0
 800bfa4:	468b      	mov	fp, r1
 800bfa6:	e770      	b.n	800be8a <_strtod_l+0xa62>
 800bfa8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bfac:	e7e0      	b.n	800bf70 <_strtod_l+0xb48>
 800bfae:	a30e      	add	r3, pc, #56	@ (adr r3, 800bfe8 <_strtod_l+0xbc0>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 fd92 	bl	8000adc <__aeabi_dcmplt>
 800bfb8:	e798      	b.n	800beec <_strtod_l+0xac4>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bfc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfc2:	6013      	str	r3, [r2, #0]
 800bfc4:	f7ff ba6d 	b.w	800b4a2 <_strtod_l+0x7a>
 800bfc8:	2a65      	cmp	r2, #101	@ 0x65
 800bfca:	f43f ab66 	beq.w	800b69a <_strtod_l+0x272>
 800bfce:	2a45      	cmp	r2, #69	@ 0x45
 800bfd0:	f43f ab63 	beq.w	800b69a <_strtod_l+0x272>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	f7ff bb9e 	b.w	800b716 <_strtod_l+0x2ee>
 800bfda:	bf00      	nop
 800bfdc:	f3af 8000 	nop.w
 800bfe0:	ffc00000 	.word	0xffc00000
 800bfe4:	41dfffff 	.word	0x41dfffff
 800bfe8:	94a03595 	.word	0x94a03595
 800bfec:	3fcfffff 	.word	0x3fcfffff

0800bff0 <_strtod_r>:
 800bff0:	4b01      	ldr	r3, [pc, #4]	@ (800bff8 <_strtod_r+0x8>)
 800bff2:	f7ff ba19 	b.w	800b428 <_strtod_l>
 800bff6:	bf00      	nop
 800bff8:	2000006c 	.word	0x2000006c

0800bffc <_strtol_l.constprop.0>:
 800bffc:	2b24      	cmp	r3, #36	@ 0x24
 800bffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c002:	4686      	mov	lr, r0
 800c004:	4690      	mov	r8, r2
 800c006:	d801      	bhi.n	800c00c <_strtol_l.constprop.0+0x10>
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d106      	bne.n	800c01a <_strtol_l.constprop.0+0x1e>
 800c00c:	f7fd fdbc 	bl	8009b88 <__errno>
 800c010:	2316      	movs	r3, #22
 800c012:	6003      	str	r3, [r0, #0]
 800c014:	2000      	movs	r0, #0
 800c016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01a:	4834      	ldr	r0, [pc, #208]	@ (800c0ec <_strtol_l.constprop.0+0xf0>)
 800c01c:	460d      	mov	r5, r1
 800c01e:	462a      	mov	r2, r5
 800c020:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c024:	5d06      	ldrb	r6, [r0, r4]
 800c026:	f016 0608 	ands.w	r6, r6, #8
 800c02a:	d1f8      	bne.n	800c01e <_strtol_l.constprop.0+0x22>
 800c02c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c02e:	d12d      	bne.n	800c08c <_strtol_l.constprop.0+0x90>
 800c030:	782c      	ldrb	r4, [r5, #0]
 800c032:	2601      	movs	r6, #1
 800c034:	1c95      	adds	r5, r2, #2
 800c036:	f033 0210 	bics.w	r2, r3, #16
 800c03a:	d109      	bne.n	800c050 <_strtol_l.constprop.0+0x54>
 800c03c:	2c30      	cmp	r4, #48	@ 0x30
 800c03e:	d12a      	bne.n	800c096 <_strtol_l.constprop.0+0x9a>
 800c040:	782a      	ldrb	r2, [r5, #0]
 800c042:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c046:	2a58      	cmp	r2, #88	@ 0x58
 800c048:	d125      	bne.n	800c096 <_strtol_l.constprop.0+0x9a>
 800c04a:	786c      	ldrb	r4, [r5, #1]
 800c04c:	2310      	movs	r3, #16
 800c04e:	3502      	adds	r5, #2
 800c050:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c054:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c058:	2200      	movs	r2, #0
 800c05a:	fbbc f9f3 	udiv	r9, ip, r3
 800c05e:	4610      	mov	r0, r2
 800c060:	fb03 ca19 	mls	sl, r3, r9, ip
 800c064:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c068:	2f09      	cmp	r7, #9
 800c06a:	d81b      	bhi.n	800c0a4 <_strtol_l.constprop.0+0xa8>
 800c06c:	463c      	mov	r4, r7
 800c06e:	42a3      	cmp	r3, r4
 800c070:	dd27      	ble.n	800c0c2 <_strtol_l.constprop.0+0xc6>
 800c072:	1c57      	adds	r7, r2, #1
 800c074:	d007      	beq.n	800c086 <_strtol_l.constprop.0+0x8a>
 800c076:	4581      	cmp	r9, r0
 800c078:	d320      	bcc.n	800c0bc <_strtol_l.constprop.0+0xc0>
 800c07a:	d101      	bne.n	800c080 <_strtol_l.constprop.0+0x84>
 800c07c:	45a2      	cmp	sl, r4
 800c07e:	db1d      	blt.n	800c0bc <_strtol_l.constprop.0+0xc0>
 800c080:	fb00 4003 	mla	r0, r0, r3, r4
 800c084:	2201      	movs	r2, #1
 800c086:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c08a:	e7eb      	b.n	800c064 <_strtol_l.constprop.0+0x68>
 800c08c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c08e:	bf04      	itt	eq
 800c090:	782c      	ldrbeq	r4, [r5, #0]
 800c092:	1c95      	addeq	r5, r2, #2
 800c094:	e7cf      	b.n	800c036 <_strtol_l.constprop.0+0x3a>
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1da      	bne.n	800c050 <_strtol_l.constprop.0+0x54>
 800c09a:	2c30      	cmp	r4, #48	@ 0x30
 800c09c:	bf0c      	ite	eq
 800c09e:	2308      	moveq	r3, #8
 800c0a0:	230a      	movne	r3, #10
 800c0a2:	e7d5      	b.n	800c050 <_strtol_l.constprop.0+0x54>
 800c0a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c0a8:	2f19      	cmp	r7, #25
 800c0aa:	d801      	bhi.n	800c0b0 <_strtol_l.constprop.0+0xb4>
 800c0ac:	3c37      	subs	r4, #55	@ 0x37
 800c0ae:	e7de      	b.n	800c06e <_strtol_l.constprop.0+0x72>
 800c0b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c0b4:	2f19      	cmp	r7, #25
 800c0b6:	d804      	bhi.n	800c0c2 <_strtol_l.constprop.0+0xc6>
 800c0b8:	3c57      	subs	r4, #87	@ 0x57
 800c0ba:	e7d8      	b.n	800c06e <_strtol_l.constprop.0+0x72>
 800c0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c0:	e7e1      	b.n	800c086 <_strtol_l.constprop.0+0x8a>
 800c0c2:	1c53      	adds	r3, r2, #1
 800c0c4:	d108      	bne.n	800c0d8 <_strtol_l.constprop.0+0xdc>
 800c0c6:	2322      	movs	r3, #34	@ 0x22
 800c0c8:	f8ce 3000 	str.w	r3, [lr]
 800c0cc:	4660      	mov	r0, ip
 800c0ce:	f1b8 0f00 	cmp.w	r8, #0
 800c0d2:	d0a0      	beq.n	800c016 <_strtol_l.constprop.0+0x1a>
 800c0d4:	1e69      	subs	r1, r5, #1
 800c0d6:	e006      	b.n	800c0e6 <_strtol_l.constprop.0+0xea>
 800c0d8:	b106      	cbz	r6, 800c0dc <_strtol_l.constprop.0+0xe0>
 800c0da:	4240      	negs	r0, r0
 800c0dc:	f1b8 0f00 	cmp.w	r8, #0
 800c0e0:	d099      	beq.n	800c016 <_strtol_l.constprop.0+0x1a>
 800c0e2:	2a00      	cmp	r2, #0
 800c0e4:	d1f6      	bne.n	800c0d4 <_strtol_l.constprop.0+0xd8>
 800c0e6:	f8c8 1000 	str.w	r1, [r8]
 800c0ea:	e794      	b.n	800c016 <_strtol_l.constprop.0+0x1a>
 800c0ec:	0800d569 	.word	0x0800d569

0800c0f0 <_strtol_r>:
 800c0f0:	f7ff bf84 	b.w	800bffc <_strtol_l.constprop.0>

0800c0f4 <__ssputs_r>:
 800c0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f8:	688e      	ldr	r6, [r1, #8]
 800c0fa:	461f      	mov	r7, r3
 800c0fc:	42be      	cmp	r6, r7
 800c0fe:	680b      	ldr	r3, [r1, #0]
 800c100:	4682      	mov	sl, r0
 800c102:	460c      	mov	r4, r1
 800c104:	4690      	mov	r8, r2
 800c106:	d82d      	bhi.n	800c164 <__ssputs_r+0x70>
 800c108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c10c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c110:	d026      	beq.n	800c160 <__ssputs_r+0x6c>
 800c112:	6965      	ldr	r5, [r4, #20]
 800c114:	6909      	ldr	r1, [r1, #16]
 800c116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c11a:	eba3 0901 	sub.w	r9, r3, r1
 800c11e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c122:	1c7b      	adds	r3, r7, #1
 800c124:	444b      	add	r3, r9
 800c126:	106d      	asrs	r5, r5, #1
 800c128:	429d      	cmp	r5, r3
 800c12a:	bf38      	it	cc
 800c12c:	461d      	movcc	r5, r3
 800c12e:	0553      	lsls	r3, r2, #21
 800c130:	d527      	bpl.n	800c182 <__ssputs_r+0x8e>
 800c132:	4629      	mov	r1, r5
 800c134:	f7fe fc1c 	bl	800a970 <_malloc_r>
 800c138:	4606      	mov	r6, r0
 800c13a:	b360      	cbz	r0, 800c196 <__ssputs_r+0xa2>
 800c13c:	6921      	ldr	r1, [r4, #16]
 800c13e:	464a      	mov	r2, r9
 800c140:	f000 fa18 	bl	800c574 <memcpy>
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c14a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c14e:	81a3      	strh	r3, [r4, #12]
 800c150:	6126      	str	r6, [r4, #16]
 800c152:	6165      	str	r5, [r4, #20]
 800c154:	444e      	add	r6, r9
 800c156:	eba5 0509 	sub.w	r5, r5, r9
 800c15a:	6026      	str	r6, [r4, #0]
 800c15c:	60a5      	str	r5, [r4, #8]
 800c15e:	463e      	mov	r6, r7
 800c160:	42be      	cmp	r6, r7
 800c162:	d900      	bls.n	800c166 <__ssputs_r+0x72>
 800c164:	463e      	mov	r6, r7
 800c166:	6820      	ldr	r0, [r4, #0]
 800c168:	4632      	mov	r2, r6
 800c16a:	4641      	mov	r1, r8
 800c16c:	f000 f9c6 	bl	800c4fc <memmove>
 800c170:	68a3      	ldr	r3, [r4, #8]
 800c172:	1b9b      	subs	r3, r3, r6
 800c174:	60a3      	str	r3, [r4, #8]
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	4433      	add	r3, r6
 800c17a:	6023      	str	r3, [r4, #0]
 800c17c:	2000      	movs	r0, #0
 800c17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c182:	462a      	mov	r2, r5
 800c184:	f000 fd89 	bl	800cc9a <_realloc_r>
 800c188:	4606      	mov	r6, r0
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d1e0      	bne.n	800c150 <__ssputs_r+0x5c>
 800c18e:	6921      	ldr	r1, [r4, #16]
 800c190:	4650      	mov	r0, sl
 800c192:	f7fe fb79 	bl	800a888 <_free_r>
 800c196:	230c      	movs	r3, #12
 800c198:	f8ca 3000 	str.w	r3, [sl]
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1a2:	81a3      	strh	r3, [r4, #12]
 800c1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a8:	e7e9      	b.n	800c17e <__ssputs_r+0x8a>
	...

0800c1ac <_svfiprintf_r>:
 800c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	4698      	mov	r8, r3
 800c1b2:	898b      	ldrh	r3, [r1, #12]
 800c1b4:	061b      	lsls	r3, r3, #24
 800c1b6:	b09d      	sub	sp, #116	@ 0x74
 800c1b8:	4607      	mov	r7, r0
 800c1ba:	460d      	mov	r5, r1
 800c1bc:	4614      	mov	r4, r2
 800c1be:	d510      	bpl.n	800c1e2 <_svfiprintf_r+0x36>
 800c1c0:	690b      	ldr	r3, [r1, #16]
 800c1c2:	b973      	cbnz	r3, 800c1e2 <_svfiprintf_r+0x36>
 800c1c4:	2140      	movs	r1, #64	@ 0x40
 800c1c6:	f7fe fbd3 	bl	800a970 <_malloc_r>
 800c1ca:	6028      	str	r0, [r5, #0]
 800c1cc:	6128      	str	r0, [r5, #16]
 800c1ce:	b930      	cbnz	r0, 800c1de <_svfiprintf_r+0x32>
 800c1d0:	230c      	movs	r3, #12
 800c1d2:	603b      	str	r3, [r7, #0]
 800c1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d8:	b01d      	add	sp, #116	@ 0x74
 800c1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1de:	2340      	movs	r3, #64	@ 0x40
 800c1e0:	616b      	str	r3, [r5, #20]
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1e6:	2320      	movs	r3, #32
 800c1e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1f0:	2330      	movs	r3, #48	@ 0x30
 800c1f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c390 <_svfiprintf_r+0x1e4>
 800c1f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1fa:	f04f 0901 	mov.w	r9, #1
 800c1fe:	4623      	mov	r3, r4
 800c200:	469a      	mov	sl, r3
 800c202:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c206:	b10a      	cbz	r2, 800c20c <_svfiprintf_r+0x60>
 800c208:	2a25      	cmp	r2, #37	@ 0x25
 800c20a:	d1f9      	bne.n	800c200 <_svfiprintf_r+0x54>
 800c20c:	ebba 0b04 	subs.w	fp, sl, r4
 800c210:	d00b      	beq.n	800c22a <_svfiprintf_r+0x7e>
 800c212:	465b      	mov	r3, fp
 800c214:	4622      	mov	r2, r4
 800c216:	4629      	mov	r1, r5
 800c218:	4638      	mov	r0, r7
 800c21a:	f7ff ff6b 	bl	800c0f4 <__ssputs_r>
 800c21e:	3001      	adds	r0, #1
 800c220:	f000 80a7 	beq.w	800c372 <_svfiprintf_r+0x1c6>
 800c224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c226:	445a      	add	r2, fp
 800c228:	9209      	str	r2, [sp, #36]	@ 0x24
 800c22a:	f89a 3000 	ldrb.w	r3, [sl]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f000 809f 	beq.w	800c372 <_svfiprintf_r+0x1c6>
 800c234:	2300      	movs	r3, #0
 800c236:	f04f 32ff 	mov.w	r2, #4294967295
 800c23a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c23e:	f10a 0a01 	add.w	sl, sl, #1
 800c242:	9304      	str	r3, [sp, #16]
 800c244:	9307      	str	r3, [sp, #28]
 800c246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c24a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c24c:	4654      	mov	r4, sl
 800c24e:	2205      	movs	r2, #5
 800c250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c254:	484e      	ldr	r0, [pc, #312]	@ (800c390 <_svfiprintf_r+0x1e4>)
 800c256:	f7f3 ffbb 	bl	80001d0 <memchr>
 800c25a:	9a04      	ldr	r2, [sp, #16]
 800c25c:	b9d8      	cbnz	r0, 800c296 <_svfiprintf_r+0xea>
 800c25e:	06d0      	lsls	r0, r2, #27
 800c260:	bf44      	itt	mi
 800c262:	2320      	movmi	r3, #32
 800c264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c268:	0711      	lsls	r1, r2, #28
 800c26a:	bf44      	itt	mi
 800c26c:	232b      	movmi	r3, #43	@ 0x2b
 800c26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c272:	f89a 3000 	ldrb.w	r3, [sl]
 800c276:	2b2a      	cmp	r3, #42	@ 0x2a
 800c278:	d015      	beq.n	800c2a6 <_svfiprintf_r+0xfa>
 800c27a:	9a07      	ldr	r2, [sp, #28]
 800c27c:	4654      	mov	r4, sl
 800c27e:	2000      	movs	r0, #0
 800c280:	f04f 0c0a 	mov.w	ip, #10
 800c284:	4621      	mov	r1, r4
 800c286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c28a:	3b30      	subs	r3, #48	@ 0x30
 800c28c:	2b09      	cmp	r3, #9
 800c28e:	d94b      	bls.n	800c328 <_svfiprintf_r+0x17c>
 800c290:	b1b0      	cbz	r0, 800c2c0 <_svfiprintf_r+0x114>
 800c292:	9207      	str	r2, [sp, #28]
 800c294:	e014      	b.n	800c2c0 <_svfiprintf_r+0x114>
 800c296:	eba0 0308 	sub.w	r3, r0, r8
 800c29a:	fa09 f303 	lsl.w	r3, r9, r3
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	9304      	str	r3, [sp, #16]
 800c2a2:	46a2      	mov	sl, r4
 800c2a4:	e7d2      	b.n	800c24c <_svfiprintf_r+0xa0>
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	1d19      	adds	r1, r3, #4
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	9103      	str	r1, [sp, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bfbb      	ittet	lt
 800c2b2:	425b      	neglt	r3, r3
 800c2b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2b8:	9307      	strge	r3, [sp, #28]
 800c2ba:	9307      	strlt	r3, [sp, #28]
 800c2bc:	bfb8      	it	lt
 800c2be:	9204      	strlt	r2, [sp, #16]
 800c2c0:	7823      	ldrb	r3, [r4, #0]
 800c2c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2c4:	d10a      	bne.n	800c2dc <_svfiprintf_r+0x130>
 800c2c6:	7863      	ldrb	r3, [r4, #1]
 800c2c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2ca:	d132      	bne.n	800c332 <_svfiprintf_r+0x186>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	1d1a      	adds	r2, r3, #4
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	9203      	str	r2, [sp, #12]
 800c2d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2d8:	3402      	adds	r4, #2
 800c2da:	9305      	str	r3, [sp, #20]
 800c2dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c3a0 <_svfiprintf_r+0x1f4>
 800c2e0:	7821      	ldrb	r1, [r4, #0]
 800c2e2:	2203      	movs	r2, #3
 800c2e4:	4650      	mov	r0, sl
 800c2e6:	f7f3 ff73 	bl	80001d0 <memchr>
 800c2ea:	b138      	cbz	r0, 800c2fc <_svfiprintf_r+0x150>
 800c2ec:	9b04      	ldr	r3, [sp, #16]
 800c2ee:	eba0 000a 	sub.w	r0, r0, sl
 800c2f2:	2240      	movs	r2, #64	@ 0x40
 800c2f4:	4082      	lsls	r2, r0
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	3401      	adds	r4, #1
 800c2fa:	9304      	str	r3, [sp, #16]
 800c2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c300:	4824      	ldr	r0, [pc, #144]	@ (800c394 <_svfiprintf_r+0x1e8>)
 800c302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c306:	2206      	movs	r2, #6
 800c308:	f7f3 ff62 	bl	80001d0 <memchr>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d036      	beq.n	800c37e <_svfiprintf_r+0x1d2>
 800c310:	4b21      	ldr	r3, [pc, #132]	@ (800c398 <_svfiprintf_r+0x1ec>)
 800c312:	bb1b      	cbnz	r3, 800c35c <_svfiprintf_r+0x1b0>
 800c314:	9b03      	ldr	r3, [sp, #12]
 800c316:	3307      	adds	r3, #7
 800c318:	f023 0307 	bic.w	r3, r3, #7
 800c31c:	3308      	adds	r3, #8
 800c31e:	9303      	str	r3, [sp, #12]
 800c320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c322:	4433      	add	r3, r6
 800c324:	9309      	str	r3, [sp, #36]	@ 0x24
 800c326:	e76a      	b.n	800c1fe <_svfiprintf_r+0x52>
 800c328:	fb0c 3202 	mla	r2, ip, r2, r3
 800c32c:	460c      	mov	r4, r1
 800c32e:	2001      	movs	r0, #1
 800c330:	e7a8      	b.n	800c284 <_svfiprintf_r+0xd8>
 800c332:	2300      	movs	r3, #0
 800c334:	3401      	adds	r4, #1
 800c336:	9305      	str	r3, [sp, #20]
 800c338:	4619      	mov	r1, r3
 800c33a:	f04f 0c0a 	mov.w	ip, #10
 800c33e:	4620      	mov	r0, r4
 800c340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c344:	3a30      	subs	r2, #48	@ 0x30
 800c346:	2a09      	cmp	r2, #9
 800c348:	d903      	bls.n	800c352 <_svfiprintf_r+0x1a6>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d0c6      	beq.n	800c2dc <_svfiprintf_r+0x130>
 800c34e:	9105      	str	r1, [sp, #20]
 800c350:	e7c4      	b.n	800c2dc <_svfiprintf_r+0x130>
 800c352:	fb0c 2101 	mla	r1, ip, r1, r2
 800c356:	4604      	mov	r4, r0
 800c358:	2301      	movs	r3, #1
 800c35a:	e7f0      	b.n	800c33e <_svfiprintf_r+0x192>
 800c35c:	ab03      	add	r3, sp, #12
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	462a      	mov	r2, r5
 800c362:	4b0e      	ldr	r3, [pc, #56]	@ (800c39c <_svfiprintf_r+0x1f0>)
 800c364:	a904      	add	r1, sp, #16
 800c366:	4638      	mov	r0, r7
 800c368:	f7fc fcca 	bl	8008d00 <_printf_float>
 800c36c:	1c42      	adds	r2, r0, #1
 800c36e:	4606      	mov	r6, r0
 800c370:	d1d6      	bne.n	800c320 <_svfiprintf_r+0x174>
 800c372:	89ab      	ldrh	r3, [r5, #12]
 800c374:	065b      	lsls	r3, r3, #25
 800c376:	f53f af2d 	bmi.w	800c1d4 <_svfiprintf_r+0x28>
 800c37a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c37c:	e72c      	b.n	800c1d8 <_svfiprintf_r+0x2c>
 800c37e:	ab03      	add	r3, sp, #12
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	462a      	mov	r2, r5
 800c384:	4b05      	ldr	r3, [pc, #20]	@ (800c39c <_svfiprintf_r+0x1f0>)
 800c386:	a904      	add	r1, sp, #16
 800c388:	4638      	mov	r0, r7
 800c38a:	f7fc ff51 	bl	8009230 <_printf_i>
 800c38e:	e7ed      	b.n	800c36c <_svfiprintf_r+0x1c0>
 800c390:	0800d669 	.word	0x0800d669
 800c394:	0800d673 	.word	0x0800d673
 800c398:	08008d01 	.word	0x08008d01
 800c39c:	0800c0f5 	.word	0x0800c0f5
 800c3a0:	0800d66f 	.word	0x0800d66f

0800c3a4 <__sflush_r>:
 800c3a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ac:	0716      	lsls	r6, r2, #28
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	d454      	bmi.n	800c45e <__sflush_r+0xba>
 800c3b4:	684b      	ldr	r3, [r1, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	dc02      	bgt.n	800c3c0 <__sflush_r+0x1c>
 800c3ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	dd48      	ble.n	800c452 <__sflush_r+0xae>
 800c3c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3c2:	2e00      	cmp	r6, #0
 800c3c4:	d045      	beq.n	800c452 <__sflush_r+0xae>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c3cc:	682f      	ldr	r7, [r5, #0]
 800c3ce:	6a21      	ldr	r1, [r4, #32]
 800c3d0:	602b      	str	r3, [r5, #0]
 800c3d2:	d030      	beq.n	800c436 <__sflush_r+0x92>
 800c3d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3d6:	89a3      	ldrh	r3, [r4, #12]
 800c3d8:	0759      	lsls	r1, r3, #29
 800c3da:	d505      	bpl.n	800c3e8 <__sflush_r+0x44>
 800c3dc:	6863      	ldr	r3, [r4, #4]
 800c3de:	1ad2      	subs	r2, r2, r3
 800c3e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3e2:	b10b      	cbz	r3, 800c3e8 <__sflush_r+0x44>
 800c3e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3e6:	1ad2      	subs	r2, r2, r3
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3ec:	6a21      	ldr	r1, [r4, #32]
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	47b0      	blx	r6
 800c3f2:	1c43      	adds	r3, r0, #1
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	d106      	bne.n	800c406 <__sflush_r+0x62>
 800c3f8:	6829      	ldr	r1, [r5, #0]
 800c3fa:	291d      	cmp	r1, #29
 800c3fc:	d82b      	bhi.n	800c456 <__sflush_r+0xb2>
 800c3fe:	4a2a      	ldr	r2, [pc, #168]	@ (800c4a8 <__sflush_r+0x104>)
 800c400:	410a      	asrs	r2, r1
 800c402:	07d6      	lsls	r6, r2, #31
 800c404:	d427      	bmi.n	800c456 <__sflush_r+0xb2>
 800c406:	2200      	movs	r2, #0
 800c408:	6062      	str	r2, [r4, #4]
 800c40a:	04d9      	lsls	r1, r3, #19
 800c40c:	6922      	ldr	r2, [r4, #16]
 800c40e:	6022      	str	r2, [r4, #0]
 800c410:	d504      	bpl.n	800c41c <__sflush_r+0x78>
 800c412:	1c42      	adds	r2, r0, #1
 800c414:	d101      	bne.n	800c41a <__sflush_r+0x76>
 800c416:	682b      	ldr	r3, [r5, #0]
 800c418:	b903      	cbnz	r3, 800c41c <__sflush_r+0x78>
 800c41a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c41c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c41e:	602f      	str	r7, [r5, #0]
 800c420:	b1b9      	cbz	r1, 800c452 <__sflush_r+0xae>
 800c422:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c426:	4299      	cmp	r1, r3
 800c428:	d002      	beq.n	800c430 <__sflush_r+0x8c>
 800c42a:	4628      	mov	r0, r5
 800c42c:	f7fe fa2c 	bl	800a888 <_free_r>
 800c430:	2300      	movs	r3, #0
 800c432:	6363      	str	r3, [r4, #52]	@ 0x34
 800c434:	e00d      	b.n	800c452 <__sflush_r+0xae>
 800c436:	2301      	movs	r3, #1
 800c438:	4628      	mov	r0, r5
 800c43a:	47b0      	blx	r6
 800c43c:	4602      	mov	r2, r0
 800c43e:	1c50      	adds	r0, r2, #1
 800c440:	d1c9      	bne.n	800c3d6 <__sflush_r+0x32>
 800c442:	682b      	ldr	r3, [r5, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d0c6      	beq.n	800c3d6 <__sflush_r+0x32>
 800c448:	2b1d      	cmp	r3, #29
 800c44a:	d001      	beq.n	800c450 <__sflush_r+0xac>
 800c44c:	2b16      	cmp	r3, #22
 800c44e:	d11e      	bne.n	800c48e <__sflush_r+0xea>
 800c450:	602f      	str	r7, [r5, #0]
 800c452:	2000      	movs	r0, #0
 800c454:	e022      	b.n	800c49c <__sflush_r+0xf8>
 800c456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c45a:	b21b      	sxth	r3, r3
 800c45c:	e01b      	b.n	800c496 <__sflush_r+0xf2>
 800c45e:	690f      	ldr	r7, [r1, #16]
 800c460:	2f00      	cmp	r7, #0
 800c462:	d0f6      	beq.n	800c452 <__sflush_r+0xae>
 800c464:	0793      	lsls	r3, r2, #30
 800c466:	680e      	ldr	r6, [r1, #0]
 800c468:	bf08      	it	eq
 800c46a:	694b      	ldreq	r3, [r1, #20]
 800c46c:	600f      	str	r7, [r1, #0]
 800c46e:	bf18      	it	ne
 800c470:	2300      	movne	r3, #0
 800c472:	eba6 0807 	sub.w	r8, r6, r7
 800c476:	608b      	str	r3, [r1, #8]
 800c478:	f1b8 0f00 	cmp.w	r8, #0
 800c47c:	dde9      	ble.n	800c452 <__sflush_r+0xae>
 800c47e:	6a21      	ldr	r1, [r4, #32]
 800c480:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c482:	4643      	mov	r3, r8
 800c484:	463a      	mov	r2, r7
 800c486:	4628      	mov	r0, r5
 800c488:	47b0      	blx	r6
 800c48a:	2800      	cmp	r0, #0
 800c48c:	dc08      	bgt.n	800c4a0 <__sflush_r+0xfc>
 800c48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c496:	81a3      	strh	r3, [r4, #12]
 800c498:	f04f 30ff 	mov.w	r0, #4294967295
 800c49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a0:	4407      	add	r7, r0
 800c4a2:	eba8 0800 	sub.w	r8, r8, r0
 800c4a6:	e7e7      	b.n	800c478 <__sflush_r+0xd4>
 800c4a8:	dfbffffe 	.word	0xdfbffffe

0800c4ac <_fflush_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	690b      	ldr	r3, [r1, #16]
 800c4b0:	4605      	mov	r5, r0
 800c4b2:	460c      	mov	r4, r1
 800c4b4:	b913      	cbnz	r3, 800c4bc <_fflush_r+0x10>
 800c4b6:	2500      	movs	r5, #0
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	bd38      	pop	{r3, r4, r5, pc}
 800c4bc:	b118      	cbz	r0, 800c4c6 <_fflush_r+0x1a>
 800c4be:	6a03      	ldr	r3, [r0, #32]
 800c4c0:	b90b      	cbnz	r3, 800c4c6 <_fflush_r+0x1a>
 800c4c2:	f7fd fa75 	bl	80099b0 <__sinit>
 800c4c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0f3      	beq.n	800c4b6 <_fflush_r+0xa>
 800c4ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4d0:	07d0      	lsls	r0, r2, #31
 800c4d2:	d404      	bmi.n	800c4de <_fflush_r+0x32>
 800c4d4:	0599      	lsls	r1, r3, #22
 800c4d6:	d402      	bmi.n	800c4de <_fflush_r+0x32>
 800c4d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4da:	f7fd fb80 	bl	8009bde <__retarget_lock_acquire_recursive>
 800c4de:	4628      	mov	r0, r5
 800c4e0:	4621      	mov	r1, r4
 800c4e2:	f7ff ff5f 	bl	800c3a4 <__sflush_r>
 800c4e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4e8:	07da      	lsls	r2, r3, #31
 800c4ea:	4605      	mov	r5, r0
 800c4ec:	d4e4      	bmi.n	800c4b8 <_fflush_r+0xc>
 800c4ee:	89a3      	ldrh	r3, [r4, #12]
 800c4f0:	059b      	lsls	r3, r3, #22
 800c4f2:	d4e1      	bmi.n	800c4b8 <_fflush_r+0xc>
 800c4f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4f6:	f7fd fb73 	bl	8009be0 <__retarget_lock_release_recursive>
 800c4fa:	e7dd      	b.n	800c4b8 <_fflush_r+0xc>

0800c4fc <memmove>:
 800c4fc:	4288      	cmp	r0, r1
 800c4fe:	b510      	push	{r4, lr}
 800c500:	eb01 0402 	add.w	r4, r1, r2
 800c504:	d902      	bls.n	800c50c <memmove+0x10>
 800c506:	4284      	cmp	r4, r0
 800c508:	4623      	mov	r3, r4
 800c50a:	d807      	bhi.n	800c51c <memmove+0x20>
 800c50c:	1e43      	subs	r3, r0, #1
 800c50e:	42a1      	cmp	r1, r4
 800c510:	d008      	beq.n	800c524 <memmove+0x28>
 800c512:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c516:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c51a:	e7f8      	b.n	800c50e <memmove+0x12>
 800c51c:	4402      	add	r2, r0
 800c51e:	4601      	mov	r1, r0
 800c520:	428a      	cmp	r2, r1
 800c522:	d100      	bne.n	800c526 <memmove+0x2a>
 800c524:	bd10      	pop	{r4, pc}
 800c526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c52a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c52e:	e7f7      	b.n	800c520 <memmove+0x24>

0800c530 <strncmp>:
 800c530:	b510      	push	{r4, lr}
 800c532:	b16a      	cbz	r2, 800c550 <strncmp+0x20>
 800c534:	3901      	subs	r1, #1
 800c536:	1884      	adds	r4, r0, r2
 800c538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c53c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c540:	429a      	cmp	r2, r3
 800c542:	d103      	bne.n	800c54c <strncmp+0x1c>
 800c544:	42a0      	cmp	r0, r4
 800c546:	d001      	beq.n	800c54c <strncmp+0x1c>
 800c548:	2a00      	cmp	r2, #0
 800c54a:	d1f5      	bne.n	800c538 <strncmp+0x8>
 800c54c:	1ad0      	subs	r0, r2, r3
 800c54e:	bd10      	pop	{r4, pc}
 800c550:	4610      	mov	r0, r2
 800c552:	e7fc      	b.n	800c54e <strncmp+0x1e>

0800c554 <_sbrk_r>:
 800c554:	b538      	push	{r3, r4, r5, lr}
 800c556:	4d06      	ldr	r5, [pc, #24]	@ (800c570 <_sbrk_r+0x1c>)
 800c558:	2300      	movs	r3, #0
 800c55a:	4604      	mov	r4, r0
 800c55c:	4608      	mov	r0, r1
 800c55e:	602b      	str	r3, [r5, #0]
 800c560:	f7f6 f816 	bl	8002590 <_sbrk>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	d102      	bne.n	800c56e <_sbrk_r+0x1a>
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	b103      	cbz	r3, 800c56e <_sbrk_r+0x1a>
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	2000055c 	.word	0x2000055c

0800c574 <memcpy>:
 800c574:	440a      	add	r2, r1
 800c576:	4291      	cmp	r1, r2
 800c578:	f100 33ff 	add.w	r3, r0, #4294967295
 800c57c:	d100      	bne.n	800c580 <memcpy+0xc>
 800c57e:	4770      	bx	lr
 800c580:	b510      	push	{r4, lr}
 800c582:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c58a:	4291      	cmp	r1, r2
 800c58c:	d1f9      	bne.n	800c582 <memcpy+0xe>
 800c58e:	bd10      	pop	{r4, pc}

0800c590 <nan>:
 800c590:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c598 <nan+0x8>
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	00000000 	.word	0x00000000
 800c59c:	7ff80000 	.word	0x7ff80000

0800c5a0 <__assert_func>:
 800c5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5a2:	4614      	mov	r4, r2
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	4b09      	ldr	r3, [pc, #36]	@ (800c5cc <__assert_func+0x2c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4605      	mov	r5, r0
 800c5ac:	68d8      	ldr	r0, [r3, #12]
 800c5ae:	b954      	cbnz	r4, 800c5c6 <__assert_func+0x26>
 800c5b0:	4b07      	ldr	r3, [pc, #28]	@ (800c5d0 <__assert_func+0x30>)
 800c5b2:	461c      	mov	r4, r3
 800c5b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5b8:	9100      	str	r1, [sp, #0]
 800c5ba:	462b      	mov	r3, r5
 800c5bc:	4905      	ldr	r1, [pc, #20]	@ (800c5d4 <__assert_func+0x34>)
 800c5be:	f000 fba7 	bl	800cd10 <fiprintf>
 800c5c2:	f000 fbb7 	bl	800cd34 <abort>
 800c5c6:	4b04      	ldr	r3, [pc, #16]	@ (800c5d8 <__assert_func+0x38>)
 800c5c8:	e7f4      	b.n	800c5b4 <__assert_func+0x14>
 800c5ca:	bf00      	nop
 800c5cc:	2000001c 	.word	0x2000001c
 800c5d0:	0800d6bd 	.word	0x0800d6bd
 800c5d4:	0800d68f 	.word	0x0800d68f
 800c5d8:	0800d682 	.word	0x0800d682

0800c5dc <_calloc_r>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	fba1 5402 	umull	r5, r4, r1, r2
 800c5e2:	b93c      	cbnz	r4, 800c5f4 <_calloc_r+0x18>
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	f7fe f9c3 	bl	800a970 <_malloc_r>
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	b928      	cbnz	r0, 800c5fa <_calloc_r+0x1e>
 800c5ee:	2600      	movs	r6, #0
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	220c      	movs	r2, #12
 800c5f6:	6002      	str	r2, [r0, #0]
 800c5f8:	e7f9      	b.n	800c5ee <_calloc_r+0x12>
 800c5fa:	462a      	mov	r2, r5
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	f7fd fa70 	bl	8009ae2 <memset>
 800c602:	e7f5      	b.n	800c5f0 <_calloc_r+0x14>

0800c604 <rshift>:
 800c604:	6903      	ldr	r3, [r0, #16]
 800c606:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c60a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c60e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c612:	f100 0414 	add.w	r4, r0, #20
 800c616:	dd45      	ble.n	800c6a4 <rshift+0xa0>
 800c618:	f011 011f 	ands.w	r1, r1, #31
 800c61c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c620:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c624:	d10c      	bne.n	800c640 <rshift+0x3c>
 800c626:	f100 0710 	add.w	r7, r0, #16
 800c62a:	4629      	mov	r1, r5
 800c62c:	42b1      	cmp	r1, r6
 800c62e:	d334      	bcc.n	800c69a <rshift+0x96>
 800c630:	1a9b      	subs	r3, r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	1eea      	subs	r2, r5, #3
 800c636:	4296      	cmp	r6, r2
 800c638:	bf38      	it	cc
 800c63a:	2300      	movcc	r3, #0
 800c63c:	4423      	add	r3, r4
 800c63e:	e015      	b.n	800c66c <rshift+0x68>
 800c640:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c644:	f1c1 0820 	rsb	r8, r1, #32
 800c648:	40cf      	lsrs	r7, r1
 800c64a:	f105 0e04 	add.w	lr, r5, #4
 800c64e:	46a1      	mov	r9, r4
 800c650:	4576      	cmp	r6, lr
 800c652:	46f4      	mov	ip, lr
 800c654:	d815      	bhi.n	800c682 <rshift+0x7e>
 800c656:	1a9a      	subs	r2, r3, r2
 800c658:	0092      	lsls	r2, r2, #2
 800c65a:	3a04      	subs	r2, #4
 800c65c:	3501      	adds	r5, #1
 800c65e:	42ae      	cmp	r6, r5
 800c660:	bf38      	it	cc
 800c662:	2200      	movcc	r2, #0
 800c664:	18a3      	adds	r3, r4, r2
 800c666:	50a7      	str	r7, [r4, r2]
 800c668:	b107      	cbz	r7, 800c66c <rshift+0x68>
 800c66a:	3304      	adds	r3, #4
 800c66c:	1b1a      	subs	r2, r3, r4
 800c66e:	42a3      	cmp	r3, r4
 800c670:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c674:	bf08      	it	eq
 800c676:	2300      	moveq	r3, #0
 800c678:	6102      	str	r2, [r0, #16]
 800c67a:	bf08      	it	eq
 800c67c:	6143      	streq	r3, [r0, #20]
 800c67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c682:	f8dc c000 	ldr.w	ip, [ip]
 800c686:	fa0c fc08 	lsl.w	ip, ip, r8
 800c68a:	ea4c 0707 	orr.w	r7, ip, r7
 800c68e:	f849 7b04 	str.w	r7, [r9], #4
 800c692:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c696:	40cf      	lsrs	r7, r1
 800c698:	e7da      	b.n	800c650 <rshift+0x4c>
 800c69a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c69e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c6a2:	e7c3      	b.n	800c62c <rshift+0x28>
 800c6a4:	4623      	mov	r3, r4
 800c6a6:	e7e1      	b.n	800c66c <rshift+0x68>

0800c6a8 <__hexdig_fun>:
 800c6a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c6ac:	2b09      	cmp	r3, #9
 800c6ae:	d802      	bhi.n	800c6b6 <__hexdig_fun+0xe>
 800c6b0:	3820      	subs	r0, #32
 800c6b2:	b2c0      	uxtb	r0, r0
 800c6b4:	4770      	bx	lr
 800c6b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c6ba:	2b05      	cmp	r3, #5
 800c6bc:	d801      	bhi.n	800c6c2 <__hexdig_fun+0x1a>
 800c6be:	3847      	subs	r0, #71	@ 0x47
 800c6c0:	e7f7      	b.n	800c6b2 <__hexdig_fun+0xa>
 800c6c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c6c6:	2b05      	cmp	r3, #5
 800c6c8:	d801      	bhi.n	800c6ce <__hexdig_fun+0x26>
 800c6ca:	3827      	subs	r0, #39	@ 0x27
 800c6cc:	e7f1      	b.n	800c6b2 <__hexdig_fun+0xa>
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	4770      	bx	lr
	...

0800c6d4 <__gethex>:
 800c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d8:	b085      	sub	sp, #20
 800c6da:	468a      	mov	sl, r1
 800c6dc:	9302      	str	r3, [sp, #8]
 800c6de:	680b      	ldr	r3, [r1, #0]
 800c6e0:	9001      	str	r0, [sp, #4]
 800c6e2:	4690      	mov	r8, r2
 800c6e4:	1c9c      	adds	r4, r3, #2
 800c6e6:	46a1      	mov	r9, r4
 800c6e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c6ec:	2830      	cmp	r0, #48	@ 0x30
 800c6ee:	d0fa      	beq.n	800c6e6 <__gethex+0x12>
 800c6f0:	eba9 0303 	sub.w	r3, r9, r3
 800c6f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c6f8:	f7ff ffd6 	bl	800c6a8 <__hexdig_fun>
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	2800      	cmp	r0, #0
 800c700:	d168      	bne.n	800c7d4 <__gethex+0x100>
 800c702:	49a0      	ldr	r1, [pc, #640]	@ (800c984 <__gethex+0x2b0>)
 800c704:	2201      	movs	r2, #1
 800c706:	4648      	mov	r0, r9
 800c708:	f7ff ff12 	bl	800c530 <strncmp>
 800c70c:	4607      	mov	r7, r0
 800c70e:	2800      	cmp	r0, #0
 800c710:	d167      	bne.n	800c7e2 <__gethex+0x10e>
 800c712:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c716:	4626      	mov	r6, r4
 800c718:	f7ff ffc6 	bl	800c6a8 <__hexdig_fun>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d062      	beq.n	800c7e6 <__gethex+0x112>
 800c720:	4623      	mov	r3, r4
 800c722:	7818      	ldrb	r0, [r3, #0]
 800c724:	2830      	cmp	r0, #48	@ 0x30
 800c726:	4699      	mov	r9, r3
 800c728:	f103 0301 	add.w	r3, r3, #1
 800c72c:	d0f9      	beq.n	800c722 <__gethex+0x4e>
 800c72e:	f7ff ffbb 	bl	800c6a8 <__hexdig_fun>
 800c732:	fab0 f580 	clz	r5, r0
 800c736:	096d      	lsrs	r5, r5, #5
 800c738:	f04f 0b01 	mov.w	fp, #1
 800c73c:	464a      	mov	r2, r9
 800c73e:	4616      	mov	r6, r2
 800c740:	3201      	adds	r2, #1
 800c742:	7830      	ldrb	r0, [r6, #0]
 800c744:	f7ff ffb0 	bl	800c6a8 <__hexdig_fun>
 800c748:	2800      	cmp	r0, #0
 800c74a:	d1f8      	bne.n	800c73e <__gethex+0x6a>
 800c74c:	498d      	ldr	r1, [pc, #564]	@ (800c984 <__gethex+0x2b0>)
 800c74e:	2201      	movs	r2, #1
 800c750:	4630      	mov	r0, r6
 800c752:	f7ff feed 	bl	800c530 <strncmp>
 800c756:	2800      	cmp	r0, #0
 800c758:	d13f      	bne.n	800c7da <__gethex+0x106>
 800c75a:	b944      	cbnz	r4, 800c76e <__gethex+0x9a>
 800c75c:	1c74      	adds	r4, r6, #1
 800c75e:	4622      	mov	r2, r4
 800c760:	4616      	mov	r6, r2
 800c762:	3201      	adds	r2, #1
 800c764:	7830      	ldrb	r0, [r6, #0]
 800c766:	f7ff ff9f 	bl	800c6a8 <__hexdig_fun>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d1f8      	bne.n	800c760 <__gethex+0x8c>
 800c76e:	1ba4      	subs	r4, r4, r6
 800c770:	00a7      	lsls	r7, r4, #2
 800c772:	7833      	ldrb	r3, [r6, #0]
 800c774:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c778:	2b50      	cmp	r3, #80	@ 0x50
 800c77a:	d13e      	bne.n	800c7fa <__gethex+0x126>
 800c77c:	7873      	ldrb	r3, [r6, #1]
 800c77e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c780:	d033      	beq.n	800c7ea <__gethex+0x116>
 800c782:	2b2d      	cmp	r3, #45	@ 0x2d
 800c784:	d034      	beq.n	800c7f0 <__gethex+0x11c>
 800c786:	1c71      	adds	r1, r6, #1
 800c788:	2400      	movs	r4, #0
 800c78a:	7808      	ldrb	r0, [r1, #0]
 800c78c:	f7ff ff8c 	bl	800c6a8 <__hexdig_fun>
 800c790:	1e43      	subs	r3, r0, #1
 800c792:	b2db      	uxtb	r3, r3
 800c794:	2b18      	cmp	r3, #24
 800c796:	d830      	bhi.n	800c7fa <__gethex+0x126>
 800c798:	f1a0 0210 	sub.w	r2, r0, #16
 800c79c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c7a0:	f7ff ff82 	bl	800c6a8 <__hexdig_fun>
 800c7a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c7a8:	fa5f fc8c 	uxtb.w	ip, ip
 800c7ac:	f1bc 0f18 	cmp.w	ip, #24
 800c7b0:	f04f 030a 	mov.w	r3, #10
 800c7b4:	d91e      	bls.n	800c7f4 <__gethex+0x120>
 800c7b6:	b104      	cbz	r4, 800c7ba <__gethex+0xe6>
 800c7b8:	4252      	negs	r2, r2
 800c7ba:	4417      	add	r7, r2
 800c7bc:	f8ca 1000 	str.w	r1, [sl]
 800c7c0:	b1ed      	cbz	r5, 800c7fe <__gethex+0x12a>
 800c7c2:	f1bb 0f00 	cmp.w	fp, #0
 800c7c6:	bf0c      	ite	eq
 800c7c8:	2506      	moveq	r5, #6
 800c7ca:	2500      	movne	r5, #0
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	b005      	add	sp, #20
 800c7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d4:	2500      	movs	r5, #0
 800c7d6:	462c      	mov	r4, r5
 800c7d8:	e7b0      	b.n	800c73c <__gethex+0x68>
 800c7da:	2c00      	cmp	r4, #0
 800c7dc:	d1c7      	bne.n	800c76e <__gethex+0x9a>
 800c7de:	4627      	mov	r7, r4
 800c7e0:	e7c7      	b.n	800c772 <__gethex+0x9e>
 800c7e2:	464e      	mov	r6, r9
 800c7e4:	462f      	mov	r7, r5
 800c7e6:	2501      	movs	r5, #1
 800c7e8:	e7c3      	b.n	800c772 <__gethex+0x9e>
 800c7ea:	2400      	movs	r4, #0
 800c7ec:	1cb1      	adds	r1, r6, #2
 800c7ee:	e7cc      	b.n	800c78a <__gethex+0xb6>
 800c7f0:	2401      	movs	r4, #1
 800c7f2:	e7fb      	b.n	800c7ec <__gethex+0x118>
 800c7f4:	fb03 0002 	mla	r0, r3, r2, r0
 800c7f8:	e7ce      	b.n	800c798 <__gethex+0xc4>
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	e7de      	b.n	800c7bc <__gethex+0xe8>
 800c7fe:	eba6 0309 	sub.w	r3, r6, r9
 800c802:	3b01      	subs	r3, #1
 800c804:	4629      	mov	r1, r5
 800c806:	2b07      	cmp	r3, #7
 800c808:	dc0a      	bgt.n	800c820 <__gethex+0x14c>
 800c80a:	9801      	ldr	r0, [sp, #4]
 800c80c:	f7fe f93c 	bl	800aa88 <_Balloc>
 800c810:	4604      	mov	r4, r0
 800c812:	b940      	cbnz	r0, 800c826 <__gethex+0x152>
 800c814:	4b5c      	ldr	r3, [pc, #368]	@ (800c988 <__gethex+0x2b4>)
 800c816:	4602      	mov	r2, r0
 800c818:	21e4      	movs	r1, #228	@ 0xe4
 800c81a:	485c      	ldr	r0, [pc, #368]	@ (800c98c <__gethex+0x2b8>)
 800c81c:	f7ff fec0 	bl	800c5a0 <__assert_func>
 800c820:	3101      	adds	r1, #1
 800c822:	105b      	asrs	r3, r3, #1
 800c824:	e7ef      	b.n	800c806 <__gethex+0x132>
 800c826:	f100 0a14 	add.w	sl, r0, #20
 800c82a:	2300      	movs	r3, #0
 800c82c:	4655      	mov	r5, sl
 800c82e:	469b      	mov	fp, r3
 800c830:	45b1      	cmp	r9, r6
 800c832:	d337      	bcc.n	800c8a4 <__gethex+0x1d0>
 800c834:	f845 bb04 	str.w	fp, [r5], #4
 800c838:	eba5 050a 	sub.w	r5, r5, sl
 800c83c:	10ad      	asrs	r5, r5, #2
 800c83e:	6125      	str	r5, [r4, #16]
 800c840:	4658      	mov	r0, fp
 800c842:	f7fe fa13 	bl	800ac6c <__hi0bits>
 800c846:	016d      	lsls	r5, r5, #5
 800c848:	f8d8 6000 	ldr.w	r6, [r8]
 800c84c:	1a2d      	subs	r5, r5, r0
 800c84e:	42b5      	cmp	r5, r6
 800c850:	dd54      	ble.n	800c8fc <__gethex+0x228>
 800c852:	1bad      	subs	r5, r5, r6
 800c854:	4629      	mov	r1, r5
 800c856:	4620      	mov	r0, r4
 800c858:	f7fe fda7 	bl	800b3aa <__any_on>
 800c85c:	4681      	mov	r9, r0
 800c85e:	b178      	cbz	r0, 800c880 <__gethex+0x1ac>
 800c860:	1e6b      	subs	r3, r5, #1
 800c862:	1159      	asrs	r1, r3, #5
 800c864:	f003 021f 	and.w	r2, r3, #31
 800c868:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c86c:	f04f 0901 	mov.w	r9, #1
 800c870:	fa09 f202 	lsl.w	r2, r9, r2
 800c874:	420a      	tst	r2, r1
 800c876:	d003      	beq.n	800c880 <__gethex+0x1ac>
 800c878:	454b      	cmp	r3, r9
 800c87a:	dc36      	bgt.n	800c8ea <__gethex+0x216>
 800c87c:	f04f 0902 	mov.w	r9, #2
 800c880:	4629      	mov	r1, r5
 800c882:	4620      	mov	r0, r4
 800c884:	f7ff febe 	bl	800c604 <rshift>
 800c888:	442f      	add	r7, r5
 800c88a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c88e:	42bb      	cmp	r3, r7
 800c890:	da42      	bge.n	800c918 <__gethex+0x244>
 800c892:	9801      	ldr	r0, [sp, #4]
 800c894:	4621      	mov	r1, r4
 800c896:	f7fe f937 	bl	800ab08 <_Bfree>
 800c89a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c89c:	2300      	movs	r3, #0
 800c89e:	6013      	str	r3, [r2, #0]
 800c8a0:	25a3      	movs	r5, #163	@ 0xa3
 800c8a2:	e793      	b.n	800c7cc <__gethex+0xf8>
 800c8a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c8a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c8aa:	d012      	beq.n	800c8d2 <__gethex+0x1fe>
 800c8ac:	2b20      	cmp	r3, #32
 800c8ae:	d104      	bne.n	800c8ba <__gethex+0x1e6>
 800c8b0:	f845 bb04 	str.w	fp, [r5], #4
 800c8b4:	f04f 0b00 	mov.w	fp, #0
 800c8b8:	465b      	mov	r3, fp
 800c8ba:	7830      	ldrb	r0, [r6, #0]
 800c8bc:	9303      	str	r3, [sp, #12]
 800c8be:	f7ff fef3 	bl	800c6a8 <__hexdig_fun>
 800c8c2:	9b03      	ldr	r3, [sp, #12]
 800c8c4:	f000 000f 	and.w	r0, r0, #15
 800c8c8:	4098      	lsls	r0, r3
 800c8ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	e7ae      	b.n	800c830 <__gethex+0x15c>
 800c8d2:	45b1      	cmp	r9, r6
 800c8d4:	d8ea      	bhi.n	800c8ac <__gethex+0x1d8>
 800c8d6:	492b      	ldr	r1, [pc, #172]	@ (800c984 <__gethex+0x2b0>)
 800c8d8:	9303      	str	r3, [sp, #12]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	4630      	mov	r0, r6
 800c8de:	f7ff fe27 	bl	800c530 <strncmp>
 800c8e2:	9b03      	ldr	r3, [sp, #12]
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d1e1      	bne.n	800c8ac <__gethex+0x1d8>
 800c8e8:	e7a2      	b.n	800c830 <__gethex+0x15c>
 800c8ea:	1ea9      	subs	r1, r5, #2
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7fe fd5c 	bl	800b3aa <__any_on>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d0c2      	beq.n	800c87c <__gethex+0x1a8>
 800c8f6:	f04f 0903 	mov.w	r9, #3
 800c8fa:	e7c1      	b.n	800c880 <__gethex+0x1ac>
 800c8fc:	da09      	bge.n	800c912 <__gethex+0x23e>
 800c8fe:	1b75      	subs	r5, r6, r5
 800c900:	4621      	mov	r1, r4
 800c902:	9801      	ldr	r0, [sp, #4]
 800c904:	462a      	mov	r2, r5
 800c906:	f7fe fb17 	bl	800af38 <__lshift>
 800c90a:	1b7f      	subs	r7, r7, r5
 800c90c:	4604      	mov	r4, r0
 800c90e:	f100 0a14 	add.w	sl, r0, #20
 800c912:	f04f 0900 	mov.w	r9, #0
 800c916:	e7b8      	b.n	800c88a <__gethex+0x1b6>
 800c918:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c91c:	42bd      	cmp	r5, r7
 800c91e:	dd6f      	ble.n	800ca00 <__gethex+0x32c>
 800c920:	1bed      	subs	r5, r5, r7
 800c922:	42ae      	cmp	r6, r5
 800c924:	dc34      	bgt.n	800c990 <__gethex+0x2bc>
 800c926:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d022      	beq.n	800c974 <__gethex+0x2a0>
 800c92e:	2b03      	cmp	r3, #3
 800c930:	d024      	beq.n	800c97c <__gethex+0x2a8>
 800c932:	2b01      	cmp	r3, #1
 800c934:	d115      	bne.n	800c962 <__gethex+0x28e>
 800c936:	42ae      	cmp	r6, r5
 800c938:	d113      	bne.n	800c962 <__gethex+0x28e>
 800c93a:	2e01      	cmp	r6, #1
 800c93c:	d10b      	bne.n	800c956 <__gethex+0x282>
 800c93e:	9a02      	ldr	r2, [sp, #8]
 800c940:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	2301      	movs	r3, #1
 800c948:	6123      	str	r3, [r4, #16]
 800c94a:	f8ca 3000 	str.w	r3, [sl]
 800c94e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c950:	2562      	movs	r5, #98	@ 0x62
 800c952:	601c      	str	r4, [r3, #0]
 800c954:	e73a      	b.n	800c7cc <__gethex+0xf8>
 800c956:	1e71      	subs	r1, r6, #1
 800c958:	4620      	mov	r0, r4
 800c95a:	f7fe fd26 	bl	800b3aa <__any_on>
 800c95e:	2800      	cmp	r0, #0
 800c960:	d1ed      	bne.n	800c93e <__gethex+0x26a>
 800c962:	9801      	ldr	r0, [sp, #4]
 800c964:	4621      	mov	r1, r4
 800c966:	f7fe f8cf 	bl	800ab08 <_Bfree>
 800c96a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c96c:	2300      	movs	r3, #0
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	2550      	movs	r5, #80	@ 0x50
 800c972:	e72b      	b.n	800c7cc <__gethex+0xf8>
 800c974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1f3      	bne.n	800c962 <__gethex+0x28e>
 800c97a:	e7e0      	b.n	800c93e <__gethex+0x26a>
 800c97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1dd      	bne.n	800c93e <__gethex+0x26a>
 800c982:	e7ee      	b.n	800c962 <__gethex+0x28e>
 800c984:	0800d510 	.word	0x0800d510
 800c988:	0800d3a5 	.word	0x0800d3a5
 800c98c:	0800d6be 	.word	0x0800d6be
 800c990:	1e6f      	subs	r7, r5, #1
 800c992:	f1b9 0f00 	cmp.w	r9, #0
 800c996:	d130      	bne.n	800c9fa <__gethex+0x326>
 800c998:	b127      	cbz	r7, 800c9a4 <__gethex+0x2d0>
 800c99a:	4639      	mov	r1, r7
 800c99c:	4620      	mov	r0, r4
 800c99e:	f7fe fd04 	bl	800b3aa <__any_on>
 800c9a2:	4681      	mov	r9, r0
 800c9a4:	117a      	asrs	r2, r7, #5
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c9ac:	f007 071f 	and.w	r7, r7, #31
 800c9b0:	40bb      	lsls	r3, r7
 800c9b2:	4213      	tst	r3, r2
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	bf18      	it	ne
 800c9ba:	f049 0902 	orrne.w	r9, r9, #2
 800c9be:	f7ff fe21 	bl	800c604 <rshift>
 800c9c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c9c6:	1b76      	subs	r6, r6, r5
 800c9c8:	2502      	movs	r5, #2
 800c9ca:	f1b9 0f00 	cmp.w	r9, #0
 800c9ce:	d047      	beq.n	800ca60 <__gethex+0x38c>
 800c9d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d015      	beq.n	800ca04 <__gethex+0x330>
 800c9d8:	2b03      	cmp	r3, #3
 800c9da:	d017      	beq.n	800ca0c <__gethex+0x338>
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d109      	bne.n	800c9f4 <__gethex+0x320>
 800c9e0:	f019 0f02 	tst.w	r9, #2
 800c9e4:	d006      	beq.n	800c9f4 <__gethex+0x320>
 800c9e6:	f8da 3000 	ldr.w	r3, [sl]
 800c9ea:	ea49 0903 	orr.w	r9, r9, r3
 800c9ee:	f019 0f01 	tst.w	r9, #1
 800c9f2:	d10e      	bne.n	800ca12 <__gethex+0x33e>
 800c9f4:	f045 0510 	orr.w	r5, r5, #16
 800c9f8:	e032      	b.n	800ca60 <__gethex+0x38c>
 800c9fa:	f04f 0901 	mov.w	r9, #1
 800c9fe:	e7d1      	b.n	800c9a4 <__gethex+0x2d0>
 800ca00:	2501      	movs	r5, #1
 800ca02:	e7e2      	b.n	800c9ca <__gethex+0x2f6>
 800ca04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca06:	f1c3 0301 	rsb	r3, r3, #1
 800ca0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d0f0      	beq.n	800c9f4 <__gethex+0x320>
 800ca12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca16:	f104 0314 	add.w	r3, r4, #20
 800ca1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca22:	f04f 0c00 	mov.w	ip, #0
 800ca26:	4618      	mov	r0, r3
 800ca28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca30:	d01b      	beq.n	800ca6a <__gethex+0x396>
 800ca32:	3201      	adds	r2, #1
 800ca34:	6002      	str	r2, [r0, #0]
 800ca36:	2d02      	cmp	r5, #2
 800ca38:	f104 0314 	add.w	r3, r4, #20
 800ca3c:	d13c      	bne.n	800cab8 <__gethex+0x3e4>
 800ca3e:	f8d8 2000 	ldr.w	r2, [r8]
 800ca42:	3a01      	subs	r2, #1
 800ca44:	42b2      	cmp	r2, r6
 800ca46:	d109      	bne.n	800ca5c <__gethex+0x388>
 800ca48:	1171      	asrs	r1, r6, #5
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca50:	f006 061f 	and.w	r6, r6, #31
 800ca54:	fa02 f606 	lsl.w	r6, r2, r6
 800ca58:	421e      	tst	r6, r3
 800ca5a:	d13a      	bne.n	800cad2 <__gethex+0x3fe>
 800ca5c:	f045 0520 	orr.w	r5, r5, #32
 800ca60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca62:	601c      	str	r4, [r3, #0]
 800ca64:	9b02      	ldr	r3, [sp, #8]
 800ca66:	601f      	str	r7, [r3, #0]
 800ca68:	e6b0      	b.n	800c7cc <__gethex+0xf8>
 800ca6a:	4299      	cmp	r1, r3
 800ca6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca70:	d8d9      	bhi.n	800ca26 <__gethex+0x352>
 800ca72:	68a3      	ldr	r3, [r4, #8]
 800ca74:	459b      	cmp	fp, r3
 800ca76:	db17      	blt.n	800caa8 <__gethex+0x3d4>
 800ca78:	6861      	ldr	r1, [r4, #4]
 800ca7a:	9801      	ldr	r0, [sp, #4]
 800ca7c:	3101      	adds	r1, #1
 800ca7e:	f7fe f803 	bl	800aa88 <_Balloc>
 800ca82:	4681      	mov	r9, r0
 800ca84:	b918      	cbnz	r0, 800ca8e <__gethex+0x3ba>
 800ca86:	4b1a      	ldr	r3, [pc, #104]	@ (800caf0 <__gethex+0x41c>)
 800ca88:	4602      	mov	r2, r0
 800ca8a:	2184      	movs	r1, #132	@ 0x84
 800ca8c:	e6c5      	b.n	800c81a <__gethex+0x146>
 800ca8e:	6922      	ldr	r2, [r4, #16]
 800ca90:	3202      	adds	r2, #2
 800ca92:	f104 010c 	add.w	r1, r4, #12
 800ca96:	0092      	lsls	r2, r2, #2
 800ca98:	300c      	adds	r0, #12
 800ca9a:	f7ff fd6b 	bl	800c574 <memcpy>
 800ca9e:	4621      	mov	r1, r4
 800caa0:	9801      	ldr	r0, [sp, #4]
 800caa2:	f7fe f831 	bl	800ab08 <_Bfree>
 800caa6:	464c      	mov	r4, r9
 800caa8:	6923      	ldr	r3, [r4, #16]
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cab0:	6122      	str	r2, [r4, #16]
 800cab2:	2201      	movs	r2, #1
 800cab4:	615a      	str	r2, [r3, #20]
 800cab6:	e7be      	b.n	800ca36 <__gethex+0x362>
 800cab8:	6922      	ldr	r2, [r4, #16]
 800caba:	455a      	cmp	r2, fp
 800cabc:	dd0b      	ble.n	800cad6 <__gethex+0x402>
 800cabe:	2101      	movs	r1, #1
 800cac0:	4620      	mov	r0, r4
 800cac2:	f7ff fd9f 	bl	800c604 <rshift>
 800cac6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800caca:	3701      	adds	r7, #1
 800cacc:	42bb      	cmp	r3, r7
 800cace:	f6ff aee0 	blt.w	800c892 <__gethex+0x1be>
 800cad2:	2501      	movs	r5, #1
 800cad4:	e7c2      	b.n	800ca5c <__gethex+0x388>
 800cad6:	f016 061f 	ands.w	r6, r6, #31
 800cada:	d0fa      	beq.n	800cad2 <__gethex+0x3fe>
 800cadc:	4453      	add	r3, sl
 800cade:	f1c6 0620 	rsb	r6, r6, #32
 800cae2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cae6:	f7fe f8c1 	bl	800ac6c <__hi0bits>
 800caea:	42b0      	cmp	r0, r6
 800caec:	dbe7      	blt.n	800cabe <__gethex+0x3ea>
 800caee:	e7f0      	b.n	800cad2 <__gethex+0x3fe>
 800caf0:	0800d3a5 	.word	0x0800d3a5

0800caf4 <L_shift>:
 800caf4:	f1c2 0208 	rsb	r2, r2, #8
 800caf8:	0092      	lsls	r2, r2, #2
 800cafa:	b570      	push	{r4, r5, r6, lr}
 800cafc:	f1c2 0620 	rsb	r6, r2, #32
 800cb00:	6843      	ldr	r3, [r0, #4]
 800cb02:	6804      	ldr	r4, [r0, #0]
 800cb04:	fa03 f506 	lsl.w	r5, r3, r6
 800cb08:	432c      	orrs	r4, r5
 800cb0a:	40d3      	lsrs	r3, r2
 800cb0c:	6004      	str	r4, [r0, #0]
 800cb0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb12:	4288      	cmp	r0, r1
 800cb14:	d3f4      	bcc.n	800cb00 <L_shift+0xc>
 800cb16:	bd70      	pop	{r4, r5, r6, pc}

0800cb18 <__match>:
 800cb18:	b530      	push	{r4, r5, lr}
 800cb1a:	6803      	ldr	r3, [r0, #0]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb22:	b914      	cbnz	r4, 800cb2a <__match+0x12>
 800cb24:	6003      	str	r3, [r0, #0]
 800cb26:	2001      	movs	r0, #1
 800cb28:	bd30      	pop	{r4, r5, pc}
 800cb2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cb32:	2d19      	cmp	r5, #25
 800cb34:	bf98      	it	ls
 800cb36:	3220      	addls	r2, #32
 800cb38:	42a2      	cmp	r2, r4
 800cb3a:	d0f0      	beq.n	800cb1e <__match+0x6>
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	e7f3      	b.n	800cb28 <__match+0x10>

0800cb40 <__hexnan>:
 800cb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb44:	680b      	ldr	r3, [r1, #0]
 800cb46:	6801      	ldr	r1, [r0, #0]
 800cb48:	115e      	asrs	r6, r3, #5
 800cb4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb4e:	f013 031f 	ands.w	r3, r3, #31
 800cb52:	b087      	sub	sp, #28
 800cb54:	bf18      	it	ne
 800cb56:	3604      	addne	r6, #4
 800cb58:	2500      	movs	r5, #0
 800cb5a:	1f37      	subs	r7, r6, #4
 800cb5c:	4682      	mov	sl, r0
 800cb5e:	4690      	mov	r8, r2
 800cb60:	9301      	str	r3, [sp, #4]
 800cb62:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb66:	46b9      	mov	r9, r7
 800cb68:	463c      	mov	r4, r7
 800cb6a:	9502      	str	r5, [sp, #8]
 800cb6c:	46ab      	mov	fp, r5
 800cb6e:	784a      	ldrb	r2, [r1, #1]
 800cb70:	1c4b      	adds	r3, r1, #1
 800cb72:	9303      	str	r3, [sp, #12]
 800cb74:	b342      	cbz	r2, 800cbc8 <__hexnan+0x88>
 800cb76:	4610      	mov	r0, r2
 800cb78:	9105      	str	r1, [sp, #20]
 800cb7a:	9204      	str	r2, [sp, #16]
 800cb7c:	f7ff fd94 	bl	800c6a8 <__hexdig_fun>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d151      	bne.n	800cc28 <__hexnan+0xe8>
 800cb84:	9a04      	ldr	r2, [sp, #16]
 800cb86:	9905      	ldr	r1, [sp, #20]
 800cb88:	2a20      	cmp	r2, #32
 800cb8a:	d818      	bhi.n	800cbbe <__hexnan+0x7e>
 800cb8c:	9b02      	ldr	r3, [sp, #8]
 800cb8e:	459b      	cmp	fp, r3
 800cb90:	dd13      	ble.n	800cbba <__hexnan+0x7a>
 800cb92:	454c      	cmp	r4, r9
 800cb94:	d206      	bcs.n	800cba4 <__hexnan+0x64>
 800cb96:	2d07      	cmp	r5, #7
 800cb98:	dc04      	bgt.n	800cba4 <__hexnan+0x64>
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	4649      	mov	r1, r9
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7ff ffa8 	bl	800caf4 <L_shift>
 800cba4:	4544      	cmp	r4, r8
 800cba6:	d952      	bls.n	800cc4e <__hexnan+0x10e>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f1a4 0904 	sub.w	r9, r4, #4
 800cbae:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbb2:	f8cd b008 	str.w	fp, [sp, #8]
 800cbb6:	464c      	mov	r4, r9
 800cbb8:	461d      	mov	r5, r3
 800cbba:	9903      	ldr	r1, [sp, #12]
 800cbbc:	e7d7      	b.n	800cb6e <__hexnan+0x2e>
 800cbbe:	2a29      	cmp	r2, #41	@ 0x29
 800cbc0:	d157      	bne.n	800cc72 <__hexnan+0x132>
 800cbc2:	3102      	adds	r1, #2
 800cbc4:	f8ca 1000 	str.w	r1, [sl]
 800cbc8:	f1bb 0f00 	cmp.w	fp, #0
 800cbcc:	d051      	beq.n	800cc72 <__hexnan+0x132>
 800cbce:	454c      	cmp	r4, r9
 800cbd0:	d206      	bcs.n	800cbe0 <__hexnan+0xa0>
 800cbd2:	2d07      	cmp	r5, #7
 800cbd4:	dc04      	bgt.n	800cbe0 <__hexnan+0xa0>
 800cbd6:	462a      	mov	r2, r5
 800cbd8:	4649      	mov	r1, r9
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f7ff ff8a 	bl	800caf4 <L_shift>
 800cbe0:	4544      	cmp	r4, r8
 800cbe2:	d936      	bls.n	800cc52 <__hexnan+0x112>
 800cbe4:	f1a8 0204 	sub.w	r2, r8, #4
 800cbe8:	4623      	mov	r3, r4
 800cbea:	f853 1b04 	ldr.w	r1, [r3], #4
 800cbee:	f842 1f04 	str.w	r1, [r2, #4]!
 800cbf2:	429f      	cmp	r7, r3
 800cbf4:	d2f9      	bcs.n	800cbea <__hexnan+0xaa>
 800cbf6:	1b3b      	subs	r3, r7, r4
 800cbf8:	f023 0303 	bic.w	r3, r3, #3
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	3401      	adds	r4, #1
 800cc00:	3e03      	subs	r6, #3
 800cc02:	42b4      	cmp	r4, r6
 800cc04:	bf88      	it	hi
 800cc06:	2304      	movhi	r3, #4
 800cc08:	4443      	add	r3, r8
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f843 2b04 	str.w	r2, [r3], #4
 800cc10:	429f      	cmp	r7, r3
 800cc12:	d2fb      	bcs.n	800cc0c <__hexnan+0xcc>
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	b91b      	cbnz	r3, 800cc20 <__hexnan+0xe0>
 800cc18:	4547      	cmp	r7, r8
 800cc1a:	d128      	bne.n	800cc6e <__hexnan+0x12e>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	603b      	str	r3, [r7, #0]
 800cc20:	2005      	movs	r0, #5
 800cc22:	b007      	add	sp, #28
 800cc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc28:	3501      	adds	r5, #1
 800cc2a:	2d08      	cmp	r5, #8
 800cc2c:	f10b 0b01 	add.w	fp, fp, #1
 800cc30:	dd06      	ble.n	800cc40 <__hexnan+0x100>
 800cc32:	4544      	cmp	r4, r8
 800cc34:	d9c1      	bls.n	800cbba <__hexnan+0x7a>
 800cc36:	2300      	movs	r3, #0
 800cc38:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc3c:	2501      	movs	r5, #1
 800cc3e:	3c04      	subs	r4, #4
 800cc40:	6822      	ldr	r2, [r4, #0]
 800cc42:	f000 000f 	and.w	r0, r0, #15
 800cc46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc4a:	6020      	str	r0, [r4, #0]
 800cc4c:	e7b5      	b.n	800cbba <__hexnan+0x7a>
 800cc4e:	2508      	movs	r5, #8
 800cc50:	e7b3      	b.n	800cbba <__hexnan+0x7a>
 800cc52:	9b01      	ldr	r3, [sp, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d0dd      	beq.n	800cc14 <__hexnan+0xd4>
 800cc58:	f1c3 0320 	rsb	r3, r3, #32
 800cc5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc60:	40da      	lsrs	r2, r3
 800cc62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc66:	4013      	ands	r3, r2
 800cc68:	f846 3c04 	str.w	r3, [r6, #-4]
 800cc6c:	e7d2      	b.n	800cc14 <__hexnan+0xd4>
 800cc6e:	3f04      	subs	r7, #4
 800cc70:	e7d0      	b.n	800cc14 <__hexnan+0xd4>
 800cc72:	2004      	movs	r0, #4
 800cc74:	e7d5      	b.n	800cc22 <__hexnan+0xe2>

0800cc76 <__ascii_mbtowc>:
 800cc76:	b082      	sub	sp, #8
 800cc78:	b901      	cbnz	r1, 800cc7c <__ascii_mbtowc+0x6>
 800cc7a:	a901      	add	r1, sp, #4
 800cc7c:	b142      	cbz	r2, 800cc90 <__ascii_mbtowc+0x1a>
 800cc7e:	b14b      	cbz	r3, 800cc94 <__ascii_mbtowc+0x1e>
 800cc80:	7813      	ldrb	r3, [r2, #0]
 800cc82:	600b      	str	r3, [r1, #0]
 800cc84:	7812      	ldrb	r2, [r2, #0]
 800cc86:	1e10      	subs	r0, r2, #0
 800cc88:	bf18      	it	ne
 800cc8a:	2001      	movne	r0, #1
 800cc8c:	b002      	add	sp, #8
 800cc8e:	4770      	bx	lr
 800cc90:	4610      	mov	r0, r2
 800cc92:	e7fb      	b.n	800cc8c <__ascii_mbtowc+0x16>
 800cc94:	f06f 0001 	mvn.w	r0, #1
 800cc98:	e7f8      	b.n	800cc8c <__ascii_mbtowc+0x16>

0800cc9a <_realloc_r>:
 800cc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9e:	4680      	mov	r8, r0
 800cca0:	4615      	mov	r5, r2
 800cca2:	460c      	mov	r4, r1
 800cca4:	b921      	cbnz	r1, 800ccb0 <_realloc_r+0x16>
 800cca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccaa:	4611      	mov	r1, r2
 800ccac:	f7fd be60 	b.w	800a970 <_malloc_r>
 800ccb0:	b92a      	cbnz	r2, 800ccbe <_realloc_r+0x24>
 800ccb2:	f7fd fde9 	bl	800a888 <_free_r>
 800ccb6:	2400      	movs	r4, #0
 800ccb8:	4620      	mov	r0, r4
 800ccba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbe:	f000 f840 	bl	800cd42 <_malloc_usable_size_r>
 800ccc2:	4285      	cmp	r5, r0
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	d802      	bhi.n	800ccce <_realloc_r+0x34>
 800ccc8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cccc:	d8f4      	bhi.n	800ccb8 <_realloc_r+0x1e>
 800ccce:	4629      	mov	r1, r5
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	f7fd fe4d 	bl	800a970 <_malloc_r>
 800ccd6:	4607      	mov	r7, r0
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d0ec      	beq.n	800ccb6 <_realloc_r+0x1c>
 800ccdc:	42b5      	cmp	r5, r6
 800ccde:	462a      	mov	r2, r5
 800cce0:	4621      	mov	r1, r4
 800cce2:	bf28      	it	cs
 800cce4:	4632      	movcs	r2, r6
 800cce6:	f7ff fc45 	bl	800c574 <memcpy>
 800ccea:	4621      	mov	r1, r4
 800ccec:	4640      	mov	r0, r8
 800ccee:	f7fd fdcb 	bl	800a888 <_free_r>
 800ccf2:	463c      	mov	r4, r7
 800ccf4:	e7e0      	b.n	800ccb8 <_realloc_r+0x1e>

0800ccf6 <__ascii_wctomb>:
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	4608      	mov	r0, r1
 800ccfa:	b141      	cbz	r1, 800cd0e <__ascii_wctomb+0x18>
 800ccfc:	2aff      	cmp	r2, #255	@ 0xff
 800ccfe:	d904      	bls.n	800cd0a <__ascii_wctomb+0x14>
 800cd00:	228a      	movs	r2, #138	@ 0x8a
 800cd02:	601a      	str	r2, [r3, #0]
 800cd04:	f04f 30ff 	mov.w	r0, #4294967295
 800cd08:	4770      	bx	lr
 800cd0a:	700a      	strb	r2, [r1, #0]
 800cd0c:	2001      	movs	r0, #1
 800cd0e:	4770      	bx	lr

0800cd10 <fiprintf>:
 800cd10:	b40e      	push	{r1, r2, r3}
 800cd12:	b503      	push	{r0, r1, lr}
 800cd14:	4601      	mov	r1, r0
 800cd16:	ab03      	add	r3, sp, #12
 800cd18:	4805      	ldr	r0, [pc, #20]	@ (800cd30 <fiprintf+0x20>)
 800cd1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd1e:	6800      	ldr	r0, [r0, #0]
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	f000 f83f 	bl	800cda4 <_vfiprintf_r>
 800cd26:	b002      	add	sp, #8
 800cd28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd2c:	b003      	add	sp, #12
 800cd2e:	4770      	bx	lr
 800cd30:	2000001c 	.word	0x2000001c

0800cd34 <abort>:
 800cd34:	b508      	push	{r3, lr}
 800cd36:	2006      	movs	r0, #6
 800cd38:	f000 fa08 	bl	800d14c <raise>
 800cd3c:	2001      	movs	r0, #1
 800cd3e:	f7f5 fbaf 	bl	80024a0 <_exit>

0800cd42 <_malloc_usable_size_r>:
 800cd42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd46:	1f18      	subs	r0, r3, #4
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	bfbc      	itt	lt
 800cd4c:	580b      	ldrlt	r3, [r1, r0]
 800cd4e:	18c0      	addlt	r0, r0, r3
 800cd50:	4770      	bx	lr

0800cd52 <__sfputc_r>:
 800cd52:	6893      	ldr	r3, [r2, #8]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	b410      	push	{r4}
 800cd5a:	6093      	str	r3, [r2, #8]
 800cd5c:	da08      	bge.n	800cd70 <__sfputc_r+0x1e>
 800cd5e:	6994      	ldr	r4, [r2, #24]
 800cd60:	42a3      	cmp	r3, r4
 800cd62:	db01      	blt.n	800cd68 <__sfputc_r+0x16>
 800cd64:	290a      	cmp	r1, #10
 800cd66:	d103      	bne.n	800cd70 <__sfputc_r+0x1e>
 800cd68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd6c:	f000 b932 	b.w	800cfd4 <__swbuf_r>
 800cd70:	6813      	ldr	r3, [r2, #0]
 800cd72:	1c58      	adds	r0, r3, #1
 800cd74:	6010      	str	r0, [r2, #0]
 800cd76:	7019      	strb	r1, [r3, #0]
 800cd78:	4608      	mov	r0, r1
 800cd7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <__sfputs_r>:
 800cd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd82:	4606      	mov	r6, r0
 800cd84:	460f      	mov	r7, r1
 800cd86:	4614      	mov	r4, r2
 800cd88:	18d5      	adds	r5, r2, r3
 800cd8a:	42ac      	cmp	r4, r5
 800cd8c:	d101      	bne.n	800cd92 <__sfputs_r+0x12>
 800cd8e:	2000      	movs	r0, #0
 800cd90:	e007      	b.n	800cda2 <__sfputs_r+0x22>
 800cd92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd96:	463a      	mov	r2, r7
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7ff ffda 	bl	800cd52 <__sfputc_r>
 800cd9e:	1c43      	adds	r3, r0, #1
 800cda0:	d1f3      	bne.n	800cd8a <__sfputs_r+0xa>
 800cda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cda4 <_vfiprintf_r>:
 800cda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda8:	460d      	mov	r5, r1
 800cdaa:	b09d      	sub	sp, #116	@ 0x74
 800cdac:	4614      	mov	r4, r2
 800cdae:	4698      	mov	r8, r3
 800cdb0:	4606      	mov	r6, r0
 800cdb2:	b118      	cbz	r0, 800cdbc <_vfiprintf_r+0x18>
 800cdb4:	6a03      	ldr	r3, [r0, #32]
 800cdb6:	b90b      	cbnz	r3, 800cdbc <_vfiprintf_r+0x18>
 800cdb8:	f7fc fdfa 	bl	80099b0 <__sinit>
 800cdbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdbe:	07d9      	lsls	r1, r3, #31
 800cdc0:	d405      	bmi.n	800cdce <_vfiprintf_r+0x2a>
 800cdc2:	89ab      	ldrh	r3, [r5, #12]
 800cdc4:	059a      	lsls	r2, r3, #22
 800cdc6:	d402      	bmi.n	800cdce <_vfiprintf_r+0x2a>
 800cdc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdca:	f7fc ff08 	bl	8009bde <__retarget_lock_acquire_recursive>
 800cdce:	89ab      	ldrh	r3, [r5, #12]
 800cdd0:	071b      	lsls	r3, r3, #28
 800cdd2:	d501      	bpl.n	800cdd8 <_vfiprintf_r+0x34>
 800cdd4:	692b      	ldr	r3, [r5, #16]
 800cdd6:	b99b      	cbnz	r3, 800ce00 <_vfiprintf_r+0x5c>
 800cdd8:	4629      	mov	r1, r5
 800cdda:	4630      	mov	r0, r6
 800cddc:	f000 f938 	bl	800d050 <__swsetup_r>
 800cde0:	b170      	cbz	r0, 800ce00 <_vfiprintf_r+0x5c>
 800cde2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cde4:	07dc      	lsls	r4, r3, #31
 800cde6:	d504      	bpl.n	800cdf2 <_vfiprintf_r+0x4e>
 800cde8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdec:	b01d      	add	sp, #116	@ 0x74
 800cdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf2:	89ab      	ldrh	r3, [r5, #12]
 800cdf4:	0598      	lsls	r0, r3, #22
 800cdf6:	d4f7      	bmi.n	800cde8 <_vfiprintf_r+0x44>
 800cdf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdfa:	f7fc fef1 	bl	8009be0 <__retarget_lock_release_recursive>
 800cdfe:	e7f3      	b.n	800cde8 <_vfiprintf_r+0x44>
 800ce00:	2300      	movs	r3, #0
 800ce02:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce04:	2320      	movs	r3, #32
 800ce06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce0e:	2330      	movs	r3, #48	@ 0x30
 800ce10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cfc0 <_vfiprintf_r+0x21c>
 800ce14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce18:	f04f 0901 	mov.w	r9, #1
 800ce1c:	4623      	mov	r3, r4
 800ce1e:	469a      	mov	sl, r3
 800ce20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce24:	b10a      	cbz	r2, 800ce2a <_vfiprintf_r+0x86>
 800ce26:	2a25      	cmp	r2, #37	@ 0x25
 800ce28:	d1f9      	bne.n	800ce1e <_vfiprintf_r+0x7a>
 800ce2a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce2e:	d00b      	beq.n	800ce48 <_vfiprintf_r+0xa4>
 800ce30:	465b      	mov	r3, fp
 800ce32:	4622      	mov	r2, r4
 800ce34:	4629      	mov	r1, r5
 800ce36:	4630      	mov	r0, r6
 800ce38:	f7ff ffa2 	bl	800cd80 <__sfputs_r>
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	f000 80a7 	beq.w	800cf90 <_vfiprintf_r+0x1ec>
 800ce42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce44:	445a      	add	r2, fp
 800ce46:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce48:	f89a 3000 	ldrb.w	r3, [sl]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f000 809f 	beq.w	800cf90 <_vfiprintf_r+0x1ec>
 800ce52:	2300      	movs	r3, #0
 800ce54:	f04f 32ff 	mov.w	r2, #4294967295
 800ce58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce5c:	f10a 0a01 	add.w	sl, sl, #1
 800ce60:	9304      	str	r3, [sp, #16]
 800ce62:	9307      	str	r3, [sp, #28]
 800ce64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce68:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce6a:	4654      	mov	r4, sl
 800ce6c:	2205      	movs	r2, #5
 800ce6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce72:	4853      	ldr	r0, [pc, #332]	@ (800cfc0 <_vfiprintf_r+0x21c>)
 800ce74:	f7f3 f9ac 	bl	80001d0 <memchr>
 800ce78:	9a04      	ldr	r2, [sp, #16]
 800ce7a:	b9d8      	cbnz	r0, 800ceb4 <_vfiprintf_r+0x110>
 800ce7c:	06d1      	lsls	r1, r2, #27
 800ce7e:	bf44      	itt	mi
 800ce80:	2320      	movmi	r3, #32
 800ce82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce86:	0713      	lsls	r3, r2, #28
 800ce88:	bf44      	itt	mi
 800ce8a:	232b      	movmi	r3, #43	@ 0x2b
 800ce8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce90:	f89a 3000 	ldrb.w	r3, [sl]
 800ce94:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce96:	d015      	beq.n	800cec4 <_vfiprintf_r+0x120>
 800ce98:	9a07      	ldr	r2, [sp, #28]
 800ce9a:	4654      	mov	r4, sl
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	f04f 0c0a 	mov.w	ip, #10
 800cea2:	4621      	mov	r1, r4
 800cea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cea8:	3b30      	subs	r3, #48	@ 0x30
 800ceaa:	2b09      	cmp	r3, #9
 800ceac:	d94b      	bls.n	800cf46 <_vfiprintf_r+0x1a2>
 800ceae:	b1b0      	cbz	r0, 800cede <_vfiprintf_r+0x13a>
 800ceb0:	9207      	str	r2, [sp, #28]
 800ceb2:	e014      	b.n	800cede <_vfiprintf_r+0x13a>
 800ceb4:	eba0 0308 	sub.w	r3, r0, r8
 800ceb8:	fa09 f303 	lsl.w	r3, r9, r3
 800cebc:	4313      	orrs	r3, r2
 800cebe:	9304      	str	r3, [sp, #16]
 800cec0:	46a2      	mov	sl, r4
 800cec2:	e7d2      	b.n	800ce6a <_vfiprintf_r+0xc6>
 800cec4:	9b03      	ldr	r3, [sp, #12]
 800cec6:	1d19      	adds	r1, r3, #4
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	9103      	str	r1, [sp, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	bfbb      	ittet	lt
 800ced0:	425b      	neglt	r3, r3
 800ced2:	f042 0202 	orrlt.w	r2, r2, #2
 800ced6:	9307      	strge	r3, [sp, #28]
 800ced8:	9307      	strlt	r3, [sp, #28]
 800ceda:	bfb8      	it	lt
 800cedc:	9204      	strlt	r2, [sp, #16]
 800cede:	7823      	ldrb	r3, [r4, #0]
 800cee0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cee2:	d10a      	bne.n	800cefa <_vfiprintf_r+0x156>
 800cee4:	7863      	ldrb	r3, [r4, #1]
 800cee6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cee8:	d132      	bne.n	800cf50 <_vfiprintf_r+0x1ac>
 800ceea:	9b03      	ldr	r3, [sp, #12]
 800ceec:	1d1a      	adds	r2, r3, #4
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	9203      	str	r2, [sp, #12]
 800cef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cef6:	3402      	adds	r4, #2
 800cef8:	9305      	str	r3, [sp, #20]
 800cefa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cfd0 <_vfiprintf_r+0x22c>
 800cefe:	7821      	ldrb	r1, [r4, #0]
 800cf00:	2203      	movs	r2, #3
 800cf02:	4650      	mov	r0, sl
 800cf04:	f7f3 f964 	bl	80001d0 <memchr>
 800cf08:	b138      	cbz	r0, 800cf1a <_vfiprintf_r+0x176>
 800cf0a:	9b04      	ldr	r3, [sp, #16]
 800cf0c:	eba0 000a 	sub.w	r0, r0, sl
 800cf10:	2240      	movs	r2, #64	@ 0x40
 800cf12:	4082      	lsls	r2, r0
 800cf14:	4313      	orrs	r3, r2
 800cf16:	3401      	adds	r4, #1
 800cf18:	9304      	str	r3, [sp, #16]
 800cf1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf1e:	4829      	ldr	r0, [pc, #164]	@ (800cfc4 <_vfiprintf_r+0x220>)
 800cf20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf24:	2206      	movs	r2, #6
 800cf26:	f7f3 f953 	bl	80001d0 <memchr>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	d03f      	beq.n	800cfae <_vfiprintf_r+0x20a>
 800cf2e:	4b26      	ldr	r3, [pc, #152]	@ (800cfc8 <_vfiprintf_r+0x224>)
 800cf30:	bb1b      	cbnz	r3, 800cf7a <_vfiprintf_r+0x1d6>
 800cf32:	9b03      	ldr	r3, [sp, #12]
 800cf34:	3307      	adds	r3, #7
 800cf36:	f023 0307 	bic.w	r3, r3, #7
 800cf3a:	3308      	adds	r3, #8
 800cf3c:	9303      	str	r3, [sp, #12]
 800cf3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf40:	443b      	add	r3, r7
 800cf42:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf44:	e76a      	b.n	800ce1c <_vfiprintf_r+0x78>
 800cf46:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	2001      	movs	r0, #1
 800cf4e:	e7a8      	b.n	800cea2 <_vfiprintf_r+0xfe>
 800cf50:	2300      	movs	r3, #0
 800cf52:	3401      	adds	r4, #1
 800cf54:	9305      	str	r3, [sp, #20]
 800cf56:	4619      	mov	r1, r3
 800cf58:	f04f 0c0a 	mov.w	ip, #10
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf62:	3a30      	subs	r2, #48	@ 0x30
 800cf64:	2a09      	cmp	r2, #9
 800cf66:	d903      	bls.n	800cf70 <_vfiprintf_r+0x1cc>
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d0c6      	beq.n	800cefa <_vfiprintf_r+0x156>
 800cf6c:	9105      	str	r1, [sp, #20]
 800cf6e:	e7c4      	b.n	800cefa <_vfiprintf_r+0x156>
 800cf70:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf74:	4604      	mov	r4, r0
 800cf76:	2301      	movs	r3, #1
 800cf78:	e7f0      	b.n	800cf5c <_vfiprintf_r+0x1b8>
 800cf7a:	ab03      	add	r3, sp, #12
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	462a      	mov	r2, r5
 800cf80:	4b12      	ldr	r3, [pc, #72]	@ (800cfcc <_vfiprintf_r+0x228>)
 800cf82:	a904      	add	r1, sp, #16
 800cf84:	4630      	mov	r0, r6
 800cf86:	f7fb febb 	bl	8008d00 <_printf_float>
 800cf8a:	4607      	mov	r7, r0
 800cf8c:	1c78      	adds	r0, r7, #1
 800cf8e:	d1d6      	bne.n	800cf3e <_vfiprintf_r+0x19a>
 800cf90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf92:	07d9      	lsls	r1, r3, #31
 800cf94:	d405      	bmi.n	800cfa2 <_vfiprintf_r+0x1fe>
 800cf96:	89ab      	ldrh	r3, [r5, #12]
 800cf98:	059a      	lsls	r2, r3, #22
 800cf9a:	d402      	bmi.n	800cfa2 <_vfiprintf_r+0x1fe>
 800cf9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf9e:	f7fc fe1f 	bl	8009be0 <__retarget_lock_release_recursive>
 800cfa2:	89ab      	ldrh	r3, [r5, #12]
 800cfa4:	065b      	lsls	r3, r3, #25
 800cfa6:	f53f af1f 	bmi.w	800cde8 <_vfiprintf_r+0x44>
 800cfaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfac:	e71e      	b.n	800cdec <_vfiprintf_r+0x48>
 800cfae:	ab03      	add	r3, sp, #12
 800cfb0:	9300      	str	r3, [sp, #0]
 800cfb2:	462a      	mov	r2, r5
 800cfb4:	4b05      	ldr	r3, [pc, #20]	@ (800cfcc <_vfiprintf_r+0x228>)
 800cfb6:	a904      	add	r1, sp, #16
 800cfb8:	4630      	mov	r0, r6
 800cfba:	f7fc f939 	bl	8009230 <_printf_i>
 800cfbe:	e7e4      	b.n	800cf8a <_vfiprintf_r+0x1e6>
 800cfc0:	0800d669 	.word	0x0800d669
 800cfc4:	0800d673 	.word	0x0800d673
 800cfc8:	08008d01 	.word	0x08008d01
 800cfcc:	0800cd81 	.word	0x0800cd81
 800cfd0:	0800d66f 	.word	0x0800d66f

0800cfd4 <__swbuf_r>:
 800cfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd6:	460e      	mov	r6, r1
 800cfd8:	4614      	mov	r4, r2
 800cfda:	4605      	mov	r5, r0
 800cfdc:	b118      	cbz	r0, 800cfe6 <__swbuf_r+0x12>
 800cfde:	6a03      	ldr	r3, [r0, #32]
 800cfe0:	b90b      	cbnz	r3, 800cfe6 <__swbuf_r+0x12>
 800cfe2:	f7fc fce5 	bl	80099b0 <__sinit>
 800cfe6:	69a3      	ldr	r3, [r4, #24]
 800cfe8:	60a3      	str	r3, [r4, #8]
 800cfea:	89a3      	ldrh	r3, [r4, #12]
 800cfec:	071a      	lsls	r2, r3, #28
 800cfee:	d501      	bpl.n	800cff4 <__swbuf_r+0x20>
 800cff0:	6923      	ldr	r3, [r4, #16]
 800cff2:	b943      	cbnz	r3, 800d006 <__swbuf_r+0x32>
 800cff4:	4621      	mov	r1, r4
 800cff6:	4628      	mov	r0, r5
 800cff8:	f000 f82a 	bl	800d050 <__swsetup_r>
 800cffc:	b118      	cbz	r0, 800d006 <__swbuf_r+0x32>
 800cffe:	f04f 37ff 	mov.w	r7, #4294967295
 800d002:	4638      	mov	r0, r7
 800d004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	6922      	ldr	r2, [r4, #16]
 800d00a:	1a98      	subs	r0, r3, r2
 800d00c:	6963      	ldr	r3, [r4, #20]
 800d00e:	b2f6      	uxtb	r6, r6
 800d010:	4283      	cmp	r3, r0
 800d012:	4637      	mov	r7, r6
 800d014:	dc05      	bgt.n	800d022 <__swbuf_r+0x4e>
 800d016:	4621      	mov	r1, r4
 800d018:	4628      	mov	r0, r5
 800d01a:	f7ff fa47 	bl	800c4ac <_fflush_r>
 800d01e:	2800      	cmp	r0, #0
 800d020:	d1ed      	bne.n	800cffe <__swbuf_r+0x2a>
 800d022:	68a3      	ldr	r3, [r4, #8]
 800d024:	3b01      	subs	r3, #1
 800d026:	60a3      	str	r3, [r4, #8]
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	1c5a      	adds	r2, r3, #1
 800d02c:	6022      	str	r2, [r4, #0]
 800d02e:	701e      	strb	r6, [r3, #0]
 800d030:	6962      	ldr	r2, [r4, #20]
 800d032:	1c43      	adds	r3, r0, #1
 800d034:	429a      	cmp	r2, r3
 800d036:	d004      	beq.n	800d042 <__swbuf_r+0x6e>
 800d038:	89a3      	ldrh	r3, [r4, #12]
 800d03a:	07db      	lsls	r3, r3, #31
 800d03c:	d5e1      	bpl.n	800d002 <__swbuf_r+0x2e>
 800d03e:	2e0a      	cmp	r6, #10
 800d040:	d1df      	bne.n	800d002 <__swbuf_r+0x2e>
 800d042:	4621      	mov	r1, r4
 800d044:	4628      	mov	r0, r5
 800d046:	f7ff fa31 	bl	800c4ac <_fflush_r>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d0d9      	beq.n	800d002 <__swbuf_r+0x2e>
 800d04e:	e7d6      	b.n	800cffe <__swbuf_r+0x2a>

0800d050 <__swsetup_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	4b29      	ldr	r3, [pc, #164]	@ (800d0f8 <__swsetup_r+0xa8>)
 800d054:	4605      	mov	r5, r0
 800d056:	6818      	ldr	r0, [r3, #0]
 800d058:	460c      	mov	r4, r1
 800d05a:	b118      	cbz	r0, 800d064 <__swsetup_r+0x14>
 800d05c:	6a03      	ldr	r3, [r0, #32]
 800d05e:	b90b      	cbnz	r3, 800d064 <__swsetup_r+0x14>
 800d060:	f7fc fca6 	bl	80099b0 <__sinit>
 800d064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d068:	0719      	lsls	r1, r3, #28
 800d06a:	d422      	bmi.n	800d0b2 <__swsetup_r+0x62>
 800d06c:	06da      	lsls	r2, r3, #27
 800d06e:	d407      	bmi.n	800d080 <__swsetup_r+0x30>
 800d070:	2209      	movs	r2, #9
 800d072:	602a      	str	r2, [r5, #0]
 800d074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d078:	81a3      	strh	r3, [r4, #12]
 800d07a:	f04f 30ff 	mov.w	r0, #4294967295
 800d07e:	e033      	b.n	800d0e8 <__swsetup_r+0x98>
 800d080:	0758      	lsls	r0, r3, #29
 800d082:	d512      	bpl.n	800d0aa <__swsetup_r+0x5a>
 800d084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d086:	b141      	cbz	r1, 800d09a <__swsetup_r+0x4a>
 800d088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d08c:	4299      	cmp	r1, r3
 800d08e:	d002      	beq.n	800d096 <__swsetup_r+0x46>
 800d090:	4628      	mov	r0, r5
 800d092:	f7fd fbf9 	bl	800a888 <_free_r>
 800d096:	2300      	movs	r3, #0
 800d098:	6363      	str	r3, [r4, #52]	@ 0x34
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	6063      	str	r3, [r4, #4]
 800d0a6:	6923      	ldr	r3, [r4, #16]
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f043 0308 	orr.w	r3, r3, #8
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	6923      	ldr	r3, [r4, #16]
 800d0b4:	b94b      	cbnz	r3, 800d0ca <__swsetup_r+0x7a>
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0c0:	d003      	beq.n	800d0ca <__swsetup_r+0x7a>
 800d0c2:	4621      	mov	r1, r4
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	f000 f883 	bl	800d1d0 <__smakebuf_r>
 800d0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ce:	f013 0201 	ands.w	r2, r3, #1
 800d0d2:	d00a      	beq.n	800d0ea <__swsetup_r+0x9a>
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	60a2      	str	r2, [r4, #8]
 800d0d8:	6962      	ldr	r2, [r4, #20]
 800d0da:	4252      	negs	r2, r2
 800d0dc:	61a2      	str	r2, [r4, #24]
 800d0de:	6922      	ldr	r2, [r4, #16]
 800d0e0:	b942      	cbnz	r2, 800d0f4 <__swsetup_r+0xa4>
 800d0e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0e6:	d1c5      	bne.n	800d074 <__swsetup_r+0x24>
 800d0e8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ea:	0799      	lsls	r1, r3, #30
 800d0ec:	bf58      	it	pl
 800d0ee:	6962      	ldrpl	r2, [r4, #20]
 800d0f0:	60a2      	str	r2, [r4, #8]
 800d0f2:	e7f4      	b.n	800d0de <__swsetup_r+0x8e>
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	e7f7      	b.n	800d0e8 <__swsetup_r+0x98>
 800d0f8:	2000001c 	.word	0x2000001c

0800d0fc <_raise_r>:
 800d0fc:	291f      	cmp	r1, #31
 800d0fe:	b538      	push	{r3, r4, r5, lr}
 800d100:	4605      	mov	r5, r0
 800d102:	460c      	mov	r4, r1
 800d104:	d904      	bls.n	800d110 <_raise_r+0x14>
 800d106:	2316      	movs	r3, #22
 800d108:	6003      	str	r3, [r0, #0]
 800d10a:	f04f 30ff 	mov.w	r0, #4294967295
 800d10e:	bd38      	pop	{r3, r4, r5, pc}
 800d110:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d112:	b112      	cbz	r2, 800d11a <_raise_r+0x1e>
 800d114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d118:	b94b      	cbnz	r3, 800d12e <_raise_r+0x32>
 800d11a:	4628      	mov	r0, r5
 800d11c:	f000 f830 	bl	800d180 <_getpid_r>
 800d120:	4622      	mov	r2, r4
 800d122:	4601      	mov	r1, r0
 800d124:	4628      	mov	r0, r5
 800d126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d12a:	f000 b817 	b.w	800d15c <_kill_r>
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d00a      	beq.n	800d148 <_raise_r+0x4c>
 800d132:	1c59      	adds	r1, r3, #1
 800d134:	d103      	bne.n	800d13e <_raise_r+0x42>
 800d136:	2316      	movs	r3, #22
 800d138:	6003      	str	r3, [r0, #0]
 800d13a:	2001      	movs	r0, #1
 800d13c:	e7e7      	b.n	800d10e <_raise_r+0x12>
 800d13e:	2100      	movs	r1, #0
 800d140:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d144:	4620      	mov	r0, r4
 800d146:	4798      	blx	r3
 800d148:	2000      	movs	r0, #0
 800d14a:	e7e0      	b.n	800d10e <_raise_r+0x12>

0800d14c <raise>:
 800d14c:	4b02      	ldr	r3, [pc, #8]	@ (800d158 <raise+0xc>)
 800d14e:	4601      	mov	r1, r0
 800d150:	6818      	ldr	r0, [r3, #0]
 800d152:	f7ff bfd3 	b.w	800d0fc <_raise_r>
 800d156:	bf00      	nop
 800d158:	2000001c 	.word	0x2000001c

0800d15c <_kill_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4d07      	ldr	r5, [pc, #28]	@ (800d17c <_kill_r+0x20>)
 800d160:	2300      	movs	r3, #0
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	4611      	mov	r1, r2
 800d168:	602b      	str	r3, [r5, #0]
 800d16a:	f7f5 f989 	bl	8002480 <_kill>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	d102      	bne.n	800d178 <_kill_r+0x1c>
 800d172:	682b      	ldr	r3, [r5, #0]
 800d174:	b103      	cbz	r3, 800d178 <_kill_r+0x1c>
 800d176:	6023      	str	r3, [r4, #0]
 800d178:	bd38      	pop	{r3, r4, r5, pc}
 800d17a:	bf00      	nop
 800d17c:	2000055c 	.word	0x2000055c

0800d180 <_getpid_r>:
 800d180:	f7f5 b976 	b.w	8002470 <_getpid>

0800d184 <__swhatbuf_r>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	460c      	mov	r4, r1
 800d188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18c:	2900      	cmp	r1, #0
 800d18e:	b096      	sub	sp, #88	@ 0x58
 800d190:	4615      	mov	r5, r2
 800d192:	461e      	mov	r6, r3
 800d194:	da0d      	bge.n	800d1b2 <__swhatbuf_r+0x2e>
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d19c:	f04f 0100 	mov.w	r1, #0
 800d1a0:	bf14      	ite	ne
 800d1a2:	2340      	movne	r3, #64	@ 0x40
 800d1a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	6031      	str	r1, [r6, #0]
 800d1ac:	602b      	str	r3, [r5, #0]
 800d1ae:	b016      	add	sp, #88	@ 0x58
 800d1b0:	bd70      	pop	{r4, r5, r6, pc}
 800d1b2:	466a      	mov	r2, sp
 800d1b4:	f000 f848 	bl	800d248 <_fstat_r>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	dbec      	blt.n	800d196 <__swhatbuf_r+0x12>
 800d1bc:	9901      	ldr	r1, [sp, #4]
 800d1be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d1c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1c6:	4259      	negs	r1, r3
 800d1c8:	4159      	adcs	r1, r3
 800d1ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1ce:	e7eb      	b.n	800d1a8 <__swhatbuf_r+0x24>

0800d1d0 <__smakebuf_r>:
 800d1d0:	898b      	ldrh	r3, [r1, #12]
 800d1d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1d4:	079d      	lsls	r5, r3, #30
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	460c      	mov	r4, r1
 800d1da:	d507      	bpl.n	800d1ec <__smakebuf_r+0x1c>
 800d1dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	6123      	str	r3, [r4, #16]
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	6163      	str	r3, [r4, #20]
 800d1e8:	b003      	add	sp, #12
 800d1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ec:	ab01      	add	r3, sp, #4
 800d1ee:	466a      	mov	r2, sp
 800d1f0:	f7ff ffc8 	bl	800d184 <__swhatbuf_r>
 800d1f4:	9f00      	ldr	r7, [sp, #0]
 800d1f6:	4605      	mov	r5, r0
 800d1f8:	4639      	mov	r1, r7
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f7fd fbb8 	bl	800a970 <_malloc_r>
 800d200:	b948      	cbnz	r0, 800d216 <__smakebuf_r+0x46>
 800d202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d206:	059a      	lsls	r2, r3, #22
 800d208:	d4ee      	bmi.n	800d1e8 <__smakebuf_r+0x18>
 800d20a:	f023 0303 	bic.w	r3, r3, #3
 800d20e:	f043 0302 	orr.w	r3, r3, #2
 800d212:	81a3      	strh	r3, [r4, #12]
 800d214:	e7e2      	b.n	800d1dc <__smakebuf_r+0xc>
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	6020      	str	r0, [r4, #0]
 800d21a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d21e:	81a3      	strh	r3, [r4, #12]
 800d220:	9b01      	ldr	r3, [sp, #4]
 800d222:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d226:	b15b      	cbz	r3, 800d240 <__smakebuf_r+0x70>
 800d228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d22c:	4630      	mov	r0, r6
 800d22e:	f000 f81d 	bl	800d26c <_isatty_r>
 800d232:	b128      	cbz	r0, 800d240 <__smakebuf_r+0x70>
 800d234:	89a3      	ldrh	r3, [r4, #12]
 800d236:	f023 0303 	bic.w	r3, r3, #3
 800d23a:	f043 0301 	orr.w	r3, r3, #1
 800d23e:	81a3      	strh	r3, [r4, #12]
 800d240:	89a3      	ldrh	r3, [r4, #12]
 800d242:	431d      	orrs	r5, r3
 800d244:	81a5      	strh	r5, [r4, #12]
 800d246:	e7cf      	b.n	800d1e8 <__smakebuf_r+0x18>

0800d248 <_fstat_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4d07      	ldr	r5, [pc, #28]	@ (800d268 <_fstat_r+0x20>)
 800d24c:	2300      	movs	r3, #0
 800d24e:	4604      	mov	r4, r0
 800d250:	4608      	mov	r0, r1
 800d252:	4611      	mov	r1, r2
 800d254:	602b      	str	r3, [r5, #0]
 800d256:	f7f5 f973 	bl	8002540 <_fstat>
 800d25a:	1c43      	adds	r3, r0, #1
 800d25c:	d102      	bne.n	800d264 <_fstat_r+0x1c>
 800d25e:	682b      	ldr	r3, [r5, #0]
 800d260:	b103      	cbz	r3, 800d264 <_fstat_r+0x1c>
 800d262:	6023      	str	r3, [r4, #0]
 800d264:	bd38      	pop	{r3, r4, r5, pc}
 800d266:	bf00      	nop
 800d268:	2000055c 	.word	0x2000055c

0800d26c <_isatty_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4d06      	ldr	r5, [pc, #24]	@ (800d288 <_isatty_r+0x1c>)
 800d270:	2300      	movs	r3, #0
 800d272:	4604      	mov	r4, r0
 800d274:	4608      	mov	r0, r1
 800d276:	602b      	str	r3, [r5, #0]
 800d278:	f7f5 f972 	bl	8002560 <_isatty>
 800d27c:	1c43      	adds	r3, r0, #1
 800d27e:	d102      	bne.n	800d286 <_isatty_r+0x1a>
 800d280:	682b      	ldr	r3, [r5, #0]
 800d282:	b103      	cbz	r3, 800d286 <_isatty_r+0x1a>
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	bd38      	pop	{r3, r4, r5, pc}
 800d288:	2000055c 	.word	0x2000055c

0800d28c <_init>:
 800d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28e:	bf00      	nop
 800d290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d292:	bc08      	pop	{r3}
 800d294:	469e      	mov	lr, r3
 800d296:	4770      	bx	lr

0800d298 <_fini>:
 800d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29a:	bf00      	nop
 800d29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29e:	bc08      	pop	{r3}
 800d2a0:	469e      	mov	lr, r3
 800d2a2:	4770      	bx	lr
