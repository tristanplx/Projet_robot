
projet_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800cbe0  0800cbe0  0000dbe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d070  0800d070  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d070  0800d070  0000e070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d078  0800d078  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d078  0800d078  0000e078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d07c  0800d07c  0000e07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d080  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200001d4  0800d254  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800d254  0000f564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001611a  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b63  00000000  00000000  0002531e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00027e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fba  00000000  00000000  000292a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a0b  00000000  00000000  0002a262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ec4  00000000  00000000  00053c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001078ec  00000000  00000000  0006ab31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017241d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b5c  00000000  00000000  00172460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00178fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbc4 	.word	0x0800cbc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800cbc4 	.word	0x0800cbc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fe8:	f000 ff78 	bl	8001edc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fec:	f000 f866 	bl	80010bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ff0:	f000 faf0 	bl	80015d4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ff4:	f000 fabe 	bl	8001574 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000ff8:	f000 f8b2 	bl	8001160 <MX_ADC1_Init>
	MX_TIM6_Init();
 8000ffc:	f000 fa84 	bl	8001508 <MX_TIM6_Init>
	MX_TIM2_Init();
 8001000:	f000 f924 	bl	800124c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001004:	f000 f9a4 	bl	8001350 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001008:	f000 fa1e 	bl	8001448 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 800100c:	4823      	ldr	r0, [pc, #140]	@ (800109c <main+0xb8>)
 800100e:	f004 fadb 	bl	80055c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001012:	2100      	movs	r1, #0
 8001014:	4822      	ldr	r0, [pc, #136]	@ (80010a0 <main+0xbc>)
 8001016:	f004 fba9 	bl	800576c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800101a:	210c      	movs	r1, #12
 800101c:	4820      	ldr	r0, [pc, #128]	@ (80010a0 <main+0xbc>)
 800101e:	f004 fba5 	bl	800576c <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8001022:	2201      	movs	r2, #1
 8001024:	491f      	ldr	r1, [pc, #124]	@ (80010a4 <main+0xc0>)
 8001026:	4820      	ldr	r0, [pc, #128]	@ (80010a8 <main+0xc4>)
 8001028:	f005 ff74 	bl	8006f14 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (T_batt >= 50)
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <main+0xc8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b31      	cmp	r3, #49	@ 0x31
 8001034:	d9fa      	bls.n	800102c <main+0x48>
		{
			T_batt = 0;
 8001036:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <main+0xc8>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 800103c:	481c      	ldr	r0, [pc, #112]	@ (80010b0 <main+0xcc>)
 800103e:	f001 fb0f 	bl	8002660 <HAL_ADC_Start_IT>
			if (ADC_on == 1)
 8001042:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <main+0xd0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d1ef      	bne.n	800102c <main+0x48>
			{
				ADC_on = 0;
 800104c:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <main+0xd0>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
				adcValue = HAL_ADC_GetValue(&hadc1);
 8001052:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <main+0xcc>)
 8001054:	f001 fc32 	bl	80028bc <HAL_ADC_GetValue>
 8001058:	4603      	mov	r3, r0
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <main+0xd4>)
 800105e:	701a      	strb	r2, [r3, #0]
				send_data_to_uart(adcValue);
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <main+0xd4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106e:	eeb0 0a67 	vmov.f32	s0, s15
 8001072:	f000 fb8b 	bl	800178c <send_data_to_uart>

				if (adcValue > 231)
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <main+0xd4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2be7      	cmp	r3, #231	@ 0xe7
 800107e:	d906      	bls.n	800108e <main+0xaa>
				{
					HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_SET); // Allumer la LED
 8001080:	2201      	movs	r2, #1
 8001082:	2120      	movs	r1, #32
 8001084:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001088:	f002 ff0e 	bl	8003ea8 <HAL_GPIO_WritePin>
 800108c:	e7ce      	b.n	800102c <main+0x48>
				}
				else
				{
					HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_RESET); // Éteindre la LED
 800108e:	2200      	movs	r2, #0
 8001090:	2120      	movs	r1, #32
 8001092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001096:	f002 ff07 	bl	8003ea8 <HAL_GPIO_WritePin>
		if (T_batt >= 50)
 800109a:	e7c7      	b.n	800102c <main+0x48>
 800109c:	20000338 	.word	0x20000338
 80010a0:	20000254 	.word	0x20000254
 80010a4:	2000040f 	.word	0x2000040f
 80010a8:	20000384 	.word	0x20000384
 80010ac:	2000040c 	.word	0x2000040c
 80010b0:	200001f0 	.word	0x200001f0
 80010b4:	2000040e 	.word	0x2000040e
 80010b8:	2000040d 	.word	0x2000040d

080010bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b096      	sub	sp, #88	@ 0x58
 80010c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2244      	movs	r2, #68	@ 0x44
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f008 f9a3 	bl	8009416 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010e2:	f002 ff07 	bl	8003ef4 <HAL_PWREx_ControlVoltageScaling>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80010ec:	f000 fb9e 	bl	800182c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f0:	2302      	movs	r3, #2
 80010f2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fa:	2310      	movs	r3, #16
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001102:	2302      	movs	r3, #2
 8001104:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800110a:	230a      	movs	r3, #10
 800110c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800110e:	2307      	movs	r3, #7
 8001110:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4618      	mov	r0, r3
 8001120:	f002 ff3e 	bl	8003fa0 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x72>
	{
		Error_Handler();
 800112a:	f000 fb7f 	bl	800182c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2303      	movs	r3, #3
 8001134:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	2104      	movs	r1, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fb06 	bl	8004758 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001152:	f000 fb6b 	bl	800182c <Error_Handler>
	}
}
 8001156:	bf00      	nop
 8001158:	3758      	adds	r7, #88	@ 0x58
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001182:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <MX_ADC1_Init+0xe0>)
 8001184:	4a2f      	ldr	r2, [pc, #188]	@ (8001244 <MX_ADC1_Init+0xe4>)
 8001186:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001188:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <MX_ADC1_Init+0xe0>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800118e:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <MX_ADC1_Init+0xe0>)
 8001190:	2210      	movs	r2, #16
 8001192:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001194:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <MX_ADC1_Init+0xe0>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800119a:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <MX_ADC1_Init+0xe0>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b8:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e2:	4817      	ldr	r0, [pc, #92]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011e4:	f001 f8ec 	bl	80023c0 <HAL_ADC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 80011ee:	f000 fb1d 	bl	800182c <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4810      	ldr	r0, [pc, #64]	@ (8001240 <MX_ADC1_Init+0xe0>)
 80011fe:	f002 fa69 	bl	80036d4 <HAL_ADCEx_MultiModeConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8001208:	f000 fb10 	bl	800182c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_ADC1_Init+0xe8>)
 800120e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001210:	2306      	movs	r3, #6
 8001212:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001214:	2307      	movs	r3, #7
 8001216:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001218:	237f      	movs	r3, #127	@ 0x7f
 800121a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800121c:	2304      	movs	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_ADC1_Init+0xe0>)
 800122a:	f001 fd83 	bl	8002d34 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0xd8>
	{
		Error_Handler();
 8001234:	f000 fafa 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	@ 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200001f0 	.word	0x200001f0
 8001244:	50040000 	.word	0x50040000
 8001248:	3ac04000 	.word	0x3ac04000

0800124c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	@ 0x38
 8001250:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	615a      	str	r2, [r3, #20]
 800127c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800127e:	4b33      	ldr	r3, [pc, #204]	@ (800134c <MX_TIM2_Init+0x100>)
 8001280:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001284:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 244-1;
 8001286:	4b31      	ldr	r3, [pc, #196]	@ (800134c <MX_TIM2_Init+0x100>)
 8001288:	22f3      	movs	r2, #243	@ 0xf3
 800128a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b2f      	ldr	r3, [pc, #188]	@ (800134c <MX_TIM2_Init+0x100>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535-1;
 8001292:	4b2e      	ldr	r3, [pc, #184]	@ (800134c <MX_TIM2_Init+0x100>)
 8001294:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001298:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129a:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <MX_TIM2_Init+0x100>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	@ (800134c <MX_TIM2_Init+0x100>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a6:	4829      	ldr	r0, [pc, #164]	@ (800134c <MX_TIM2_Init+0x100>)
 80012a8:	f004 f936 	bl	8005518 <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 80012b2:	f000 fabb 	bl	800182c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4822      	ldr	r0, [pc, #136]	@ (800134c <MX_TIM2_Init+0x100>)
 80012c4:	f004 fe62 	bl	8005f8c <HAL_TIM_ConfigClockSource>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 80012ce:	f000 faad 	bl	800182c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012d2:	481e      	ldr	r0, [pc, #120]	@ (800134c <MX_TIM2_Init+0x100>)
 80012d4:	f004 f9e8 	bl	80056a8 <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 80012de:	f000 faa5 	bl	800182c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4816      	ldr	r0, [pc, #88]	@ (800134c <MX_TIM2_Init+0x100>)
 80012f2:	f005 fc91 	bl	8006c18 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 80012fc:	f000 fa96 	bl	800182c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	@ 0x60
 8001302:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	480d      	ldr	r0, [pc, #52]	@ (800134c <MX_TIM2_Init+0x100>)
 8001318:	f004 fd24 	bl	8005d64 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8001322:	f000 fa83 	bl	800182c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	220c      	movs	r2, #12
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	@ (800134c <MX_TIM2_Init+0x100>)
 800132e:	f004 fd19 	bl	8005d64 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0xf0>
	{
		Error_Handler();
 8001338:	f000 fa78 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <MX_TIM2_Init+0x100>)
 800133e:	f000 fbc5 	bl	8001acc <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3738      	adds	r7, #56	@ 0x38
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000254 	.word	0x20000254

08001350 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	@ 0x30
 8001354:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800137c:	4b30      	ldr	r3, [pc, #192]	@ (8001440 <MX_TIM3_Init+0xf0>)
 800137e:	4a31      	ldr	r2, [pc, #196]	@ (8001444 <MX_TIM3_Init+0xf4>)
 8001380:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 244-1;
 8001382:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <MX_TIM3_Init+0xf0>)
 8001384:	22f3      	movs	r2, #243	@ 0xf3
 8001386:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b2d      	ldr	r3, [pc, #180]	@ (8001440 <MX_TIM3_Init+0xf0>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535-1;
 800138e:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <MX_TIM3_Init+0xf0>)
 8001390:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001394:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <MX_TIM3_Init+0xf0>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b28      	ldr	r3, [pc, #160]	@ (8001440 <MX_TIM3_Init+0xf0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a2:	4827      	ldr	r0, [pc, #156]	@ (8001440 <MX_TIM3_Init+0xf0>)
 80013a4:	f004 f8b8 	bl	8005518 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0x62>
	{
		Error_Handler();
 80013ae:	f000 fa3d 	bl	800182c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b6:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	4619      	mov	r1, r3
 80013be:	4820      	ldr	r0, [pc, #128]	@ (8001440 <MX_TIM3_Init+0xf0>)
 80013c0:	f004 fde4 	bl	8005f8c <HAL_TIM_ConfigClockSource>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 80013ca:	f000 fa2f 	bl	800182c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013ce:	481c      	ldr	r0, [pc, #112]	@ (8001440 <MX_TIM3_Init+0xf0>)
 80013d0:	f004 fad2 	bl	8005978 <HAL_TIM_IC_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 80013da:	f000 fa27 	bl	800182c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4814      	ldr	r0, [pc, #80]	@ (8001440 <MX_TIM3_Init+0xf0>)
 80013ee:	f005 fc13 	bl	8006c18 <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0xac>
	{
		Error_Handler();
 80013f8:	f000 fa18 	bl	800182c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001400:	2301      	movs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	480b      	ldr	r0, [pc, #44]	@ (8001440 <MX_TIM3_Init+0xf0>)
 8001414:	f004 fc09 	bl	8005c2a <HAL_TIM_IC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0xd2>
	{
		Error_Handler();
 800141e:	f000 fa05 	bl	800182c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2204      	movs	r2, #4
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_TIM3_Init+0xf0>)
 800142a:	f004 fbfe 	bl	8005c2a <HAL_TIM_IC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0xe8>
	{
		Error_Handler();
 8001434:	f000 f9fa 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3730      	adds	r7, #48	@ 0x30
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200002a0 	.word	0x200002a0
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001466:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <MX_TIM4_Init+0xb8>)
 8001468:	4a26      	ldr	r2, [pc, #152]	@ (8001504 <MX_TIM4_Init+0xbc>)
 800146a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 244-1;
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <MX_TIM4_Init+0xb8>)
 800146e:	22f3      	movs	r2, #243	@ 0xf3
 8001470:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b23      	ldr	r3, [pc, #140]	@ (8001500 <MX_TIM4_Init+0xb8>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535-1;
 8001478:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <MX_TIM4_Init+0xb8>)
 800147a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800147e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <MX_TIM4_Init+0xb8>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001486:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <MX_TIM4_Init+0xb8>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800148c:	481c      	ldr	r0, [pc, #112]	@ (8001500 <MX_TIM4_Init+0xb8>)
 800148e:	f004 fa73 	bl	8005978 <HAL_TIM_IC_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 8001498:	f000 f9c8 	bl	800182c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4815      	ldr	r0, [pc, #84]	@ (8001500 <MX_TIM4_Init+0xb8>)
 80014ac:	f005 fbb4 	bl	8006c18 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x72>
	{
		Error_Handler();
 80014b6:	f000 f9b9 	bl	800182c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014be:	2301      	movs	r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <MX_TIM4_Init+0xb8>)
 80014d2:	f004 fbaa 	bl	8005c2a <HAL_TIM_IC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM4_Init+0x98>
	{
		Error_Handler();
 80014dc:	f000 f9a6 	bl	800182c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2204      	movs	r2, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4806      	ldr	r0, [pc, #24]	@ (8001500 <MX_TIM4_Init+0xb8>)
 80014e8:	f004 fb9f 	bl	8005c2a <HAL_TIM_IC_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM4_Init+0xae>
	{
		Error_Handler();
 80014f2:	f000 f99b 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200002ec 	.word	0x200002ec
 8001504:	40000800 	.word	0x40000800

08001508 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_TIM6_Init+0x64>)
 800151a:	4a15      	ldr	r2, [pc, #84]	@ (8001570 <MX_TIM6_Init+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 122-1;
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_TIM6_Init+0x64>)
 8001520:	2279      	movs	r2, #121	@ 0x79
 8001522:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_TIM6_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535-1;
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <MX_TIM6_Init+0x64>)
 800152c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001530:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_TIM6_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001538:	480c      	ldr	r0, [pc, #48]	@ (800156c <MX_TIM6_Init+0x64>)
 800153a:	f003 ffed 	bl	8005518 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8001544:	f000 f972 	bl	800182c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_TIM6_Init+0x64>)
 8001556:	f005 fb5f 	bl	8006c18 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 8001560:	f000 f964 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000338 	.word	0x20000338
 8001570:	40001000 	.word	0x40001000

08001574 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <MX_USART2_UART_Init+0x5c>)
 800157c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 800159a:	2204      	movs	r2, #4
 800159c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_USART2_UART_Init+0x58>)
 80015b8:	f005 fbd4 	bl	8006d64 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80015c2:	f000 f933 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000384 	.word	0x20000384
 80015d0:	40004400 	.word	0x40004400

080015d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	4b50      	ldr	r3, [pc, #320]	@ (800172c <MX_GPIO_Init+0x158>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	4a4f      	ldr	r2, [pc, #316]	@ (800172c <MX_GPIO_Init+0x158>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f6:	4b4d      	ldr	r3, [pc, #308]	@ (800172c <MX_GPIO_Init+0x158>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	4b4a      	ldr	r3, [pc, #296]	@ (800172c <MX_GPIO_Init+0x158>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	4a49      	ldr	r2, [pc, #292]	@ (800172c <MX_GPIO_Init+0x158>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800160c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160e:	4b47      	ldr	r3, [pc, #284]	@ (800172c <MX_GPIO_Init+0x158>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b44      	ldr	r3, [pc, #272]	@ (800172c <MX_GPIO_Init+0x158>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	4a43      	ldr	r2, [pc, #268]	@ (800172c <MX_GPIO_Init+0x158>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <MX_GPIO_Init+0x158>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <MX_GPIO_Init+0x158>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4a3d      	ldr	r2, [pc, #244]	@ (800172c <MX_GPIO_Init+0x158>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <MX_GPIO_Init+0x158>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2120      	movs	r1, #32
 800164e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001652:	f002 fc29 	bl	8003ea8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Cmde_DirG_GPIO_Port, Cmde_DirG_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2104      	movs	r1, #4
 800165a:	4835      	ldr	r0, [pc, #212]	@ (8001730 <MX_GPIO_Init+0x15c>)
 800165c:	f002 fc24 	bl	8003ea8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Cmde_DirD_GPIO_Port, Cmde_DirD_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001666:	4833      	ldr	r0, [pc, #204]	@ (8001734 <MX_GPIO_Init+0x160>)
 8001668:	f002 fc1e 	bl	8003ea8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800166c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001670:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001672:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001676:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	482c      	ldr	r0, [pc, #176]	@ (8001734 <MX_GPIO_Init+0x160>)
 8001684:	f002 fa66 	bl	8003b54 <HAL_GPIO_Init>

	/*Configure GPIO pin : Alert_batt_Pin */
	GPIO_InitStruct.Pin = Alert_batt_Pin;
 8001688:	2320      	movs	r3, #32
 800168a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Alert_batt_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a2:	f002 fa57 	bl	8003b54 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016a6:	2310      	movs	r3, #16
 80016a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b6:	2307      	movs	r3, #7
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	481c      	ldr	r0, [pc, #112]	@ (8001734 <MX_GPIO_Init+0x160>)
 80016c2:	f002 fa47 	bl	8003b54 <HAL_GPIO_Init>

	/*Configure GPIO pin : Cmde_DirG_Pin */
	GPIO_InitStruct.Pin = Cmde_DirG_Pin;
 80016c6:	2304      	movs	r3, #4
 80016c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Cmde_DirG_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4814      	ldr	r0, [pc, #80]	@ (8001730 <MX_GPIO_Init+0x15c>)
 80016de:	f002 fa39 	bl	8003b54 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016f4:	2307      	movs	r3, #7
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	480c      	ldr	r0, [pc, #48]	@ (8001730 <MX_GPIO_Init+0x15c>)
 8001700:	f002 fa28 	bl	8003b54 <HAL_GPIO_Init>

	/*Configure GPIO pin : Cmde_DirD_Pin */
	GPIO_InitStruct.Pin = Cmde_DirD_Pin;
 8001704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001708:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Cmde_DirD_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_GPIO_Init+0x160>)
 800171e:	f002 fa19 	bl	8003b54 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	@ 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400
 8001734:	48000800 	.word	0x48000800

08001738 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d106      	bne.n	8001758 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		T_batt++;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3301      	adds	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001756:	701a      	strb	r2, [r3, #0]
	}
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40001000 	.word	0x40001000
 8001768:	2000040c 	.word	0x2000040c

0800176c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	ADC_on = 1;
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000040e 	.word	0x2000040e

0800178c <send_data_to_uart>:

void send_data_to_uart(float battery)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b090      	sub	sp, #64	@ 0x40
 8001790:	af00      	add	r7, sp, #0
 8001792:	ed87 0a01 	vstr	s0, [r7, #4]
	char buffer[50];
	int len = sprintf(buffer, "level: %f V\r\n", battery);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe fed6 	bl	8000548 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	f107 0008 	add.w	r0, r7, #8
 80017a4:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <send_data_to_uart+0x3c>)
 80017a6:	f007 fdd3 	bl	8009350 <siprintf>
 80017aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80017ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	f107 0108 	add.w	r1, r7, #8
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <send_data_to_uart+0x40>)
 80017ba:	f005 fb21 	bl	8006e00 <HAL_UART_Transmit>
}
 80017be:	bf00      	nop
 80017c0:	3740      	adds	r7, #64	@ 0x40
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	0800cbe0 	.word	0x0800cbe0
 80017cc:	20000384 	.word	0x20000384

080017d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <HAL_UART_RxCpltCallback+0x4c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d117      	bne.n	8001812 <HAL_UART_RxCpltCallback+0x42>
	{
		// Préparer le buffer pour envoyer les données reçues à PuTTY
		char buffer[20];
		int len = sprintf(buffer, "Reçu: %c\r\n", rxData);
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_UART_RxCpltCallback+0x50>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	490d      	ldr	r1, [pc, #52]	@ (8001824 <HAL_UART_RxCpltCallback+0x54>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f007 fdae 	bl	8009350 <siprintf>
 80017f4:	61f8      	str	r0, [r7, #28]

		// Envoyer les données à PuTTY
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	f107 0108 	add.w	r1, r7, #8
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	4809      	ldr	r0, [pc, #36]	@ (8001828 <HAL_UART_RxCpltCallback+0x58>)
 8001804:	f005 fafc 	bl	8006e00 <HAL_UART_Transmit>

		// Réactiver la réception UART
		HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8001808:	2201      	movs	r2, #1
 800180a:	4905      	ldr	r1, [pc, #20]	@ (8001820 <HAL_UART_RxCpltCallback+0x50>)
 800180c:	4806      	ldr	r0, [pc, #24]	@ (8001828 <HAL_UART_RxCpltCallback+0x58>)
 800180e:	f005 fb81 	bl	8006f14 <HAL_UART_Receive_IT>
	}
}
 8001812:	bf00      	nop
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40004400 	.word	0x40004400
 8001820:	2000040f 	.word	0x2000040f
 8001824:	0800cbf0 	.word	0x0800cbf0
 8001828:	20000384 	.word	0x20000384

0800182c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <Error_Handler+0x8>

08001838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_MspInit+0x44>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001842:	4a0e      	ldr	r2, [pc, #56]	@ (800187c <HAL_MspInit+0x44>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6613      	str	r3, [r2, #96]	@ 0x60
 800184a:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <HAL_MspInit+0x44>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <HAL_MspInit+0x44>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	4a08      	ldr	r2, [pc, #32]	@ (800187c <HAL_MspInit+0x44>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001860:	6593      	str	r3, [r2, #88]	@ 0x58
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_MspInit+0x44>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0ac      	sub	sp, #176	@ 0xb0
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2288      	movs	r2, #136	@ 0x88
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f007 fdb8 	bl	8009416 <memset>
  if(hadc->Instance==ADC1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001958 <HAL_ADC_MspInit+0xd8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d14e      	bne.n	800194e <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80018ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80018c6:	2308      	movs	r3, #8
 80018c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018ca:	2307      	movs	r3, #7
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018ce:	2302      	movs	r3, #2
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018d2:	2302      	movs	r3, #2
 80018d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018da:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 f95d 	bl	8004ba0 <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80018ec:	f7ff ff9e 	bl	800182c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018f0:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <HAL_ADC_MspInit+0xdc>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f4:	4a19      	ldr	r2, [pc, #100]	@ (800195c <HAL_ADC_MspInit+0xdc>)
 80018f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <HAL_ADC_MspInit+0xdc>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_ADC_MspInit+0xdc>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190c:	4a13      	ldr	r2, [pc, #76]	@ (800195c <HAL_ADC_MspInit+0xdc>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <HAL_ADC_MspInit+0xdc>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001920:	2320      	movs	r3, #32
 8001922:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001926:	230b      	movs	r3, #11
 8001928:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001932:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001936:	4619      	mov	r1, r3
 8001938:	4809      	ldr	r0, [pc, #36]	@ (8001960 <HAL_ADC_MspInit+0xe0>)
 800193a:	f002 f90b 	bl	8003b54 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2012      	movs	r0, #18
 8001944:	f002 f851 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001948:	2012      	movs	r0, #18
 800194a:	f002 f86a 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	37b0      	adds	r7, #176	@ 0xb0
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	50040000 	.word	0x50040000
 800195c:	40021000 	.word	0x40021000
 8001960:	48000800 	.word	0x48000800

08001964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	@ 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001984:	d10c      	bne.n	80019a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001986:	4b2c      	ldr	r3, [pc, #176]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	4a2b      	ldr	r2, [pc, #172]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6593      	str	r3, [r2, #88]	@ 0x58
 8001992:	4b29      	ldr	r3, [pc, #164]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800199e:	e047      	b.n	8001a30 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a25      	ldr	r2, [pc, #148]	@ (8001a3c <HAL_TIM_Base_MspInit+0xd8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d129      	bne.n	80019fe <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019aa:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ae:	4a22      	ldr	r2, [pc, #136]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019b6:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019da:	23c0      	movs	r3, #192	@ 0xc0
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f8:	f002 f8ac 	bl	8003b54 <HAL_GPIO_Init>
}
 80019fc:	e018      	b.n	8001a30 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM6)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a0f      	ldr	r2, [pc, #60]	@ (8001a40 <HAL_TIM_Base_MspInit+0xdc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d113      	bne.n	8001a30 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <HAL_TIM_Base_MspInit+0xd4>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2036      	movs	r0, #54	@ 0x36
 8001a26:	f001 ffe0 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a2a:	2036      	movs	r0, #54	@ 0x36
 8001a2c:	f001 fff9 	bl	8003a22 <HAL_NVIC_EnableIRQ>
}
 8001a30:	bf00      	nop
 8001a32:	3730      	adds	r7, #48	@ 0x30
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40001000 	.word	0x40001000

08001a44 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	@ 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <HAL_TIM_IC_MspInit+0x7c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d127      	bne.n	8001ab6 <HAL_TIM_IC_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a66:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x80>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	4a16      	ldr	r2, [pc, #88]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x80>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x80>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x80>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	4a10      	ldr	r2, [pc, #64]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x80>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <HAL_TIM_IC_MspInit+0x80>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a96:	23c0      	movs	r3, #192	@ 0xc0
 8001a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <HAL_TIM_IC_MspInit+0x84>)
 8001ab2:	f002 f84f 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	@ 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40000800 	.word	0x40000800
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	48000400 	.word	0x48000400

08001acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aec:	d13a      	bne.n	8001b64 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <HAL_TIM_MspPostInit+0xa0>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <HAL_TIM_MspPostInit+0xa0>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <HAL_TIM_MspPostInit+0xa0>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_TIM_MspPostInit+0xa0>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	4a18      	ldr	r2, [pc, #96]	@ (8001b6c <HAL_TIM_MspPostInit+0xa0>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_TIM_MspPostInit+0xa0>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b30:	2301      	movs	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <HAL_TIM_MspPostInit+0xa4>)
 8001b3c:	f002 f80a 	bl	8003b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b52:	2301      	movs	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b60:	f001 fff8 	bl	8003b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	48000400 	.word	0x48000400

08001b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0ac      	sub	sp, #176	@ 0xb0
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2288      	movs	r2, #136	@ 0x88
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f007 fc3e 	bl	8009416 <memset>
  if(huart->Instance==USART2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a25      	ldr	r2, [pc, #148]	@ (8001c34 <HAL_UART_MspInit+0xc0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d143      	bne.n	8001c2c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fff5 	bl	8004ba0 <HAL_RCCEx_PeriphCLKConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bbc:	f7ff fe36 	bl	800182c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <HAL_UART_MspInit+0xc4>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c38 <HAL_UART_MspInit+0xc4>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <HAL_UART_MspInit+0xc4>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <HAL_UART_MspInit+0xc4>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bdc:	4a16      	ldr	r2, [pc, #88]	@ (8001c38 <HAL_UART_MspInit+0xc4>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_UART_MspInit+0xc4>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c08:	2307      	movs	r3, #7
 8001c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c18:	f001 ff9c 	bl	8003b54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2026      	movs	r0, #38	@ 0x26
 8001c22:	f001 fee2 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c26:	2026      	movs	r0, #38	@ 0x26
 8001c28:	f001 fefb 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	37b0      	adds	r7, #176	@ 0xb0
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40004400 	.word	0x40004400
 8001c38:	40021000 	.word	0x40021000

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <NMI_Handler+0x4>

08001c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <MemManage_Handler+0x4>

08001c54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c92:	f000 f97f 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ca0:	4802      	ldr	r0, [pc, #8]	@ (8001cac <ADC1_2_IRQHandler+0x10>)
 8001ca2:	f000 fe19 	bl	80028d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200001f0 	.word	0x200001f0

08001cb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <USART2_IRQHandler+0x10>)
 8001cb6:	f005 f979 	bl	8006fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000384 	.word	0x20000384

08001cc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <TIM6_DAC_IRQHandler+0x10>)
 8001cca:	f003 feac 	bl	8005a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000338 	.word	0x20000338

08001cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return 1;
 8001cdc:	2301      	movs	r3, #1
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_kill>:

int _kill(int pid, int sig)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cf2:	f007 fbe3 	bl	80094bc <__errno>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2216      	movs	r2, #22
 8001cfa:	601a      	str	r2, [r3, #0]
  return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_exit>:

void _exit (int status)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ffe7 	bl	8001ce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d1a:	bf00      	nop
 8001d1c:	e7fd      	b.n	8001d1a <_exit+0x12>

08001d1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e00a      	b.n	8001d46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d30:	f3af 8000 	nop.w
 8001d34:	4601      	mov	r1, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	60ba      	str	r2, [r7, #8]
 8001d3c:	b2ca      	uxtb	r2, r1
 8001d3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	dbf0      	blt.n	8001d30 <_read+0x12>
  }

  return len;
 8001d4e:	687b      	ldr	r3, [r7, #4]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e009      	b.n	8001d7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	60ba      	str	r2, [r7, #8]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	dbf1      	blt.n	8001d6a <_write+0x12>
  }
  return len;
 8001d86:	687b      	ldr	r3, [r7, #4]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_close>:

int _close(int file)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001db8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_isatty>:

int _isatty(int file)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd0:	2301      	movs	r3, #1
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e00:	4a14      	ldr	r2, [pc, #80]	@ (8001e54 <_sbrk+0x5c>)
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <_sbrk+0x60>)
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <_sbrk+0x64>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <_sbrk+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d207      	bcs.n	8001e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e28:	f007 fb48 	bl	80094bc <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	220c      	movs	r2, #12
 8001e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e009      	b.n	8001e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	4a05      	ldr	r2, [pc, #20]	@ (8001e5c <_sbrk+0x64>)
 8001e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20018000 	.word	0x20018000
 8001e58:	00000400 	.word	0x00000400
 8001e5c:	20000410 	.word	0x20000410
 8001e60:	20000568 	.word	0x20000568

08001e64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <SystemInit+0x20>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6e:	4a05      	ldr	r2, [pc, #20]	@ (8001e84 <SystemInit+0x20>)
 8001e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e8c:	f7ff ffea 	bl	8001e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e92:	490d      	ldr	r1, [pc, #52]	@ (8001ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <LoopForever+0xe>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed4 <LoopForever+0x16>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f007 fb07 	bl	80094c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eba:	f7ff f893 	bl	8000fe4 <main>

08001ebe <LoopForever>:

LoopForever:
    b LoopForever
 8001ebe:	e7fe      	b.n	8001ebe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ecc:	0800d080 	.word	0x0800d080
  ldr r2, =_sbss
 8001ed0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ed4:	20000564 	.word	0x20000564

08001ed8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC3_IRQHandler>
	...

08001edc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <HAL_Init+0x3c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a0b      	ldr	r2, [pc, #44]	@ (8001f18 <HAL_Init+0x3c>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f001 fd6e 	bl	80039d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f000 f80f 	bl	8001f1c <HAL_InitTick>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	e001      	b.n	8001f0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f0a:	f7ff fc95 	bl	8001838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <HAL_InitTick+0x6c>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d023      	beq.n	8001f78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f30:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <HAL_InitTick+0x70>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <HAL_InitTick+0x6c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 fd79 	bl	8003a3e <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d809      	bhi.n	8001f6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f001 fd43 	bl	80039ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f64:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <HAL_InitTick+0x74>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e007      	b.n	8001f7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e004      	b.n	8001f7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e001      	b.n	8001f7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_IncTick+0x20>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_IncTick+0x24>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <HAL_IncTick+0x24>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000414 	.word	0x20000414

08001fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	@ (8001fd0 <HAL_GetTick+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000414 	.word	0x20000414

08001fd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	609a      	str	r2, [r3, #8]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3360      	adds	r3, #96	@ 0x60
 800204e:	461a      	mov	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <LL_ADC_SetOffset+0x44>)
 800205e:	4013      	ands	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	4313      	orrs	r3, r2
 800206c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002074:	bf00      	nop
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	03fff000 	.word	0x03fff000

08002084 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3360      	adds	r3, #96	@ 0x60
 8002092:	461a      	mov	r2, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3360      	adds	r3, #96	@ 0x60
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	431a      	orrs	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3330      	adds	r3, #48	@ 0x30
 800211c:	461a      	mov	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	4413      	add	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	211f      	movs	r1, #31
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	401a      	ands	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0e9b      	lsrs	r3, r3, #26
 8002144:	f003 011f 	and.w	r1, r3, #31
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	431a      	orrs	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002170:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800218a:	b480      	push	{r7}
 800218c:	b087      	sub	sp, #28
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3314      	adds	r3, #20
 800219a:	461a      	mov	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	0e5b      	lsrs	r3, r3, #25
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	4413      	add	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0d1b      	lsrs	r3, r3, #20
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	2107      	movs	r1, #7
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	0d1b      	lsrs	r3, r3, #20
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	431a      	orrs	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0318 	and.w	r3, r3, #24
 8002202:	4908      	ldr	r1, [pc, #32]	@ (8002224 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002204:	40d9      	lsrs	r1, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	400b      	ands	r3, r1
 800220a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220e:	431a      	orrs	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	0007ffff 	.word	0x0007ffff

08002228 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 031f 	and.w	r3, r3, #31
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002270:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6093      	str	r3, [r2, #8]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002298:	d101      	bne.n	800229e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022e8:	d101      	bne.n	80022ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800230c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <LL_ADC_IsEnabled+0x18>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <LL_ADC_IsEnabled+0x1a>
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800235a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800235e:	f043 0204 	orr.w	r2, r3, #4
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d101      	bne.n	800238a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d101      	bne.n	80023b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e130      	b.n	800263c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff fa49 	bl	8001880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff3f 	bl	8002284 <LL_ADC_IsDeepPowerDownEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff25 	bl	8002260 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff5a 	bl	80022d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d115      	bne.n	8002452 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff3e 	bl	80022ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002430:	4b84      	ldr	r3, [pc, #528]	@ (8002644 <HAL_ADC_Init+0x284>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	4a84      	ldr	r2, [pc, #528]	@ (8002648 <HAL_ADC_Init+0x288>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	3301      	adds	r3, #1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002444:	e002      	b.n	800244c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3b01      	subs	r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f9      	bne.n	8002446 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff3c 	bl	80022d4 <LL_ADC_IsInternalRegulatorEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002466:	f043 0210 	orr.w	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff75 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 8002488:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 80c9 	bne.w	800262a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 80c5 	bne.w	800262a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024a8:	f043 0202 	orr.w	r2, r3, #2
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff35 	bl	8002324 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d115      	bne.n	80024ec <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c0:	4862      	ldr	r0, [pc, #392]	@ (800264c <HAL_ADC_Init+0x28c>)
 80024c2:	f7ff ff2f 	bl	8002324 <LL_ADC_IsEnabled>
 80024c6:	4604      	mov	r4, r0
 80024c8:	4861      	ldr	r0, [pc, #388]	@ (8002650 <HAL_ADC_Init+0x290>)
 80024ca:	f7ff ff2b 	bl	8002324 <LL_ADC_IsEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	431c      	orrs	r4, r3
 80024d2:	4860      	ldr	r0, [pc, #384]	@ (8002654 <HAL_ADC_Init+0x294>)
 80024d4:	f7ff ff26 	bl	8002324 <LL_ADC_IsEnabled>
 80024d8:	4603      	mov	r3, r0
 80024da:	4323      	orrs	r3, r4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4619      	mov	r1, r3
 80024e6:	485c      	ldr	r0, [pc, #368]	@ (8002658 <HAL_ADC_Init+0x298>)
 80024e8:	f7ff fd74 	bl	8001fd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e5b      	ldrb	r3, [r3, #25]
 80024f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002502:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d106      	bne.n	8002528 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	3b01      	subs	r3, #1
 8002520:	045b      	lsls	r3, r3, #17
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	4b44      	ldr	r3, [pc, #272]	@ (800265c <HAL_ADC_Init+0x29c>)
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	430b      	orrs	r3, r1
 8002556:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff1b 	bl	8002398 <LL_ADC_INJ_IsConversionOngoing>
 8002562:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d13d      	bne.n	80025e6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d13a      	bne.n	80025e6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002574:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800257c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800258c:	f023 0302 	bic.w	r3, r3, #2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	69b9      	ldr	r1, [r7, #24]
 8002596:	430b      	orrs	r3, r1
 8002598:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d118      	bne.n	80025d6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025c6:	430a      	orrs	r2, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	611a      	str	r2, [r3, #16]
 80025d4:	e007      	b.n	80025e6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d10c      	bne.n	8002608 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	f023 010f 	bic.w	r1, r3, #15
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	631a      	str	r2, [r3, #48]	@ 0x30
 8002606:	e007      	b.n	8002618 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 020f 	bic.w	r2, r2, #15
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261c:	f023 0303 	bic.w	r3, r3, #3
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	655a      	str	r2, [r3, #84]	@ 0x54
 8002628:	e007      	b.n	800263a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800263a:	7ffb      	ldrb	r3, [r7, #31]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3724      	adds	r7, #36	@ 0x24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	20000000 	.word	0x20000000
 8002648:	053e2d63 	.word	0x053e2d63
 800264c:	50040000 	.word	0x50040000
 8002650:	50040100 	.word	0x50040100
 8002654:	50040200 	.word	0x50040200
 8002658:	50040300 	.word	0x50040300
 800265c:	fff0c007 	.word	0xfff0c007

08002660 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002668:	4891      	ldr	r0, [pc, #580]	@ (80028b0 <HAL_ADC_Start_IT+0x250>)
 800266a:	f7ff fddd 	bl	8002228 <LL_ADC_GetMultimode>
 800266e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fe7c 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 8110 	bne.w	80028a2 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_ADC_Start_IT+0x30>
 800268c:	2302      	movs	r3, #2
 800268e:	e10b      	b.n	80028a8 <HAL_ADC_Start_IT+0x248>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 ff3d 	bl	8003518 <ADC_Enable>
 800269e:	4603      	mov	r3, r0
 80026a0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 80f7 	bne.w	8002898 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7c      	ldr	r2, [pc, #496]	@ (80028b4 <HAL_ADC_Start_IT+0x254>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d002      	beq.n	80026ce <HAL_ADC_Start_IT+0x6e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	e000      	b.n	80026d0 <HAL_ADC_Start_IT+0x70>
 80026ce:	4b7a      	ldr	r3, [pc, #488]	@ (80028b8 <HAL_ADC_Start_IT+0x258>)
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d002      	beq.n	80026de <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fa:	f023 0206 	bic.w	r2, r3, #6
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	659a      	str	r2, [r3, #88]	@ 0x58
 8002702:	e002      	b.n	800270a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	221c      	movs	r2, #28
 8002710:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 021c 	bic.w	r2, r2, #28
 8002728:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	2b08      	cmp	r3, #8
 8002730:	d108      	bne.n	8002744 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0208 	orr.w	r2, r2, #8
 8002740:	605a      	str	r2, [r3, #4]
          break;
 8002742:	e008      	b.n	8002756 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0204 	orr.w	r2, r2, #4
 8002752:	605a      	str	r2, [r3, #4]
          break;
 8002754:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0210 	orr.w	r2, r2, #16
 800276c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a50      	ldr	r2, [pc, #320]	@ (80028b4 <HAL_ADC_Start_IT+0x254>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d002      	beq.n	800277e <HAL_ADC_Start_IT+0x11e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	e000      	b.n	8002780 <HAL_ADC_Start_IT+0x120>
 800277e:	4b4e      	ldr	r3, [pc, #312]	@ (80028b8 <HAL_ADC_Start_IT+0x258>)
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	4293      	cmp	r3, r2
 8002786:	d008      	beq.n	800279a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b05      	cmp	r3, #5
 8002792:	d002      	beq.n	800279a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b09      	cmp	r3, #9
 8002798:	d13a      	bne.n	8002810 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d02d      	beq.n	8002804 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d110      	bne.n	80027e2 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0220 	bic.w	r2, r2, #32
 80027ce:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027de:	605a      	str	r2, [r3, #4]
              break;
 80027e0:	e010      	b.n	8002804 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027f0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	605a      	str	r2, [r3, #4]
              break;
 8002802:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fd9e 	bl	800234a <LL_ADC_REG_StartConversion>
 800280e:	e04a      	b.n	80028a6 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002814:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a24      	ldr	r2, [pc, #144]	@ (80028b4 <HAL_ADC_Start_IT+0x254>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d002      	beq.n	800282c <HAL_ADC_Start_IT+0x1cc>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e000      	b.n	800282e <HAL_ADC_Start_IT+0x1ce>
 800282c:	4b22      	ldr	r3, [pc, #136]	@ (80028b8 <HAL_ADC_Start_IT+0x258>)
 800282e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d034      	beq.n	80028a6 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002840:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002844:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d110      	bne.n	8002876 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0220 	bic.w	r2, r2, #32
 8002862:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002872:	605a      	str	r2, [r3, #4]
              break;
 8002874:	e017      	b.n	80028a6 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002884:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0220 	orr.w	r2, r2, #32
 8002894:	605a      	str	r2, [r3, #4]
              break;
 8002896:	e006      	b.n	80028a6 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80028a0:	e001      	b.n	80028a6 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
 80028a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	50040300 	.word	0x50040300
 80028b4:	50040100 	.word	0x50040100
 80028b8:	50040000 	.word	0x50040000

080028bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	@ 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f4:	4882      	ldr	r0, [pc, #520]	@ (8002b00 <HAL_ADC_IRQHandler+0x228>)
 80028f6:	f7ff fc97 	bl	8002228 <LL_ADC_GetMultimode>
 80028fa:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d017      	beq.n	8002936 <HAL_ADC_IRQHandler+0x5e>
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d012      	beq.n	8002936 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fec9 	bl	80036c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2202      	movs	r2, #2
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <HAL_ADC_IRQHandler+0x72>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8083 	beq.w	8002a5c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d07d      	beq.n	8002a5c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fbb2 	bl	80020e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d062      	beq.n	8002a4e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5d      	ldr	r2, [pc, #372]	@ (8002b04 <HAL_ADC_IRQHandler+0x22c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d002      	beq.n	8002998 <HAL_ADC_IRQHandler+0xc0>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	e000      	b.n	800299a <HAL_ADC_IRQHandler+0xc2>
 8002998:	4b5b      	ldr	r3, [pc, #364]	@ (8002b08 <HAL_ADC_IRQHandler+0x230>)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	4293      	cmp	r3, r2
 80029a0:	d008      	beq.n	80029b4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d002      	beq.n	80029b4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b09      	cmp	r3, #9
 80029b2:	d104      	bne.n	80029be <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	e00c      	b.n	80029d8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a50      	ldr	r2, [pc, #320]	@ (8002b04 <HAL_ADC_IRQHandler+0x22c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d002      	beq.n	80029ce <HAL_ADC_IRQHandler+0xf6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	e000      	b.n	80029d0 <HAL_ADC_IRQHandler+0xf8>
 80029ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002b08 <HAL_ADC_IRQHandler+0x230>)
 80029d0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d135      	bne.n	8002a4e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d12e      	bne.n	8002a4e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fcbc 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11a      	bne.n	8002a36 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 020c 	bic.w	r2, r2, #12
 8002a0e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d112      	bne.n	8002a4e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a34:	e00b      	b.n	8002a4e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe fe8c 	bl	800176c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	220c      	movs	r2, #12
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <HAL_ADC_IRQHandler+0x198>
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10b      	bne.n	8002a88 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 809f 	beq.w	8002bba <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8099 	beq.w	8002bba <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a98:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fb5d 	bl	8002164 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002aaa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fb18 	bl	80020e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ab6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a11      	ldr	r2, [pc, #68]	@ (8002b04 <HAL_ADC_IRQHandler+0x22c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d002      	beq.n	8002ac8 <HAL_ADC_IRQHandler+0x1f0>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	e000      	b.n	8002aca <HAL_ADC_IRQHandler+0x1f2>
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <HAL_ADC_IRQHandler+0x230>)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d008      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d002      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b07      	cmp	r3, #7
 8002ae2:	d104      	bne.n	8002aee <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	e013      	b.n	8002b16 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a04      	ldr	r2, [pc, #16]	@ (8002b04 <HAL_ADC_IRQHandler+0x22c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d009      	beq.n	8002b0c <HAL_ADC_IRQHandler+0x234>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	e007      	b.n	8002b0e <HAL_ADC_IRQHandler+0x236>
 8002afe:	bf00      	nop
 8002b00:	50040300 	.word	0x50040300
 8002b04:	50040100 	.word	0x50040100
 8002b08:	50040000 	.word	0x50040000
 8002b0c:	4b7d      	ldr	r3, [pc, #500]	@ (8002d04 <HAL_ADC_IRQHandler+0x42c>)
 8002b0e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d047      	beq.n	8002bac <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_ADC_IRQHandler+0x25e>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d03f      	beq.n	8002bac <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d13a      	bne.n	8002bac <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b40:	2b40      	cmp	r3, #64	@ 0x40
 8002b42:	d133      	bne.n	8002bac <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d12e      	bne.n	8002bac <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fc20 	bl	8002398 <LL_ADC_INJ_IsConversionOngoing>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11a      	bne.n	8002b94 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b6c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d112      	bne.n	8002bac <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b92:	e00b      	b.n	8002bac <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b98:	f043 0210 	orr.w	r2, r3, #16
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fd5f 	bl	8003670 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2260      	movs	r2, #96	@ 0x60
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d011      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x310>
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00c      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f896 	bl	8002d0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2280      	movs	r2, #128	@ 0x80
 8002be6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d012      	beq.n	8002c18 <HAL_ADC_IRQHandler+0x340>
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c00:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fd45 	bl	8003698 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d012      	beq.n	8002c48 <HAL_ADC_IRQHandler+0x370>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fd37 	bl	80036ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d036      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x3e8>
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d031      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002c64:	2301      	movs	r3, #1
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c68:	e014      	b.n	8002c94 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c70:	4825      	ldr	r0, [pc, #148]	@ (8002d08 <HAL_ADC_IRQHandler+0x430>)
 8002c72:	f7ff fae7 	bl	8002244 <LL_ADC_GetMultiDMATransfer>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00b      	beq.n	8002c94 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c80:	e008      	b.n	8002c94 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002c90:	2301      	movs	r3, #1
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d10e      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	f043 0202 	orr.w	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f834 	bl	8002d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d018      	beq.n	8002cfc <HAL_ADC_IRQHandler+0x424>
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce4:	f043 0208 	orr.w	r2, r3, #8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cf4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fcc4 	bl	8003684 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002cfc:	bf00      	nop
 8002cfe:	3728      	adds	r7, #40	@ 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	50040000 	.word	0x50040000
 8002d08:	50040300 	.word	0x50040300

08002d0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b0b6      	sub	sp, #216	@ 0xd8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x22>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e3c9      	b.n	80034ea <HAL_ADC_ConfigChannel+0x7b6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fb05 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 83aa 	bne.w	80034c4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d824      	bhi.n	8002dca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	3b02      	subs	r3, #2
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d81b      	bhi.n	8002dc2 <HAL_ADC_ConfigChannel+0x8e>
 8002d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <HAL_ADC_ConfigChannel+0x5c>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002da1 	.word	0x08002da1
 8002d94:	08002da9 	.word	0x08002da9
 8002d98:	08002db1 	.word	0x08002db1
 8002d9c:	08002db9 	.word	0x08002db9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002da0:	230c      	movs	r3, #12
 8002da2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002da6:	e010      	b.n	8002dca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002da8:	2312      	movs	r3, #18
 8002daa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dae:	e00c      	b.n	8002dca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002db0:	2318      	movs	r3, #24
 8002db2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002db6:	e008      	b.n	8002dca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002db8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dc8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002dd8:	f7ff f998 	bl	800210c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fac6 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 8002de6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fad2 	bl	8002398 <LL_ADC_INJ_IsConversionOngoing>
 8002df4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002df8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 81a4 	bne.w	800314a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 819f 	bne.w	800314a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f7ff f9b6 	bl	800218a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d00a      	beq.n	8002e56 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6919      	ldr	r1, [r3, #16]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e50:	f7ff f8f4 	bl	800203c <LL_ADC_SetOffset>
 8002e54:	e179      	b.n	800314a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff f911 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10a      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x14e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f906 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	0e9b      	lsrs	r3, r3, #26
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	e01e      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x18c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff f8fb 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ea8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e004      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1a4>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	e018      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x1d6>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002eec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002ef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e004      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d106      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f8ca 	bl	80020b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f8ae 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x214>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f8a3 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	f003 021f 	and.w	r2, r3, #31
 8002f46:	e01e      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x252>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f898 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e004      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x26a>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	0e9b      	lsrs	r3, r3, #26
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	e018      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x29c>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002fba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	e004      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d106      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff f867 	bl	80020b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff f84b 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <HAL_ADC_ConfigChannel+0x2da>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff f840 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	0e9b      	lsrs	r3, r3, #26
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	e01e      	b.n	800304c <HAL_ADC_ConfigChannel+0x318>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff f835 	bl	8002084 <LL_ADC_GetOffsetChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800302c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e004      	b.n	800304a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x330>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	e014      	b.n	800308e <HAL_ADC_ConfigChannel+0x35a>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003072:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003074:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003078:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003080:	2320      	movs	r3, #32
 8003082:	e004      	b.n	800308e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003084:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800308e:	429a      	cmp	r2, r3
 8003090:	d106      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	2102      	movs	r1, #2
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f808 	bl	80020b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2103      	movs	r1, #3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe ffec 	bl	8002084 <LL_ADC_GetOffsetChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x398>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2103      	movs	r1, #3
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe ffe1 	bl	8002084 <LL_ADC_GetOffsetChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	0e9b      	lsrs	r3, r3, #26
 80030c6:	f003 021f 	and.w	r2, r3, #31
 80030ca:	e017      	b.n	80030fc <HAL_ADC_ConfigChannel+0x3c8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2103      	movs	r1, #3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe ffd6 	bl	8002084 <LL_ADC_GetOffsetChannel>
 80030d8:	4603      	mov	r3, r0
 80030da:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80030e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e003      	b.n	80030fa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80030f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x3e0>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	0e9b      	lsrs	r3, r3, #26
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	e011      	b.n	8003138 <HAL_ADC_ConfigChannel+0x404>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003124:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003126:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e003      	b.n	8003138 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003130:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003138:	429a      	cmp	r2, r3
 800313a:	d106      	bne.n	800314a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	2103      	movs	r1, #3
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe ffb3 	bl	80020b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f8e8 	bl	8002324 <LL_ADC_IsEnabled>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 8140 	bne.w	80033dc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	461a      	mov	r2, r3
 800316a:	f7ff f839 	bl	80021e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4a8f      	ldr	r2, [pc, #572]	@ (80033b0 <HAL_ADC_ConfigChannel+0x67c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	f040 8131 	bne.w	80033dc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10b      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x46e>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	0e9b      	lsrs	r3, r3, #26
 8003190:	3301      	adds	r3, #1
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b09      	cmp	r3, #9
 8003198:	bf94      	ite	ls
 800319a:	2301      	movls	r3, #1
 800319c:	2300      	movhi	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	e019      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x4a2>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80031b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80031b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80031be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	bf94      	ite	ls
 80031d0:	2301      	movls	r3, #1
 80031d2:	2300      	movhi	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d079      	beq.n	80032ce <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x4c2>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0e9b      	lsrs	r3, r3, #26
 80031ec:	3301      	adds	r3, #1
 80031ee:	069b      	lsls	r3, r3, #26
 80031f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031f4:	e015      	b.n	8003222 <HAL_ADC_ConfigChannel+0x4ee>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003206:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e003      	b.n	800321a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	3301      	adds	r3, #1
 800321c:	069b      	lsls	r3, r3, #26
 800321e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x50e>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	0e9b      	lsrs	r3, r3, #26
 8003234:	3301      	adds	r3, #1
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2101      	movs	r1, #1
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	e017      	b.n	8003272 <HAL_ADC_ConfigChannel+0x53e>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003252:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800325a:	2320      	movs	r3, #32
 800325c:	e003      	b.n	8003266 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800325e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	ea42 0103 	orr.w	r1, r2, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x564>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	3301      	adds	r3, #1
 800328a:	f003 021f 	and.w	r2, r3, #31
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	051b      	lsls	r3, r3, #20
 8003296:	e018      	b.n	80032ca <HAL_ADC_ConfigChannel+0x596>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80032b0:	2320      	movs	r3, #32
 80032b2:	e003      	b.n	80032bc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80032b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f003 021f 	and.w	r2, r3, #31
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ca:	430b      	orrs	r3, r1
 80032cc:	e081      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x5b6>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	3301      	adds	r3, #1
 80032e2:	069b      	lsls	r3, r3, #26
 80032e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032e8:	e015      	b.n	8003316 <HAL_ADC_ConfigChannel+0x5e2>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003302:	2320      	movs	r3, #32
 8003304:	e003      	b.n	800330e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	3301      	adds	r3, #1
 8003310:	069b      	lsls	r3, r3, #26
 8003312:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x602>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	3301      	adds	r3, #1
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	e017      	b.n	8003366 <HAL_ADC_ConfigChannel+0x632>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	61bb      	str	r3, [r7, #24]
  return result;
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800334e:	2320      	movs	r3, #32
 8003350:	e003      	b.n	800335a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	3301      	adds	r3, #1
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2101      	movs	r1, #1
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	ea42 0103 	orr.w	r1, r2, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x65e>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	0e9b      	lsrs	r3, r3, #26
 800337c:	3301      	adds	r3, #1
 800337e:	f003 021f 	and.w	r2, r3, #31
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	3b1e      	subs	r3, #30
 800338a:	051b      	lsls	r3, r3, #20
 800338c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003390:	e01e      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x69c>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	60fb      	str	r3, [r7, #12]
  return result;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d104      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e006      	b.n	80033bc <HAL_ADC_ConfigChannel+0x688>
 80033ae:	bf00      	nop
 80033b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f003 021f 	and.w	r2, r3, #31
 80033c2:	4613      	mov	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	3b1e      	subs	r3, #30
 80033ca:	051b      	lsls	r3, r3, #20
 80033cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d6:	4619      	mov	r1, r3
 80033d8:	f7fe fed7 	bl	800218a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d07a      	beq.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033e8:	4843      	ldr	r0, [pc, #268]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80033ea:	f7fe fe19 	bl	8002020 <LL_ADC_GetCommonPathInternalCh>
 80033ee:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a41      	ldr	r2, [pc, #260]	@ (80034fc <HAL_ADC_ConfigChannel+0x7c8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d12c      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d126      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a3c      	ldr	r2, [pc, #240]	@ (8003500 <HAL_ADC_ConfigChannel+0x7cc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_ADC_ConfigChannel+0x6e8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a3b      	ldr	r2, [pc, #236]	@ (8003504 <HAL_ADC_ConfigChannel+0x7d0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d15d      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800341c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003420:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003424:	4619      	mov	r1, r3
 8003426:	4834      	ldr	r0, [pc, #208]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003428:	f7fe fde7 	bl	8001ffa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800342c:	4b36      	ldr	r3, [pc, #216]	@ (8003508 <HAL_ADC_ConfigChannel+0x7d4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	4a36      	ldr	r2, [pc, #216]	@ (800350c <HAL_ADC_ConfigChannel+0x7d8>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003446:	e002      	b.n	800344e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	3b01      	subs	r3, #1
 800344c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f9      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003454:	e040      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2d      	ldr	r2, [pc, #180]	@ (8003510 <HAL_ADC_ConfigChannel+0x7dc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d118      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003460:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d112      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a23      	ldr	r2, [pc, #140]	@ (8003500 <HAL_ADC_ConfigChannel+0x7cc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_ADC_ConfigChannel+0x74c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a22      	ldr	r2, [pc, #136]	@ (8003504 <HAL_ADC_ConfigChannel+0x7d0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d12d      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003488:	4619      	mov	r1, r3
 800348a:	481b      	ldr	r0, [pc, #108]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7c4>)
 800348c:	f7fe fdb5 	bl	8001ffa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003490:	e024      	b.n	80034dc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_ADC_ConfigChannel+0x7e0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d120      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800349c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11a      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <HAL_ADC_ConfigChannel+0x7cc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d115      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034ba:	4619      	mov	r1, r3
 80034bc:	480e      	ldr	r0, [pc, #56]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80034be:	f7fe fd9c 	bl	8001ffa <LL_ADC_SetCommonPathInternalCh>
 80034c2:	e00c      	b.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80034d6:	e002      	b.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034d8:	bf00      	nop
 80034da:	e000      	b.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	37d8      	adds	r7, #216	@ 0xd8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	80080000 	.word	0x80080000
 80034f8:	50040300 	.word	0x50040300
 80034fc:	c7520000 	.word	0xc7520000
 8003500:	50040000 	.word	0x50040000
 8003504:	50040200 	.word	0x50040200
 8003508:	20000000 	.word	0x20000000
 800350c:	053e2d63 	.word	0x053e2d63
 8003510:	cb840000 	.word	0xcb840000
 8003514:	80000001 	.word	0x80000001

08003518 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fefb 	bl	8002324 <LL_ADC_IsEnabled>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d169      	bne.n	8003608 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <ADC_Enable+0xfc>)
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00d      	beq.n	800355e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003546:	f043 0210 	orr.w	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e055      	b.n	800360a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe feca 	bl	80022fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003568:	482b      	ldr	r0, [pc, #172]	@ (8003618 <ADC_Enable+0x100>)
 800356a:	f7fe fd59 	bl	8002020 <LL_ADC_GetCommonPathInternalCh>
 800356e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003570:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003578:	4b28      	ldr	r3, [pc, #160]	@ (800361c <ADC_Enable+0x104>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	4a28      	ldr	r2, [pc, #160]	@ (8003620 <ADC_Enable+0x108>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003592:	e002      	b.n	800359a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3b01      	subs	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f9      	bne.n	8003594 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035a0:	f7fe fd0c 	bl	8001fbc <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035a6:	e028      	b.n	80035fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe feb9 	bl	8002324 <LL_ADC_IsEnabled>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fe9d 	bl	80022fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035c2:	f7fe fcfb 	bl	8001fbc <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d914      	bls.n	80035fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d00d      	beq.n	80035fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	f043 0210 	orr.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e007      	b.n	800360a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d1cf      	bne.n	80035a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	8000003f 	.word	0x8000003f
 8003618:	50040300 	.word	0x50040300
 800361c:	20000000 	.word	0x20000000
 8003620:	053e2d63 	.word	0x053e2d63

08003624 <LL_ADC_IsEnabled>:
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <LL_ADC_IsEnabled+0x18>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <LL_ADC_IsEnabled+0x1a>
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_ADC_REG_IsConversionOngoing>:
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d101      	bne.n	8003662 <LL_ADC_REG_IsConversionOngoing+0x18>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b09f      	sub	sp, #124	@ 0x7c
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e093      	b.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80036fa:	2300      	movs	r3, #0
 80036fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80036fe:	2300      	movs	r3, #0
 8003700:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a47      	ldr	r2, [pc, #284]	@ (8003824 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d102      	bne.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800370c:	4b46      	ldr	r3, [pc, #280]	@ (8003828 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	e001      	b.n	8003716 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e072      	b.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff87 	bl	800364a <LL_ADC_REG_IsConversionOngoing>
 800373c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff81 	bl	800364a <LL_ADC_REG_IsConversionOngoing>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d154      	bne.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800374e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003750:	2b00      	cmp	r3, #0
 8003752:	d151      	bne.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003754:	4b35      	ldr	r3, [pc, #212]	@ (800382c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003756:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d02c      	beq.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003772:	035b      	lsls	r3, r3, #13
 8003774:	430b      	orrs	r3, r1
 8003776:	431a      	orrs	r2, r3
 8003778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800377a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800377c:	4829      	ldr	r0, [pc, #164]	@ (8003824 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800377e:	f7ff ff51 	bl	8003624 <LL_ADC_IsEnabled>
 8003782:	4604      	mov	r4, r0
 8003784:	4828      	ldr	r0, [pc, #160]	@ (8003828 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003786:	f7ff ff4d 	bl	8003624 <LL_ADC_IsEnabled>
 800378a:	4603      	mov	r3, r0
 800378c:	431c      	orrs	r4, r3
 800378e:	4828      	ldr	r0, [pc, #160]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003790:	f7ff ff48 	bl	8003624 <LL_ADC_IsEnabled>
 8003794:	4603      	mov	r3, r0
 8003796:	4323      	orrs	r3, r4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d137      	bne.n	800380c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800379c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037a4:	f023 030f 	bic.w	r3, r3, #15
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	6811      	ldr	r1, [r2, #0]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	6892      	ldr	r2, [r2, #8]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	431a      	orrs	r2, r3
 80037b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037b6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037b8:	e028      	b.n	800380c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037c6:	4817      	ldr	r0, [pc, #92]	@ (8003824 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037c8:	f7ff ff2c 	bl	8003624 <LL_ADC_IsEnabled>
 80037cc:	4604      	mov	r4, r0
 80037ce:	4816      	ldr	r0, [pc, #88]	@ (8003828 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037d0:	f7ff ff28 	bl	8003624 <LL_ADC_IsEnabled>
 80037d4:	4603      	mov	r3, r0
 80037d6:	431c      	orrs	r4, r3
 80037d8:	4815      	ldr	r0, [pc, #84]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80037da:	f7ff ff23 	bl	8003624 <LL_ADC_IsEnabled>
 80037de:	4603      	mov	r3, r0
 80037e0:	4323      	orrs	r3, r4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d112      	bne.n	800380c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037ee:	f023 030f 	bic.w	r3, r3, #15
 80037f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037f6:	e009      	b.n	800380c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800380a:	e000      	b.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800380c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003816:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800381a:	4618      	mov	r0, r3
 800381c:	377c      	adds	r7, #124	@ 0x7c
 800381e:	46bd      	mov	sp, r7
 8003820:	bd90      	pop	{r4, r7, pc}
 8003822:	bf00      	nop
 8003824:	50040000 	.word	0x50040000
 8003828:	50040100 	.word	0x50040100
 800382c:	50040300 	.word	0x50040300
 8003830:	50040200 	.word	0x50040200

08003834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003844:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800385c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003866:	4a04      	ldr	r2, [pc, #16]	@ (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	60d3      	str	r3, [r2, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003880:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <__NVIC_GetPriorityGrouping+0x18>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 0307 	and.w	r3, r3, #7
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db0b      	blt.n	80038c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	4907      	ldr	r1, [pc, #28]	@ (80038d0 <__NVIC_EnableIRQ+0x38>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2001      	movs	r0, #1
 80038ba:	fa00 f202 	lsl.w	r2, r0, r2
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	@ (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	@ (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	@ 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	@ 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039a0:	d301      	bcc.n	80039a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a2:	2301      	movs	r3, #1
 80039a4:	e00f      	b.n	80039c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <SysTick_Config+0x40>)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ae:	210f      	movs	r1, #15
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	f7ff ff8e 	bl	80038d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b8:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <SysTick_Config+0x40>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039be:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <SysTick_Config+0x40>)
 80039c0:	2207      	movs	r2, #7
 80039c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	e000e010 	.word	0xe000e010

080039d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff29 	bl	8003834 <__NVIC_SetPriorityGrouping>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4603      	mov	r3, r0
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039fc:	f7ff ff3e 	bl	800387c <__NVIC_GetPriorityGrouping>
 8003a00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	6978      	ldr	r0, [r7, #20]
 8003a08:	f7ff ff8e 	bl	8003928 <NVIC_EncodePriority>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff5d 	bl	80038d4 <__NVIC_SetPriority>
}
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff31 	bl	8003898 <__NVIC_EnableIRQ>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ffa2 	bl	8003990 <SysTick_Config>
 8003a4c:	4603      	mov	r3, r0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d008      	beq.n	8003a80 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2204      	movs	r2, #4
 8003a72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e022      	b.n	8003ac6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 020e 	bic.w	r2, r2, #14
 8003a8e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa4:	f003 021c 	and.w	r2, r3, #28
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	2101      	movs	r1, #1
 8003aae:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d005      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2204      	movs	r2, #4
 8003aee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	e029      	b.n	8003b4a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 020e 	bic.w	r2, r2, #14
 8003b04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0201 	bic.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f003 021c 	and.w	r2, r3, #28
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	2101      	movs	r1, #1
 8003b24:	fa01 f202 	lsl.w	r2, r1, r2
 8003b28:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
    }
  }
  return status;
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b62:	e17f      	b.n	8003e64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2101      	movs	r1, #1
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	4013      	ands	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8171 	beq.w	8003e5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d005      	beq.n	8003b94 <HAL_GPIO_Init+0x40>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d130      	bne.n	8003bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bca:	2201      	movs	r2, #1
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 0201 	and.w	r2, r3, #1
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d118      	bne.n	8003c34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c08:	2201      	movs	r2, #1
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4013      	ands	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	08db      	lsrs	r3, r3, #3
 8003c1e:	f003 0201 	and.w	r2, r3, #1
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d017      	beq.n	8003c70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d123      	bne.n	8003cc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	08da      	lsrs	r2, r3, #3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3208      	adds	r2, #8
 8003c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	220f      	movs	r2, #15
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	08da      	lsrs	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3208      	adds	r2, #8
 8003cbe:	6939      	ldr	r1, [r7, #16]
 8003cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0203 	and.w	r2, r3, #3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80ac 	beq.w	8003e5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d06:	4b5f      	ldr	r3, [pc, #380]	@ (8003e84 <HAL_GPIO_Init+0x330>)
 8003d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0a:	4a5e      	ldr	r2, [pc, #376]	@ (8003e84 <HAL_GPIO_Init+0x330>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d12:	4b5c      	ldr	r3, [pc, #368]	@ (8003e84 <HAL_GPIO_Init+0x330>)
 8003d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d1e:	4a5a      	ldr	r2, [pc, #360]	@ (8003e88 <HAL_GPIO_Init+0x334>)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	089b      	lsrs	r3, r3, #2
 8003d24:	3302      	adds	r3, #2
 8003d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	220f      	movs	r2, #15
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d48:	d025      	beq.n	8003d96 <HAL_GPIO_Init+0x242>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8003e8c <HAL_GPIO_Init+0x338>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01f      	beq.n	8003d92 <HAL_GPIO_Init+0x23e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a4e      	ldr	r2, [pc, #312]	@ (8003e90 <HAL_GPIO_Init+0x33c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d019      	beq.n	8003d8e <HAL_GPIO_Init+0x23a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a4d      	ldr	r2, [pc, #308]	@ (8003e94 <HAL_GPIO_Init+0x340>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_GPIO_Init+0x236>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a4c      	ldr	r2, [pc, #304]	@ (8003e98 <HAL_GPIO_Init+0x344>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00d      	beq.n	8003d86 <HAL_GPIO_Init+0x232>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e9c <HAL_GPIO_Init+0x348>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <HAL_GPIO_Init+0x22e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea0 <HAL_GPIO_Init+0x34c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_GPIO_Init+0x22a>
 8003d7a:	2306      	movs	r3, #6
 8003d7c:	e00c      	b.n	8003d98 <HAL_GPIO_Init+0x244>
 8003d7e:	2307      	movs	r3, #7
 8003d80:	e00a      	b.n	8003d98 <HAL_GPIO_Init+0x244>
 8003d82:	2305      	movs	r3, #5
 8003d84:	e008      	b.n	8003d98 <HAL_GPIO_Init+0x244>
 8003d86:	2304      	movs	r3, #4
 8003d88:	e006      	b.n	8003d98 <HAL_GPIO_Init+0x244>
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e004      	b.n	8003d98 <HAL_GPIO_Init+0x244>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e002      	b.n	8003d98 <HAL_GPIO_Init+0x244>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_GPIO_Init+0x244>
 8003d96:	2300      	movs	r3, #0
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	f002 0203 	and.w	r2, r2, #3
 8003d9e:	0092      	lsls	r2, r2, #2
 8003da0:	4093      	lsls	r3, r2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003da8:	4937      	ldr	r1, [pc, #220]	@ (8003e88 <HAL_GPIO_Init+0x334>)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	089b      	lsrs	r3, r3, #2
 8003dae:	3302      	adds	r3, #2
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003db6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea4 <HAL_GPIO_Init+0x350>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dda:	4a32      	ldr	r2, [pc, #200]	@ (8003ea4 <HAL_GPIO_Init+0x350>)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003de0:	4b30      	ldr	r3, [pc, #192]	@ (8003ea4 <HAL_GPIO_Init+0x350>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e04:	4a27      	ldr	r2, [pc, #156]	@ (8003ea4 <HAL_GPIO_Init+0x350>)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <HAL_GPIO_Init+0x350>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea4 <HAL_GPIO_Init+0x350>)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea4 <HAL_GPIO_Init+0x350>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e58:	4a12      	ldr	r2, [pc, #72]	@ (8003ea4 <HAL_GPIO_Init+0x350>)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	3301      	adds	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f47f ae78 	bne.w	8003b64 <HAL_GPIO_Init+0x10>
  }
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	48000400 	.word	0x48000400
 8003e90:	48000800 	.word	0x48000800
 8003e94:	48000c00 	.word	0x48000c00
 8003e98:	48001000 	.word	0x48001000
 8003e9c:	48001400 	.word	0x48001400
 8003ea0:	48001800 	.word	0x48001800
 8003ea4:	40010400 	.word	0x40010400

08003ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	807b      	strh	r3, [r7, #2]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb8:	787b      	ldrb	r3, [r7, #1]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec4:	e002      	b.n	8003ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ec6:	887a      	ldrh	r2, [r7, #2]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003edc:	4b04      	ldr	r3, [pc, #16]	@ (8003ef0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40007000 	.word	0x40007000

08003ef4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f02:	d130      	bne.n	8003f66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f04:	4b23      	ldr	r3, [pc, #140]	@ (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f10:	d038      	beq.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f12:	4b20      	ldr	r3, [pc, #128]	@ (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f22:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2232      	movs	r2, #50	@ 0x32
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	0c9b      	lsrs	r3, r3, #18
 8003f34:	3301      	adds	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f38:	e002      	b.n	8003f40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f40:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4c:	d102      	bne.n	8003f54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f2      	bne.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f60:	d110      	bne.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e00f      	b.n	8003f86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f66:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f72:	d007      	beq.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f74:	4b07      	ldr	r3, [pc, #28]	@ (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f7c:	4a05      	ldr	r2, [pc, #20]	@ (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40007000 	.word	0x40007000
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	431bde83 	.word	0x431bde83

08003fa0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e3ca      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb2:	4b97      	ldr	r3, [pc, #604]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fbc:	4b94      	ldr	r3, [pc, #592]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80e4 	beq.w	800419c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_RCC_OscConfig+0x4a>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b0c      	cmp	r3, #12
 8003fde:	f040 808b 	bne.w	80040f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f040 8087 	bne.w	80040f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fea:	4b89      	ldr	r3, [pc, #548]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <HAL_RCC_OscConfig+0x62>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e3a2      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1a      	ldr	r2, [r3, #32]
 8004006:	4b82      	ldr	r3, [pc, #520]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <HAL_RCC_OscConfig+0x7c>
 8004012:	4b7f      	ldr	r3, [pc, #508]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800401a:	e005      	b.n	8004028 <HAL_RCC_OscConfig+0x88>
 800401c:	4b7c      	ldr	r3, [pc, #496]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 800401e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004028:	4293      	cmp	r3, r2
 800402a:	d223      	bcs.n	8004074 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fd55 	bl	8004ae0 <RCC_SetFlashLatencyFromMSIRange>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e383      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004040:	4b73      	ldr	r3, [pc, #460]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a72      	ldr	r2, [pc, #456]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004046:	f043 0308 	orr.w	r3, r3, #8
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	4b70      	ldr	r3, [pc, #448]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	496d      	ldr	r1, [pc, #436]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800405e:	4b6c      	ldr	r3, [pc, #432]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	4968      	ldr	r1, [pc, #416]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 800406e:	4313      	orrs	r3, r2
 8004070:	604b      	str	r3, [r1, #4]
 8004072:	e025      	b.n	80040c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004074:	4b66      	ldr	r3, [pc, #408]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a65      	ldr	r2, [pc, #404]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 800407a:	f043 0308 	orr.w	r3, r3, #8
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	4b63      	ldr	r3, [pc, #396]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4960      	ldr	r1, [pc, #384]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004092:	4b5f      	ldr	r3, [pc, #380]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	495b      	ldr	r1, [pc, #364]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fd15 	bl	8004ae0 <RCC_SetFlashLatencyFromMSIRange>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e343      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040c0:	f000 fc4a 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b52      	ldr	r3, [pc, #328]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	4950      	ldr	r1, [pc, #320]	@ (8004214 <HAL_RCC_OscConfig+0x274>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
 80040dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004218 <HAL_RCC_OscConfig+0x278>)
 80040de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040e0:	4b4e      	ldr	r3, [pc, #312]	@ (800421c <HAL_RCC_OscConfig+0x27c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fd ff19 	bl	8001f1c <HAL_InitTick>
 80040ea:	4603      	mov	r3, r0
 80040ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d052      	beq.n	800419a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	e327      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d032      	beq.n	8004166 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004100:	4b43      	ldr	r3, [pc, #268]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a42      	ldr	r2, [pc, #264]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800410c:	f7fd ff56 	bl	8001fbc <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004114:	f7fd ff52 	bl	8001fbc <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e310      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004126:	4b3a      	ldr	r3, [pc, #232]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004132:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a36      	ldr	r2, [pc, #216]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004138:	f043 0308 	orr.w	r3, r3, #8
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	4b34      	ldr	r3, [pc, #208]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	4931      	ldr	r1, [pc, #196]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 800414c:	4313      	orrs	r3, r2
 800414e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004150:	4b2f      	ldr	r3, [pc, #188]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	492c      	ldr	r1, [pc, #176]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]
 8004164:	e01a      	b.n	800419c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004166:	4b2a      	ldr	r3, [pc, #168]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a29      	ldr	r2, [pc, #164]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004172:	f7fd ff23 	bl	8001fbc <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800417a:	f7fd ff1f 	bl	8001fbc <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e2dd      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800418c:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x1da>
 8004198:	e000      	b.n	800419c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800419a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d074      	beq.n	8004292 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d005      	beq.n	80041ba <HAL_RCC_OscConfig+0x21a>
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d10e      	bne.n	80041d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d10b      	bne.n	80041d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ba:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d064      	beq.n	8004290 <HAL_RCC_OscConfig+0x2f0>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d160      	bne.n	8004290 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e2ba      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041da:	d106      	bne.n	80041ea <HAL_RCC_OscConfig+0x24a>
 80041dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 80041e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	e026      	b.n	8004238 <HAL_RCC_OscConfig+0x298>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041f2:	d115      	bne.n	8004220 <HAL_RCC_OscConfig+0x280>
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a05      	ldr	r2, [pc, #20]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 80041fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a02      	ldr	r2, [pc, #8]	@ (8004210 <HAL_RCC_OscConfig+0x270>)
 8004206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	e014      	b.n	8004238 <HAL_RCC_OscConfig+0x298>
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000
 8004214:	0800cbfc 	.word	0x0800cbfc
 8004218:	20000000 	.word	0x20000000
 800421c:	20000004 	.word	0x20000004
 8004220:	4ba0      	ldr	r3, [pc, #640]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a9f      	ldr	r2, [pc, #636]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b9d      	ldr	r3, [pc, #628]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a9c      	ldr	r2, [pc, #624]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fd febc 	bl	8001fbc <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004248:	f7fd feb8 	bl	8001fbc <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	@ 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e276      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800425a:	4b92      	ldr	r3, [pc, #584]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x2a8>
 8004266:	e014      	b.n	8004292 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd fea8 	bl	8001fbc <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fd fea4 	bl	8001fbc <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	@ 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e262      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004282:	4b88      	ldr	r3, [pc, #544]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x2d0>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d060      	beq.n	8004360 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_OscConfig+0x310>
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2b0c      	cmp	r3, #12
 80042a8:	d119      	bne.n	80042de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d116      	bne.n	80042de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b0:	4b7c      	ldr	r3, [pc, #496]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_OscConfig+0x328>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e23f      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c8:	4b76      	ldr	r3, [pc, #472]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	4973      	ldr	r1, [pc, #460]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042dc:	e040      	b.n	8004360 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d023      	beq.n	800432e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e6:	4b6f      	ldr	r3, [pc, #444]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6e      	ldr	r2, [pc, #440]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 80042ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fd fe63 	bl	8001fbc <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fa:	f7fd fe5f 	bl	8001fbc <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e21d      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800430c:	4b65      	ldr	r3, [pc, #404]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004318:	4b62      	ldr	r3, [pc, #392]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	061b      	lsls	r3, r3, #24
 8004326:	495f      	ldr	r1, [pc, #380]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
 800432c:	e018      	b.n	8004360 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800432e:	4b5d      	ldr	r3, [pc, #372]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a5c      	ldr	r2, [pc, #368]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fd fe3f 	bl	8001fbc <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004342:	f7fd fe3b 	bl	8001fbc <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1f9      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004354:	4b53      	ldr	r3, [pc, #332]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f0      	bne.n	8004342 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d03c      	beq.n	80043e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01c      	beq.n	80043ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004374:	4b4b      	ldr	r3, [pc, #300]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800437a:	4a4a      	ldr	r2, [pc, #296]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fd fe1a 	bl	8001fbc <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800438c:	f7fd fe16 	bl	8001fbc <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e1d4      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800439e:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 80043a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ef      	beq.n	800438c <HAL_RCC_OscConfig+0x3ec>
 80043ac:	e01b      	b.n	80043e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ae:	4b3d      	ldr	r3, [pc, #244]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 80043b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043b4:	4a3b      	ldr	r2, [pc, #236]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fd fdfd 	bl	8001fbc <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c6:	f7fd fdf9 	bl	8001fbc <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e1b7      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043d8:	4b32      	ldr	r3, [pc, #200]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 80043da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1ef      	bne.n	80043c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80a6 	beq.w	8004540 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f4:	2300      	movs	r3, #0
 80043f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043f8:	4b2a      	ldr	r3, [pc, #168]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10d      	bne.n	8004420 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004404:	4b27      	ldr	r3, [pc, #156]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	4a26      	ldr	r2, [pc, #152]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 800440a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004410:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441c:	2301      	movs	r3, #1
 800441e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004420:	4b21      	ldr	r3, [pc, #132]	@ (80044a8 <HAL_RCC_OscConfig+0x508>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d118      	bne.n	800445e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800442c:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <HAL_RCC_OscConfig+0x508>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1d      	ldr	r2, [pc, #116]	@ (80044a8 <HAL_RCC_OscConfig+0x508>)
 8004432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004436:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004438:	f7fd fdc0 	bl	8001fbc <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004440:	f7fd fdbc 	bl	8001fbc <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e17a      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004452:	4b15      	ldr	r3, [pc, #84]	@ (80044a8 <HAL_RCC_OscConfig+0x508>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d108      	bne.n	8004478 <HAL_RCC_OscConfig+0x4d8>
 8004466:	4b0f      	ldr	r3, [pc, #60]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446c:	4a0d      	ldr	r2, [pc, #52]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004476:	e029      	b.n	80044cc <HAL_RCC_OscConfig+0x52c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b05      	cmp	r3, #5
 800447e:	d115      	bne.n	80044ac <HAL_RCC_OscConfig+0x50c>
 8004480:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004486:	4a07      	ldr	r2, [pc, #28]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004488:	f043 0304 	orr.w	r3, r3, #4
 800448c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004490:	4b04      	ldr	r3, [pc, #16]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004496:	4a03      	ldr	r2, [pc, #12]	@ (80044a4 <HAL_RCC_OscConfig+0x504>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044a0:	e014      	b.n	80044cc <HAL_RCC_OscConfig+0x52c>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40007000 	.word	0x40007000
 80044ac:	4b9c      	ldr	r3, [pc, #624]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b2:	4a9b      	ldr	r2, [pc, #620]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044bc:	4b98      	ldr	r3, [pc, #608]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c2:	4a97      	ldr	r2, [pc, #604]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80044c4:	f023 0304 	bic.w	r3, r3, #4
 80044c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d016      	beq.n	8004502 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fd fd72 	bl	8001fbc <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044dc:	f7fd fd6e 	bl	8001fbc <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e12a      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0ed      	beq.n	80044dc <HAL_RCC_OscConfig+0x53c>
 8004500:	e015      	b.n	800452e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004502:	f7fd fd5b 	bl	8001fbc <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004508:	e00a      	b.n	8004520 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450a:	f7fd fd57 	bl	8001fbc <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004518:	4293      	cmp	r3, r2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e113      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004520:	4b7f      	ldr	r3, [pc, #508]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ed      	bne.n	800450a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800452e:	7ffb      	ldrb	r3, [r7, #31]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d105      	bne.n	8004540 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004534:	4b7a      	ldr	r3, [pc, #488]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004538:	4a79      	ldr	r2, [pc, #484]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 800453a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800453e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80fe 	beq.w	8004746 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454e:	2b02      	cmp	r3, #2
 8004550:	f040 80d0 	bne.w	80046f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004554:	4b72      	ldr	r3, [pc, #456]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f003 0203 	and.w	r2, r3, #3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004564:	429a      	cmp	r2, r3
 8004566:	d130      	bne.n	80045ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	3b01      	subs	r3, #1
 8004574:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004576:	429a      	cmp	r2, r3
 8004578:	d127      	bne.n	80045ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004584:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d11f      	bne.n	80045ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004594:	2a07      	cmp	r2, #7
 8004596:	bf14      	ite	ne
 8004598:	2201      	movne	r2, #1
 800459a:	2200      	moveq	r2, #0
 800459c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800459e:	4293      	cmp	r3, r2
 80045a0:	d113      	bne.n	80045ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	3b01      	subs	r3, #1
 80045b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d109      	bne.n	80045ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d06e      	beq.n	80046a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	d069      	beq.n	80046a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045d0:	4b53      	ldr	r3, [pc, #332]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80045dc:	4b50      	ldr	r3, [pc, #320]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0ad      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80045f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045f8:	f7fd fce0 	bl	8001fbc <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004600:	f7fd fcdc 	bl	8001fbc <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e09a      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004612:	4b43      	ldr	r3, [pc, #268]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800461e:	4b40      	ldr	r3, [pc, #256]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	4b40      	ldr	r3, [pc, #256]	@ (8004724 <HAL_RCC_OscConfig+0x784>)
 8004624:	4013      	ands	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800462e:	3a01      	subs	r2, #1
 8004630:	0112      	lsls	r2, r2, #4
 8004632:	4311      	orrs	r1, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004638:	0212      	lsls	r2, r2, #8
 800463a:	4311      	orrs	r1, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004640:	0852      	lsrs	r2, r2, #1
 8004642:	3a01      	subs	r2, #1
 8004644:	0552      	lsls	r2, r2, #21
 8004646:	4311      	orrs	r1, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800464c:	0852      	lsrs	r2, r2, #1
 800464e:	3a01      	subs	r2, #1
 8004650:	0652      	lsls	r2, r2, #25
 8004652:	4311      	orrs	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004658:	0912      	lsrs	r2, r2, #4
 800465a:	0452      	lsls	r2, r2, #17
 800465c:	430a      	orrs	r2, r1
 800465e:	4930      	ldr	r1, [pc, #192]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004660:	4313      	orrs	r3, r2
 8004662:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004664:	4b2e      	ldr	r3, [pc, #184]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a2d      	ldr	r2, [pc, #180]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 800466a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004670:	4b2b      	ldr	r3, [pc, #172]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a2a      	ldr	r2, [pc, #168]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800467a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800467c:	f7fd fc9e 	bl	8001fbc <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004684:	f7fd fc9a 	bl	8001fbc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e058      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004696:	4b22      	ldr	r3, [pc, #136]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046a2:	e050      	b.n	8004746 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e04f      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d148      	bne.n	8004746 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a19      	ldr	r2, [pc, #100]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80046ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046c0:	4b17      	ldr	r3, [pc, #92]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a16      	ldr	r2, [pc, #88]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80046c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046cc:	f7fd fc76 	bl	8001fbc <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd fc72 	bl	8001fbc <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e030      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x734>
 80046f2:	e028      	b.n	8004746 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d023      	beq.n	8004742 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fa:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a08      	ldr	r2, [pc, #32]	@ (8004720 <HAL_RCC_OscConfig+0x780>)
 8004700:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fd fc59 	bl	8001fbc <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470c:	e00c      	b.n	8004728 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470e:	f7fd fc55 	bl	8001fbc <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d905      	bls.n	8004728 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e013      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
 8004720:	40021000 	.word	0x40021000
 8004724:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004728:	4b09      	ldr	r3, [pc, #36]	@ (8004750 <HAL_RCC_OscConfig+0x7b0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ec      	bne.n	800470e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004734:	4b06      	ldr	r3, [pc, #24]	@ (8004750 <HAL_RCC_OscConfig+0x7b0>)
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	4905      	ldr	r1, [pc, #20]	@ (8004750 <HAL_RCC_OscConfig+0x7b0>)
 800473a:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <HAL_RCC_OscConfig+0x7b4>)
 800473c:	4013      	ands	r3, r2
 800473e:	60cb      	str	r3, [r1, #12]
 8004740:	e001      	b.n	8004746 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000
 8004754:	feeefffc 	.word	0xfeeefffc

08004758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0e7      	b.n	800493c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800476c:	4b75      	ldr	r3, [pc, #468]	@ (8004944 <HAL_RCC_ClockConfig+0x1ec>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d910      	bls.n	800479c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b72      	ldr	r3, [pc, #456]	@ (8004944 <HAL_RCC_ClockConfig+0x1ec>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 0207 	bic.w	r2, r3, #7
 8004782:	4970      	ldr	r1, [pc, #448]	@ (8004944 <HAL_RCC_ClockConfig+0x1ec>)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b6e      	ldr	r3, [pc, #440]	@ (8004944 <HAL_RCC_ClockConfig+0x1ec>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0cf      	b.n	800493c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	4b66      	ldr	r3, [pc, #408]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d908      	bls.n	80047ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b8:	4b63      	ldr	r3, [pc, #396]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4960      	ldr	r1, [pc, #384]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d04c      	beq.n	8004870 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047de:	4b5a      	ldr	r3, [pc, #360]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d121      	bne.n	800482e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e0a6      	b.n	800493c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f6:	4b54      	ldr	r3, [pc, #336]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d115      	bne.n	800482e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e09a      	b.n	800493c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800480e:	4b4e      	ldr	r3, [pc, #312]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e08e      	b.n	800493c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481e:	4b4a      	ldr	r3, [pc, #296]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e086      	b.n	800493c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800482e:	4b46      	ldr	r3, [pc, #280]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f023 0203 	bic.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4943      	ldr	r1, [pc, #268]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 800483c:	4313      	orrs	r3, r2
 800483e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004840:	f7fd fbbc 	bl	8001fbc <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	e00a      	b.n	800485e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004848:	f7fd fbb8 	bl	8001fbc <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e06e      	b.n	800493c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	4b3a      	ldr	r3, [pc, #232]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 020c 	and.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	429a      	cmp	r2, r3
 800486e:	d1eb      	bne.n	8004848 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	4b31      	ldr	r3, [pc, #196]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004888:	429a      	cmp	r2, r3
 800488a:	d208      	bcs.n	800489e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b2e      	ldr	r3, [pc, #184]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	492b      	ldr	r1, [pc, #172]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800489e:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <HAL_RCC_ClockConfig+0x1ec>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d210      	bcs.n	80048ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ac:	4b25      	ldr	r3, [pc, #148]	@ (8004944 <HAL_RCC_ClockConfig+0x1ec>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f023 0207 	bic.w	r2, r3, #7
 80048b4:	4923      	ldr	r1, [pc, #140]	@ (8004944 <HAL_RCC_ClockConfig+0x1ec>)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048bc:	4b21      	ldr	r3, [pc, #132]	@ (8004944 <HAL_RCC_ClockConfig+0x1ec>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e036      	b.n	800493c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048da:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	4918      	ldr	r1, [pc, #96]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048f8:	4b13      	ldr	r3, [pc, #76]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4910      	ldr	r1, [pc, #64]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800490c:	f000 f824 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8004910:	4602      	mov	r2, r0
 8004912:	4b0d      	ldr	r3, [pc, #52]	@ (8004948 <HAL_RCC_ClockConfig+0x1f0>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	490b      	ldr	r1, [pc, #44]	@ (800494c <HAL_RCC_ClockConfig+0x1f4>)
 800491e:	5ccb      	ldrb	r3, [r1, r3]
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
 8004928:	4a09      	ldr	r2, [pc, #36]	@ (8004950 <HAL_RCC_ClockConfig+0x1f8>)
 800492a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800492c:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <HAL_RCC_ClockConfig+0x1fc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7fd faf3 	bl	8001f1c <HAL_InitTick>
 8004936:	4603      	mov	r3, r0
 8004938:	72fb      	strb	r3, [r7, #11]

  return status;
 800493a:	7afb      	ldrb	r3, [r7, #11]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40022000 	.word	0x40022000
 8004948:	40021000 	.word	0x40021000
 800494c:	0800cbfc 	.word	0x0800cbfc
 8004950:	20000000 	.word	0x20000000
 8004954:	20000004 	.word	0x20000004

08004958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	b480      	push	{r7}
 800495a:	b089      	sub	sp, #36	@ 0x24
 800495c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004966:	4b3e      	ldr	r3, [pc, #248]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004970:	4b3b      	ldr	r3, [pc, #236]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x34>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b0c      	cmp	r3, #12
 8004984:	d121      	bne.n	80049ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d11e      	bne.n	80049ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800498c:	4b34      	ldr	r3, [pc, #208]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d107      	bne.n	80049a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004998:	4b31      	ldr	r3, [pc, #196]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800499a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	e005      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10d      	bne.n	80049e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d102      	bne.n	80049d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049d0:	4b25      	ldr	r3, [pc, #148]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x110>)
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	e004      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049dc:	4b23      	ldr	r3, [pc, #140]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x114>)
 80049de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d134      	bne.n	8004a50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0xa6>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d003      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0xac>
 80049fc:	e005      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a00:	617b      	str	r3, [r7, #20]
      break;
 8004a02:	e005      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a04:	4b19      	ldr	r3, [pc, #100]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x114>)
 8004a06:	617b      	str	r3, [r7, #20]
      break;
 8004a08:	e002      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	617b      	str	r3, [r7, #20]
      break;
 8004a0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a10:	4b13      	ldr	r3, [pc, #76]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a1e:	4b10      	ldr	r3, [pc, #64]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	fb03 f202 	mul.w	r2, r3, r2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a36:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	0e5b      	lsrs	r3, r3, #25
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	3301      	adds	r3, #1
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a50:	69bb      	ldr	r3, [r7, #24]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3724      	adds	r7, #36	@ 0x24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40021000 	.word	0x40021000
 8004a64:	0800cc14 	.word	0x0800cc14
 8004a68:	00f42400 	.word	0x00f42400
 8004a6c:	007a1200 	.word	0x007a1200

08004a70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a74:	4b03      	ldr	r3, [pc, #12]	@ (8004a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000000 	.word	0x20000000

08004a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a8c:	f7ff fff0 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4904      	ldr	r1, [pc, #16]	@ (8004ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	0800cc0c 	.word	0x0800cc0c

08004ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ab8:	f7ff ffda 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	0adb      	lsrs	r3, r3, #11
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	4904      	ldr	r1, [pc, #16]	@ (8004adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004aca:	5ccb      	ldrb	r3, [r1, r3]
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	0800cc0c 	.word	0x0800cc0c

08004ae0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004aec:	4b2a      	ldr	r3, [pc, #168]	@ (8004b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004af8:	f7ff f9ee 	bl	8003ed8 <HAL_PWREx_GetVoltageRange>
 8004afc:	6178      	str	r0, [r7, #20]
 8004afe:	e014      	b.n	8004b2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b00:	4b25      	ldr	r3, [pc, #148]	@ (8004b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	4a24      	ldr	r2, [pc, #144]	@ (8004b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b0c:	4b22      	ldr	r3, [pc, #136]	@ (8004b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b18:	f7ff f9de 	bl	8003ed8 <HAL_PWREx_GetVoltageRange>
 8004b1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b22:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b30:	d10b      	bne.n	8004b4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b80      	cmp	r3, #128	@ 0x80
 8004b36:	d919      	bls.n	8004b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b3c:	d902      	bls.n	8004b44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b3e:	2302      	movs	r3, #2
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	e013      	b.n	8004b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b44:	2301      	movs	r3, #1
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	e010      	b.n	8004b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b80      	cmp	r3, #128	@ 0x80
 8004b4e:	d902      	bls.n	8004b56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b50:	2303      	movs	r3, #3
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	e00a      	b.n	8004b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b80      	cmp	r3, #128	@ 0x80
 8004b5a:	d102      	bne.n	8004b62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	e004      	b.n	8004b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b70      	cmp	r3, #112	@ 0x70
 8004b66:	d101      	bne.n	8004b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b68:	2301      	movs	r3, #1
 8004b6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f023 0207 	bic.w	r2, r3, #7
 8004b74:	4909      	ldr	r1, [pc, #36]	@ (8004b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b7c:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d001      	beq.n	8004b8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40022000 	.word	0x40022000

08004ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ba8:	2300      	movs	r3, #0
 8004baa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bac:	2300      	movs	r3, #0
 8004bae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d041      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004bc4:	d02a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004bca:	d824      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004bd0:	d008      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004bd6:	d81e      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004be0:	d010      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004be2:	e018      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004be4:	4b86      	ldr	r3, [pc, #536]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4a85      	ldr	r2, [pc, #532]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bf0:	e015      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fabb 	bl	8005174 <RCCEx_PLLSAI1_Config>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c02:	e00c      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3320      	adds	r3, #32
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fba6 	bl	800535c <RCCEx_PLLSAI2_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c14:	e003      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	74fb      	strb	r3, [r7, #19]
      break;
 8004c1a:	e000      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c1e:	7cfb      	ldrb	r3, [r7, #19]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c24:	4b76      	ldr	r3, [pc, #472]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c32:	4973      	ldr	r1, [pc, #460]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004c3a:	e001      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3c:	7cfb      	ldrb	r3, [r7, #19]
 8004c3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d041      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c54:	d02a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c5a:	d824      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c60:	d008      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c66:	d81e      	bhi.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c70:	d010      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c72:	e018      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c74:	4b62      	ldr	r3, [pc, #392]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4a61      	ldr	r2, [pc, #388]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c80:	e015      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3304      	adds	r3, #4
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fa73 	bl	8005174 <RCCEx_PLLSAI1_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c92:	e00c      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3320      	adds	r3, #32
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fb5e 	bl	800535c <RCCEx_PLLSAI2_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ca4:	e003      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	74fb      	strb	r3, [r7, #19]
      break;
 8004caa:	e000      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cb4:	4b52      	ldr	r3, [pc, #328]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cc2:	494f      	ldr	r1, [pc, #316]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004cca:	e001      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80a0 	beq.w	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ce2:	4b47      	ldr	r3, [pc, #284]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00d      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf8:	4b41      	ldr	r3, [pc, #260]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfc:	4a40      	ldr	r2, [pc, #256]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d04:	4b3e      	ldr	r3, [pc, #248]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d10:	2301      	movs	r3, #1
 8004d12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d14:	4b3b      	ldr	r3, [pc, #236]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a3a      	ldr	r2, [pc, #232]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d20:	f7fd f94c 	bl	8001fbc <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d26:	e009      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d28:	f7fd f948 	bl	8001fbc <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d902      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	74fb      	strb	r3, [r7, #19]
        break;
 8004d3a:	e005      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d3c:	4b31      	ldr	r3, [pc, #196]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ef      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d15c      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01f      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d019      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d6c:	4b24      	ldr	r3, [pc, #144]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d78:	4b21      	ldr	r3, [pc, #132]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7e:	4a20      	ldr	r2, [pc, #128]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d88:	4b1d      	ldr	r3, [pc, #116]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d98:	4a19      	ldr	r2, [pc, #100]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fd f907 	bl	8001fbc <HAL_GetTick>
 8004dae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db0:	e00b      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db2:	f7fd f903 	bl	8001fbc <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d902      	bls.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	74fb      	strb	r3, [r7, #19]
            break;
 8004dc8:	e006      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dca:	4b0d      	ldr	r3, [pc, #52]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ec      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dde:	4b08      	ldr	r3, [pc, #32]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dee:	4904      	ldr	r1, [pc, #16]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004df6:	e009      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	74bb      	strb	r3, [r7, #18]
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004dfe:	bf00      	nop
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e0c:	7c7b      	ldrb	r3, [r7, #17]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d105      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e12:	4b9e      	ldr	r3, [pc, #632]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e16:	4a9d      	ldr	r2, [pc, #628]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e2a:	4b98      	ldr	r3, [pc, #608]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e30:	f023 0203 	bic.w	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e38:	4994      	ldr	r1, [pc, #592]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e52:	f023 020c 	bic.w	r2, r3, #12
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5a:	498c      	ldr	r1, [pc, #560]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e6e:	4b87      	ldr	r3, [pc, #540]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7c:	4983      	ldr	r1, [pc, #524]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e90:	4b7e      	ldr	r3, [pc, #504]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	497b      	ldr	r1, [pc, #492]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eb2:	4b76      	ldr	r3, [pc, #472]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec0:	4972      	ldr	r1, [pc, #456]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ed4:	4b6d      	ldr	r3, [pc, #436]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee2:	496a      	ldr	r1, [pc, #424]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ef6:	4b65      	ldr	r3, [pc, #404]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f04:	4961      	ldr	r1, [pc, #388]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f18:	4b5c      	ldr	r3, [pc, #368]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f26:	4959      	ldr	r1, [pc, #356]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f3a:	4b54      	ldr	r3, [pc, #336]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f48:	4950      	ldr	r1, [pc, #320]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6a:	4948      	ldr	r1, [pc, #288]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f7e:	4b43      	ldr	r3, [pc, #268]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8c:	493f      	ldr	r1, [pc, #252]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d028      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fae:	4937      	ldr	r1, [pc, #220]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fbe:	d106      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fc0:	4b32      	ldr	r3, [pc, #200]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4a31      	ldr	r2, [pc, #196]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fca:	60d3      	str	r3, [r2, #12]
 8004fcc:	e011      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fd6:	d10c      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	2101      	movs	r1, #1
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f8c8 	bl	8005174 <RCCEx_PLLSAI1_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fe8:	7cfb      	ldrb	r3, [r7, #19]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004fee:	7cfb      	ldrb	r3, [r7, #19]
 8004ff0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d028      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ffe:	4b23      	ldr	r3, [pc, #140]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005004:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500c:	491f      	ldr	r1, [pc, #124]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005018:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800501c:	d106      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501e:	4b1b      	ldr	r3, [pc, #108]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4a1a      	ldr	r2, [pc, #104]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005024:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005028:	60d3      	str	r3, [r2, #12]
 800502a:	e011      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005030:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005034:	d10c      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	2101      	movs	r1, #1
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f899 	bl	8005174 <RCCEx_PLLSAI1_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d02b      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800505c:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005062:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506a:	4908      	ldr	r1, [pc, #32]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800507a:	d109      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800507c:	4b03      	ldr	r3, [pc, #12]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a02      	ldr	r2, [pc, #8]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005086:	60d3      	str	r3, [r2, #12]
 8005088:	e014      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800508a:	bf00      	nop
 800508c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005094:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005098:	d10c      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	2101      	movs	r1, #1
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 f867 	bl	8005174 <RCCEx_PLLSAI1_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050aa:	7cfb      	ldrb	r3, [r7, #19]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80050b0:	7cfb      	ldrb	r3, [r7, #19]
 80050b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02f      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050ce:	4928      	ldr	r1, [pc, #160]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050de:	d10d      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	2102      	movs	r1, #2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 f844 	bl	8005174 <RCCEx_PLLSAI1_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050f0:	7cfb      	ldrb	r3, [r7, #19]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d014      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050f6:	7cfb      	ldrb	r3, [r7, #19]
 80050f8:	74bb      	strb	r3, [r7, #18]
 80050fa:	e011      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005104:	d10c      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3320      	adds	r3, #32
 800510a:	2102      	movs	r1, #2
 800510c:	4618      	mov	r0, r3
 800510e:	f000 f925 	bl	800535c <RCCEx_PLLSAI2_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005116:	7cfb      	ldrb	r3, [r7, #19]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800511c:	7cfb      	ldrb	r3, [r7, #19]
 800511e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800512c:	4b10      	ldr	r3, [pc, #64]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005132:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800513a:	490d      	ldr	r1, [pc, #52]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800514e:	4b08      	ldr	r3, [pc, #32]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005154:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800515e:	4904      	ldr	r1, [pc, #16]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005166:	7cbb      	ldrb	r3, [r7, #18]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000

08005174 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005182:	4b75      	ldr	r3, [pc, #468]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d018      	beq.n	80051c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800518e:	4b72      	ldr	r3, [pc, #456]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0203 	and.w	r2, r3, #3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d10d      	bne.n	80051ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
       ||
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051a6:	4b6c      	ldr	r3, [pc, #432]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	091b      	lsrs	r3, r3, #4
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
       ||
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d047      	beq.n	800524a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
 80051be:	e044      	b.n	800524a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d018      	beq.n	80051fa <RCCEx_PLLSAI1_Config+0x86>
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d825      	bhi.n	8005218 <RCCEx_PLLSAI1_Config+0xa4>
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d002      	beq.n	80051d6 <RCCEx_PLLSAI1_Config+0x62>
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d009      	beq.n	80051e8 <RCCEx_PLLSAI1_Config+0x74>
 80051d4:	e020      	b.n	8005218 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051d6:	4b60      	ldr	r3, [pc, #384]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d11d      	bne.n	800521e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e6:	e01a      	b.n	800521e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051e8:	4b5b      	ldr	r3, [pc, #364]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d116      	bne.n	8005222 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f8:	e013      	b.n	8005222 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051fa:	4b57      	ldr	r3, [pc, #348]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10f      	bne.n	8005226 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005206:	4b54      	ldr	r3, [pc, #336]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d109      	bne.n	8005226 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005216:	e006      	b.n	8005226 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
      break;
 800521c:	e004      	b.n	8005228 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800521e:	bf00      	nop
 8005220:	e002      	b.n	8005228 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005226:	bf00      	nop
    }

    if(status == HAL_OK)
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10d      	bne.n	800524a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800522e:	4b4a      	ldr	r3, [pc, #296]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6819      	ldr	r1, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	3b01      	subs	r3, #1
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	430b      	orrs	r3, r1
 8005244:	4944      	ldr	r1, [pc, #272]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d17d      	bne.n	800534c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005250:	4b41      	ldr	r3, [pc, #260]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a40      	ldr	r2, [pc, #256]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005256:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800525a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525c:	f7fc feae 	bl	8001fbc <HAL_GetTick>
 8005260:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005262:	e009      	b.n	8005278 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005264:	f7fc feaa 	bl	8001fbc <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d902      	bls.n	8005278 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	73fb      	strb	r3, [r7, #15]
        break;
 8005276:	e005      	b.n	8005284 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005278:	4b37      	ldr	r3, [pc, #220]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1ef      	bne.n	8005264 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d160      	bne.n	800534c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d111      	bne.n	80052b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005290:	4b31      	ldr	r3, [pc, #196]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6892      	ldr	r2, [r2, #8]
 80052a0:	0211      	lsls	r1, r2, #8
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	68d2      	ldr	r2, [r2, #12]
 80052a6:	0912      	lsrs	r2, r2, #4
 80052a8:	0452      	lsls	r2, r2, #17
 80052aa:	430a      	orrs	r2, r1
 80052ac:	492a      	ldr	r1, [pc, #168]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	610b      	str	r3, [r1, #16]
 80052b2:	e027      	b.n	8005304 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d112      	bne.n	80052e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052ba:	4b27      	ldr	r3, [pc, #156]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80052c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6892      	ldr	r2, [r2, #8]
 80052ca:	0211      	lsls	r1, r2, #8
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6912      	ldr	r2, [r2, #16]
 80052d0:	0852      	lsrs	r2, r2, #1
 80052d2:	3a01      	subs	r2, #1
 80052d4:	0552      	lsls	r2, r2, #21
 80052d6:	430a      	orrs	r2, r1
 80052d8:	491f      	ldr	r1, [pc, #124]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	610b      	str	r3, [r1, #16]
 80052de:	e011      	b.n	8005304 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6892      	ldr	r2, [r2, #8]
 80052f0:	0211      	lsls	r1, r2, #8
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6952      	ldr	r2, [r2, #20]
 80052f6:	0852      	lsrs	r2, r2, #1
 80052f8:	3a01      	subs	r2, #1
 80052fa:	0652      	lsls	r2, r2, #25
 80052fc:	430a      	orrs	r2, r1
 80052fe:	4916      	ldr	r1, [pc, #88]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005300:	4313      	orrs	r3, r2
 8005302:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005304:	4b14      	ldr	r3, [pc, #80]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a13      	ldr	r2, [pc, #76]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800530e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005310:	f7fc fe54 	bl	8001fbc <HAL_GetTick>
 8005314:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005316:	e009      	b.n	800532c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005318:	f7fc fe50 	bl	8001fbc <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d902      	bls.n	800532c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	73fb      	strb	r3, [r7, #15]
          break;
 800532a:	e005      	b.n	8005338 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800532c:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0ef      	beq.n	8005318 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800533e:	4b06      	ldr	r3, [pc, #24]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	4904      	ldr	r1, [pc, #16]	@ (8005358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005348:	4313      	orrs	r3, r2
 800534a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40021000 	.word	0x40021000

0800535c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800536a:	4b6a      	ldr	r3, [pc, #424]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d018      	beq.n	80053a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005376:	4b67      	ldr	r3, [pc, #412]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f003 0203 	and.w	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d10d      	bne.n	80053a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
       ||
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800538e:	4b61      	ldr	r3, [pc, #388]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	091b      	lsrs	r3, r3, #4
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
       ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d047      	beq.n	8005432 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	73fb      	strb	r3, [r7, #15]
 80053a6:	e044      	b.n	8005432 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d018      	beq.n	80053e2 <RCCEx_PLLSAI2_Config+0x86>
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d825      	bhi.n	8005400 <RCCEx_PLLSAI2_Config+0xa4>
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d002      	beq.n	80053be <RCCEx_PLLSAI2_Config+0x62>
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d009      	beq.n	80053d0 <RCCEx_PLLSAI2_Config+0x74>
 80053bc:	e020      	b.n	8005400 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053be:	4b55      	ldr	r3, [pc, #340]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d11d      	bne.n	8005406 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ce:	e01a      	b.n	8005406 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053d0:	4b50      	ldr	r3, [pc, #320]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d116      	bne.n	800540a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053e0:	e013      	b.n	800540a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10f      	bne.n	800540e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053ee:	4b49      	ldr	r3, [pc, #292]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053fe:	e006      	b.n	800540e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
      break;
 8005404:	e004      	b.n	8005410 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005406:	bf00      	nop
 8005408:	e002      	b.n	8005410 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800540a:	bf00      	nop
 800540c:	e000      	b.n	8005410 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800540e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10d      	bne.n	8005432 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005416:	4b3f      	ldr	r3, [pc, #252]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6819      	ldr	r1, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	3b01      	subs	r3, #1
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	430b      	orrs	r3, r1
 800542c:	4939      	ldr	r1, [pc, #228]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800542e:	4313      	orrs	r3, r2
 8005430:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d167      	bne.n	8005508 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005438:	4b36      	ldr	r3, [pc, #216]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a35      	ldr	r2, [pc, #212]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800543e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005444:	f7fc fdba 	bl	8001fbc <HAL_GetTick>
 8005448:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800544a:	e009      	b.n	8005460 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800544c:	f7fc fdb6 	bl	8001fbc <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d902      	bls.n	8005460 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	73fb      	strb	r3, [r7, #15]
        break;
 800545e:	e005      	b.n	800546c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005460:	4b2c      	ldr	r3, [pc, #176]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ef      	bne.n	800544c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d14a      	bne.n	8005508 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d111      	bne.n	800549c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005478:	4b26      	ldr	r3, [pc, #152]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6892      	ldr	r2, [r2, #8]
 8005488:	0211      	lsls	r1, r2, #8
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68d2      	ldr	r2, [r2, #12]
 800548e:	0912      	lsrs	r2, r2, #4
 8005490:	0452      	lsls	r2, r2, #17
 8005492:	430a      	orrs	r2, r1
 8005494:	491f      	ldr	r1, [pc, #124]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005496:	4313      	orrs	r3, r2
 8005498:	614b      	str	r3, [r1, #20]
 800549a:	e011      	b.n	80054c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800549c:	4b1d      	ldr	r3, [pc, #116]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80054a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6892      	ldr	r2, [r2, #8]
 80054ac:	0211      	lsls	r1, r2, #8
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6912      	ldr	r2, [r2, #16]
 80054b2:	0852      	lsrs	r2, r2, #1
 80054b4:	3a01      	subs	r2, #1
 80054b6:	0652      	lsls	r2, r2, #25
 80054b8:	430a      	orrs	r2, r1
 80054ba:	4916      	ldr	r1, [pc, #88]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054c0:	4b14      	ldr	r3, [pc, #80]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a13      	ldr	r2, [pc, #76]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054cc:	f7fc fd76 	bl	8001fbc <HAL_GetTick>
 80054d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054d2:	e009      	b.n	80054e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054d4:	f7fc fd72 	bl	8001fbc <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d902      	bls.n	80054e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	73fb      	strb	r3, [r7, #15]
          break;
 80054e6:	e005      	b.n	80054f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ef      	beq.n	80054d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054fa:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fc:	695a      	ldr	r2, [r3, #20]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	4904      	ldr	r1, [pc, #16]	@ (8005514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005504:	4313      	orrs	r3, r2
 8005506:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000

08005518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e049      	b.n	80055be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fc fa10 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3304      	adds	r3, #4
 8005554:	4619      	mov	r1, r3
 8005556:	4610      	mov	r0, r2
 8005558:	f000 fe0a 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d001      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e04f      	b.n	8005680 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a23      	ldr	r2, [pc, #140]	@ (800568c <HAL_TIM_Base_Start_IT+0xc4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01d      	beq.n	800563e <HAL_TIM_Base_Start_IT+0x76>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560a:	d018      	beq.n	800563e <HAL_TIM_Base_Start_IT+0x76>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1f      	ldr	r2, [pc, #124]	@ (8005690 <HAL_TIM_Base_Start_IT+0xc8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <HAL_TIM_Base_Start_IT+0x76>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1e      	ldr	r2, [pc, #120]	@ (8005694 <HAL_TIM_Base_Start_IT+0xcc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00e      	beq.n	800563e <HAL_TIM_Base_Start_IT+0x76>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1c      	ldr	r2, [pc, #112]	@ (8005698 <HAL_TIM_Base_Start_IT+0xd0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d009      	beq.n	800563e <HAL_TIM_Base_Start_IT+0x76>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1b      	ldr	r2, [pc, #108]	@ (800569c <HAL_TIM_Base_Start_IT+0xd4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d004      	beq.n	800563e <HAL_TIM_Base_Start_IT+0x76>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a19      	ldr	r2, [pc, #100]	@ (80056a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d115      	bne.n	800566a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	4b17      	ldr	r3, [pc, #92]	@ (80056a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005646:	4013      	ands	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b06      	cmp	r3, #6
 800564e:	d015      	beq.n	800567c <HAL_TIM_Base_Start_IT+0xb4>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005656:	d011      	beq.n	800567c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005668:	e008      	b.n	800567c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0201 	orr.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e000      	b.n	800567e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40013400 	.word	0x40013400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	00010007 	.word	0x00010007

080056a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e049      	b.n	800574e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f841 	bl	8005756 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	4619      	mov	r1, r3
 80056e6:	4610      	mov	r0, r2
 80056e8:	f000 fd42 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d109      	bne.n	8005790 <HAL_TIM_PWM_Start+0x24>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	bf14      	ite	ne
 8005788:	2301      	movne	r3, #1
 800578a:	2300      	moveq	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	e03c      	b.n	800580a <HAL_TIM_PWM_Start+0x9e>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d109      	bne.n	80057aa <HAL_TIM_PWM_Start+0x3e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b01      	cmp	r3, #1
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	e02f      	b.n	800580a <HAL_TIM_PWM_Start+0x9e>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d109      	bne.n	80057c4 <HAL_TIM_PWM_Start+0x58>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	e022      	b.n	800580a <HAL_TIM_PWM_Start+0x9e>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	d109      	bne.n	80057de <HAL_TIM_PWM_Start+0x72>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	bf14      	ite	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	2300      	moveq	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e015      	b.n	800580a <HAL_TIM_PWM_Start+0x9e>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d109      	bne.n	80057f8 <HAL_TIM_PWM_Start+0x8c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	e008      	b.n	800580a <HAL_TIM_PWM_Start+0x9e>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e09c      	b.n	800594c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start+0xb6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005820:	e023      	b.n	800586a <HAL_TIM_PWM_Start+0xfe>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b04      	cmp	r3, #4
 8005826:	d104      	bne.n	8005832 <HAL_TIM_PWM_Start+0xc6>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005830:	e01b      	b.n	800586a <HAL_TIM_PWM_Start+0xfe>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Start+0xd6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005840:	e013      	b.n	800586a <HAL_TIM_PWM_Start+0xfe>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b0c      	cmp	r3, #12
 8005846:	d104      	bne.n	8005852 <HAL_TIM_PWM_Start+0xe6>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005850:	e00b      	b.n	800586a <HAL_TIM_PWM_Start+0xfe>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b10      	cmp	r3, #16
 8005856:	d104      	bne.n	8005862 <HAL_TIM_PWM_Start+0xf6>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005860:	e003      	b.n	800586a <HAL_TIM_PWM_Start+0xfe>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2201      	movs	r2, #1
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f001 f9aa 	bl	8006bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a35      	ldr	r2, [pc, #212]	@ (8005954 <HAL_TIM_PWM_Start+0x1e8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <HAL_TIM_PWM_Start+0x13e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a34      	ldr	r2, [pc, #208]	@ (8005958 <HAL_TIM_PWM_Start+0x1ec>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00e      	beq.n	80058aa <HAL_TIM_PWM_Start+0x13e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a32      	ldr	r2, [pc, #200]	@ (800595c <HAL_TIM_PWM_Start+0x1f0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d009      	beq.n	80058aa <HAL_TIM_PWM_Start+0x13e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a31      	ldr	r2, [pc, #196]	@ (8005960 <HAL_TIM_PWM_Start+0x1f4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d004      	beq.n	80058aa <HAL_TIM_PWM_Start+0x13e>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005964 <HAL_TIM_PWM_Start+0x1f8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_PWM_Start+0x142>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <HAL_TIM_PWM_Start+0x144>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a22      	ldr	r2, [pc, #136]	@ (8005954 <HAL_TIM_PWM_Start+0x1e8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01d      	beq.n	800590a <HAL_TIM_PWM_Start+0x19e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d6:	d018      	beq.n	800590a <HAL_TIM_PWM_Start+0x19e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a22      	ldr	r2, [pc, #136]	@ (8005968 <HAL_TIM_PWM_Start+0x1fc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <HAL_TIM_PWM_Start+0x19e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a21      	ldr	r2, [pc, #132]	@ (800596c <HAL_TIM_PWM_Start+0x200>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_TIM_PWM_Start+0x19e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005970 <HAL_TIM_PWM_Start+0x204>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d009      	beq.n	800590a <HAL_TIM_PWM_Start+0x19e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a17      	ldr	r2, [pc, #92]	@ (8005958 <HAL_TIM_PWM_Start+0x1ec>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_TIM_PWM_Start+0x19e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a15      	ldr	r2, [pc, #84]	@ (800595c <HAL_TIM_PWM_Start+0x1f0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d115      	bne.n	8005936 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	4b18      	ldr	r3, [pc, #96]	@ (8005974 <HAL_TIM_PWM_Start+0x208>)
 8005912:	4013      	ands	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b06      	cmp	r3, #6
 800591a:	d015      	beq.n	8005948 <HAL_TIM_PWM_Start+0x1dc>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005922:	d011      	beq.n	8005948 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005934:	e008      	b.n	8005948 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e000      	b.n	800594a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40013400 	.word	0x40013400
 800595c:	40014000 	.word	0x40014000
 8005960:	40014400 	.word	0x40014400
 8005964:	40014800 	.word	0x40014800
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800
 8005970:	40000c00 	.word	0x40000c00
 8005974:	00010007 	.word	0x00010007

08005978 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e049      	b.n	8005a1e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fc f850 	bl	8001a44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f000 fbda 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d020      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d01b      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f06f 0202 	mvn.w	r2, #2
 8005a5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f003 0303 	and.w	r3, r3, #3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fb5e 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005a76:	e005      	b.n	8005a84 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fb50 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fb61 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d020      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01b      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f06f 0204 	mvn.w	r2, #4
 8005aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fb38 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005ac2:	e005      	b.n	8005ad0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fb2a 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fb3b 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d020      	beq.n	8005b22 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01b      	beq.n	8005b22 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f06f 0208 	mvn.w	r2, #8
 8005af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2204      	movs	r2, #4
 8005af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fb12 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005b0e:	e005      	b.n	8005b1c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fb04 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fb15 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d020      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01b      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f06f 0210 	mvn.w	r2, #16
 8005b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2208      	movs	r2, #8
 8005b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 faec 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005b5a:	e005      	b.n	8005b68 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fade 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 faef 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f06f 0201 	mvn.w	r2, #1
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fb fdd3 	bl	8001738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 f8c3 	bl	8006d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00c      	beq.n	8005bda <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 f8bb 	bl	8006d50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00c      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 faae 	bl	800615a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00c      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f06f 0220 	mvn.w	r2, #32
 8005c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 f883 	bl	8006d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e088      	b.n	8005d5a <HAL_TIM_IC_ConfigChannel+0x130>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d11b      	bne.n	8005c8e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005c66:	f000 fdf3 	bl	8006850 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 020c 	bic.w	r2, r2, #12
 8005c78:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6999      	ldr	r1, [r3, #24]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	619a      	str	r2, [r3, #24]
 8005c8c:	e060      	b.n	8005d50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d11c      	bne.n	8005cce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ca4:	f000 fe71 	bl	800698a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005cb6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	021a      	lsls	r2, r3, #8
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	619a      	str	r2, [r3, #24]
 8005ccc:	e040      	b.n	8005d50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d11b      	bne.n	8005d0c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005ce4:	f000 febe 	bl	8006a64 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69da      	ldr	r2, [r3, #28]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 020c 	bic.w	r2, r2, #12
 8005cf6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69d9      	ldr	r1, [r3, #28]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	61da      	str	r2, [r3, #28]
 8005d0a:	e021      	b.n	8005d50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b0c      	cmp	r3, #12
 8005d10:	d11c      	bne.n	8005d4c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d22:	f000 fedb 	bl	8006adc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d34:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69d9      	ldr	r1, [r3, #28]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	021a      	lsls	r2, r3, #8
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	61da      	str	r2, [r3, #28]
 8005d4a:	e001      	b.n	8005d50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e0ff      	b.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b14      	cmp	r3, #20
 8005d8e:	f200 80f0 	bhi.w	8005f72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d92:	a201      	add	r2, pc, #4	@ (adr r2, 8005d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005ded 	.word	0x08005ded
 8005d9c:	08005f73 	.word	0x08005f73
 8005da0:	08005f73 	.word	0x08005f73
 8005da4:	08005f73 	.word	0x08005f73
 8005da8:	08005e2d 	.word	0x08005e2d
 8005dac:	08005f73 	.word	0x08005f73
 8005db0:	08005f73 	.word	0x08005f73
 8005db4:	08005f73 	.word	0x08005f73
 8005db8:	08005e6f 	.word	0x08005e6f
 8005dbc:	08005f73 	.word	0x08005f73
 8005dc0:	08005f73 	.word	0x08005f73
 8005dc4:	08005f73 	.word	0x08005f73
 8005dc8:	08005eaf 	.word	0x08005eaf
 8005dcc:	08005f73 	.word	0x08005f73
 8005dd0:	08005f73 	.word	0x08005f73
 8005dd4:	08005f73 	.word	0x08005f73
 8005dd8:	08005ef1 	.word	0x08005ef1
 8005ddc:	08005f73 	.word	0x08005f73
 8005de0:	08005f73 	.word	0x08005f73
 8005de4:	08005f73 	.word	0x08005f73
 8005de8:	08005f31 	.word	0x08005f31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fa56 	bl	80062a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0208 	orr.w	r2, r2, #8
 8005e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0204 	bic.w	r2, r2, #4
 8005e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6999      	ldr	r1, [r3, #24]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	619a      	str	r2, [r3, #24]
      break;
 8005e2a:	e0a5      	b.n	8005f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fac6 	bl	80063c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6999      	ldr	r1, [r3, #24]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	021a      	lsls	r2, r3, #8
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	619a      	str	r2, [r3, #24]
      break;
 8005e6c:	e084      	b.n	8005f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fb2f 	bl	80064d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0208 	orr.w	r2, r2, #8
 8005e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0204 	bic.w	r2, r2, #4
 8005e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69d9      	ldr	r1, [r3, #28]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	61da      	str	r2, [r3, #28]
      break;
 8005eac:	e064      	b.n	8005f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fb97 	bl	80065e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69d9      	ldr	r1, [r3, #28]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	021a      	lsls	r2, r3, #8
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	61da      	str	r2, [r3, #28]
      break;
 8005eee:	e043      	b.n	8005f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fbe0 	bl	80066bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0208 	orr.w	r2, r2, #8
 8005f0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0204 	bic.w	r2, r2, #4
 8005f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f2e:	e023      	b.n	8005f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fc24 	bl	8006784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	021a      	lsls	r2, r3, #8
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f70:	e002      	b.n	8005f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	75fb      	strb	r3, [r7, #23]
      break;
 8005f76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop

08005f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e0b6      	b.n	8006116 <HAL_TIM_ConfigClockSource+0x18a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe4:	d03e      	beq.n	8006064 <HAL_TIM_ConfigClockSource+0xd8>
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fea:	f200 8087 	bhi.w	80060fc <HAL_TIM_ConfigClockSource+0x170>
 8005fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff2:	f000 8086 	beq.w	8006102 <HAL_TIM_ConfigClockSource+0x176>
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ffa:	d87f      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x170>
 8005ffc:	2b70      	cmp	r3, #112	@ 0x70
 8005ffe:	d01a      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0xaa>
 8006000:	2b70      	cmp	r3, #112	@ 0x70
 8006002:	d87b      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x170>
 8006004:	2b60      	cmp	r3, #96	@ 0x60
 8006006:	d050      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x11e>
 8006008:	2b60      	cmp	r3, #96	@ 0x60
 800600a:	d877      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x170>
 800600c:	2b50      	cmp	r3, #80	@ 0x50
 800600e:	d03c      	beq.n	800608a <HAL_TIM_ConfigClockSource+0xfe>
 8006010:	2b50      	cmp	r3, #80	@ 0x50
 8006012:	d873      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x170>
 8006014:	2b40      	cmp	r3, #64	@ 0x40
 8006016:	d058      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x13e>
 8006018:	2b40      	cmp	r3, #64	@ 0x40
 800601a:	d86f      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x170>
 800601c:	2b30      	cmp	r3, #48	@ 0x30
 800601e:	d064      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x15e>
 8006020:	2b30      	cmp	r3, #48	@ 0x30
 8006022:	d86b      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x170>
 8006024:	2b20      	cmp	r3, #32
 8006026:	d060      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x15e>
 8006028:	2b20      	cmp	r3, #32
 800602a:	d867      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0x170>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d05c      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x15e>
 8006030:	2b10      	cmp	r3, #16
 8006032:	d05a      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x15e>
 8006034:	e062      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006046:	f000 fda1 	bl	8006b8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	609a      	str	r2, [r3, #8]
      break;
 8006062:	e04f      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006074:	f000 fd8a 	bl	8006b8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006086:	609a      	str	r2, [r3, #8]
      break;
 8006088:	e03c      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006096:	461a      	mov	r2, r3
 8006098:	f000 fc48 	bl	800692c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2150      	movs	r1, #80	@ 0x50
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fd57 	bl	8006b56 <TIM_ITRx_SetConfig>
      break;
 80060a8:	e02c      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060b6:	461a      	mov	r2, r3
 80060b8:	f000 fca4 	bl	8006a04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2160      	movs	r1, #96	@ 0x60
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fd47 	bl	8006b56 <TIM_ITRx_SetConfig>
      break;
 80060c8:	e01c      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060d6:	461a      	mov	r2, r3
 80060d8:	f000 fc28 	bl	800692c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2140      	movs	r1, #64	@ 0x40
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fd37 	bl	8006b56 <TIM_ITRx_SetConfig>
      break;
 80060e8:	e00c      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f000 fd2e 	bl	8006b56 <TIM_ITRx_SetConfig>
      break;
 80060fa:	e003      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006100:	e000      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a40      	ldr	r2, [pc, #256]	@ (8006284 <TIM_Base_SetConfig+0x114>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800618e:	d00f      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a3d      	ldr	r2, [pc, #244]	@ (8006288 <TIM_Base_SetConfig+0x118>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00b      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a3c      	ldr	r2, [pc, #240]	@ (800628c <TIM_Base_SetConfig+0x11c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a3b      	ldr	r2, [pc, #236]	@ (8006290 <TIM_Base_SetConfig+0x120>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a3a      	ldr	r2, [pc, #232]	@ (8006294 <TIM_Base_SetConfig+0x124>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d108      	bne.n	80061c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006284 <TIM_Base_SetConfig+0x114>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01f      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d0:	d01b      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006288 <TIM_Base_SetConfig+0x118>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d017      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2b      	ldr	r2, [pc, #172]	@ (800628c <TIM_Base_SetConfig+0x11c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006290 <TIM_Base_SetConfig+0x120>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a29      	ldr	r2, [pc, #164]	@ (8006294 <TIM_Base_SetConfig+0x124>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a28      	ldr	r2, [pc, #160]	@ (8006298 <TIM_Base_SetConfig+0x128>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a27      	ldr	r2, [pc, #156]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a26      	ldr	r2, [pc, #152]	@ (80062a0 <TIM_Base_SetConfig+0x130>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a10      	ldr	r2, [pc, #64]	@ (8006284 <TIM_Base_SetConfig+0x114>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00f      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a12      	ldr	r2, [pc, #72]	@ (8006294 <TIM_Base_SetConfig+0x124>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00b      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a11      	ldr	r2, [pc, #68]	@ (8006298 <TIM_Base_SetConfig+0x128>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d007      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a10      	ldr	r2, [pc, #64]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a0f      	ldr	r2, [pc, #60]	@ (80062a0 <TIM_Base_SetConfig+0x130>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d103      	bne.n	8006270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	615a      	str	r2, [r3, #20]
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800
 8006290:	40000c00 	.word	0x40000c00
 8006294:	40013400 	.word	0x40013400
 8006298:	40014000 	.word	0x40014000
 800629c:	40014400 	.word	0x40014400
 80062a0:	40014800 	.word	0x40014800

080062a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f023 0201 	bic.w	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0303 	bic.w	r3, r3, #3
 80062de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f023 0302 	bic.w	r3, r3, #2
 80062f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a2c      	ldr	r2, [pc, #176]	@ (80063b0 <TIM_OC1_SetConfig+0x10c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00f      	beq.n	8006324 <TIM_OC1_SetConfig+0x80>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a2b      	ldr	r2, [pc, #172]	@ (80063b4 <TIM_OC1_SetConfig+0x110>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_OC1_SetConfig+0x80>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a2a      	ldr	r2, [pc, #168]	@ (80063b8 <TIM_OC1_SetConfig+0x114>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_OC1_SetConfig+0x80>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a29      	ldr	r2, [pc, #164]	@ (80063bc <TIM_OC1_SetConfig+0x118>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_OC1_SetConfig+0x80>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a28      	ldr	r2, [pc, #160]	@ (80063c0 <TIM_OC1_SetConfig+0x11c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d10c      	bne.n	800633e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 0308 	bic.w	r3, r3, #8
 800632a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f023 0304 	bic.w	r3, r3, #4
 800633c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a1b      	ldr	r2, [pc, #108]	@ (80063b0 <TIM_OC1_SetConfig+0x10c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00f      	beq.n	8006366 <TIM_OC1_SetConfig+0xc2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a1a      	ldr	r2, [pc, #104]	@ (80063b4 <TIM_OC1_SetConfig+0x110>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00b      	beq.n	8006366 <TIM_OC1_SetConfig+0xc2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a19      	ldr	r2, [pc, #100]	@ (80063b8 <TIM_OC1_SetConfig+0x114>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d007      	beq.n	8006366 <TIM_OC1_SetConfig+0xc2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a18      	ldr	r2, [pc, #96]	@ (80063bc <TIM_OC1_SetConfig+0x118>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC1_SetConfig+0xc2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a17      	ldr	r2, [pc, #92]	@ (80063c0 <TIM_OC1_SetConfig+0x11c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d111      	bne.n	800638a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800636c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	621a      	str	r2, [r3, #32]
}
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	40012c00 	.word	0x40012c00
 80063b4:	40013400 	.word	0x40013400
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800

080063c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	f023 0210 	bic.w	r2, r3, #16
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f023 0320 	bic.w	r3, r3, #32
 8006412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a28      	ldr	r2, [pc, #160]	@ (80064c4 <TIM_OC2_SetConfig+0x100>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_OC2_SetConfig+0x6c>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a27      	ldr	r2, [pc, #156]	@ (80064c8 <TIM_OC2_SetConfig+0x104>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d10d      	bne.n	800644c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800644a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a1d      	ldr	r2, [pc, #116]	@ (80064c4 <TIM_OC2_SetConfig+0x100>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00f      	beq.n	8006474 <TIM_OC2_SetConfig+0xb0>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a1c      	ldr	r2, [pc, #112]	@ (80064c8 <TIM_OC2_SetConfig+0x104>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00b      	beq.n	8006474 <TIM_OC2_SetConfig+0xb0>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a1b      	ldr	r2, [pc, #108]	@ (80064cc <TIM_OC2_SetConfig+0x108>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d007      	beq.n	8006474 <TIM_OC2_SetConfig+0xb0>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a1a      	ldr	r2, [pc, #104]	@ (80064d0 <TIM_OC2_SetConfig+0x10c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_OC2_SetConfig+0xb0>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a19      	ldr	r2, [pc, #100]	@ (80064d4 <TIM_OC2_SetConfig+0x110>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d113      	bne.n	800649c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800647a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	621a      	str	r2, [r3, #32]
}
 80064b6:	bf00      	nop
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40013400 	.word	0x40013400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	40014400 	.word	0x40014400
 80064d4:	40014800 	.word	0x40014800

080064d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0303 	bic.w	r3, r3, #3
 8006512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a27      	ldr	r2, [pc, #156]	@ (80065d4 <TIM_OC3_SetConfig+0xfc>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d003      	beq.n	8006542 <TIM_OC3_SetConfig+0x6a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a26      	ldr	r2, [pc, #152]	@ (80065d8 <TIM_OC3_SetConfig+0x100>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d10d      	bne.n	800655e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800655c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a1c      	ldr	r2, [pc, #112]	@ (80065d4 <TIM_OC3_SetConfig+0xfc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00f      	beq.n	8006586 <TIM_OC3_SetConfig+0xae>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <TIM_OC3_SetConfig+0x100>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00b      	beq.n	8006586 <TIM_OC3_SetConfig+0xae>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1a      	ldr	r2, [pc, #104]	@ (80065dc <TIM_OC3_SetConfig+0x104>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d007      	beq.n	8006586 <TIM_OC3_SetConfig+0xae>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a19      	ldr	r2, [pc, #100]	@ (80065e0 <TIM_OC3_SetConfig+0x108>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_OC3_SetConfig+0xae>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a18      	ldr	r2, [pc, #96]	@ (80065e4 <TIM_OC3_SetConfig+0x10c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d113      	bne.n	80065ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800658c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	621a      	str	r2, [r3, #32]
}
 80065c8:	bf00      	nop
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	40012c00 	.word	0x40012c00
 80065d8:	40013400 	.word	0x40013400
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40014400 	.word	0x40014400
 80065e4:	40014800 	.word	0x40014800

080065e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a18      	ldr	r2, [pc, #96]	@ (80066a8 <TIM_OC4_SetConfig+0xc0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00f      	beq.n	800666c <TIM_OC4_SetConfig+0x84>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a17      	ldr	r2, [pc, #92]	@ (80066ac <TIM_OC4_SetConfig+0xc4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00b      	beq.n	800666c <TIM_OC4_SetConfig+0x84>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a16      	ldr	r2, [pc, #88]	@ (80066b0 <TIM_OC4_SetConfig+0xc8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d007      	beq.n	800666c <TIM_OC4_SetConfig+0x84>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a15      	ldr	r2, [pc, #84]	@ (80066b4 <TIM_OC4_SetConfig+0xcc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_OC4_SetConfig+0x84>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a14      	ldr	r2, [pc, #80]	@ (80066b8 <TIM_OC4_SetConfig+0xd0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d109      	bne.n	8006680 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	019b      	lsls	r3, r3, #6
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40012c00 	.word	0x40012c00
 80066ac:	40013400 	.word	0x40013400
 80066b0:	40014000 	.word	0x40014000
 80066b4:	40014400 	.word	0x40014400
 80066b8:	40014800 	.word	0x40014800

080066bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a17      	ldr	r2, [pc, #92]	@ (8006770 <TIM_OC5_SetConfig+0xb4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00f      	beq.n	8006736 <TIM_OC5_SetConfig+0x7a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a16      	ldr	r2, [pc, #88]	@ (8006774 <TIM_OC5_SetConfig+0xb8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00b      	beq.n	8006736 <TIM_OC5_SetConfig+0x7a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a15      	ldr	r2, [pc, #84]	@ (8006778 <TIM_OC5_SetConfig+0xbc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d007      	beq.n	8006736 <TIM_OC5_SetConfig+0x7a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a14      	ldr	r2, [pc, #80]	@ (800677c <TIM_OC5_SetConfig+0xc0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d003      	beq.n	8006736 <TIM_OC5_SetConfig+0x7a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a13      	ldr	r2, [pc, #76]	@ (8006780 <TIM_OC5_SetConfig+0xc4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d109      	bne.n	800674a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800673c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	40012c00 	.word	0x40012c00
 8006774:	40013400 	.word	0x40013400
 8006778:	40014000 	.word	0x40014000
 800677c:	40014400 	.word	0x40014400
 8006780:	40014800 	.word	0x40014800

08006784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	051b      	lsls	r3, r3, #20
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a18      	ldr	r2, [pc, #96]	@ (800683c <TIM_OC6_SetConfig+0xb8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_OC6_SetConfig+0x7c>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a17      	ldr	r2, [pc, #92]	@ (8006840 <TIM_OC6_SetConfig+0xbc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_OC6_SetConfig+0x7c>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a16      	ldr	r2, [pc, #88]	@ (8006844 <TIM_OC6_SetConfig+0xc0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_OC6_SetConfig+0x7c>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a15      	ldr	r2, [pc, #84]	@ (8006848 <TIM_OC6_SetConfig+0xc4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_OC6_SetConfig+0x7c>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a14      	ldr	r2, [pc, #80]	@ (800684c <TIM_OC6_SetConfig+0xc8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d109      	bne.n	8006814 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	029b      	lsls	r3, r3, #10
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40013400 	.word	0x40013400
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800

08006850 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	f023 0201 	bic.w	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4a26      	ldr	r2, [pc, #152]	@ (8006914 <TIM_TI1_SetConfig+0xc4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d017      	beq.n	80068ae <TIM_TI1_SetConfig+0x5e>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006884:	d013      	beq.n	80068ae <TIM_TI1_SetConfig+0x5e>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4a23      	ldr	r2, [pc, #140]	@ (8006918 <TIM_TI1_SetConfig+0xc8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00f      	beq.n	80068ae <TIM_TI1_SetConfig+0x5e>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a22      	ldr	r2, [pc, #136]	@ (800691c <TIM_TI1_SetConfig+0xcc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00b      	beq.n	80068ae <TIM_TI1_SetConfig+0x5e>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4a21      	ldr	r2, [pc, #132]	@ (8006920 <TIM_TI1_SetConfig+0xd0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d007      	beq.n	80068ae <TIM_TI1_SetConfig+0x5e>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4a20      	ldr	r2, [pc, #128]	@ (8006924 <TIM_TI1_SetConfig+0xd4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_TI1_SetConfig+0x5e>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006928 <TIM_TI1_SetConfig+0xd8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d101      	bne.n	80068b2 <TIM_TI1_SetConfig+0x62>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <TIM_TI1_SetConfig+0x64>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d008      	beq.n	80068ca <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 0303 	bic.w	r3, r3, #3
 80068be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e003      	b.n	80068d2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f043 0301 	orr.w	r3, r3, #1
 80068d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f023 030a 	bic.w	r3, r3, #10
 80068ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f003 030a 	and.w	r3, r3, #10
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40000400 	.word	0x40000400
 800691c:	40000800 	.word	0x40000800
 8006920:	40000c00 	.word	0x40000c00
 8006924:	40013400 	.word	0x40013400
 8006928:	40014000 	.word	0x40014000

0800692c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f023 0201 	bic.w	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 030a 	bic.w	r3, r3, #10
 8006968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800698a:	b480      	push	{r7}
 800698c:	b087      	sub	sp, #28
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	607a      	str	r2, [r7, #4]
 8006996:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f023 0210 	bic.w	r2, r3, #16
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	031b      	lsls	r3, r3, #12
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	621a      	str	r2, [r3, #32]
}
 80069f8:	bf00      	nop
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0210 	bic.w	r2, r3, #16
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	031b      	lsls	r3, r3, #12
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	621a      	str	r2, [r3, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f023 0303 	bic.w	r3, r3, #3
 8006a90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aa0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	621a      	str	r2, [r3, #32]
}
 8006ad0:	bf00      	nop
 8006ad2:	371c      	adds	r7, #28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b08:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b1a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	031b      	lsls	r3, r3, #12
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006b2e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	031b      	lsls	r3, r3, #12
 8006b34:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b085      	sub	sp, #20
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f043 0307 	orr.w	r3, r3, #7
 8006b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	609a      	str	r2, [r3, #8]
}
 8006b80:	bf00      	nop
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	021a      	lsls	r2, r3, #8
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	609a      	str	r2, [r3, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f003 031f 	and.w	r3, r3, #31
 8006bde:	2201      	movs	r2, #1
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1a      	ldr	r2, [r3, #32]
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	43db      	mvns	r3, r3
 8006bee:	401a      	ands	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a1a      	ldr	r2, [r3, #32]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	fa01 f303 	lsl.w	r3, r1, r3
 8006c04:	431a      	orrs	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e068      	b.n	8006d02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a2e      	ldr	r2, [pc, #184]	@ (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d108      	bne.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1e      	ldr	r2, [pc, #120]	@ (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01d      	beq.n	8006cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca2:	d018      	beq.n	8006cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d013      	beq.n	8006cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00e      	beq.n	8006cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a18      	ldr	r2, [pc, #96]	@ (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d009      	beq.n	8006cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a13      	ldr	r2, [pc, #76]	@ (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d004      	beq.n	8006cd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a14      	ldr	r2, [pc, #80]	@ (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d10c      	bne.n	8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40012c00 	.word	0x40012c00
 8006d14:	40013400 	.word	0x40013400
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40014000 	.word	0x40014000

08006d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e040      	b.n	8006df8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7fa fef4 	bl	8001b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2224      	movs	r2, #36	@ 0x24
 8006d90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0201 	bic.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fec0 	bl	8007b30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fc05 	bl	80075c0 <UART_SetConfig>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e01b      	b.n	8006df8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0201 	orr.w	r2, r2, #1
 8006dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 ff3f 	bl	8007c74 <UART_CheckIdleState>
 8006df6:	4603      	mov	r3, r0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	@ 0x28
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d177      	bne.n	8006f08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_UART_Transmit+0x24>
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e070      	b.n	8006f0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2221      	movs	r2, #33	@ 0x21
 8006e34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e36:	f7fb f8c1 	bl	8001fbc <HAL_GetTick>
 8006e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	88fa      	ldrh	r2, [r7, #6]
 8006e48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e54:	d108      	bne.n	8006e68 <HAL_UART_Transmit+0x68>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	e003      	b.n	8006e70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e70:	e02f      	b.n	8006ed2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2180      	movs	r1, #128	@ 0x80
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 ffa1 	bl	8007dc4 <UART_WaitOnFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e03b      	b.n	8006f0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10b      	bne.n	8006eb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	881a      	ldrh	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ea4:	b292      	uxth	r2, r2
 8006ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	3302      	adds	r3, #2
 8006eac:	61bb      	str	r3, [r7, #24]
 8006eae:	e007      	b.n	8006ec0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1c9      	bne.n	8006e72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2140      	movs	r1, #64	@ 0x40
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 ff6b 	bl	8007dc4 <UART_WaitOnFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d004      	beq.n	8006efe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e005      	b.n	8006f0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e000      	b.n	8006f0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006f08:	2302      	movs	r3, #2
  }
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3720      	adds	r7, #32
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08a      	sub	sp, #40	@ 0x28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d137      	bne.n	8006f9c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_UART_Receive_IT+0x24>
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e030      	b.n	8006f9e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a18      	ldr	r2, [pc, #96]	@ (8006fa8 <HAL_UART_Receive_IT+0x94>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d01f      	beq.n	8006f8c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d018      	beq.n	8006f8c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	613b      	str	r3, [r7, #16]
   return(result);
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	623b      	str	r3, [r7, #32]
 8006f7a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	69f9      	ldr	r1, [r7, #28]
 8006f7e:	6a3a      	ldr	r2, [r7, #32]
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e6      	bne.n	8006f5a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f8c:	88fb      	ldrh	r3, [r7, #6]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 ff7e 	bl	8007e94 <UART_Start_Receive_IT>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	e000      	b.n	8006f9e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f9c:	2302      	movs	r3, #2
  }
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3728      	adds	r7, #40	@ 0x28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	40008000 	.word	0x40008000

08006fac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b0ba      	sub	sp, #232	@ 0xe8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006fd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006fda:	4013      	ands	r3, r2
 8006fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d115      	bne.n	8007014 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fec:	f003 0320 	and.w	r3, r3, #32
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00f      	beq.n	8007014 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d009      	beq.n	8007014 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 82ae 	beq.w	8007566 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	4798      	blx	r3
      }
      return;
 8007012:	e2a8      	b.n	8007566 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 8117 	beq.w	800724c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800701e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800702a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800702e:	4b85      	ldr	r3, [pc, #532]	@ (8007244 <HAL_UART_IRQHandler+0x298>)
 8007030:	4013      	ands	r3, r2
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 810a 	beq.w	800724c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d011      	beq.n	8007068 <HAL_UART_IRQHandler+0xbc>
 8007044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00b      	beq.n	8007068 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2201      	movs	r2, #1
 8007056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800705e:	f043 0201 	orr.w	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d011      	beq.n	8007098 <HAL_UART_IRQHandler+0xec>
 8007074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00b      	beq.n	8007098 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2202      	movs	r2, #2
 8007086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800708e:	f043 0204 	orr.w	r2, r3, #4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d011      	beq.n	80070c8 <HAL_UART_IRQHandler+0x11c>
 80070a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2204      	movs	r2, #4
 80070b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070be:	f043 0202 	orr.w	r2, r3, #2
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070cc:	f003 0308 	and.w	r3, r3, #8
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d017      	beq.n	8007104 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d105      	bne.n	80070ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80070e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2208      	movs	r2, #8
 80070f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070fa:	f043 0208 	orr.w	r2, r3, #8
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800710c:	2b00      	cmp	r3, #0
 800710e:	d012      	beq.n	8007136 <HAL_UART_IRQHandler+0x18a>
 8007110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007114:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00c      	beq.n	8007136 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 8214 	beq.w	800756a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00d      	beq.n	800716a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800714e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d007      	beq.n	800716a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007170:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800717e:	2b40      	cmp	r3, #64	@ 0x40
 8007180:	d005      	beq.n	800718e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007186:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800718a:	2b00      	cmp	r3, #0
 800718c:	d04f      	beq.n	800722e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 ff46 	bl	8008020 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800719e:	2b40      	cmp	r3, #64	@ 0x40
 80071a0:	d141      	bne.n	8007226 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3308      	adds	r3, #8
 80071a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3308      	adds	r3, #8
 80071ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80071e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1d9      	bne.n	80071a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d013      	beq.n	800721e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071fa:	4a13      	ldr	r2, [pc, #76]	@ (8007248 <HAL_UART_IRQHandler+0x29c>)
 80071fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007202:	4618      	mov	r0, r3
 8007204:	f7fc fc65 	bl	8003ad2 <HAL_DMA_Abort_IT>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d017      	beq.n	800723e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007218:	4610      	mov	r0, r2
 800721a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800721c:	e00f      	b.n	800723e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f9b8 	bl	8007594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007224:	e00b      	b.n	800723e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f9b4 	bl	8007594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722c:	e007      	b.n	800723e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f9b0 	bl	8007594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800723c:	e195      	b.n	800756a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723e:	bf00      	nop
    return;
 8007240:	e193      	b.n	800756a <HAL_UART_IRQHandler+0x5be>
 8007242:	bf00      	nop
 8007244:	04000120 	.word	0x04000120
 8007248:	080080e9 	.word	0x080080e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007250:	2b01      	cmp	r3, #1
 8007252:	f040 814e 	bne.w	80074f2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 8147 	beq.w	80074f2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 8140 	beq.w	80074f2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2210      	movs	r2, #16
 8007278:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007284:	2b40      	cmp	r3, #64	@ 0x40
 8007286:	f040 80b8 	bne.w	80073fa <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007296:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8167 	beq.w	800756e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072aa:	429a      	cmp	r2, r3
 80072ac:	f080 815f 	bcs.w	800756e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f040 8086 	bne.w	80073d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	461a      	mov	r2, r3
 80072f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007302:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800730e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1da      	bne.n	80072cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3308      	adds	r3, #8
 800731c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007328:	f023 0301 	bic.w	r3, r3, #1
 800732c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3308      	adds	r3, #8
 8007336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800733a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800733e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007342:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800734c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e1      	bne.n	8007316 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007368:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007376:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007378:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800737c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e3      	bne.n	8007352 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073a8:	f023 0310 	bic.w	r3, r3, #16
 80073ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e4      	bne.n	8007398 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fc fb3f 	bl	8003a56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f8d8 	bl	80075a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073f8:	e0b9      	b.n	800756e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007406:	b29b      	uxth	r3, r3
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 80ab 	beq.w	8007572 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800741c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 80a6 	beq.w	8007572 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007436:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800743a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007448:	647b      	str	r3, [r7, #68]	@ 0x44
 800744a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800744e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e4      	bne.n	8007426 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3308      	adds	r3, #8
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	623b      	str	r3, [r7, #32]
   return(result);
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3308      	adds	r3, #8
 800747c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007480:	633a      	str	r2, [r7, #48]	@ 0x30
 8007482:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e3      	bne.n	800745c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f023 0310 	bic.w	r3, r3, #16
 80074bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	69b9      	ldr	r1, [r7, #24]
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	617b      	str	r3, [r7, #20]
   return(result);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e4      	bne.n	80074a8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2202      	movs	r2, #2
 80074e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f85c 	bl	80075a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074f0:	e03f      	b.n	8007572 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00e      	beq.n	800751c <HAL_UART_IRQHandler+0x570>
 80074fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d008      	beq.n	800751c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007512:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 ffe3 	bl	80084e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800751a:	e02d      	b.n	8007578 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800751c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00e      	beq.n	8007546 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01c      	beq.n	8007576 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
    }
    return;
 8007544:	e017      	b.n	8007576 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800754a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d012      	beq.n	8007578 <HAL_UART_IRQHandler+0x5cc>
 8007552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00c      	beq.n	8007578 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fdd8 	bl	8008114 <UART_EndTransmit_IT>
    return;
 8007564:	e008      	b.n	8007578 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007566:	bf00      	nop
 8007568:	e006      	b.n	8007578 <HAL_UART_IRQHandler+0x5cc>
    return;
 800756a:	bf00      	nop
 800756c:	e004      	b.n	8007578 <HAL_UART_IRQHandler+0x5cc>
      return;
 800756e:	bf00      	nop
 8007570:	e002      	b.n	8007578 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007572:	bf00      	nop
 8007574:	e000      	b.n	8007578 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007576:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007578:	37e8      	adds	r7, #232	@ 0xe8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop

08007580 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c4:	b08a      	sub	sp, #40	@ 0x28
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	431a      	orrs	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	431a      	orrs	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4ba4      	ldr	r3, [pc, #656]	@ (8007880 <UART_SetConfig+0x2c0>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075f8:	430b      	orrs	r3, r1
 80075fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a99      	ldr	r2, [pc, #612]	@ (8007884 <UART_SetConfig+0x2c4>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d004      	beq.n	800762c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007628:	4313      	orrs	r3, r2
 800762a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800763c:	430a      	orrs	r2, r1
 800763e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a90      	ldr	r2, [pc, #576]	@ (8007888 <UART_SetConfig+0x2c8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d126      	bne.n	8007698 <UART_SetConfig+0xd8>
 800764a:	4b90      	ldr	r3, [pc, #576]	@ (800788c <UART_SetConfig+0x2cc>)
 800764c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007650:	f003 0303 	and.w	r3, r3, #3
 8007654:	2b03      	cmp	r3, #3
 8007656:	d81b      	bhi.n	8007690 <UART_SetConfig+0xd0>
 8007658:	a201      	add	r2, pc, #4	@ (adr r2, 8007660 <UART_SetConfig+0xa0>)
 800765a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765e:	bf00      	nop
 8007660:	08007671 	.word	0x08007671
 8007664:	08007681 	.word	0x08007681
 8007668:	08007679 	.word	0x08007679
 800766c:	08007689 	.word	0x08007689
 8007670:	2301      	movs	r3, #1
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007676:	e116      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007678:	2302      	movs	r3, #2
 800767a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800767e:	e112      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007680:	2304      	movs	r3, #4
 8007682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007686:	e10e      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007688:	2308      	movs	r3, #8
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768e:	e10a      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007690:	2310      	movs	r3, #16
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007696:	e106      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a7c      	ldr	r2, [pc, #496]	@ (8007890 <UART_SetConfig+0x2d0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d138      	bne.n	8007714 <UART_SetConfig+0x154>
 80076a2:	4b7a      	ldr	r3, [pc, #488]	@ (800788c <UART_SetConfig+0x2cc>)
 80076a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a8:	f003 030c 	and.w	r3, r3, #12
 80076ac:	2b0c      	cmp	r3, #12
 80076ae:	d82d      	bhi.n	800770c <UART_SetConfig+0x14c>
 80076b0:	a201      	add	r2, pc, #4	@ (adr r2, 80076b8 <UART_SetConfig+0xf8>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	080076ed 	.word	0x080076ed
 80076bc:	0800770d 	.word	0x0800770d
 80076c0:	0800770d 	.word	0x0800770d
 80076c4:	0800770d 	.word	0x0800770d
 80076c8:	080076fd 	.word	0x080076fd
 80076cc:	0800770d 	.word	0x0800770d
 80076d0:	0800770d 	.word	0x0800770d
 80076d4:	0800770d 	.word	0x0800770d
 80076d8:	080076f5 	.word	0x080076f5
 80076dc:	0800770d 	.word	0x0800770d
 80076e0:	0800770d 	.word	0x0800770d
 80076e4:	0800770d 	.word	0x0800770d
 80076e8:	08007705 	.word	0x08007705
 80076ec:	2300      	movs	r3, #0
 80076ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076f2:	e0d8      	b.n	80078a6 <UART_SetConfig+0x2e6>
 80076f4:	2302      	movs	r3, #2
 80076f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076fa:	e0d4      	b.n	80078a6 <UART_SetConfig+0x2e6>
 80076fc:	2304      	movs	r3, #4
 80076fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007702:	e0d0      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007704:	2308      	movs	r3, #8
 8007706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800770a:	e0cc      	b.n	80078a6 <UART_SetConfig+0x2e6>
 800770c:	2310      	movs	r3, #16
 800770e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007712:	e0c8      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a5e      	ldr	r2, [pc, #376]	@ (8007894 <UART_SetConfig+0x2d4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d125      	bne.n	800776a <UART_SetConfig+0x1aa>
 800771e:	4b5b      	ldr	r3, [pc, #364]	@ (800788c <UART_SetConfig+0x2cc>)
 8007720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007724:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007728:	2b30      	cmp	r3, #48	@ 0x30
 800772a:	d016      	beq.n	800775a <UART_SetConfig+0x19a>
 800772c:	2b30      	cmp	r3, #48	@ 0x30
 800772e:	d818      	bhi.n	8007762 <UART_SetConfig+0x1a2>
 8007730:	2b20      	cmp	r3, #32
 8007732:	d00a      	beq.n	800774a <UART_SetConfig+0x18a>
 8007734:	2b20      	cmp	r3, #32
 8007736:	d814      	bhi.n	8007762 <UART_SetConfig+0x1a2>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <UART_SetConfig+0x182>
 800773c:	2b10      	cmp	r3, #16
 800773e:	d008      	beq.n	8007752 <UART_SetConfig+0x192>
 8007740:	e00f      	b.n	8007762 <UART_SetConfig+0x1a2>
 8007742:	2300      	movs	r3, #0
 8007744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007748:	e0ad      	b.n	80078a6 <UART_SetConfig+0x2e6>
 800774a:	2302      	movs	r3, #2
 800774c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007750:	e0a9      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007752:	2304      	movs	r3, #4
 8007754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007758:	e0a5      	b.n	80078a6 <UART_SetConfig+0x2e6>
 800775a:	2308      	movs	r3, #8
 800775c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007760:	e0a1      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007762:	2310      	movs	r3, #16
 8007764:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007768:	e09d      	b.n	80078a6 <UART_SetConfig+0x2e6>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a4a      	ldr	r2, [pc, #296]	@ (8007898 <UART_SetConfig+0x2d8>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d125      	bne.n	80077c0 <UART_SetConfig+0x200>
 8007774:	4b45      	ldr	r3, [pc, #276]	@ (800788c <UART_SetConfig+0x2cc>)
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800777a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800777e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007780:	d016      	beq.n	80077b0 <UART_SetConfig+0x1f0>
 8007782:	2bc0      	cmp	r3, #192	@ 0xc0
 8007784:	d818      	bhi.n	80077b8 <UART_SetConfig+0x1f8>
 8007786:	2b80      	cmp	r3, #128	@ 0x80
 8007788:	d00a      	beq.n	80077a0 <UART_SetConfig+0x1e0>
 800778a:	2b80      	cmp	r3, #128	@ 0x80
 800778c:	d814      	bhi.n	80077b8 <UART_SetConfig+0x1f8>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <UART_SetConfig+0x1d8>
 8007792:	2b40      	cmp	r3, #64	@ 0x40
 8007794:	d008      	beq.n	80077a8 <UART_SetConfig+0x1e8>
 8007796:	e00f      	b.n	80077b8 <UART_SetConfig+0x1f8>
 8007798:	2300      	movs	r3, #0
 800779a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800779e:	e082      	b.n	80078a6 <UART_SetConfig+0x2e6>
 80077a0:	2302      	movs	r3, #2
 80077a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077a6:	e07e      	b.n	80078a6 <UART_SetConfig+0x2e6>
 80077a8:	2304      	movs	r3, #4
 80077aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ae:	e07a      	b.n	80078a6 <UART_SetConfig+0x2e6>
 80077b0:	2308      	movs	r3, #8
 80077b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077b6:	e076      	b.n	80078a6 <UART_SetConfig+0x2e6>
 80077b8:	2310      	movs	r3, #16
 80077ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077be:	e072      	b.n	80078a6 <UART_SetConfig+0x2e6>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a35      	ldr	r2, [pc, #212]	@ (800789c <UART_SetConfig+0x2dc>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d12a      	bne.n	8007820 <UART_SetConfig+0x260>
 80077ca:	4b30      	ldr	r3, [pc, #192]	@ (800788c <UART_SetConfig+0x2cc>)
 80077cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d8:	d01a      	beq.n	8007810 <UART_SetConfig+0x250>
 80077da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077de:	d81b      	bhi.n	8007818 <UART_SetConfig+0x258>
 80077e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077e4:	d00c      	beq.n	8007800 <UART_SetConfig+0x240>
 80077e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077ea:	d815      	bhi.n	8007818 <UART_SetConfig+0x258>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <UART_SetConfig+0x238>
 80077f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077f4:	d008      	beq.n	8007808 <UART_SetConfig+0x248>
 80077f6:	e00f      	b.n	8007818 <UART_SetConfig+0x258>
 80077f8:	2300      	movs	r3, #0
 80077fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fe:	e052      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007800:	2302      	movs	r3, #2
 8007802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007806:	e04e      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007808:	2304      	movs	r3, #4
 800780a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780e:	e04a      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007810:	2308      	movs	r3, #8
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007816:	e046      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007818:	2310      	movs	r3, #16
 800781a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800781e:	e042      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a17      	ldr	r2, [pc, #92]	@ (8007884 <UART_SetConfig+0x2c4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d13a      	bne.n	80078a0 <UART_SetConfig+0x2e0>
 800782a:	4b18      	ldr	r3, [pc, #96]	@ (800788c <UART_SetConfig+0x2cc>)
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007830:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007834:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007838:	d01a      	beq.n	8007870 <UART_SetConfig+0x2b0>
 800783a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800783e:	d81b      	bhi.n	8007878 <UART_SetConfig+0x2b8>
 8007840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007844:	d00c      	beq.n	8007860 <UART_SetConfig+0x2a0>
 8007846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800784a:	d815      	bhi.n	8007878 <UART_SetConfig+0x2b8>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <UART_SetConfig+0x298>
 8007850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007854:	d008      	beq.n	8007868 <UART_SetConfig+0x2a8>
 8007856:	e00f      	b.n	8007878 <UART_SetConfig+0x2b8>
 8007858:	2300      	movs	r3, #0
 800785a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800785e:	e022      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007860:	2302      	movs	r3, #2
 8007862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007866:	e01e      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007868:	2304      	movs	r3, #4
 800786a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800786e:	e01a      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007870:	2308      	movs	r3, #8
 8007872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007876:	e016      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007878:	2310      	movs	r3, #16
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800787e:	e012      	b.n	80078a6 <UART_SetConfig+0x2e6>
 8007880:	efff69f3 	.word	0xefff69f3
 8007884:	40008000 	.word	0x40008000
 8007888:	40013800 	.word	0x40013800
 800788c:	40021000 	.word	0x40021000
 8007890:	40004400 	.word	0x40004400
 8007894:	40004800 	.word	0x40004800
 8007898:	40004c00 	.word	0x40004c00
 800789c:	40005000 	.word	0x40005000
 80078a0:	2310      	movs	r3, #16
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a9f      	ldr	r2, [pc, #636]	@ (8007b28 <UART_SetConfig+0x568>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d17a      	bne.n	80079a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d824      	bhi.n	8007902 <UART_SetConfig+0x342>
 80078b8:	a201      	add	r2, pc, #4	@ (adr r2, 80078c0 <UART_SetConfig+0x300>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	08007903 	.word	0x08007903
 80078c8:	080078ed 	.word	0x080078ed
 80078cc:	08007903 	.word	0x08007903
 80078d0:	080078f3 	.word	0x080078f3
 80078d4:	08007903 	.word	0x08007903
 80078d8:	08007903 	.word	0x08007903
 80078dc:	08007903 	.word	0x08007903
 80078e0:	080078fb 	.word	0x080078fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e4:	f7fd f8d0 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 80078e8:	61f8      	str	r0, [r7, #28]
        break;
 80078ea:	e010      	b.n	800790e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078ec:	4b8f      	ldr	r3, [pc, #572]	@ (8007b2c <UART_SetConfig+0x56c>)
 80078ee:	61fb      	str	r3, [r7, #28]
        break;
 80078f0:	e00d      	b.n	800790e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078f2:	f7fd f831 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80078f6:	61f8      	str	r0, [r7, #28]
        break;
 80078f8:	e009      	b.n	800790e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078fe:	61fb      	str	r3, [r7, #28]
        break;
 8007900:	e005      	b.n	800790e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800790c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80fb 	beq.w	8007b0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	4413      	add	r3, r2
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	429a      	cmp	r2, r3
 8007924:	d305      	bcc.n	8007932 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	429a      	cmp	r2, r3
 8007930:	d903      	bls.n	800793a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007938:	e0e8      	b.n	8007b0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	2200      	movs	r2, #0
 800793e:	461c      	mov	r4, r3
 8007940:	4615      	mov	r5, r2
 8007942:	f04f 0200 	mov.w	r2, #0
 8007946:	f04f 0300 	mov.w	r3, #0
 800794a:	022b      	lsls	r3, r5, #8
 800794c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007950:	0222      	lsls	r2, r4, #8
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	6849      	ldr	r1, [r1, #4]
 8007956:	0849      	lsrs	r1, r1, #1
 8007958:	2000      	movs	r0, #0
 800795a:	4688      	mov	r8, r1
 800795c:	4681      	mov	r9, r0
 800795e:	eb12 0a08 	adds.w	sl, r2, r8
 8007962:	eb43 0b09 	adc.w	fp, r3, r9
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	603b      	str	r3, [r7, #0]
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007974:	4650      	mov	r0, sl
 8007976:	4659      	mov	r1, fp
 8007978:	f7f9 f986 	bl	8000c88 <__aeabi_uldivmod>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4613      	mov	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800798a:	d308      	bcc.n	800799e <UART_SetConfig+0x3de>
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007992:	d204      	bcs.n	800799e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	60da      	str	r2, [r3, #12]
 800799c:	e0b6      	b.n	8007b0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80079a4:	e0b2      	b.n	8007b0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079ae:	d15e      	bne.n	8007a6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80079b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d828      	bhi.n	8007a0a <UART_SetConfig+0x44a>
 80079b8:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <UART_SetConfig+0x400>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	080079ed 	.word	0x080079ed
 80079c8:	080079f5 	.word	0x080079f5
 80079cc:	08007a0b 	.word	0x08007a0b
 80079d0:	080079fb 	.word	0x080079fb
 80079d4:	08007a0b 	.word	0x08007a0b
 80079d8:	08007a0b 	.word	0x08007a0b
 80079dc:	08007a0b 	.word	0x08007a0b
 80079e0:	08007a03 	.word	0x08007a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e4:	f7fd f850 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 80079e8:	61f8      	str	r0, [r7, #28]
        break;
 80079ea:	e014      	b.n	8007a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079ec:	f7fd f862 	bl	8004ab4 <HAL_RCC_GetPCLK2Freq>
 80079f0:	61f8      	str	r0, [r7, #28]
        break;
 80079f2:	e010      	b.n	8007a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079f4:	4b4d      	ldr	r3, [pc, #308]	@ (8007b2c <UART_SetConfig+0x56c>)
 80079f6:	61fb      	str	r3, [r7, #28]
        break;
 80079f8:	e00d      	b.n	8007a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079fa:	f7fc ffad 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80079fe:	61f8      	str	r0, [r7, #28]
        break;
 8007a00:	e009      	b.n	8007a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a06:	61fb      	str	r3, [r7, #28]
        break;
 8007a08:	e005      	b.n	8007a16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d077      	beq.n	8007b0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	005a      	lsls	r2, r3, #1
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	441a      	add	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	2b0f      	cmp	r3, #15
 8007a36:	d916      	bls.n	8007a66 <UART_SetConfig+0x4a6>
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a3e:	d212      	bcs.n	8007a66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f023 030f 	bic.w	r3, r3, #15
 8007a48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	085b      	lsrs	r3, r3, #1
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f003 0307 	and.w	r3, r3, #7
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	8afb      	ldrh	r3, [r7, #22]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	8afa      	ldrh	r2, [r7, #22]
 8007a62:	60da      	str	r2, [r3, #12]
 8007a64:	e052      	b.n	8007b0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a6c:	e04e      	b.n	8007b0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d827      	bhi.n	8007ac6 <UART_SetConfig+0x506>
 8007a76:	a201      	add	r2, pc, #4	@ (adr r2, 8007a7c <UART_SetConfig+0x4bc>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007aa1 	.word	0x08007aa1
 8007a80:	08007aa9 	.word	0x08007aa9
 8007a84:	08007ab1 	.word	0x08007ab1
 8007a88:	08007ac7 	.word	0x08007ac7
 8007a8c:	08007ab7 	.word	0x08007ab7
 8007a90:	08007ac7 	.word	0x08007ac7
 8007a94:	08007ac7 	.word	0x08007ac7
 8007a98:	08007ac7 	.word	0x08007ac7
 8007a9c:	08007abf 	.word	0x08007abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aa0:	f7fc fff2 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 8007aa4:	61f8      	str	r0, [r7, #28]
        break;
 8007aa6:	e014      	b.n	8007ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aa8:	f7fd f804 	bl	8004ab4 <HAL_RCC_GetPCLK2Freq>
 8007aac:	61f8      	str	r0, [r7, #28]
        break;
 8007aae:	e010      	b.n	8007ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8007b2c <UART_SetConfig+0x56c>)
 8007ab2:	61fb      	str	r3, [r7, #28]
        break;
 8007ab4:	e00d      	b.n	8007ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ab6:	f7fc ff4f 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8007aba:	61f8      	str	r0, [r7, #28]
        break;
 8007abc:	e009      	b.n	8007ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ac2:	61fb      	str	r3, [r7, #28]
        break;
 8007ac4:	e005      	b.n	8007ad2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ad0:	bf00      	nop
    }

    if (pclk != 0U)
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d019      	beq.n	8007b0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	085a      	lsrs	r2, r3, #1
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	441a      	add	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b0f      	cmp	r3, #15
 8007af0:	d909      	bls.n	8007b06 <UART_SetConfig+0x546>
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007af8:	d205      	bcs.n	8007b06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	60da      	str	r2, [r3, #12]
 8007b04:	e002      	b.n	8007b0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3728      	adds	r7, #40	@ 0x28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b26:	bf00      	nop
 8007b28:	40008000 	.word	0x40008000
 8007b2c:	00f42400 	.word	0x00f42400

08007b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00a      	beq.n	8007b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba2:	f003 0304 	and.w	r3, r3, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc4:	f003 0310 	and.w	r3, r3, #16
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01a      	beq.n	8007c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c2e:	d10a      	bne.n	8007c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	605a      	str	r2, [r3, #4]
  }
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b098      	sub	sp, #96	@ 0x60
 8007c78:	af02      	add	r7, sp, #8
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c84:	f7fa f99a 	bl	8001fbc <HAL_GetTick>
 8007c88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0308 	and.w	r3, r3, #8
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d12e      	bne.n	8007cf6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f88c 	bl	8007dc4 <UART_WaitOnFlagUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d021      	beq.n	8007cf6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e6      	bne.n	8007cb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e062      	b.n	8007dbc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d149      	bne.n	8007d98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f856 	bl	8007dc4 <UART_WaitOnFlagUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d03c      	beq.n	8007d98 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d44:	e841 2300 	strex	r3, r2, [r1]
 8007d48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e6      	bne.n	8007d1e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3308      	adds	r3, #8
 8007d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0301 	bic.w	r3, r3, #1
 8007d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d70:	61fa      	str	r2, [r7, #28]
 8007d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	69b9      	ldr	r1, [r7, #24]
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e5      	bne.n	8007d50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e011      	b.n	8007dbc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3758      	adds	r7, #88	@ 0x58
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd4:	e049      	b.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ddc:	d045      	beq.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dde:	f7fa f8ed 	bl	8001fbc <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d302      	bcc.n	8007df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e048      	b.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d031      	beq.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	f003 0308 	and.w	r3, r3, #8
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d110      	bne.n	8007e36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2208      	movs	r2, #8
 8007e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f8ff 	bl	8008020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2208      	movs	r2, #8
 8007e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e029      	b.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e44:	d111      	bne.n	8007e6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 f8e5 	bl	8008020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e00f      	b.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4013      	ands	r3, r2
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	bf0c      	ite	eq
 8007e7a:	2301      	moveq	r3, #1
 8007e7c:	2300      	movne	r3, #0
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d0a6      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b097      	sub	sp, #92	@ 0x5c
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	88fa      	ldrh	r2, [r7, #6]
 8007eac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	88fa      	ldrh	r2, [r7, #6]
 8007eb4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec6:	d10e      	bne.n	8007ee6 <UART_Start_Receive_IT+0x52>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <UART_Start_Receive_IT+0x48>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007eda:	e02d      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	22ff      	movs	r2, #255	@ 0xff
 8007ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007ee4:	e028      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10d      	bne.n	8007f0a <UART_Start_Receive_IT+0x76>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d104      	bne.n	8007f00 <UART_Start_Receive_IT+0x6c>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	22ff      	movs	r2, #255	@ 0xff
 8007efa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007efe:	e01b      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	227f      	movs	r2, #127	@ 0x7f
 8007f04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f08:	e016      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f12:	d10d      	bne.n	8007f30 <UART_Start_Receive_IT+0x9c>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d104      	bne.n	8007f26 <UART_Start_Receive_IT+0x92>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	227f      	movs	r2, #127	@ 0x7f
 8007f20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f24:	e008      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	223f      	movs	r2, #63	@ 0x3f
 8007f2a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f2e:	e003      	b.n	8007f38 <UART_Start_Receive_IT+0xa4>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2222      	movs	r2, #34	@ 0x22
 8007f44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5a:	f043 0301 	orr.w	r3, r3, #1
 8007f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3308      	adds	r3, #8
 8007f66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f68:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007f6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f84:	d107      	bne.n	8007f96 <UART_Start_Receive_IT+0x102>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d103      	bne.n	8007f96 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4a21      	ldr	r2, [pc, #132]	@ (8008018 <UART_Start_Receive_IT+0x184>)
 8007f92:	669a      	str	r2, [r3, #104]	@ 0x68
 8007f94:	e002      	b.n	8007f9c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4a20      	ldr	r2, [pc, #128]	@ (800801c <UART_Start_Receive_IT+0x188>)
 8007f9a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d019      	beq.n	8007fd8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e6      	bne.n	8007fa4 <UART_Start_Receive_IT+0x110>
 8007fd6:	e018      	b.n	800800a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f043 0320 	orr.w	r3, r3, #32
 8007fec:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ff6:	623b      	str	r3, [r7, #32]
 8007ff8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	69f9      	ldr	r1, [r7, #28]
 8007ffc:	6a3a      	ldr	r2, [r7, #32]
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	61bb      	str	r3, [r7, #24]
   return(result);
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e6      	bne.n	8007fd8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	375c      	adds	r7, #92	@ 0x5c
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	08008325 	.word	0x08008325
 800801c:	08008169 	.word	0x08008169

08008020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008020:	b480      	push	{r7}
 8008022:	b095      	sub	sp, #84	@ 0x54
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800803c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008046:	643b      	str	r3, [r7, #64]	@ 0x40
 8008048:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800804c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e6      	bne.n	8008028 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3308      	adds	r3, #8
 8008060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	61fb      	str	r3, [r7, #28]
   return(result);
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	f023 0301 	bic.w	r3, r3, #1
 8008070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3308      	adds	r3, #8
 8008078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800807a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800807c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e5      	bne.n	800805a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008092:	2b01      	cmp	r3, #1
 8008094:	d118      	bne.n	80080c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f023 0310 	bic.w	r3, r3, #16
 80080aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080b4:	61bb      	str	r3, [r7, #24]
 80080b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b8:	6979      	ldr	r1, [r7, #20]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	e841 2300 	strex	r3, r2, [r1]
 80080c0:	613b      	str	r3, [r7, #16]
   return(result);
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e6      	bne.n	8008096 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80080dc:	bf00      	nop
 80080de:	3754      	adds	r7, #84	@ 0x54
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7ff fa44 	bl	8007594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	60bb      	str	r3, [r7, #8]
   return(result);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008130:	61fb      	str	r3, [r7, #28]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	61bb      	str	r3, [r7, #24]
 800813c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	6979      	ldr	r1, [r7, #20]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	613b      	str	r3, [r7, #16]
   return(result);
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e6      	bne.n	800811c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff fa10 	bl	8007580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008160:	bf00      	nop
 8008162:	3720      	adds	r7, #32
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b09c      	sub	sp, #112	@ 0x70
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008176:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008180:	2b22      	cmp	r3, #34	@ 0x22
 8008182:	f040 80be 	bne.w	8008302 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800818c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008190:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008194:	b2d9      	uxtb	r1, r3
 8008196:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800819a:	b2da      	uxtb	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a0:	400a      	ands	r2, r1
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f040 80a3 	bne.w	8008316 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e6      	bne.n	80081d0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3308      	adds	r3, #8
 8008208:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008214:	f023 0301 	bic.w	r3, r3, #1
 8008218:	667b      	str	r3, [r7, #100]	@ 0x64
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3308      	adds	r3, #8
 8008220:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008222:	647a      	str	r2, [r7, #68]	@ 0x44
 8008224:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008228:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e5      	bne.n	8008202 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a34      	ldr	r2, [pc, #208]	@ (8008320 <UART_RxISR_8BIT+0x1b8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d01f      	beq.n	8008294 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d018      	beq.n	8008294 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	e853 3f00 	ldrex	r3, [r3]
 800826e:	623b      	str	r3, [r7, #32]
   return(result);
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008276:	663b      	str	r3, [r7, #96]	@ 0x60
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008280:	633b      	str	r3, [r7, #48]	@ 0x30
 8008282:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008288:	e841 2300 	strex	r3, r2, [r1]
 800828c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800828e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e6      	bne.n	8008262 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008298:	2b01      	cmp	r3, #1
 800829a:	d12e      	bne.n	80082fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0310 	bic.w	r3, r3, #16
 80082b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082c0:	61fb      	str	r3, [r7, #28]
 80082c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	69b9      	ldr	r1, [r7, #24]
 80082c6:	69fa      	ldr	r2, [r7, #28]
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	617b      	str	r3, [r7, #20]
   return(result);
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e6      	bne.n	80082a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b10      	cmp	r3, #16
 80082e0:	d103      	bne.n	80082ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2210      	movs	r2, #16
 80082e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff f958 	bl	80075a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082f8:	e00d      	b.n	8008316 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7f9 fa68 	bl	80017d0 <HAL_UART_RxCpltCallback>
}
 8008300:	e009      	b.n	8008316 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	8b1b      	ldrh	r3, [r3, #24]
 8008308:	b29a      	uxth	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0208 	orr.w	r2, r2, #8
 8008312:	b292      	uxth	r2, r2
 8008314:	831a      	strh	r2, [r3, #24]
}
 8008316:	bf00      	nop
 8008318:	3770      	adds	r7, #112	@ 0x70
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	40008000 	.word	0x40008000

08008324 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b09c      	sub	sp, #112	@ 0x70
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008332:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800833c:	2b22      	cmp	r3, #34	@ 0x22
 800833e:	f040 80be 	bne.w	80084be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008348:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008350:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008352:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008356:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800835a:	4013      	ands	r3, r2
 800835c:	b29a      	uxth	r2, r3
 800835e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008360:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008366:	1c9a      	adds	r2, r3, #2
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b01      	subs	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008384:	b29b      	uxth	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 80a3 	bne.w	80084d2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800839a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800839c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80083ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80083b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e6      	bne.n	800838c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	f023 0301 	bic.w	r3, r3, #1
 80083d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3308      	adds	r3, #8
 80083dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80083de:	643a      	str	r2, [r7, #64]	@ 0x40
 80083e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e5      	bne.n	80083be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2220      	movs	r2, #32
 80083f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a34      	ldr	r2, [pc, #208]	@ (80084dc <UART_RxISR_16BIT+0x1b8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d01f      	beq.n	8008450 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d018      	beq.n	8008450 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	61fb      	str	r3, [r7, #28]
   return(result);
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008432:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800843c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800843e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e6      	bne.n	800841e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008454:	2b01      	cmp	r3, #1
 8008456:	d12e      	bne.n	80084b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	60bb      	str	r3, [r7, #8]
   return(result);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f023 0310 	bic.w	r3, r3, #16
 8008472:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6979      	ldr	r1, [r7, #20]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	613b      	str	r3, [r7, #16]
   return(result);
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f003 0310 	and.w	r3, r3, #16
 800849a:	2b10      	cmp	r3, #16
 800849c:	d103      	bne.n	80084a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2210      	movs	r2, #16
 80084a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff f87a 	bl	80075a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084b4:	e00d      	b.n	80084d2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f9 f98a 	bl	80017d0 <HAL_UART_RxCpltCallback>
}
 80084bc:	e009      	b.n	80084d2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	8b1b      	ldrh	r3, [r3, #24]
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0208 	orr.w	r2, r2, #8
 80084ce:	b292      	uxth	r2, r2
 80084d0:	831a      	strh	r2, [r3, #24]
}
 80084d2:	bf00      	nop
 80084d4:	3770      	adds	r7, #112	@ 0x70
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	40008000 	.word	0x40008000

080084e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <__cvt>:
 80084f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	ec57 6b10 	vmov	r6, r7, d0
 80084fc:	2f00      	cmp	r7, #0
 80084fe:	460c      	mov	r4, r1
 8008500:	4619      	mov	r1, r3
 8008502:	463b      	mov	r3, r7
 8008504:	bfbb      	ittet	lt
 8008506:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800850a:	461f      	movlt	r7, r3
 800850c:	2300      	movge	r3, #0
 800850e:	232d      	movlt	r3, #45	@ 0x2d
 8008510:	700b      	strb	r3, [r1, #0]
 8008512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008514:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008518:	4691      	mov	r9, r2
 800851a:	f023 0820 	bic.w	r8, r3, #32
 800851e:	bfbc      	itt	lt
 8008520:	4632      	movlt	r2, r6
 8008522:	4616      	movlt	r6, r2
 8008524:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008528:	d005      	beq.n	8008536 <__cvt+0x42>
 800852a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800852e:	d100      	bne.n	8008532 <__cvt+0x3e>
 8008530:	3401      	adds	r4, #1
 8008532:	2102      	movs	r1, #2
 8008534:	e000      	b.n	8008538 <__cvt+0x44>
 8008536:	2103      	movs	r1, #3
 8008538:	ab03      	add	r3, sp, #12
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	ab02      	add	r3, sp, #8
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	ec47 6b10 	vmov	d0, r6, r7
 8008544:	4653      	mov	r3, sl
 8008546:	4622      	mov	r2, r4
 8008548:	f001 f876 	bl	8009638 <_dtoa_r>
 800854c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008550:	4605      	mov	r5, r0
 8008552:	d119      	bne.n	8008588 <__cvt+0x94>
 8008554:	f019 0f01 	tst.w	r9, #1
 8008558:	d00e      	beq.n	8008578 <__cvt+0x84>
 800855a:	eb00 0904 	add.w	r9, r0, r4
 800855e:	2200      	movs	r2, #0
 8008560:	2300      	movs	r3, #0
 8008562:	4630      	mov	r0, r6
 8008564:	4639      	mov	r1, r7
 8008566:	f7f8 faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800856a:	b108      	cbz	r0, 8008570 <__cvt+0x7c>
 800856c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008570:	2230      	movs	r2, #48	@ 0x30
 8008572:	9b03      	ldr	r3, [sp, #12]
 8008574:	454b      	cmp	r3, r9
 8008576:	d31e      	bcc.n	80085b6 <__cvt+0xc2>
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800857c:	1b5b      	subs	r3, r3, r5
 800857e:	4628      	mov	r0, r5
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	b004      	add	sp, #16
 8008584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008588:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800858c:	eb00 0904 	add.w	r9, r0, r4
 8008590:	d1e5      	bne.n	800855e <__cvt+0x6a>
 8008592:	7803      	ldrb	r3, [r0, #0]
 8008594:	2b30      	cmp	r3, #48	@ 0x30
 8008596:	d10a      	bne.n	80085ae <__cvt+0xba>
 8008598:	2200      	movs	r2, #0
 800859a:	2300      	movs	r3, #0
 800859c:	4630      	mov	r0, r6
 800859e:	4639      	mov	r1, r7
 80085a0:	f7f8 fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80085a4:	b918      	cbnz	r0, 80085ae <__cvt+0xba>
 80085a6:	f1c4 0401 	rsb	r4, r4, #1
 80085aa:	f8ca 4000 	str.w	r4, [sl]
 80085ae:	f8da 3000 	ldr.w	r3, [sl]
 80085b2:	4499      	add	r9, r3
 80085b4:	e7d3      	b.n	800855e <__cvt+0x6a>
 80085b6:	1c59      	adds	r1, r3, #1
 80085b8:	9103      	str	r1, [sp, #12]
 80085ba:	701a      	strb	r2, [r3, #0]
 80085bc:	e7d9      	b.n	8008572 <__cvt+0x7e>

080085be <__exponent>:
 80085be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085c0:	2900      	cmp	r1, #0
 80085c2:	bfba      	itte	lt
 80085c4:	4249      	neglt	r1, r1
 80085c6:	232d      	movlt	r3, #45	@ 0x2d
 80085c8:	232b      	movge	r3, #43	@ 0x2b
 80085ca:	2909      	cmp	r1, #9
 80085cc:	7002      	strb	r2, [r0, #0]
 80085ce:	7043      	strb	r3, [r0, #1]
 80085d0:	dd29      	ble.n	8008626 <__exponent+0x68>
 80085d2:	f10d 0307 	add.w	r3, sp, #7
 80085d6:	461d      	mov	r5, r3
 80085d8:	270a      	movs	r7, #10
 80085da:	461a      	mov	r2, r3
 80085dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80085e0:	fb07 1416 	mls	r4, r7, r6, r1
 80085e4:	3430      	adds	r4, #48	@ 0x30
 80085e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80085ea:	460c      	mov	r4, r1
 80085ec:	2c63      	cmp	r4, #99	@ 0x63
 80085ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80085f2:	4631      	mov	r1, r6
 80085f4:	dcf1      	bgt.n	80085da <__exponent+0x1c>
 80085f6:	3130      	adds	r1, #48	@ 0x30
 80085f8:	1e94      	subs	r4, r2, #2
 80085fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80085fe:	1c41      	adds	r1, r0, #1
 8008600:	4623      	mov	r3, r4
 8008602:	42ab      	cmp	r3, r5
 8008604:	d30a      	bcc.n	800861c <__exponent+0x5e>
 8008606:	f10d 0309 	add.w	r3, sp, #9
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	42ac      	cmp	r4, r5
 800860e:	bf88      	it	hi
 8008610:	2300      	movhi	r3, #0
 8008612:	3302      	adds	r3, #2
 8008614:	4403      	add	r3, r0
 8008616:	1a18      	subs	r0, r3, r0
 8008618:	b003      	add	sp, #12
 800861a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800861c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008620:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008624:	e7ed      	b.n	8008602 <__exponent+0x44>
 8008626:	2330      	movs	r3, #48	@ 0x30
 8008628:	3130      	adds	r1, #48	@ 0x30
 800862a:	7083      	strb	r3, [r0, #2]
 800862c:	70c1      	strb	r1, [r0, #3]
 800862e:	1d03      	adds	r3, r0, #4
 8008630:	e7f1      	b.n	8008616 <__exponent+0x58>
	...

08008634 <_printf_float>:
 8008634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	b08d      	sub	sp, #52	@ 0x34
 800863a:	460c      	mov	r4, r1
 800863c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008640:	4616      	mov	r6, r2
 8008642:	461f      	mov	r7, r3
 8008644:	4605      	mov	r5, r0
 8008646:	f000 feef 	bl	8009428 <_localeconv_r>
 800864a:	6803      	ldr	r3, [r0, #0]
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	4618      	mov	r0, r3
 8008650:	f7f7 fe0e 	bl	8000270 <strlen>
 8008654:	2300      	movs	r3, #0
 8008656:	930a      	str	r3, [sp, #40]	@ 0x28
 8008658:	f8d8 3000 	ldr.w	r3, [r8]
 800865c:	9005      	str	r0, [sp, #20]
 800865e:	3307      	adds	r3, #7
 8008660:	f023 0307 	bic.w	r3, r3, #7
 8008664:	f103 0208 	add.w	r2, r3, #8
 8008668:	f894 a018 	ldrb.w	sl, [r4, #24]
 800866c:	f8d4 b000 	ldr.w	fp, [r4]
 8008670:	f8c8 2000 	str.w	r2, [r8]
 8008674:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008678:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800867c:	9307      	str	r3, [sp, #28]
 800867e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008682:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800868a:	4b9c      	ldr	r3, [pc, #624]	@ (80088fc <_printf_float+0x2c8>)
 800868c:	f04f 32ff 	mov.w	r2, #4294967295
 8008690:	f7f8 fa4c 	bl	8000b2c <__aeabi_dcmpun>
 8008694:	bb70      	cbnz	r0, 80086f4 <_printf_float+0xc0>
 8008696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800869a:	4b98      	ldr	r3, [pc, #608]	@ (80088fc <_printf_float+0x2c8>)
 800869c:	f04f 32ff 	mov.w	r2, #4294967295
 80086a0:	f7f8 fa26 	bl	8000af0 <__aeabi_dcmple>
 80086a4:	bb30      	cbnz	r0, 80086f4 <_printf_float+0xc0>
 80086a6:	2200      	movs	r2, #0
 80086a8:	2300      	movs	r3, #0
 80086aa:	4640      	mov	r0, r8
 80086ac:	4649      	mov	r1, r9
 80086ae:	f7f8 fa15 	bl	8000adc <__aeabi_dcmplt>
 80086b2:	b110      	cbz	r0, 80086ba <_printf_float+0x86>
 80086b4:	232d      	movs	r3, #45	@ 0x2d
 80086b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ba:	4a91      	ldr	r2, [pc, #580]	@ (8008900 <_printf_float+0x2cc>)
 80086bc:	4b91      	ldr	r3, [pc, #580]	@ (8008904 <_printf_float+0x2d0>)
 80086be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80086c2:	bf94      	ite	ls
 80086c4:	4690      	movls	r8, r2
 80086c6:	4698      	movhi	r8, r3
 80086c8:	2303      	movs	r3, #3
 80086ca:	6123      	str	r3, [r4, #16]
 80086cc:	f02b 0304 	bic.w	r3, fp, #4
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	f04f 0900 	mov.w	r9, #0
 80086d6:	9700      	str	r7, [sp, #0]
 80086d8:	4633      	mov	r3, r6
 80086da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80086dc:	4621      	mov	r1, r4
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 f9d2 	bl	8008a88 <_printf_common>
 80086e4:	3001      	adds	r0, #1
 80086e6:	f040 808d 	bne.w	8008804 <_printf_float+0x1d0>
 80086ea:	f04f 30ff 	mov.w	r0, #4294967295
 80086ee:	b00d      	add	sp, #52	@ 0x34
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	4642      	mov	r2, r8
 80086f6:	464b      	mov	r3, r9
 80086f8:	4640      	mov	r0, r8
 80086fa:	4649      	mov	r1, r9
 80086fc:	f7f8 fa16 	bl	8000b2c <__aeabi_dcmpun>
 8008700:	b140      	cbz	r0, 8008714 <_printf_float+0xe0>
 8008702:	464b      	mov	r3, r9
 8008704:	2b00      	cmp	r3, #0
 8008706:	bfbc      	itt	lt
 8008708:	232d      	movlt	r3, #45	@ 0x2d
 800870a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800870e:	4a7e      	ldr	r2, [pc, #504]	@ (8008908 <_printf_float+0x2d4>)
 8008710:	4b7e      	ldr	r3, [pc, #504]	@ (800890c <_printf_float+0x2d8>)
 8008712:	e7d4      	b.n	80086be <_printf_float+0x8a>
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800871a:	9206      	str	r2, [sp, #24]
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	d13b      	bne.n	8008798 <_printf_float+0x164>
 8008720:	2306      	movs	r3, #6
 8008722:	6063      	str	r3, [r4, #4]
 8008724:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008728:	2300      	movs	r3, #0
 800872a:	6022      	str	r2, [r4, #0]
 800872c:	9303      	str	r3, [sp, #12]
 800872e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008730:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008734:	ab09      	add	r3, sp, #36	@ 0x24
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	6861      	ldr	r1, [r4, #4]
 800873a:	ec49 8b10 	vmov	d0, r8, r9
 800873e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008742:	4628      	mov	r0, r5
 8008744:	f7ff fed6 	bl	80084f4 <__cvt>
 8008748:	9b06      	ldr	r3, [sp, #24]
 800874a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800874c:	2b47      	cmp	r3, #71	@ 0x47
 800874e:	4680      	mov	r8, r0
 8008750:	d129      	bne.n	80087a6 <_printf_float+0x172>
 8008752:	1cc8      	adds	r0, r1, #3
 8008754:	db02      	blt.n	800875c <_printf_float+0x128>
 8008756:	6863      	ldr	r3, [r4, #4]
 8008758:	4299      	cmp	r1, r3
 800875a:	dd41      	ble.n	80087e0 <_printf_float+0x1ac>
 800875c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008760:	fa5f fa8a 	uxtb.w	sl, sl
 8008764:	3901      	subs	r1, #1
 8008766:	4652      	mov	r2, sl
 8008768:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800876c:	9109      	str	r1, [sp, #36]	@ 0x24
 800876e:	f7ff ff26 	bl	80085be <__exponent>
 8008772:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008774:	1813      	adds	r3, r2, r0
 8008776:	2a01      	cmp	r2, #1
 8008778:	4681      	mov	r9, r0
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	dc02      	bgt.n	8008784 <_printf_float+0x150>
 800877e:	6822      	ldr	r2, [r4, #0]
 8008780:	07d2      	lsls	r2, r2, #31
 8008782:	d501      	bpl.n	8008788 <_printf_float+0x154>
 8008784:	3301      	adds	r3, #1
 8008786:	6123      	str	r3, [r4, #16]
 8008788:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0a2      	beq.n	80086d6 <_printf_float+0xa2>
 8008790:	232d      	movs	r3, #45	@ 0x2d
 8008792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008796:	e79e      	b.n	80086d6 <_printf_float+0xa2>
 8008798:	9a06      	ldr	r2, [sp, #24]
 800879a:	2a47      	cmp	r2, #71	@ 0x47
 800879c:	d1c2      	bne.n	8008724 <_printf_float+0xf0>
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1c0      	bne.n	8008724 <_printf_float+0xf0>
 80087a2:	2301      	movs	r3, #1
 80087a4:	e7bd      	b.n	8008722 <_printf_float+0xee>
 80087a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80087aa:	d9db      	bls.n	8008764 <_printf_float+0x130>
 80087ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80087b0:	d118      	bne.n	80087e4 <_printf_float+0x1b0>
 80087b2:	2900      	cmp	r1, #0
 80087b4:	6863      	ldr	r3, [r4, #4]
 80087b6:	dd0b      	ble.n	80087d0 <_printf_float+0x19c>
 80087b8:	6121      	str	r1, [r4, #16]
 80087ba:	b913      	cbnz	r3, 80087c2 <_printf_float+0x18e>
 80087bc:	6822      	ldr	r2, [r4, #0]
 80087be:	07d0      	lsls	r0, r2, #31
 80087c0:	d502      	bpl.n	80087c8 <_printf_float+0x194>
 80087c2:	3301      	adds	r3, #1
 80087c4:	440b      	add	r3, r1
 80087c6:	6123      	str	r3, [r4, #16]
 80087c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80087ca:	f04f 0900 	mov.w	r9, #0
 80087ce:	e7db      	b.n	8008788 <_printf_float+0x154>
 80087d0:	b913      	cbnz	r3, 80087d8 <_printf_float+0x1a4>
 80087d2:	6822      	ldr	r2, [r4, #0]
 80087d4:	07d2      	lsls	r2, r2, #31
 80087d6:	d501      	bpl.n	80087dc <_printf_float+0x1a8>
 80087d8:	3302      	adds	r3, #2
 80087da:	e7f4      	b.n	80087c6 <_printf_float+0x192>
 80087dc:	2301      	movs	r3, #1
 80087de:	e7f2      	b.n	80087c6 <_printf_float+0x192>
 80087e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80087e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087e6:	4299      	cmp	r1, r3
 80087e8:	db05      	blt.n	80087f6 <_printf_float+0x1c2>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	6121      	str	r1, [r4, #16]
 80087ee:	07d8      	lsls	r0, r3, #31
 80087f0:	d5ea      	bpl.n	80087c8 <_printf_float+0x194>
 80087f2:	1c4b      	adds	r3, r1, #1
 80087f4:	e7e7      	b.n	80087c6 <_printf_float+0x192>
 80087f6:	2900      	cmp	r1, #0
 80087f8:	bfd4      	ite	le
 80087fa:	f1c1 0202 	rsble	r2, r1, #2
 80087fe:	2201      	movgt	r2, #1
 8008800:	4413      	add	r3, r2
 8008802:	e7e0      	b.n	80087c6 <_printf_float+0x192>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	055a      	lsls	r2, r3, #21
 8008808:	d407      	bmi.n	800881a <_printf_float+0x1e6>
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	4642      	mov	r2, r8
 800880e:	4631      	mov	r1, r6
 8008810:	4628      	mov	r0, r5
 8008812:	47b8      	blx	r7
 8008814:	3001      	adds	r0, #1
 8008816:	d12b      	bne.n	8008870 <_printf_float+0x23c>
 8008818:	e767      	b.n	80086ea <_printf_float+0xb6>
 800881a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800881e:	f240 80dd 	bls.w	80089dc <_printf_float+0x3a8>
 8008822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008826:	2200      	movs	r2, #0
 8008828:	2300      	movs	r3, #0
 800882a:	f7f8 f94d 	bl	8000ac8 <__aeabi_dcmpeq>
 800882e:	2800      	cmp	r0, #0
 8008830:	d033      	beq.n	800889a <_printf_float+0x266>
 8008832:	4a37      	ldr	r2, [pc, #220]	@ (8008910 <_printf_float+0x2dc>)
 8008834:	2301      	movs	r3, #1
 8008836:	4631      	mov	r1, r6
 8008838:	4628      	mov	r0, r5
 800883a:	47b8      	blx	r7
 800883c:	3001      	adds	r0, #1
 800883e:	f43f af54 	beq.w	80086ea <_printf_float+0xb6>
 8008842:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008846:	4543      	cmp	r3, r8
 8008848:	db02      	blt.n	8008850 <_printf_float+0x21c>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	07d8      	lsls	r0, r3, #31
 800884e:	d50f      	bpl.n	8008870 <_printf_float+0x23c>
 8008850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008854:	4631      	mov	r1, r6
 8008856:	4628      	mov	r0, r5
 8008858:	47b8      	blx	r7
 800885a:	3001      	adds	r0, #1
 800885c:	f43f af45 	beq.w	80086ea <_printf_float+0xb6>
 8008860:	f04f 0900 	mov.w	r9, #0
 8008864:	f108 38ff 	add.w	r8, r8, #4294967295
 8008868:	f104 0a1a 	add.w	sl, r4, #26
 800886c:	45c8      	cmp	r8, r9
 800886e:	dc09      	bgt.n	8008884 <_printf_float+0x250>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	079b      	lsls	r3, r3, #30
 8008874:	f100 8103 	bmi.w	8008a7e <_printf_float+0x44a>
 8008878:	68e0      	ldr	r0, [r4, #12]
 800887a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800887c:	4298      	cmp	r0, r3
 800887e:	bfb8      	it	lt
 8008880:	4618      	movlt	r0, r3
 8008882:	e734      	b.n	80086ee <_printf_float+0xba>
 8008884:	2301      	movs	r3, #1
 8008886:	4652      	mov	r2, sl
 8008888:	4631      	mov	r1, r6
 800888a:	4628      	mov	r0, r5
 800888c:	47b8      	blx	r7
 800888e:	3001      	adds	r0, #1
 8008890:	f43f af2b 	beq.w	80086ea <_printf_float+0xb6>
 8008894:	f109 0901 	add.w	r9, r9, #1
 8008898:	e7e8      	b.n	800886c <_printf_float+0x238>
 800889a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800889c:	2b00      	cmp	r3, #0
 800889e:	dc39      	bgt.n	8008914 <_printf_float+0x2e0>
 80088a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008910 <_printf_float+0x2dc>)
 80088a2:	2301      	movs	r3, #1
 80088a4:	4631      	mov	r1, r6
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b8      	blx	r7
 80088aa:	3001      	adds	r0, #1
 80088ac:	f43f af1d 	beq.w	80086ea <_printf_float+0xb6>
 80088b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80088b4:	ea59 0303 	orrs.w	r3, r9, r3
 80088b8:	d102      	bne.n	80088c0 <_printf_float+0x28c>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	07d9      	lsls	r1, r3, #31
 80088be:	d5d7      	bpl.n	8008870 <_printf_float+0x23c>
 80088c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c4:	4631      	mov	r1, r6
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b8      	blx	r7
 80088ca:	3001      	adds	r0, #1
 80088cc:	f43f af0d 	beq.w	80086ea <_printf_float+0xb6>
 80088d0:	f04f 0a00 	mov.w	sl, #0
 80088d4:	f104 0b1a 	add.w	fp, r4, #26
 80088d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088da:	425b      	negs	r3, r3
 80088dc:	4553      	cmp	r3, sl
 80088de:	dc01      	bgt.n	80088e4 <_printf_float+0x2b0>
 80088e0:	464b      	mov	r3, r9
 80088e2:	e793      	b.n	800880c <_printf_float+0x1d8>
 80088e4:	2301      	movs	r3, #1
 80088e6:	465a      	mov	r2, fp
 80088e8:	4631      	mov	r1, r6
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	f43f aefb 	beq.w	80086ea <_printf_float+0xb6>
 80088f4:	f10a 0a01 	add.w	sl, sl, #1
 80088f8:	e7ee      	b.n	80088d8 <_printf_float+0x2a4>
 80088fa:	bf00      	nop
 80088fc:	7fefffff 	.word	0x7fefffff
 8008900:	0800cc44 	.word	0x0800cc44
 8008904:	0800cc48 	.word	0x0800cc48
 8008908:	0800cc4c 	.word	0x0800cc4c
 800890c:	0800cc50 	.word	0x0800cc50
 8008910:	0800cc54 	.word	0x0800cc54
 8008914:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008916:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800891a:	4553      	cmp	r3, sl
 800891c:	bfa8      	it	ge
 800891e:	4653      	movge	r3, sl
 8008920:	2b00      	cmp	r3, #0
 8008922:	4699      	mov	r9, r3
 8008924:	dc36      	bgt.n	8008994 <_printf_float+0x360>
 8008926:	f04f 0b00 	mov.w	fp, #0
 800892a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800892e:	f104 021a 	add.w	r2, r4, #26
 8008932:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008934:	9306      	str	r3, [sp, #24]
 8008936:	eba3 0309 	sub.w	r3, r3, r9
 800893a:	455b      	cmp	r3, fp
 800893c:	dc31      	bgt.n	80089a2 <_printf_float+0x36e>
 800893e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008940:	459a      	cmp	sl, r3
 8008942:	dc3a      	bgt.n	80089ba <_printf_float+0x386>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	07da      	lsls	r2, r3, #31
 8008948:	d437      	bmi.n	80089ba <_printf_float+0x386>
 800894a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894c:	ebaa 0903 	sub.w	r9, sl, r3
 8008950:	9b06      	ldr	r3, [sp, #24]
 8008952:	ebaa 0303 	sub.w	r3, sl, r3
 8008956:	4599      	cmp	r9, r3
 8008958:	bfa8      	it	ge
 800895a:	4699      	movge	r9, r3
 800895c:	f1b9 0f00 	cmp.w	r9, #0
 8008960:	dc33      	bgt.n	80089ca <_printf_float+0x396>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800896a:	f104 0b1a 	add.w	fp, r4, #26
 800896e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008970:	ebaa 0303 	sub.w	r3, sl, r3
 8008974:	eba3 0309 	sub.w	r3, r3, r9
 8008978:	4543      	cmp	r3, r8
 800897a:	f77f af79 	ble.w	8008870 <_printf_float+0x23c>
 800897e:	2301      	movs	r3, #1
 8008980:	465a      	mov	r2, fp
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f aeae 	beq.w	80086ea <_printf_float+0xb6>
 800898e:	f108 0801 	add.w	r8, r8, #1
 8008992:	e7ec      	b.n	800896e <_printf_float+0x33a>
 8008994:	4642      	mov	r2, r8
 8008996:	4631      	mov	r1, r6
 8008998:	4628      	mov	r0, r5
 800899a:	47b8      	blx	r7
 800899c:	3001      	adds	r0, #1
 800899e:	d1c2      	bne.n	8008926 <_printf_float+0x2f2>
 80089a0:	e6a3      	b.n	80086ea <_printf_float+0xb6>
 80089a2:	2301      	movs	r3, #1
 80089a4:	4631      	mov	r1, r6
 80089a6:	4628      	mov	r0, r5
 80089a8:	9206      	str	r2, [sp, #24]
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	f43f ae9c 	beq.w	80086ea <_printf_float+0xb6>
 80089b2:	9a06      	ldr	r2, [sp, #24]
 80089b4:	f10b 0b01 	add.w	fp, fp, #1
 80089b8:	e7bb      	b.n	8008932 <_printf_float+0x2fe>
 80089ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089be:	4631      	mov	r1, r6
 80089c0:	4628      	mov	r0, r5
 80089c2:	47b8      	blx	r7
 80089c4:	3001      	adds	r0, #1
 80089c6:	d1c0      	bne.n	800894a <_printf_float+0x316>
 80089c8:	e68f      	b.n	80086ea <_printf_float+0xb6>
 80089ca:	9a06      	ldr	r2, [sp, #24]
 80089cc:	464b      	mov	r3, r9
 80089ce:	4442      	add	r2, r8
 80089d0:	4631      	mov	r1, r6
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	d1c3      	bne.n	8008962 <_printf_float+0x32e>
 80089da:	e686      	b.n	80086ea <_printf_float+0xb6>
 80089dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80089e0:	f1ba 0f01 	cmp.w	sl, #1
 80089e4:	dc01      	bgt.n	80089ea <_printf_float+0x3b6>
 80089e6:	07db      	lsls	r3, r3, #31
 80089e8:	d536      	bpl.n	8008a58 <_printf_float+0x424>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4642      	mov	r2, r8
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	f43f ae78 	beq.w	80086ea <_printf_float+0xb6>
 80089fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089fe:	4631      	mov	r1, r6
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b8      	blx	r7
 8008a04:	3001      	adds	r0, #1
 8008a06:	f43f ae70 	beq.w	80086ea <_printf_float+0xb6>
 8008a0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2300      	movs	r3, #0
 8008a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a16:	f7f8 f857 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a1a:	b9c0      	cbnz	r0, 8008a4e <_printf_float+0x41a>
 8008a1c:	4653      	mov	r3, sl
 8008a1e:	f108 0201 	add.w	r2, r8, #1
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d10c      	bne.n	8008a46 <_printf_float+0x412>
 8008a2c:	e65d      	b.n	80086ea <_printf_float+0xb6>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	465a      	mov	r2, fp
 8008a32:	4631      	mov	r1, r6
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b8      	blx	r7
 8008a38:	3001      	adds	r0, #1
 8008a3a:	f43f ae56 	beq.w	80086ea <_printf_float+0xb6>
 8008a3e:	f108 0801 	add.w	r8, r8, #1
 8008a42:	45d0      	cmp	r8, sl
 8008a44:	dbf3      	blt.n	8008a2e <_printf_float+0x3fa>
 8008a46:	464b      	mov	r3, r9
 8008a48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a4c:	e6df      	b.n	800880e <_printf_float+0x1da>
 8008a4e:	f04f 0800 	mov.w	r8, #0
 8008a52:	f104 0b1a 	add.w	fp, r4, #26
 8008a56:	e7f4      	b.n	8008a42 <_printf_float+0x40e>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	4642      	mov	r2, r8
 8008a5c:	e7e1      	b.n	8008a22 <_printf_float+0x3ee>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	464a      	mov	r2, r9
 8008a62:	4631      	mov	r1, r6
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b8      	blx	r7
 8008a68:	3001      	adds	r0, #1
 8008a6a:	f43f ae3e 	beq.w	80086ea <_printf_float+0xb6>
 8008a6e:	f108 0801 	add.w	r8, r8, #1
 8008a72:	68e3      	ldr	r3, [r4, #12]
 8008a74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a76:	1a5b      	subs	r3, r3, r1
 8008a78:	4543      	cmp	r3, r8
 8008a7a:	dcf0      	bgt.n	8008a5e <_printf_float+0x42a>
 8008a7c:	e6fc      	b.n	8008878 <_printf_float+0x244>
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	f104 0919 	add.w	r9, r4, #25
 8008a86:	e7f4      	b.n	8008a72 <_printf_float+0x43e>

08008a88 <_printf_common>:
 8008a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a8c:	4616      	mov	r6, r2
 8008a8e:	4698      	mov	r8, r3
 8008a90:	688a      	ldr	r2, [r1, #8]
 8008a92:	690b      	ldr	r3, [r1, #16]
 8008a94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	bfb8      	it	lt
 8008a9c:	4613      	movlt	r3, r2
 8008a9e:	6033      	str	r3, [r6, #0]
 8008aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008aa4:	4607      	mov	r7, r0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	b10a      	cbz	r2, 8008aae <_printf_common+0x26>
 8008aaa:	3301      	adds	r3, #1
 8008aac:	6033      	str	r3, [r6, #0]
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	0699      	lsls	r1, r3, #26
 8008ab2:	bf42      	ittt	mi
 8008ab4:	6833      	ldrmi	r3, [r6, #0]
 8008ab6:	3302      	addmi	r3, #2
 8008ab8:	6033      	strmi	r3, [r6, #0]
 8008aba:	6825      	ldr	r5, [r4, #0]
 8008abc:	f015 0506 	ands.w	r5, r5, #6
 8008ac0:	d106      	bne.n	8008ad0 <_printf_common+0x48>
 8008ac2:	f104 0a19 	add.w	sl, r4, #25
 8008ac6:	68e3      	ldr	r3, [r4, #12]
 8008ac8:	6832      	ldr	r2, [r6, #0]
 8008aca:	1a9b      	subs	r3, r3, r2
 8008acc:	42ab      	cmp	r3, r5
 8008ace:	dc26      	bgt.n	8008b1e <_printf_common+0x96>
 8008ad0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ad4:	6822      	ldr	r2, [r4, #0]
 8008ad6:	3b00      	subs	r3, #0
 8008ad8:	bf18      	it	ne
 8008ada:	2301      	movne	r3, #1
 8008adc:	0692      	lsls	r2, r2, #26
 8008ade:	d42b      	bmi.n	8008b38 <_printf_common+0xb0>
 8008ae0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ae4:	4641      	mov	r1, r8
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	47c8      	blx	r9
 8008aea:	3001      	adds	r0, #1
 8008aec:	d01e      	beq.n	8008b2c <_printf_common+0xa4>
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	6922      	ldr	r2, [r4, #16]
 8008af2:	f003 0306 	and.w	r3, r3, #6
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	bf02      	ittt	eq
 8008afa:	68e5      	ldreq	r5, [r4, #12]
 8008afc:	6833      	ldreq	r3, [r6, #0]
 8008afe:	1aed      	subeq	r5, r5, r3
 8008b00:	68a3      	ldr	r3, [r4, #8]
 8008b02:	bf0c      	ite	eq
 8008b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b08:	2500      	movne	r5, #0
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	bfc4      	itt	gt
 8008b0e:	1a9b      	subgt	r3, r3, r2
 8008b10:	18ed      	addgt	r5, r5, r3
 8008b12:	2600      	movs	r6, #0
 8008b14:	341a      	adds	r4, #26
 8008b16:	42b5      	cmp	r5, r6
 8008b18:	d11a      	bne.n	8008b50 <_printf_common+0xc8>
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	e008      	b.n	8008b30 <_printf_common+0xa8>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4652      	mov	r2, sl
 8008b22:	4641      	mov	r1, r8
 8008b24:	4638      	mov	r0, r7
 8008b26:	47c8      	blx	r9
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d103      	bne.n	8008b34 <_printf_common+0xac>
 8008b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b34:	3501      	adds	r5, #1
 8008b36:	e7c6      	b.n	8008ac6 <_printf_common+0x3e>
 8008b38:	18e1      	adds	r1, r4, r3
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	2030      	movs	r0, #48	@ 0x30
 8008b3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b42:	4422      	add	r2, r4
 8008b44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b4c:	3302      	adds	r3, #2
 8008b4e:	e7c7      	b.n	8008ae0 <_printf_common+0x58>
 8008b50:	2301      	movs	r3, #1
 8008b52:	4622      	mov	r2, r4
 8008b54:	4641      	mov	r1, r8
 8008b56:	4638      	mov	r0, r7
 8008b58:	47c8      	blx	r9
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	d0e6      	beq.n	8008b2c <_printf_common+0xa4>
 8008b5e:	3601      	adds	r6, #1
 8008b60:	e7d9      	b.n	8008b16 <_printf_common+0x8e>
	...

08008b64 <_printf_i>:
 8008b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b68:	7e0f      	ldrb	r7, [r1, #24]
 8008b6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b6c:	2f78      	cmp	r7, #120	@ 0x78
 8008b6e:	4691      	mov	r9, r2
 8008b70:	4680      	mov	r8, r0
 8008b72:	460c      	mov	r4, r1
 8008b74:	469a      	mov	sl, r3
 8008b76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b7a:	d807      	bhi.n	8008b8c <_printf_i+0x28>
 8008b7c:	2f62      	cmp	r7, #98	@ 0x62
 8008b7e:	d80a      	bhi.n	8008b96 <_printf_i+0x32>
 8008b80:	2f00      	cmp	r7, #0
 8008b82:	f000 80d2 	beq.w	8008d2a <_printf_i+0x1c6>
 8008b86:	2f58      	cmp	r7, #88	@ 0x58
 8008b88:	f000 80b9 	beq.w	8008cfe <_printf_i+0x19a>
 8008b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b94:	e03a      	b.n	8008c0c <_printf_i+0xa8>
 8008b96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b9a:	2b15      	cmp	r3, #21
 8008b9c:	d8f6      	bhi.n	8008b8c <_printf_i+0x28>
 8008b9e:	a101      	add	r1, pc, #4	@ (adr r1, 8008ba4 <_printf_i+0x40>)
 8008ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ba4:	08008bfd 	.word	0x08008bfd
 8008ba8:	08008c11 	.word	0x08008c11
 8008bac:	08008b8d 	.word	0x08008b8d
 8008bb0:	08008b8d 	.word	0x08008b8d
 8008bb4:	08008b8d 	.word	0x08008b8d
 8008bb8:	08008b8d 	.word	0x08008b8d
 8008bbc:	08008c11 	.word	0x08008c11
 8008bc0:	08008b8d 	.word	0x08008b8d
 8008bc4:	08008b8d 	.word	0x08008b8d
 8008bc8:	08008b8d 	.word	0x08008b8d
 8008bcc:	08008b8d 	.word	0x08008b8d
 8008bd0:	08008d11 	.word	0x08008d11
 8008bd4:	08008c3b 	.word	0x08008c3b
 8008bd8:	08008ccb 	.word	0x08008ccb
 8008bdc:	08008b8d 	.word	0x08008b8d
 8008be0:	08008b8d 	.word	0x08008b8d
 8008be4:	08008d33 	.word	0x08008d33
 8008be8:	08008b8d 	.word	0x08008b8d
 8008bec:	08008c3b 	.word	0x08008c3b
 8008bf0:	08008b8d 	.word	0x08008b8d
 8008bf4:	08008b8d 	.word	0x08008b8d
 8008bf8:	08008cd3 	.word	0x08008cd3
 8008bfc:	6833      	ldr	r3, [r6, #0]
 8008bfe:	1d1a      	adds	r2, r3, #4
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6032      	str	r2, [r6, #0]
 8008c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e09d      	b.n	8008d4c <_printf_i+0x1e8>
 8008c10:	6833      	ldr	r3, [r6, #0]
 8008c12:	6820      	ldr	r0, [r4, #0]
 8008c14:	1d19      	adds	r1, r3, #4
 8008c16:	6031      	str	r1, [r6, #0]
 8008c18:	0606      	lsls	r6, r0, #24
 8008c1a:	d501      	bpl.n	8008c20 <_printf_i+0xbc>
 8008c1c:	681d      	ldr	r5, [r3, #0]
 8008c1e:	e003      	b.n	8008c28 <_printf_i+0xc4>
 8008c20:	0645      	lsls	r5, r0, #25
 8008c22:	d5fb      	bpl.n	8008c1c <_printf_i+0xb8>
 8008c24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c28:	2d00      	cmp	r5, #0
 8008c2a:	da03      	bge.n	8008c34 <_printf_i+0xd0>
 8008c2c:	232d      	movs	r3, #45	@ 0x2d
 8008c2e:	426d      	negs	r5, r5
 8008c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c34:	4859      	ldr	r0, [pc, #356]	@ (8008d9c <_printf_i+0x238>)
 8008c36:	230a      	movs	r3, #10
 8008c38:	e011      	b.n	8008c5e <_printf_i+0xfa>
 8008c3a:	6821      	ldr	r1, [r4, #0]
 8008c3c:	6833      	ldr	r3, [r6, #0]
 8008c3e:	0608      	lsls	r0, r1, #24
 8008c40:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c44:	d402      	bmi.n	8008c4c <_printf_i+0xe8>
 8008c46:	0649      	lsls	r1, r1, #25
 8008c48:	bf48      	it	mi
 8008c4a:	b2ad      	uxthmi	r5, r5
 8008c4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c4e:	4853      	ldr	r0, [pc, #332]	@ (8008d9c <_printf_i+0x238>)
 8008c50:	6033      	str	r3, [r6, #0]
 8008c52:	bf14      	ite	ne
 8008c54:	230a      	movne	r3, #10
 8008c56:	2308      	moveq	r3, #8
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c5e:	6866      	ldr	r6, [r4, #4]
 8008c60:	60a6      	str	r6, [r4, #8]
 8008c62:	2e00      	cmp	r6, #0
 8008c64:	bfa2      	ittt	ge
 8008c66:	6821      	ldrge	r1, [r4, #0]
 8008c68:	f021 0104 	bicge.w	r1, r1, #4
 8008c6c:	6021      	strge	r1, [r4, #0]
 8008c6e:	b90d      	cbnz	r5, 8008c74 <_printf_i+0x110>
 8008c70:	2e00      	cmp	r6, #0
 8008c72:	d04b      	beq.n	8008d0c <_printf_i+0x1a8>
 8008c74:	4616      	mov	r6, r2
 8008c76:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c7a:	fb03 5711 	mls	r7, r3, r1, r5
 8008c7e:	5dc7      	ldrb	r7, [r0, r7]
 8008c80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c84:	462f      	mov	r7, r5
 8008c86:	42bb      	cmp	r3, r7
 8008c88:	460d      	mov	r5, r1
 8008c8a:	d9f4      	bls.n	8008c76 <_printf_i+0x112>
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d10b      	bne.n	8008ca8 <_printf_i+0x144>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	07df      	lsls	r7, r3, #31
 8008c94:	d508      	bpl.n	8008ca8 <_printf_i+0x144>
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	6861      	ldr	r1, [r4, #4]
 8008c9a:	4299      	cmp	r1, r3
 8008c9c:	bfde      	ittt	le
 8008c9e:	2330      	movle	r3, #48	@ 0x30
 8008ca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ca8:	1b92      	subs	r2, r2, r6
 8008caa:	6122      	str	r2, [r4, #16]
 8008cac:	f8cd a000 	str.w	sl, [sp]
 8008cb0:	464b      	mov	r3, r9
 8008cb2:	aa03      	add	r2, sp, #12
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	f7ff fee6 	bl	8008a88 <_printf_common>
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d14a      	bne.n	8008d56 <_printf_i+0x1f2>
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc4:	b004      	add	sp, #16
 8008cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	f043 0320 	orr.w	r3, r3, #32
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	4833      	ldr	r0, [pc, #204]	@ (8008da0 <_printf_i+0x23c>)
 8008cd4:	2778      	movs	r7, #120	@ 0x78
 8008cd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	6831      	ldr	r1, [r6, #0]
 8008cde:	061f      	lsls	r7, r3, #24
 8008ce0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ce4:	d402      	bmi.n	8008cec <_printf_i+0x188>
 8008ce6:	065f      	lsls	r7, r3, #25
 8008ce8:	bf48      	it	mi
 8008cea:	b2ad      	uxthmi	r5, r5
 8008cec:	6031      	str	r1, [r6, #0]
 8008cee:	07d9      	lsls	r1, r3, #31
 8008cf0:	bf44      	itt	mi
 8008cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8008cf6:	6023      	strmi	r3, [r4, #0]
 8008cf8:	b11d      	cbz	r5, 8008d02 <_printf_i+0x19e>
 8008cfa:	2310      	movs	r3, #16
 8008cfc:	e7ac      	b.n	8008c58 <_printf_i+0xf4>
 8008cfe:	4827      	ldr	r0, [pc, #156]	@ (8008d9c <_printf_i+0x238>)
 8008d00:	e7e9      	b.n	8008cd6 <_printf_i+0x172>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	f023 0320 	bic.w	r3, r3, #32
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	e7f6      	b.n	8008cfa <_printf_i+0x196>
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	e7bd      	b.n	8008c8c <_printf_i+0x128>
 8008d10:	6833      	ldr	r3, [r6, #0]
 8008d12:	6825      	ldr	r5, [r4, #0]
 8008d14:	6961      	ldr	r1, [r4, #20]
 8008d16:	1d18      	adds	r0, r3, #4
 8008d18:	6030      	str	r0, [r6, #0]
 8008d1a:	062e      	lsls	r6, r5, #24
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	d501      	bpl.n	8008d24 <_printf_i+0x1c0>
 8008d20:	6019      	str	r1, [r3, #0]
 8008d22:	e002      	b.n	8008d2a <_printf_i+0x1c6>
 8008d24:	0668      	lsls	r0, r5, #25
 8008d26:	d5fb      	bpl.n	8008d20 <_printf_i+0x1bc>
 8008d28:	8019      	strh	r1, [r3, #0]
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	6123      	str	r3, [r4, #16]
 8008d2e:	4616      	mov	r6, r2
 8008d30:	e7bc      	b.n	8008cac <_printf_i+0x148>
 8008d32:	6833      	ldr	r3, [r6, #0]
 8008d34:	1d1a      	adds	r2, r3, #4
 8008d36:	6032      	str	r2, [r6, #0]
 8008d38:	681e      	ldr	r6, [r3, #0]
 8008d3a:	6862      	ldr	r2, [r4, #4]
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7f7 fa46 	bl	80001d0 <memchr>
 8008d44:	b108      	cbz	r0, 8008d4a <_printf_i+0x1e6>
 8008d46:	1b80      	subs	r0, r0, r6
 8008d48:	6060      	str	r0, [r4, #4]
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	6123      	str	r3, [r4, #16]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d54:	e7aa      	b.n	8008cac <_printf_i+0x148>
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	4632      	mov	r2, r6
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	47d0      	blx	sl
 8008d60:	3001      	adds	r0, #1
 8008d62:	d0ad      	beq.n	8008cc0 <_printf_i+0x15c>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	079b      	lsls	r3, r3, #30
 8008d68:	d413      	bmi.n	8008d92 <_printf_i+0x22e>
 8008d6a:	68e0      	ldr	r0, [r4, #12]
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	4298      	cmp	r0, r3
 8008d70:	bfb8      	it	lt
 8008d72:	4618      	movlt	r0, r3
 8008d74:	e7a6      	b.n	8008cc4 <_printf_i+0x160>
 8008d76:	2301      	movs	r3, #1
 8008d78:	4632      	mov	r2, r6
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	47d0      	blx	sl
 8008d80:	3001      	adds	r0, #1
 8008d82:	d09d      	beq.n	8008cc0 <_printf_i+0x15c>
 8008d84:	3501      	adds	r5, #1
 8008d86:	68e3      	ldr	r3, [r4, #12]
 8008d88:	9903      	ldr	r1, [sp, #12]
 8008d8a:	1a5b      	subs	r3, r3, r1
 8008d8c:	42ab      	cmp	r3, r5
 8008d8e:	dcf2      	bgt.n	8008d76 <_printf_i+0x212>
 8008d90:	e7eb      	b.n	8008d6a <_printf_i+0x206>
 8008d92:	2500      	movs	r5, #0
 8008d94:	f104 0619 	add.w	r6, r4, #25
 8008d98:	e7f5      	b.n	8008d86 <_printf_i+0x222>
 8008d9a:	bf00      	nop
 8008d9c:	0800cc56 	.word	0x0800cc56
 8008da0:	0800cc67 	.word	0x0800cc67

08008da4 <_scanf_float>:
 8008da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da8:	b087      	sub	sp, #28
 8008daa:	4617      	mov	r7, r2
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	688b      	ldr	r3, [r1, #8]
 8008db0:	1e5a      	subs	r2, r3, #1
 8008db2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008db6:	bf81      	itttt	hi
 8008db8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008dbc:	eb03 0b05 	addhi.w	fp, r3, r5
 8008dc0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008dc4:	608b      	strhi	r3, [r1, #8]
 8008dc6:	680b      	ldr	r3, [r1, #0]
 8008dc8:	460a      	mov	r2, r1
 8008dca:	f04f 0500 	mov.w	r5, #0
 8008dce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008dd2:	f842 3b1c 	str.w	r3, [r2], #28
 8008dd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008dda:	4680      	mov	r8, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	bf98      	it	ls
 8008de0:	f04f 0b00 	movls.w	fp, #0
 8008de4:	9201      	str	r2, [sp, #4]
 8008de6:	4616      	mov	r6, r2
 8008de8:	46aa      	mov	sl, r5
 8008dea:	46a9      	mov	r9, r5
 8008dec:	9502      	str	r5, [sp, #8]
 8008dee:	68a2      	ldr	r2, [r4, #8]
 8008df0:	b152      	cbz	r2, 8008e08 <_scanf_float+0x64>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	2b4e      	cmp	r3, #78	@ 0x4e
 8008df8:	d864      	bhi.n	8008ec4 <_scanf_float+0x120>
 8008dfa:	2b40      	cmp	r3, #64	@ 0x40
 8008dfc:	d83c      	bhi.n	8008e78 <_scanf_float+0xd4>
 8008dfe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008e02:	b2c8      	uxtb	r0, r1
 8008e04:	280e      	cmp	r0, #14
 8008e06:	d93a      	bls.n	8008e7e <_scanf_float+0xda>
 8008e08:	f1b9 0f00 	cmp.w	r9, #0
 8008e0c:	d003      	beq.n	8008e16 <_scanf_float+0x72>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e1a:	f1ba 0f01 	cmp.w	sl, #1
 8008e1e:	f200 8117 	bhi.w	8009050 <_scanf_float+0x2ac>
 8008e22:	9b01      	ldr	r3, [sp, #4]
 8008e24:	429e      	cmp	r6, r3
 8008e26:	f200 8108 	bhi.w	800903a <_scanf_float+0x296>
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	b007      	add	sp, #28
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008e36:	2a0d      	cmp	r2, #13
 8008e38:	d8e6      	bhi.n	8008e08 <_scanf_float+0x64>
 8008e3a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e40 <_scanf_float+0x9c>)
 8008e3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e40:	08008f87 	.word	0x08008f87
 8008e44:	08008e09 	.word	0x08008e09
 8008e48:	08008e09 	.word	0x08008e09
 8008e4c:	08008e09 	.word	0x08008e09
 8008e50:	08008fe7 	.word	0x08008fe7
 8008e54:	08008fbf 	.word	0x08008fbf
 8008e58:	08008e09 	.word	0x08008e09
 8008e5c:	08008e09 	.word	0x08008e09
 8008e60:	08008f95 	.word	0x08008f95
 8008e64:	08008e09 	.word	0x08008e09
 8008e68:	08008e09 	.word	0x08008e09
 8008e6c:	08008e09 	.word	0x08008e09
 8008e70:	08008e09 	.word	0x08008e09
 8008e74:	08008f4d 	.word	0x08008f4d
 8008e78:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008e7c:	e7db      	b.n	8008e36 <_scanf_float+0x92>
 8008e7e:	290e      	cmp	r1, #14
 8008e80:	d8c2      	bhi.n	8008e08 <_scanf_float+0x64>
 8008e82:	a001      	add	r0, pc, #4	@ (adr r0, 8008e88 <_scanf_float+0xe4>)
 8008e84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e88:	08008f3d 	.word	0x08008f3d
 8008e8c:	08008e09 	.word	0x08008e09
 8008e90:	08008f3d 	.word	0x08008f3d
 8008e94:	08008fd3 	.word	0x08008fd3
 8008e98:	08008e09 	.word	0x08008e09
 8008e9c:	08008ee5 	.word	0x08008ee5
 8008ea0:	08008f23 	.word	0x08008f23
 8008ea4:	08008f23 	.word	0x08008f23
 8008ea8:	08008f23 	.word	0x08008f23
 8008eac:	08008f23 	.word	0x08008f23
 8008eb0:	08008f23 	.word	0x08008f23
 8008eb4:	08008f23 	.word	0x08008f23
 8008eb8:	08008f23 	.word	0x08008f23
 8008ebc:	08008f23 	.word	0x08008f23
 8008ec0:	08008f23 	.word	0x08008f23
 8008ec4:	2b6e      	cmp	r3, #110	@ 0x6e
 8008ec6:	d809      	bhi.n	8008edc <_scanf_float+0x138>
 8008ec8:	2b60      	cmp	r3, #96	@ 0x60
 8008eca:	d8b2      	bhi.n	8008e32 <_scanf_float+0x8e>
 8008ecc:	2b54      	cmp	r3, #84	@ 0x54
 8008ece:	d07b      	beq.n	8008fc8 <_scanf_float+0x224>
 8008ed0:	2b59      	cmp	r3, #89	@ 0x59
 8008ed2:	d199      	bne.n	8008e08 <_scanf_float+0x64>
 8008ed4:	2d07      	cmp	r5, #7
 8008ed6:	d197      	bne.n	8008e08 <_scanf_float+0x64>
 8008ed8:	2508      	movs	r5, #8
 8008eda:	e02c      	b.n	8008f36 <_scanf_float+0x192>
 8008edc:	2b74      	cmp	r3, #116	@ 0x74
 8008ede:	d073      	beq.n	8008fc8 <_scanf_float+0x224>
 8008ee0:	2b79      	cmp	r3, #121	@ 0x79
 8008ee2:	e7f6      	b.n	8008ed2 <_scanf_float+0x12e>
 8008ee4:	6821      	ldr	r1, [r4, #0]
 8008ee6:	05c8      	lsls	r0, r1, #23
 8008ee8:	d51b      	bpl.n	8008f22 <_scanf_float+0x17e>
 8008eea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008eee:	6021      	str	r1, [r4, #0]
 8008ef0:	f109 0901 	add.w	r9, r9, #1
 8008ef4:	f1bb 0f00 	cmp.w	fp, #0
 8008ef8:	d003      	beq.n	8008f02 <_scanf_float+0x15e>
 8008efa:	3201      	adds	r2, #1
 8008efc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f00:	60a2      	str	r2, [r4, #8]
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	60a3      	str	r3, [r4, #8]
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	6123      	str	r3, [r4, #16]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	607b      	str	r3, [r7, #4]
 8008f16:	f340 8087 	ble.w	8009028 <_scanf_float+0x284>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	603b      	str	r3, [r7, #0]
 8008f20:	e765      	b.n	8008dee <_scanf_float+0x4a>
 8008f22:	eb1a 0105 	adds.w	r1, sl, r5
 8008f26:	f47f af6f 	bne.w	8008e08 <_scanf_float+0x64>
 8008f2a:	6822      	ldr	r2, [r4, #0]
 8008f2c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008f30:	6022      	str	r2, [r4, #0]
 8008f32:	460d      	mov	r5, r1
 8008f34:	468a      	mov	sl, r1
 8008f36:	f806 3b01 	strb.w	r3, [r6], #1
 8008f3a:	e7e2      	b.n	8008f02 <_scanf_float+0x15e>
 8008f3c:	6822      	ldr	r2, [r4, #0]
 8008f3e:	0610      	lsls	r0, r2, #24
 8008f40:	f57f af62 	bpl.w	8008e08 <_scanf_float+0x64>
 8008f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f48:	6022      	str	r2, [r4, #0]
 8008f4a:	e7f4      	b.n	8008f36 <_scanf_float+0x192>
 8008f4c:	f1ba 0f00 	cmp.w	sl, #0
 8008f50:	d10e      	bne.n	8008f70 <_scanf_float+0x1cc>
 8008f52:	f1b9 0f00 	cmp.w	r9, #0
 8008f56:	d10e      	bne.n	8008f76 <_scanf_float+0x1d2>
 8008f58:	6822      	ldr	r2, [r4, #0]
 8008f5a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008f5e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008f62:	d108      	bne.n	8008f76 <_scanf_float+0x1d2>
 8008f64:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f68:	6022      	str	r2, [r4, #0]
 8008f6a:	f04f 0a01 	mov.w	sl, #1
 8008f6e:	e7e2      	b.n	8008f36 <_scanf_float+0x192>
 8008f70:	f1ba 0f02 	cmp.w	sl, #2
 8008f74:	d055      	beq.n	8009022 <_scanf_float+0x27e>
 8008f76:	2d01      	cmp	r5, #1
 8008f78:	d002      	beq.n	8008f80 <_scanf_float+0x1dc>
 8008f7a:	2d04      	cmp	r5, #4
 8008f7c:	f47f af44 	bne.w	8008e08 <_scanf_float+0x64>
 8008f80:	3501      	adds	r5, #1
 8008f82:	b2ed      	uxtb	r5, r5
 8008f84:	e7d7      	b.n	8008f36 <_scanf_float+0x192>
 8008f86:	f1ba 0f01 	cmp.w	sl, #1
 8008f8a:	f47f af3d 	bne.w	8008e08 <_scanf_float+0x64>
 8008f8e:	f04f 0a02 	mov.w	sl, #2
 8008f92:	e7d0      	b.n	8008f36 <_scanf_float+0x192>
 8008f94:	b97d      	cbnz	r5, 8008fb6 <_scanf_float+0x212>
 8008f96:	f1b9 0f00 	cmp.w	r9, #0
 8008f9a:	f47f af38 	bne.w	8008e0e <_scanf_float+0x6a>
 8008f9e:	6822      	ldr	r2, [r4, #0]
 8008fa0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008fa4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008fa8:	f040 8108 	bne.w	80091bc <_scanf_float+0x418>
 8008fac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008fb0:	6022      	str	r2, [r4, #0]
 8008fb2:	2501      	movs	r5, #1
 8008fb4:	e7bf      	b.n	8008f36 <_scanf_float+0x192>
 8008fb6:	2d03      	cmp	r5, #3
 8008fb8:	d0e2      	beq.n	8008f80 <_scanf_float+0x1dc>
 8008fba:	2d05      	cmp	r5, #5
 8008fbc:	e7de      	b.n	8008f7c <_scanf_float+0x1d8>
 8008fbe:	2d02      	cmp	r5, #2
 8008fc0:	f47f af22 	bne.w	8008e08 <_scanf_float+0x64>
 8008fc4:	2503      	movs	r5, #3
 8008fc6:	e7b6      	b.n	8008f36 <_scanf_float+0x192>
 8008fc8:	2d06      	cmp	r5, #6
 8008fca:	f47f af1d 	bne.w	8008e08 <_scanf_float+0x64>
 8008fce:	2507      	movs	r5, #7
 8008fd0:	e7b1      	b.n	8008f36 <_scanf_float+0x192>
 8008fd2:	6822      	ldr	r2, [r4, #0]
 8008fd4:	0591      	lsls	r1, r2, #22
 8008fd6:	f57f af17 	bpl.w	8008e08 <_scanf_float+0x64>
 8008fda:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fe4:	e7a7      	b.n	8008f36 <_scanf_float+0x192>
 8008fe6:	6822      	ldr	r2, [r4, #0]
 8008fe8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008fec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008ff0:	d006      	beq.n	8009000 <_scanf_float+0x25c>
 8008ff2:	0550      	lsls	r0, r2, #21
 8008ff4:	f57f af08 	bpl.w	8008e08 <_scanf_float+0x64>
 8008ff8:	f1b9 0f00 	cmp.w	r9, #0
 8008ffc:	f000 80de 	beq.w	80091bc <_scanf_float+0x418>
 8009000:	0591      	lsls	r1, r2, #22
 8009002:	bf58      	it	pl
 8009004:	9902      	ldrpl	r1, [sp, #8]
 8009006:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800900a:	bf58      	it	pl
 800900c:	eba9 0101 	subpl.w	r1, r9, r1
 8009010:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009014:	bf58      	it	pl
 8009016:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800901a:	6022      	str	r2, [r4, #0]
 800901c:	f04f 0900 	mov.w	r9, #0
 8009020:	e789      	b.n	8008f36 <_scanf_float+0x192>
 8009022:	f04f 0a03 	mov.w	sl, #3
 8009026:	e786      	b.n	8008f36 <_scanf_float+0x192>
 8009028:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800902c:	4639      	mov	r1, r7
 800902e:	4640      	mov	r0, r8
 8009030:	4798      	blx	r3
 8009032:	2800      	cmp	r0, #0
 8009034:	f43f aedb 	beq.w	8008dee <_scanf_float+0x4a>
 8009038:	e6e6      	b.n	8008e08 <_scanf_float+0x64>
 800903a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800903e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009042:	463a      	mov	r2, r7
 8009044:	4640      	mov	r0, r8
 8009046:	4798      	blx	r3
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	3b01      	subs	r3, #1
 800904c:	6123      	str	r3, [r4, #16]
 800904e:	e6e8      	b.n	8008e22 <_scanf_float+0x7e>
 8009050:	1e6b      	subs	r3, r5, #1
 8009052:	2b06      	cmp	r3, #6
 8009054:	d824      	bhi.n	80090a0 <_scanf_float+0x2fc>
 8009056:	2d02      	cmp	r5, #2
 8009058:	d836      	bhi.n	80090c8 <_scanf_float+0x324>
 800905a:	9b01      	ldr	r3, [sp, #4]
 800905c:	429e      	cmp	r6, r3
 800905e:	f67f aee4 	bls.w	8008e2a <_scanf_float+0x86>
 8009062:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800906a:	463a      	mov	r2, r7
 800906c:	4640      	mov	r0, r8
 800906e:	4798      	blx	r3
 8009070:	6923      	ldr	r3, [r4, #16]
 8009072:	3b01      	subs	r3, #1
 8009074:	6123      	str	r3, [r4, #16]
 8009076:	e7f0      	b.n	800905a <_scanf_float+0x2b6>
 8009078:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800907c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009080:	463a      	mov	r2, r7
 8009082:	4640      	mov	r0, r8
 8009084:	4798      	blx	r3
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	3b01      	subs	r3, #1
 800908a:	6123      	str	r3, [r4, #16]
 800908c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009090:	fa5f fa8a 	uxtb.w	sl, sl
 8009094:	f1ba 0f02 	cmp.w	sl, #2
 8009098:	d1ee      	bne.n	8009078 <_scanf_float+0x2d4>
 800909a:	3d03      	subs	r5, #3
 800909c:	b2ed      	uxtb	r5, r5
 800909e:	1b76      	subs	r6, r6, r5
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	05da      	lsls	r2, r3, #23
 80090a4:	d530      	bpl.n	8009108 <_scanf_float+0x364>
 80090a6:	055b      	lsls	r3, r3, #21
 80090a8:	d511      	bpl.n	80090ce <_scanf_float+0x32a>
 80090aa:	9b01      	ldr	r3, [sp, #4]
 80090ac:	429e      	cmp	r6, r3
 80090ae:	f67f aebc 	bls.w	8008e2a <_scanf_float+0x86>
 80090b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090ba:	463a      	mov	r2, r7
 80090bc:	4640      	mov	r0, r8
 80090be:	4798      	blx	r3
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	6123      	str	r3, [r4, #16]
 80090c6:	e7f0      	b.n	80090aa <_scanf_float+0x306>
 80090c8:	46aa      	mov	sl, r5
 80090ca:	46b3      	mov	fp, r6
 80090cc:	e7de      	b.n	800908c <_scanf_float+0x2e8>
 80090ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	2965      	cmp	r1, #101	@ 0x65
 80090d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80090da:	f106 35ff 	add.w	r5, r6, #4294967295
 80090de:	6123      	str	r3, [r4, #16]
 80090e0:	d00c      	beq.n	80090fc <_scanf_float+0x358>
 80090e2:	2945      	cmp	r1, #69	@ 0x45
 80090e4:	d00a      	beq.n	80090fc <_scanf_float+0x358>
 80090e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090ea:	463a      	mov	r2, r7
 80090ec:	4640      	mov	r0, r8
 80090ee:	4798      	blx	r3
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	1eb5      	subs	r5, r6, #2
 80090fa:	6123      	str	r3, [r4, #16]
 80090fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009100:	463a      	mov	r2, r7
 8009102:	4640      	mov	r0, r8
 8009104:	4798      	blx	r3
 8009106:	462e      	mov	r6, r5
 8009108:	6822      	ldr	r2, [r4, #0]
 800910a:	f012 0210 	ands.w	r2, r2, #16
 800910e:	d001      	beq.n	8009114 <_scanf_float+0x370>
 8009110:	2000      	movs	r0, #0
 8009112:	e68b      	b.n	8008e2c <_scanf_float+0x88>
 8009114:	7032      	strb	r2, [r6, #0]
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800911c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009120:	d11c      	bne.n	800915c <_scanf_float+0x3b8>
 8009122:	9b02      	ldr	r3, [sp, #8]
 8009124:	454b      	cmp	r3, r9
 8009126:	eba3 0209 	sub.w	r2, r3, r9
 800912a:	d123      	bne.n	8009174 <_scanf_float+0x3d0>
 800912c:	9901      	ldr	r1, [sp, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	4640      	mov	r0, r8
 8009132:	f002 fbf9 	bl	800b928 <_strtod_r>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	6821      	ldr	r1, [r4, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f011 0f02 	tst.w	r1, #2
 8009140:	ec57 6b10 	vmov	r6, r7, d0
 8009144:	f103 0204 	add.w	r2, r3, #4
 8009148:	d01f      	beq.n	800918a <_scanf_float+0x3e6>
 800914a:	9903      	ldr	r1, [sp, #12]
 800914c:	600a      	str	r2, [r1, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	e9c3 6700 	strd	r6, r7, [r3]
 8009154:	68e3      	ldr	r3, [r4, #12]
 8009156:	3301      	adds	r3, #1
 8009158:	60e3      	str	r3, [r4, #12]
 800915a:	e7d9      	b.n	8009110 <_scanf_float+0x36c>
 800915c:	9b04      	ldr	r3, [sp, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0e4      	beq.n	800912c <_scanf_float+0x388>
 8009162:	9905      	ldr	r1, [sp, #20]
 8009164:	230a      	movs	r3, #10
 8009166:	3101      	adds	r1, #1
 8009168:	4640      	mov	r0, r8
 800916a:	f002 fc5d 	bl	800ba28 <_strtol_r>
 800916e:	9b04      	ldr	r3, [sp, #16]
 8009170:	9e05      	ldr	r6, [sp, #20]
 8009172:	1ac2      	subs	r2, r0, r3
 8009174:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009178:	429e      	cmp	r6, r3
 800917a:	bf28      	it	cs
 800917c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009180:	4910      	ldr	r1, [pc, #64]	@ (80091c4 <_scanf_float+0x420>)
 8009182:	4630      	mov	r0, r6
 8009184:	f000 f8e4 	bl	8009350 <siprintf>
 8009188:	e7d0      	b.n	800912c <_scanf_float+0x388>
 800918a:	f011 0f04 	tst.w	r1, #4
 800918e:	9903      	ldr	r1, [sp, #12]
 8009190:	600a      	str	r2, [r1, #0]
 8009192:	d1dc      	bne.n	800914e <_scanf_float+0x3aa>
 8009194:	681d      	ldr	r5, [r3, #0]
 8009196:	4632      	mov	r2, r6
 8009198:	463b      	mov	r3, r7
 800919a:	4630      	mov	r0, r6
 800919c:	4639      	mov	r1, r7
 800919e:	f7f7 fcc5 	bl	8000b2c <__aeabi_dcmpun>
 80091a2:	b128      	cbz	r0, 80091b0 <_scanf_float+0x40c>
 80091a4:	4808      	ldr	r0, [pc, #32]	@ (80091c8 <_scanf_float+0x424>)
 80091a6:	f000 f9b7 	bl	8009518 <nanf>
 80091aa:	ed85 0a00 	vstr	s0, [r5]
 80091ae:	e7d1      	b.n	8009154 <_scanf_float+0x3b0>
 80091b0:	4630      	mov	r0, r6
 80091b2:	4639      	mov	r1, r7
 80091b4:	f7f7 fd18 	bl	8000be8 <__aeabi_d2f>
 80091b8:	6028      	str	r0, [r5, #0]
 80091ba:	e7cb      	b.n	8009154 <_scanf_float+0x3b0>
 80091bc:	f04f 0900 	mov.w	r9, #0
 80091c0:	e629      	b.n	8008e16 <_scanf_float+0x72>
 80091c2:	bf00      	nop
 80091c4:	0800cc78 	.word	0x0800cc78
 80091c8:	0800d00d 	.word	0x0800d00d

080091cc <std>:
 80091cc:	2300      	movs	r3, #0
 80091ce:	b510      	push	{r4, lr}
 80091d0:	4604      	mov	r4, r0
 80091d2:	e9c0 3300 	strd	r3, r3, [r0]
 80091d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091da:	6083      	str	r3, [r0, #8]
 80091dc:	8181      	strh	r1, [r0, #12]
 80091de:	6643      	str	r3, [r0, #100]	@ 0x64
 80091e0:	81c2      	strh	r2, [r0, #14]
 80091e2:	6183      	str	r3, [r0, #24]
 80091e4:	4619      	mov	r1, r3
 80091e6:	2208      	movs	r2, #8
 80091e8:	305c      	adds	r0, #92	@ 0x5c
 80091ea:	f000 f914 	bl	8009416 <memset>
 80091ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <std+0x58>)
 80091f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80091f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009228 <std+0x5c>)
 80091f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80091f6:	4b0d      	ldr	r3, [pc, #52]	@ (800922c <std+0x60>)
 80091f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009230 <std+0x64>)
 80091fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80091fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009234 <std+0x68>)
 8009200:	6224      	str	r4, [r4, #32]
 8009202:	429c      	cmp	r4, r3
 8009204:	d006      	beq.n	8009214 <std+0x48>
 8009206:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800920a:	4294      	cmp	r4, r2
 800920c:	d002      	beq.n	8009214 <std+0x48>
 800920e:	33d0      	adds	r3, #208	@ 0xd0
 8009210:	429c      	cmp	r4, r3
 8009212:	d105      	bne.n	8009220 <std+0x54>
 8009214:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800921c:	f000 b978 	b.w	8009510 <__retarget_lock_init_recursive>
 8009220:	bd10      	pop	{r4, pc}
 8009222:	bf00      	nop
 8009224:	08009391 	.word	0x08009391
 8009228:	080093b3 	.word	0x080093b3
 800922c:	080093eb 	.word	0x080093eb
 8009230:	0800940f 	.word	0x0800940f
 8009234:	20000418 	.word	0x20000418

08009238 <stdio_exit_handler>:
 8009238:	4a02      	ldr	r2, [pc, #8]	@ (8009244 <stdio_exit_handler+0xc>)
 800923a:	4903      	ldr	r1, [pc, #12]	@ (8009248 <stdio_exit_handler+0x10>)
 800923c:	4803      	ldr	r0, [pc, #12]	@ (800924c <stdio_exit_handler+0x14>)
 800923e:	f000 b869 	b.w	8009314 <_fwalk_sglue>
 8009242:	bf00      	nop
 8009244:	2000000c 	.word	0x2000000c
 8009248:	0800bde5 	.word	0x0800bde5
 800924c:	2000001c 	.word	0x2000001c

08009250 <cleanup_stdio>:
 8009250:	6841      	ldr	r1, [r0, #4]
 8009252:	4b0c      	ldr	r3, [pc, #48]	@ (8009284 <cleanup_stdio+0x34>)
 8009254:	4299      	cmp	r1, r3
 8009256:	b510      	push	{r4, lr}
 8009258:	4604      	mov	r4, r0
 800925a:	d001      	beq.n	8009260 <cleanup_stdio+0x10>
 800925c:	f002 fdc2 	bl	800bde4 <_fflush_r>
 8009260:	68a1      	ldr	r1, [r4, #8]
 8009262:	4b09      	ldr	r3, [pc, #36]	@ (8009288 <cleanup_stdio+0x38>)
 8009264:	4299      	cmp	r1, r3
 8009266:	d002      	beq.n	800926e <cleanup_stdio+0x1e>
 8009268:	4620      	mov	r0, r4
 800926a:	f002 fdbb 	bl	800bde4 <_fflush_r>
 800926e:	68e1      	ldr	r1, [r4, #12]
 8009270:	4b06      	ldr	r3, [pc, #24]	@ (800928c <cleanup_stdio+0x3c>)
 8009272:	4299      	cmp	r1, r3
 8009274:	d004      	beq.n	8009280 <cleanup_stdio+0x30>
 8009276:	4620      	mov	r0, r4
 8009278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800927c:	f002 bdb2 	b.w	800bde4 <_fflush_r>
 8009280:	bd10      	pop	{r4, pc}
 8009282:	bf00      	nop
 8009284:	20000418 	.word	0x20000418
 8009288:	20000480 	.word	0x20000480
 800928c:	200004e8 	.word	0x200004e8

08009290 <global_stdio_init.part.0>:
 8009290:	b510      	push	{r4, lr}
 8009292:	4b0b      	ldr	r3, [pc, #44]	@ (80092c0 <global_stdio_init.part.0+0x30>)
 8009294:	4c0b      	ldr	r4, [pc, #44]	@ (80092c4 <global_stdio_init.part.0+0x34>)
 8009296:	4a0c      	ldr	r2, [pc, #48]	@ (80092c8 <global_stdio_init.part.0+0x38>)
 8009298:	601a      	str	r2, [r3, #0]
 800929a:	4620      	mov	r0, r4
 800929c:	2200      	movs	r2, #0
 800929e:	2104      	movs	r1, #4
 80092a0:	f7ff ff94 	bl	80091cc <std>
 80092a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092a8:	2201      	movs	r2, #1
 80092aa:	2109      	movs	r1, #9
 80092ac:	f7ff ff8e 	bl	80091cc <std>
 80092b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092b4:	2202      	movs	r2, #2
 80092b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ba:	2112      	movs	r1, #18
 80092bc:	f7ff bf86 	b.w	80091cc <std>
 80092c0:	20000550 	.word	0x20000550
 80092c4:	20000418 	.word	0x20000418
 80092c8:	08009239 	.word	0x08009239

080092cc <__sfp_lock_acquire>:
 80092cc:	4801      	ldr	r0, [pc, #4]	@ (80092d4 <__sfp_lock_acquire+0x8>)
 80092ce:	f000 b920 	b.w	8009512 <__retarget_lock_acquire_recursive>
 80092d2:	bf00      	nop
 80092d4:	20000559 	.word	0x20000559

080092d8 <__sfp_lock_release>:
 80092d8:	4801      	ldr	r0, [pc, #4]	@ (80092e0 <__sfp_lock_release+0x8>)
 80092da:	f000 b91b 	b.w	8009514 <__retarget_lock_release_recursive>
 80092de:	bf00      	nop
 80092e0:	20000559 	.word	0x20000559

080092e4 <__sinit>:
 80092e4:	b510      	push	{r4, lr}
 80092e6:	4604      	mov	r4, r0
 80092e8:	f7ff fff0 	bl	80092cc <__sfp_lock_acquire>
 80092ec:	6a23      	ldr	r3, [r4, #32]
 80092ee:	b11b      	cbz	r3, 80092f8 <__sinit+0x14>
 80092f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f4:	f7ff bff0 	b.w	80092d8 <__sfp_lock_release>
 80092f8:	4b04      	ldr	r3, [pc, #16]	@ (800930c <__sinit+0x28>)
 80092fa:	6223      	str	r3, [r4, #32]
 80092fc:	4b04      	ldr	r3, [pc, #16]	@ (8009310 <__sinit+0x2c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1f5      	bne.n	80092f0 <__sinit+0xc>
 8009304:	f7ff ffc4 	bl	8009290 <global_stdio_init.part.0>
 8009308:	e7f2      	b.n	80092f0 <__sinit+0xc>
 800930a:	bf00      	nop
 800930c:	08009251 	.word	0x08009251
 8009310:	20000550 	.word	0x20000550

08009314 <_fwalk_sglue>:
 8009314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009318:	4607      	mov	r7, r0
 800931a:	4688      	mov	r8, r1
 800931c:	4614      	mov	r4, r2
 800931e:	2600      	movs	r6, #0
 8009320:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009324:	f1b9 0901 	subs.w	r9, r9, #1
 8009328:	d505      	bpl.n	8009336 <_fwalk_sglue+0x22>
 800932a:	6824      	ldr	r4, [r4, #0]
 800932c:	2c00      	cmp	r4, #0
 800932e:	d1f7      	bne.n	8009320 <_fwalk_sglue+0xc>
 8009330:	4630      	mov	r0, r6
 8009332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009336:	89ab      	ldrh	r3, [r5, #12]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d907      	bls.n	800934c <_fwalk_sglue+0x38>
 800933c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009340:	3301      	adds	r3, #1
 8009342:	d003      	beq.n	800934c <_fwalk_sglue+0x38>
 8009344:	4629      	mov	r1, r5
 8009346:	4638      	mov	r0, r7
 8009348:	47c0      	blx	r8
 800934a:	4306      	orrs	r6, r0
 800934c:	3568      	adds	r5, #104	@ 0x68
 800934e:	e7e9      	b.n	8009324 <_fwalk_sglue+0x10>

08009350 <siprintf>:
 8009350:	b40e      	push	{r1, r2, r3}
 8009352:	b500      	push	{lr}
 8009354:	b09c      	sub	sp, #112	@ 0x70
 8009356:	ab1d      	add	r3, sp, #116	@ 0x74
 8009358:	9002      	str	r0, [sp, #8]
 800935a:	9006      	str	r0, [sp, #24]
 800935c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009360:	4809      	ldr	r0, [pc, #36]	@ (8009388 <siprintf+0x38>)
 8009362:	9107      	str	r1, [sp, #28]
 8009364:	9104      	str	r1, [sp, #16]
 8009366:	4909      	ldr	r1, [pc, #36]	@ (800938c <siprintf+0x3c>)
 8009368:	f853 2b04 	ldr.w	r2, [r3], #4
 800936c:	9105      	str	r1, [sp, #20]
 800936e:	6800      	ldr	r0, [r0, #0]
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	a902      	add	r1, sp, #8
 8009374:	f002 fbb6 	bl	800bae4 <_svfiprintf_r>
 8009378:	9b02      	ldr	r3, [sp, #8]
 800937a:	2200      	movs	r2, #0
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	b01c      	add	sp, #112	@ 0x70
 8009380:	f85d eb04 	ldr.w	lr, [sp], #4
 8009384:	b003      	add	sp, #12
 8009386:	4770      	bx	lr
 8009388:	20000018 	.word	0x20000018
 800938c:	ffff0208 	.word	0xffff0208

08009390 <__sread>:
 8009390:	b510      	push	{r4, lr}
 8009392:	460c      	mov	r4, r1
 8009394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009398:	f000 f86c 	bl	8009474 <_read_r>
 800939c:	2800      	cmp	r0, #0
 800939e:	bfab      	itete	ge
 80093a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80093a2:	89a3      	ldrhlt	r3, [r4, #12]
 80093a4:	181b      	addge	r3, r3, r0
 80093a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093aa:	bfac      	ite	ge
 80093ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093ae:	81a3      	strhlt	r3, [r4, #12]
 80093b0:	bd10      	pop	{r4, pc}

080093b2 <__swrite>:
 80093b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b6:	461f      	mov	r7, r3
 80093b8:	898b      	ldrh	r3, [r1, #12]
 80093ba:	05db      	lsls	r3, r3, #23
 80093bc:	4605      	mov	r5, r0
 80093be:	460c      	mov	r4, r1
 80093c0:	4616      	mov	r6, r2
 80093c2:	d505      	bpl.n	80093d0 <__swrite+0x1e>
 80093c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c8:	2302      	movs	r3, #2
 80093ca:	2200      	movs	r2, #0
 80093cc:	f000 f840 	bl	8009450 <_lseek_r>
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	4632      	mov	r2, r6
 80093de:	463b      	mov	r3, r7
 80093e0:	4628      	mov	r0, r5
 80093e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093e6:	f000 b857 	b.w	8009498 <_write_r>

080093ea <__sseek>:
 80093ea:	b510      	push	{r4, lr}
 80093ec:	460c      	mov	r4, r1
 80093ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f2:	f000 f82d 	bl	8009450 <_lseek_r>
 80093f6:	1c43      	adds	r3, r0, #1
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	bf15      	itete	ne
 80093fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009402:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009406:	81a3      	strheq	r3, [r4, #12]
 8009408:	bf18      	it	ne
 800940a:	81a3      	strhne	r3, [r4, #12]
 800940c:	bd10      	pop	{r4, pc}

0800940e <__sclose>:
 800940e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009412:	f000 b80d 	b.w	8009430 <_close_r>

08009416 <memset>:
 8009416:	4402      	add	r2, r0
 8009418:	4603      	mov	r3, r0
 800941a:	4293      	cmp	r3, r2
 800941c:	d100      	bne.n	8009420 <memset+0xa>
 800941e:	4770      	bx	lr
 8009420:	f803 1b01 	strb.w	r1, [r3], #1
 8009424:	e7f9      	b.n	800941a <memset+0x4>
	...

08009428 <_localeconv_r>:
 8009428:	4800      	ldr	r0, [pc, #0]	@ (800942c <_localeconv_r+0x4>)
 800942a:	4770      	bx	lr
 800942c:	20000158 	.word	0x20000158

08009430 <_close_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d06      	ldr	r5, [pc, #24]	@ (800944c <_close_r+0x1c>)
 8009434:	2300      	movs	r3, #0
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	602b      	str	r3, [r5, #0]
 800943c:	f7f8 fca8 	bl	8001d90 <_close>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_close_r+0x1a>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_close_r+0x1a>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20000554 	.word	0x20000554

08009450 <_lseek_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d07      	ldr	r5, [pc, #28]	@ (8009470 <_lseek_r+0x20>)
 8009454:	4604      	mov	r4, r0
 8009456:	4608      	mov	r0, r1
 8009458:	4611      	mov	r1, r2
 800945a:	2200      	movs	r2, #0
 800945c:	602a      	str	r2, [r5, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	f7f8 fcbd 	bl	8001dde <_lseek>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_lseek_r+0x1e>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_lseek_r+0x1e>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	20000554 	.word	0x20000554

08009474 <_read_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4d07      	ldr	r5, [pc, #28]	@ (8009494 <_read_r+0x20>)
 8009478:	4604      	mov	r4, r0
 800947a:	4608      	mov	r0, r1
 800947c:	4611      	mov	r1, r2
 800947e:	2200      	movs	r2, #0
 8009480:	602a      	str	r2, [r5, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	f7f8 fc4b 	bl	8001d1e <_read>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_read_r+0x1e>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_read_r+0x1e>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20000554 	.word	0x20000554

08009498 <_write_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d07      	ldr	r5, [pc, #28]	@ (80094b8 <_write_r+0x20>)
 800949c:	4604      	mov	r4, r0
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f7f8 fc56 	bl	8001d58 <_write>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_write_r+0x1e>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_write_r+0x1e>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000554 	.word	0x20000554

080094bc <__errno>:
 80094bc:	4b01      	ldr	r3, [pc, #4]	@ (80094c4 <__errno+0x8>)
 80094be:	6818      	ldr	r0, [r3, #0]
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	20000018 	.word	0x20000018

080094c8 <__libc_init_array>:
 80094c8:	b570      	push	{r4, r5, r6, lr}
 80094ca:	4d0d      	ldr	r5, [pc, #52]	@ (8009500 <__libc_init_array+0x38>)
 80094cc:	4c0d      	ldr	r4, [pc, #52]	@ (8009504 <__libc_init_array+0x3c>)
 80094ce:	1b64      	subs	r4, r4, r5
 80094d0:	10a4      	asrs	r4, r4, #2
 80094d2:	2600      	movs	r6, #0
 80094d4:	42a6      	cmp	r6, r4
 80094d6:	d109      	bne.n	80094ec <__libc_init_array+0x24>
 80094d8:	4d0b      	ldr	r5, [pc, #44]	@ (8009508 <__libc_init_array+0x40>)
 80094da:	4c0c      	ldr	r4, [pc, #48]	@ (800950c <__libc_init_array+0x44>)
 80094dc:	f003 fb72 	bl	800cbc4 <_init>
 80094e0:	1b64      	subs	r4, r4, r5
 80094e2:	10a4      	asrs	r4, r4, #2
 80094e4:	2600      	movs	r6, #0
 80094e6:	42a6      	cmp	r6, r4
 80094e8:	d105      	bne.n	80094f6 <__libc_init_array+0x2e>
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f0:	4798      	blx	r3
 80094f2:	3601      	adds	r6, #1
 80094f4:	e7ee      	b.n	80094d4 <__libc_init_array+0xc>
 80094f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094fa:	4798      	blx	r3
 80094fc:	3601      	adds	r6, #1
 80094fe:	e7f2      	b.n	80094e6 <__libc_init_array+0x1e>
 8009500:	0800d078 	.word	0x0800d078
 8009504:	0800d078 	.word	0x0800d078
 8009508:	0800d078 	.word	0x0800d078
 800950c:	0800d07c 	.word	0x0800d07c

08009510 <__retarget_lock_init_recursive>:
 8009510:	4770      	bx	lr

08009512 <__retarget_lock_acquire_recursive>:
 8009512:	4770      	bx	lr

08009514 <__retarget_lock_release_recursive>:
 8009514:	4770      	bx	lr
	...

08009518 <nanf>:
 8009518:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009520 <nanf+0x8>
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	7fc00000 	.word	0x7fc00000

08009524 <quorem>:
 8009524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	6903      	ldr	r3, [r0, #16]
 800952a:	690c      	ldr	r4, [r1, #16]
 800952c:	42a3      	cmp	r3, r4
 800952e:	4607      	mov	r7, r0
 8009530:	db7e      	blt.n	8009630 <quorem+0x10c>
 8009532:	3c01      	subs	r4, #1
 8009534:	f101 0814 	add.w	r8, r1, #20
 8009538:	00a3      	lsls	r3, r4, #2
 800953a:	f100 0514 	add.w	r5, r0, #20
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800954a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800954e:	3301      	adds	r3, #1
 8009550:	429a      	cmp	r2, r3
 8009552:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009556:	fbb2 f6f3 	udiv	r6, r2, r3
 800955a:	d32e      	bcc.n	80095ba <quorem+0x96>
 800955c:	f04f 0a00 	mov.w	sl, #0
 8009560:	46c4      	mov	ip, r8
 8009562:	46ae      	mov	lr, r5
 8009564:	46d3      	mov	fp, sl
 8009566:	f85c 3b04 	ldr.w	r3, [ip], #4
 800956a:	b298      	uxth	r0, r3
 800956c:	fb06 a000 	mla	r0, r6, r0, sl
 8009570:	0c02      	lsrs	r2, r0, #16
 8009572:	0c1b      	lsrs	r3, r3, #16
 8009574:	fb06 2303 	mla	r3, r6, r3, r2
 8009578:	f8de 2000 	ldr.w	r2, [lr]
 800957c:	b280      	uxth	r0, r0
 800957e:	b292      	uxth	r2, r2
 8009580:	1a12      	subs	r2, r2, r0
 8009582:	445a      	add	r2, fp
 8009584:	f8de 0000 	ldr.w	r0, [lr]
 8009588:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800958c:	b29b      	uxth	r3, r3
 800958e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009592:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009596:	b292      	uxth	r2, r2
 8009598:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800959c:	45e1      	cmp	r9, ip
 800959e:	f84e 2b04 	str.w	r2, [lr], #4
 80095a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095a6:	d2de      	bcs.n	8009566 <quorem+0x42>
 80095a8:	9b00      	ldr	r3, [sp, #0]
 80095aa:	58eb      	ldr	r3, [r5, r3]
 80095ac:	b92b      	cbnz	r3, 80095ba <quorem+0x96>
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	3b04      	subs	r3, #4
 80095b2:	429d      	cmp	r5, r3
 80095b4:	461a      	mov	r2, r3
 80095b6:	d32f      	bcc.n	8009618 <quorem+0xf4>
 80095b8:	613c      	str	r4, [r7, #16]
 80095ba:	4638      	mov	r0, r7
 80095bc:	f001 f9c4 	bl	800a948 <__mcmp>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	db25      	blt.n	8009610 <quorem+0xec>
 80095c4:	4629      	mov	r1, r5
 80095c6:	2000      	movs	r0, #0
 80095c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80095cc:	f8d1 c000 	ldr.w	ip, [r1]
 80095d0:	fa1f fe82 	uxth.w	lr, r2
 80095d4:	fa1f f38c 	uxth.w	r3, ip
 80095d8:	eba3 030e 	sub.w	r3, r3, lr
 80095dc:	4403      	add	r3, r0
 80095de:	0c12      	lsrs	r2, r2, #16
 80095e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80095e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ee:	45c1      	cmp	r9, r8
 80095f0:	f841 3b04 	str.w	r3, [r1], #4
 80095f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095f8:	d2e6      	bcs.n	80095c8 <quorem+0xa4>
 80095fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009602:	b922      	cbnz	r2, 800960e <quorem+0xea>
 8009604:	3b04      	subs	r3, #4
 8009606:	429d      	cmp	r5, r3
 8009608:	461a      	mov	r2, r3
 800960a:	d30b      	bcc.n	8009624 <quorem+0x100>
 800960c:	613c      	str	r4, [r7, #16]
 800960e:	3601      	adds	r6, #1
 8009610:	4630      	mov	r0, r6
 8009612:	b003      	add	sp, #12
 8009614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009618:	6812      	ldr	r2, [r2, #0]
 800961a:	3b04      	subs	r3, #4
 800961c:	2a00      	cmp	r2, #0
 800961e:	d1cb      	bne.n	80095b8 <quorem+0x94>
 8009620:	3c01      	subs	r4, #1
 8009622:	e7c6      	b.n	80095b2 <quorem+0x8e>
 8009624:	6812      	ldr	r2, [r2, #0]
 8009626:	3b04      	subs	r3, #4
 8009628:	2a00      	cmp	r2, #0
 800962a:	d1ef      	bne.n	800960c <quorem+0xe8>
 800962c:	3c01      	subs	r4, #1
 800962e:	e7ea      	b.n	8009606 <quorem+0xe2>
 8009630:	2000      	movs	r0, #0
 8009632:	e7ee      	b.n	8009612 <quorem+0xee>
 8009634:	0000      	movs	r0, r0
	...

08009638 <_dtoa_r>:
 8009638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	69c7      	ldr	r7, [r0, #28]
 800963e:	b099      	sub	sp, #100	@ 0x64
 8009640:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009644:	ec55 4b10 	vmov	r4, r5, d0
 8009648:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800964a:	9109      	str	r1, [sp, #36]	@ 0x24
 800964c:	4683      	mov	fp, r0
 800964e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009650:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009652:	b97f      	cbnz	r7, 8009674 <_dtoa_r+0x3c>
 8009654:	2010      	movs	r0, #16
 8009656:	f000 fdfd 	bl	800a254 <malloc>
 800965a:	4602      	mov	r2, r0
 800965c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009660:	b920      	cbnz	r0, 800966c <_dtoa_r+0x34>
 8009662:	4ba7      	ldr	r3, [pc, #668]	@ (8009900 <_dtoa_r+0x2c8>)
 8009664:	21ef      	movs	r1, #239	@ 0xef
 8009666:	48a7      	ldr	r0, [pc, #668]	@ (8009904 <_dtoa_r+0x2cc>)
 8009668:	f002 fc36 	bl	800bed8 <__assert_func>
 800966c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009670:	6007      	str	r7, [r0, #0]
 8009672:	60c7      	str	r7, [r0, #12]
 8009674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009678:	6819      	ldr	r1, [r3, #0]
 800967a:	b159      	cbz	r1, 8009694 <_dtoa_r+0x5c>
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	604a      	str	r2, [r1, #4]
 8009680:	2301      	movs	r3, #1
 8009682:	4093      	lsls	r3, r2
 8009684:	608b      	str	r3, [r1, #8]
 8009686:	4658      	mov	r0, fp
 8009688:	f000 feda 	bl	800a440 <_Bfree>
 800968c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009690:	2200      	movs	r2, #0
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	1e2b      	subs	r3, r5, #0
 8009696:	bfb9      	ittee	lt
 8009698:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800969c:	9303      	strlt	r3, [sp, #12]
 800969e:	2300      	movge	r3, #0
 80096a0:	6033      	strge	r3, [r6, #0]
 80096a2:	9f03      	ldr	r7, [sp, #12]
 80096a4:	4b98      	ldr	r3, [pc, #608]	@ (8009908 <_dtoa_r+0x2d0>)
 80096a6:	bfbc      	itt	lt
 80096a8:	2201      	movlt	r2, #1
 80096aa:	6032      	strlt	r2, [r6, #0]
 80096ac:	43bb      	bics	r3, r7
 80096ae:	d112      	bne.n	80096d6 <_dtoa_r+0x9e>
 80096b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096bc:	4323      	orrs	r3, r4
 80096be:	f000 854d 	beq.w	800a15c <_dtoa_r+0xb24>
 80096c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800991c <_dtoa_r+0x2e4>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 854f 	beq.w	800a16c <_dtoa_r+0xb34>
 80096ce:	f10a 0303 	add.w	r3, sl, #3
 80096d2:	f000 bd49 	b.w	800a168 <_dtoa_r+0xb30>
 80096d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096da:	2200      	movs	r2, #0
 80096dc:	ec51 0b17 	vmov	r0, r1, d7
 80096e0:	2300      	movs	r3, #0
 80096e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80096e6:	f7f7 f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80096ea:	4680      	mov	r8, r0
 80096ec:	b158      	cbz	r0, 8009706 <_dtoa_r+0xce>
 80096ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096f0:	2301      	movs	r3, #1
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096f6:	b113      	cbz	r3, 80096fe <_dtoa_r+0xc6>
 80096f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80096fa:	4b84      	ldr	r3, [pc, #528]	@ (800990c <_dtoa_r+0x2d4>)
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009920 <_dtoa_r+0x2e8>
 8009702:	f000 bd33 	b.w	800a16c <_dtoa_r+0xb34>
 8009706:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800970a:	aa16      	add	r2, sp, #88	@ 0x58
 800970c:	a917      	add	r1, sp, #92	@ 0x5c
 800970e:	4658      	mov	r0, fp
 8009710:	f001 fa3a 	bl	800ab88 <__d2b>
 8009714:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009718:	4681      	mov	r9, r0
 800971a:	2e00      	cmp	r6, #0
 800971c:	d077      	beq.n	800980e <_dtoa_r+0x1d6>
 800971e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009720:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800972c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009730:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009734:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009738:	4619      	mov	r1, r3
 800973a:	2200      	movs	r2, #0
 800973c:	4b74      	ldr	r3, [pc, #464]	@ (8009910 <_dtoa_r+0x2d8>)
 800973e:	f7f6 fda3 	bl	8000288 <__aeabi_dsub>
 8009742:	a369      	add	r3, pc, #420	@ (adr r3, 80098e8 <_dtoa_r+0x2b0>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f7f6 ff56 	bl	80005f8 <__aeabi_dmul>
 800974c:	a368      	add	r3, pc, #416	@ (adr r3, 80098f0 <_dtoa_r+0x2b8>)
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	f7f6 fd9b 	bl	800028c <__adddf3>
 8009756:	4604      	mov	r4, r0
 8009758:	4630      	mov	r0, r6
 800975a:	460d      	mov	r5, r1
 800975c:	f7f6 fee2 	bl	8000524 <__aeabi_i2d>
 8009760:	a365      	add	r3, pc, #404	@ (adr r3, 80098f8 <_dtoa_r+0x2c0>)
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	f7f6 ff47 	bl	80005f8 <__aeabi_dmul>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	4620      	mov	r0, r4
 8009770:	4629      	mov	r1, r5
 8009772:	f7f6 fd8b 	bl	800028c <__adddf3>
 8009776:	4604      	mov	r4, r0
 8009778:	460d      	mov	r5, r1
 800977a:	f7f7 f9ed 	bl	8000b58 <__aeabi_d2iz>
 800977e:	2200      	movs	r2, #0
 8009780:	4607      	mov	r7, r0
 8009782:	2300      	movs	r3, #0
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	f7f7 f9a8 	bl	8000adc <__aeabi_dcmplt>
 800978c:	b140      	cbz	r0, 80097a0 <_dtoa_r+0x168>
 800978e:	4638      	mov	r0, r7
 8009790:	f7f6 fec8 	bl	8000524 <__aeabi_i2d>
 8009794:	4622      	mov	r2, r4
 8009796:	462b      	mov	r3, r5
 8009798:	f7f7 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800979c:	b900      	cbnz	r0, 80097a0 <_dtoa_r+0x168>
 800979e:	3f01      	subs	r7, #1
 80097a0:	2f16      	cmp	r7, #22
 80097a2:	d851      	bhi.n	8009848 <_dtoa_r+0x210>
 80097a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009914 <_dtoa_r+0x2dc>)
 80097a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097b2:	f7f7 f993 	bl	8000adc <__aeabi_dcmplt>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d048      	beq.n	800984c <_dtoa_r+0x214>
 80097ba:	3f01      	subs	r7, #1
 80097bc:	2300      	movs	r3, #0
 80097be:	9312      	str	r3, [sp, #72]	@ 0x48
 80097c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097c2:	1b9b      	subs	r3, r3, r6
 80097c4:	1e5a      	subs	r2, r3, #1
 80097c6:	bf44      	itt	mi
 80097c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80097cc:	2300      	movmi	r3, #0
 80097ce:	9208      	str	r2, [sp, #32]
 80097d0:	bf54      	ite	pl
 80097d2:	f04f 0800 	movpl.w	r8, #0
 80097d6:	9308      	strmi	r3, [sp, #32]
 80097d8:	2f00      	cmp	r7, #0
 80097da:	db39      	blt.n	8009850 <_dtoa_r+0x218>
 80097dc:	9b08      	ldr	r3, [sp, #32]
 80097de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80097e0:	443b      	add	r3, r7
 80097e2:	9308      	str	r3, [sp, #32]
 80097e4:	2300      	movs	r3, #0
 80097e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80097e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ea:	2b09      	cmp	r3, #9
 80097ec:	d864      	bhi.n	80098b8 <_dtoa_r+0x280>
 80097ee:	2b05      	cmp	r3, #5
 80097f0:	bfc4      	itt	gt
 80097f2:	3b04      	subgt	r3, #4
 80097f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80097f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f8:	f1a3 0302 	sub.w	r3, r3, #2
 80097fc:	bfcc      	ite	gt
 80097fe:	2400      	movgt	r4, #0
 8009800:	2401      	movle	r4, #1
 8009802:	2b03      	cmp	r3, #3
 8009804:	d863      	bhi.n	80098ce <_dtoa_r+0x296>
 8009806:	e8df f003 	tbb	[pc, r3]
 800980a:	372a      	.short	0x372a
 800980c:	5535      	.short	0x5535
 800980e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009812:	441e      	add	r6, r3
 8009814:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009818:	2b20      	cmp	r3, #32
 800981a:	bfc1      	itttt	gt
 800981c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009820:	409f      	lslgt	r7, r3
 8009822:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009826:	fa24 f303 	lsrgt.w	r3, r4, r3
 800982a:	bfd6      	itet	le
 800982c:	f1c3 0320 	rsble	r3, r3, #32
 8009830:	ea47 0003 	orrgt.w	r0, r7, r3
 8009834:	fa04 f003 	lslle.w	r0, r4, r3
 8009838:	f7f6 fe64 	bl	8000504 <__aeabi_ui2d>
 800983c:	2201      	movs	r2, #1
 800983e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009842:	3e01      	subs	r6, #1
 8009844:	9214      	str	r2, [sp, #80]	@ 0x50
 8009846:	e777      	b.n	8009738 <_dtoa_r+0x100>
 8009848:	2301      	movs	r3, #1
 800984a:	e7b8      	b.n	80097be <_dtoa_r+0x186>
 800984c:	9012      	str	r0, [sp, #72]	@ 0x48
 800984e:	e7b7      	b.n	80097c0 <_dtoa_r+0x188>
 8009850:	427b      	negs	r3, r7
 8009852:	930a      	str	r3, [sp, #40]	@ 0x28
 8009854:	2300      	movs	r3, #0
 8009856:	eba8 0807 	sub.w	r8, r8, r7
 800985a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800985c:	e7c4      	b.n	80097e8 <_dtoa_r+0x1b0>
 800985e:	2300      	movs	r3, #0
 8009860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009864:	2b00      	cmp	r3, #0
 8009866:	dc35      	bgt.n	80098d4 <_dtoa_r+0x29c>
 8009868:	2301      	movs	r3, #1
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	9307      	str	r3, [sp, #28]
 800986e:	461a      	mov	r2, r3
 8009870:	920e      	str	r2, [sp, #56]	@ 0x38
 8009872:	e00b      	b.n	800988c <_dtoa_r+0x254>
 8009874:	2301      	movs	r3, #1
 8009876:	e7f3      	b.n	8009860 <_dtoa_r+0x228>
 8009878:	2300      	movs	r3, #0
 800987a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800987c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800987e:	18fb      	adds	r3, r7, r3
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	2b01      	cmp	r3, #1
 8009886:	9307      	str	r3, [sp, #28]
 8009888:	bfb8      	it	lt
 800988a:	2301      	movlt	r3, #1
 800988c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009890:	2100      	movs	r1, #0
 8009892:	2204      	movs	r2, #4
 8009894:	f102 0514 	add.w	r5, r2, #20
 8009898:	429d      	cmp	r5, r3
 800989a:	d91f      	bls.n	80098dc <_dtoa_r+0x2a4>
 800989c:	6041      	str	r1, [r0, #4]
 800989e:	4658      	mov	r0, fp
 80098a0:	f000 fd8e 	bl	800a3c0 <_Balloc>
 80098a4:	4682      	mov	sl, r0
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d13c      	bne.n	8009924 <_dtoa_r+0x2ec>
 80098aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009918 <_dtoa_r+0x2e0>)
 80098ac:	4602      	mov	r2, r0
 80098ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80098b2:	e6d8      	b.n	8009666 <_dtoa_r+0x2e>
 80098b4:	2301      	movs	r3, #1
 80098b6:	e7e0      	b.n	800987a <_dtoa_r+0x242>
 80098b8:	2401      	movs	r4, #1
 80098ba:	2300      	movs	r3, #0
 80098bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80098be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80098c0:	f04f 33ff 	mov.w	r3, #4294967295
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	9307      	str	r3, [sp, #28]
 80098c8:	2200      	movs	r2, #0
 80098ca:	2312      	movs	r3, #18
 80098cc:	e7d0      	b.n	8009870 <_dtoa_r+0x238>
 80098ce:	2301      	movs	r3, #1
 80098d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098d2:	e7f5      	b.n	80098c0 <_dtoa_r+0x288>
 80098d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	9307      	str	r3, [sp, #28]
 80098da:	e7d7      	b.n	800988c <_dtoa_r+0x254>
 80098dc:	3101      	adds	r1, #1
 80098de:	0052      	lsls	r2, r2, #1
 80098e0:	e7d8      	b.n	8009894 <_dtoa_r+0x25c>
 80098e2:	bf00      	nop
 80098e4:	f3af 8000 	nop.w
 80098e8:	636f4361 	.word	0x636f4361
 80098ec:	3fd287a7 	.word	0x3fd287a7
 80098f0:	8b60c8b3 	.word	0x8b60c8b3
 80098f4:	3fc68a28 	.word	0x3fc68a28
 80098f8:	509f79fb 	.word	0x509f79fb
 80098fc:	3fd34413 	.word	0x3fd34413
 8009900:	0800cc8a 	.word	0x0800cc8a
 8009904:	0800cca1 	.word	0x0800cca1
 8009908:	7ff00000 	.word	0x7ff00000
 800990c:	0800cc55 	.word	0x0800cc55
 8009910:	3ff80000 	.word	0x3ff80000
 8009914:	0800cd98 	.word	0x0800cd98
 8009918:	0800ccf9 	.word	0x0800ccf9
 800991c:	0800cc86 	.word	0x0800cc86
 8009920:	0800cc54 	.word	0x0800cc54
 8009924:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009928:	6018      	str	r0, [r3, #0]
 800992a:	9b07      	ldr	r3, [sp, #28]
 800992c:	2b0e      	cmp	r3, #14
 800992e:	f200 80a4 	bhi.w	8009a7a <_dtoa_r+0x442>
 8009932:	2c00      	cmp	r4, #0
 8009934:	f000 80a1 	beq.w	8009a7a <_dtoa_r+0x442>
 8009938:	2f00      	cmp	r7, #0
 800993a:	dd33      	ble.n	80099a4 <_dtoa_r+0x36c>
 800993c:	4bad      	ldr	r3, [pc, #692]	@ (8009bf4 <_dtoa_r+0x5bc>)
 800993e:	f007 020f 	and.w	r2, r7, #15
 8009942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009946:	ed93 7b00 	vldr	d7, [r3]
 800994a:	05f8      	lsls	r0, r7, #23
 800994c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009950:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009954:	d516      	bpl.n	8009984 <_dtoa_r+0x34c>
 8009956:	4ba8      	ldr	r3, [pc, #672]	@ (8009bf8 <_dtoa_r+0x5c0>)
 8009958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800995c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009960:	f7f6 ff74 	bl	800084c <__aeabi_ddiv>
 8009964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009968:	f004 040f 	and.w	r4, r4, #15
 800996c:	2603      	movs	r6, #3
 800996e:	4da2      	ldr	r5, [pc, #648]	@ (8009bf8 <_dtoa_r+0x5c0>)
 8009970:	b954      	cbnz	r4, 8009988 <_dtoa_r+0x350>
 8009972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800997a:	f7f6 ff67 	bl	800084c <__aeabi_ddiv>
 800997e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009982:	e028      	b.n	80099d6 <_dtoa_r+0x39e>
 8009984:	2602      	movs	r6, #2
 8009986:	e7f2      	b.n	800996e <_dtoa_r+0x336>
 8009988:	07e1      	lsls	r1, r4, #31
 800998a:	d508      	bpl.n	800999e <_dtoa_r+0x366>
 800998c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009990:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009994:	f7f6 fe30 	bl	80005f8 <__aeabi_dmul>
 8009998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800999c:	3601      	adds	r6, #1
 800999e:	1064      	asrs	r4, r4, #1
 80099a0:	3508      	adds	r5, #8
 80099a2:	e7e5      	b.n	8009970 <_dtoa_r+0x338>
 80099a4:	f000 80d2 	beq.w	8009b4c <_dtoa_r+0x514>
 80099a8:	427c      	negs	r4, r7
 80099aa:	4b92      	ldr	r3, [pc, #584]	@ (8009bf4 <_dtoa_r+0x5bc>)
 80099ac:	4d92      	ldr	r5, [pc, #584]	@ (8009bf8 <_dtoa_r+0x5c0>)
 80099ae:	f004 020f 	and.w	r2, r4, #15
 80099b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099be:	f7f6 fe1b 	bl	80005f8 <__aeabi_dmul>
 80099c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099c6:	1124      	asrs	r4, r4, #4
 80099c8:	2300      	movs	r3, #0
 80099ca:	2602      	movs	r6, #2
 80099cc:	2c00      	cmp	r4, #0
 80099ce:	f040 80b2 	bne.w	8009b36 <_dtoa_r+0x4fe>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1d3      	bne.n	800997e <_dtoa_r+0x346>
 80099d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 80b7 	beq.w	8009b50 <_dtoa_r+0x518>
 80099e2:	4b86      	ldr	r3, [pc, #536]	@ (8009bfc <_dtoa_r+0x5c4>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	4620      	mov	r0, r4
 80099e8:	4629      	mov	r1, r5
 80099ea:	f7f7 f877 	bl	8000adc <__aeabi_dcmplt>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f000 80ae 	beq.w	8009b50 <_dtoa_r+0x518>
 80099f4:	9b07      	ldr	r3, [sp, #28]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f000 80aa 	beq.w	8009b50 <_dtoa_r+0x518>
 80099fc:	9b00      	ldr	r3, [sp, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	dd37      	ble.n	8009a72 <_dtoa_r+0x43a>
 8009a02:	1e7b      	subs	r3, r7, #1
 8009a04:	9304      	str	r3, [sp, #16]
 8009a06:	4620      	mov	r0, r4
 8009a08:	4b7d      	ldr	r3, [pc, #500]	@ (8009c00 <_dtoa_r+0x5c8>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	f7f6 fdf3 	bl	80005f8 <__aeabi_dmul>
 8009a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a16:	9c00      	ldr	r4, [sp, #0]
 8009a18:	3601      	adds	r6, #1
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f7f6 fd82 	bl	8000524 <__aeabi_i2d>
 8009a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a24:	f7f6 fde8 	bl	80005f8 <__aeabi_dmul>
 8009a28:	4b76      	ldr	r3, [pc, #472]	@ (8009c04 <_dtoa_r+0x5cc>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f7f6 fc2e 	bl	800028c <__adddf3>
 8009a30:	4605      	mov	r5, r0
 8009a32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a36:	2c00      	cmp	r4, #0
 8009a38:	f040 808d 	bne.w	8009b56 <_dtoa_r+0x51e>
 8009a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a40:	4b71      	ldr	r3, [pc, #452]	@ (8009c08 <_dtoa_r+0x5d0>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	f7f6 fc20 	bl	8000288 <__aeabi_dsub>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a50:	462a      	mov	r2, r5
 8009a52:	4633      	mov	r3, r6
 8009a54:	f7f7 f860 	bl	8000b18 <__aeabi_dcmpgt>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	f040 828b 	bne.w	8009f74 <_dtoa_r+0x93c>
 8009a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a62:	462a      	mov	r2, r5
 8009a64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a68:	f7f7 f838 	bl	8000adc <__aeabi_dcmplt>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	f040 8128 	bne.w	8009cc2 <_dtoa_r+0x68a>
 8009a72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009a76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f2c0 815a 	blt.w	8009d36 <_dtoa_r+0x6fe>
 8009a82:	2f0e      	cmp	r7, #14
 8009a84:	f300 8157 	bgt.w	8009d36 <_dtoa_r+0x6fe>
 8009a88:	4b5a      	ldr	r3, [pc, #360]	@ (8009bf4 <_dtoa_r+0x5bc>)
 8009a8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a8e:	ed93 7b00 	vldr	d7, [r3]
 8009a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	ed8d 7b00 	vstr	d7, [sp]
 8009a9a:	da03      	bge.n	8009aa4 <_dtoa_r+0x46c>
 8009a9c:	9b07      	ldr	r3, [sp, #28]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f340 8101 	ble.w	8009ca6 <_dtoa_r+0x66e>
 8009aa4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009aa8:	4656      	mov	r6, sl
 8009aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7f6 fecb 	bl	800084c <__aeabi_ddiv>
 8009ab6:	f7f7 f84f 	bl	8000b58 <__aeabi_d2iz>
 8009aba:	4680      	mov	r8, r0
 8009abc:	f7f6 fd32 	bl	8000524 <__aeabi_i2d>
 8009ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ac4:	f7f6 fd98 	bl	80005f8 <__aeabi_dmul>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	4620      	mov	r0, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ad4:	f7f6 fbd8 	bl	8000288 <__aeabi_dsub>
 8009ad8:	f806 4b01 	strb.w	r4, [r6], #1
 8009adc:	9d07      	ldr	r5, [sp, #28]
 8009ade:	eba6 040a 	sub.w	r4, r6, sl
 8009ae2:	42a5      	cmp	r5, r4
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	f040 8117 	bne.w	8009d1a <_dtoa_r+0x6e2>
 8009aec:	f7f6 fbce 	bl	800028c <__adddf3>
 8009af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009af4:	4604      	mov	r4, r0
 8009af6:	460d      	mov	r5, r1
 8009af8:	f7f7 f80e 	bl	8000b18 <__aeabi_dcmpgt>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	f040 80f9 	bne.w	8009cf4 <_dtoa_r+0x6bc>
 8009b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b06:	4620      	mov	r0, r4
 8009b08:	4629      	mov	r1, r5
 8009b0a:	f7f6 ffdd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b0e:	b118      	cbz	r0, 8009b18 <_dtoa_r+0x4e0>
 8009b10:	f018 0f01 	tst.w	r8, #1
 8009b14:	f040 80ee 	bne.w	8009cf4 <_dtoa_r+0x6bc>
 8009b18:	4649      	mov	r1, r9
 8009b1a:	4658      	mov	r0, fp
 8009b1c:	f000 fc90 	bl	800a440 <_Bfree>
 8009b20:	2300      	movs	r3, #0
 8009b22:	7033      	strb	r3, [r6, #0]
 8009b24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b26:	3701      	adds	r7, #1
 8009b28:	601f      	str	r7, [r3, #0]
 8009b2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 831d 	beq.w	800a16c <_dtoa_r+0xb34>
 8009b32:	601e      	str	r6, [r3, #0]
 8009b34:	e31a      	b.n	800a16c <_dtoa_r+0xb34>
 8009b36:	07e2      	lsls	r2, r4, #31
 8009b38:	d505      	bpl.n	8009b46 <_dtoa_r+0x50e>
 8009b3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b3e:	f7f6 fd5b 	bl	80005f8 <__aeabi_dmul>
 8009b42:	3601      	adds	r6, #1
 8009b44:	2301      	movs	r3, #1
 8009b46:	1064      	asrs	r4, r4, #1
 8009b48:	3508      	adds	r5, #8
 8009b4a:	e73f      	b.n	80099cc <_dtoa_r+0x394>
 8009b4c:	2602      	movs	r6, #2
 8009b4e:	e742      	b.n	80099d6 <_dtoa_r+0x39e>
 8009b50:	9c07      	ldr	r4, [sp, #28]
 8009b52:	9704      	str	r7, [sp, #16]
 8009b54:	e761      	b.n	8009a1a <_dtoa_r+0x3e2>
 8009b56:	4b27      	ldr	r3, [pc, #156]	@ (8009bf4 <_dtoa_r+0x5bc>)
 8009b58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b62:	4454      	add	r4, sl
 8009b64:	2900      	cmp	r1, #0
 8009b66:	d053      	beq.n	8009c10 <_dtoa_r+0x5d8>
 8009b68:	4928      	ldr	r1, [pc, #160]	@ (8009c0c <_dtoa_r+0x5d4>)
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	f7f6 fe6e 	bl	800084c <__aeabi_ddiv>
 8009b70:	4633      	mov	r3, r6
 8009b72:	462a      	mov	r2, r5
 8009b74:	f7f6 fb88 	bl	8000288 <__aeabi_dsub>
 8009b78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b7c:	4656      	mov	r6, sl
 8009b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b82:	f7f6 ffe9 	bl	8000b58 <__aeabi_d2iz>
 8009b86:	4605      	mov	r5, r0
 8009b88:	f7f6 fccc 	bl	8000524 <__aeabi_i2d>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b94:	f7f6 fb78 	bl	8000288 <__aeabi_dsub>
 8009b98:	3530      	adds	r5, #48	@ 0x30
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ba2:	f806 5b01 	strb.w	r5, [r6], #1
 8009ba6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009baa:	f7f6 ff97 	bl	8000adc <__aeabi_dcmplt>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d171      	bne.n	8009c96 <_dtoa_r+0x65e>
 8009bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bb6:	4911      	ldr	r1, [pc, #68]	@ (8009bfc <_dtoa_r+0x5c4>)
 8009bb8:	2000      	movs	r0, #0
 8009bba:	f7f6 fb65 	bl	8000288 <__aeabi_dsub>
 8009bbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bc2:	f7f6 ff8b 	bl	8000adc <__aeabi_dcmplt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f040 8095 	bne.w	8009cf6 <_dtoa_r+0x6be>
 8009bcc:	42a6      	cmp	r6, r4
 8009bce:	f43f af50 	beq.w	8009a72 <_dtoa_r+0x43a>
 8009bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8009c00 <_dtoa_r+0x5c8>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f7f6 fd0d 	bl	80005f8 <__aeabi_dmul>
 8009bde:	4b08      	ldr	r3, [pc, #32]	@ (8009c00 <_dtoa_r+0x5c8>)
 8009be0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009be4:	2200      	movs	r2, #0
 8009be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bea:	f7f6 fd05 	bl	80005f8 <__aeabi_dmul>
 8009bee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf2:	e7c4      	b.n	8009b7e <_dtoa_r+0x546>
 8009bf4:	0800cd98 	.word	0x0800cd98
 8009bf8:	0800cd70 	.word	0x0800cd70
 8009bfc:	3ff00000 	.word	0x3ff00000
 8009c00:	40240000 	.word	0x40240000
 8009c04:	401c0000 	.word	0x401c0000
 8009c08:	40140000 	.word	0x40140000
 8009c0c:	3fe00000 	.word	0x3fe00000
 8009c10:	4631      	mov	r1, r6
 8009c12:	4628      	mov	r0, r5
 8009c14:	f7f6 fcf0 	bl	80005f8 <__aeabi_dmul>
 8009c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009c1e:	4656      	mov	r6, sl
 8009c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c24:	f7f6 ff98 	bl	8000b58 <__aeabi_d2iz>
 8009c28:	4605      	mov	r5, r0
 8009c2a:	f7f6 fc7b 	bl	8000524 <__aeabi_i2d>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	460b      	mov	r3, r1
 8009c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c36:	f7f6 fb27 	bl	8000288 <__aeabi_dsub>
 8009c3a:	3530      	adds	r5, #48	@ 0x30
 8009c3c:	f806 5b01 	strb.w	r5, [r6], #1
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	42a6      	cmp	r6, r4
 8009c46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c4a:	f04f 0200 	mov.w	r2, #0
 8009c4e:	d124      	bne.n	8009c9a <_dtoa_r+0x662>
 8009c50:	4bac      	ldr	r3, [pc, #688]	@ (8009f04 <_dtoa_r+0x8cc>)
 8009c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c56:	f7f6 fb19 	bl	800028c <__adddf3>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c62:	f7f6 ff59 	bl	8000b18 <__aeabi_dcmpgt>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d145      	bne.n	8009cf6 <_dtoa_r+0x6be>
 8009c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c6e:	49a5      	ldr	r1, [pc, #660]	@ (8009f04 <_dtoa_r+0x8cc>)
 8009c70:	2000      	movs	r0, #0
 8009c72:	f7f6 fb09 	bl	8000288 <__aeabi_dsub>
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c7e:	f7f6 ff2d 	bl	8000adc <__aeabi_dcmplt>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	f43f aef5 	beq.w	8009a72 <_dtoa_r+0x43a>
 8009c88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009c8a:	1e73      	subs	r3, r6, #1
 8009c8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c92:	2b30      	cmp	r3, #48	@ 0x30
 8009c94:	d0f8      	beq.n	8009c88 <_dtoa_r+0x650>
 8009c96:	9f04      	ldr	r7, [sp, #16]
 8009c98:	e73e      	b.n	8009b18 <_dtoa_r+0x4e0>
 8009c9a:	4b9b      	ldr	r3, [pc, #620]	@ (8009f08 <_dtoa_r+0x8d0>)
 8009c9c:	f7f6 fcac 	bl	80005f8 <__aeabi_dmul>
 8009ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca4:	e7bc      	b.n	8009c20 <_dtoa_r+0x5e8>
 8009ca6:	d10c      	bne.n	8009cc2 <_dtoa_r+0x68a>
 8009ca8:	4b98      	ldr	r3, [pc, #608]	@ (8009f0c <_dtoa_r+0x8d4>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cb0:	f7f6 fca2 	bl	80005f8 <__aeabi_dmul>
 8009cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cb8:	f7f6 ff24 	bl	8000b04 <__aeabi_dcmpge>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	f000 8157 	beq.w	8009f70 <_dtoa_r+0x938>
 8009cc2:	2400      	movs	r4, #0
 8009cc4:	4625      	mov	r5, r4
 8009cc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cc8:	43db      	mvns	r3, r3
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	4656      	mov	r6, sl
 8009cce:	2700      	movs	r7, #0
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4658      	mov	r0, fp
 8009cd4:	f000 fbb4 	bl	800a440 <_Bfree>
 8009cd8:	2d00      	cmp	r5, #0
 8009cda:	d0dc      	beq.n	8009c96 <_dtoa_r+0x65e>
 8009cdc:	b12f      	cbz	r7, 8009cea <_dtoa_r+0x6b2>
 8009cde:	42af      	cmp	r7, r5
 8009ce0:	d003      	beq.n	8009cea <_dtoa_r+0x6b2>
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	4658      	mov	r0, fp
 8009ce6:	f000 fbab 	bl	800a440 <_Bfree>
 8009cea:	4629      	mov	r1, r5
 8009cec:	4658      	mov	r0, fp
 8009cee:	f000 fba7 	bl	800a440 <_Bfree>
 8009cf2:	e7d0      	b.n	8009c96 <_dtoa_r+0x65e>
 8009cf4:	9704      	str	r7, [sp, #16]
 8009cf6:	4633      	mov	r3, r6
 8009cf8:	461e      	mov	r6, r3
 8009cfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cfe:	2a39      	cmp	r2, #57	@ 0x39
 8009d00:	d107      	bne.n	8009d12 <_dtoa_r+0x6da>
 8009d02:	459a      	cmp	sl, r3
 8009d04:	d1f8      	bne.n	8009cf8 <_dtoa_r+0x6c0>
 8009d06:	9a04      	ldr	r2, [sp, #16]
 8009d08:	3201      	adds	r2, #1
 8009d0a:	9204      	str	r2, [sp, #16]
 8009d0c:	2230      	movs	r2, #48	@ 0x30
 8009d0e:	f88a 2000 	strb.w	r2, [sl]
 8009d12:	781a      	ldrb	r2, [r3, #0]
 8009d14:	3201      	adds	r2, #1
 8009d16:	701a      	strb	r2, [r3, #0]
 8009d18:	e7bd      	b.n	8009c96 <_dtoa_r+0x65e>
 8009d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8009f08 <_dtoa_r+0x8d0>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f7f6 fc6b 	bl	80005f8 <__aeabi_dmul>
 8009d22:	2200      	movs	r2, #0
 8009d24:	2300      	movs	r3, #0
 8009d26:	4604      	mov	r4, r0
 8009d28:	460d      	mov	r5, r1
 8009d2a:	f7f6 fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f43f aebb 	beq.w	8009aaa <_dtoa_r+0x472>
 8009d34:	e6f0      	b.n	8009b18 <_dtoa_r+0x4e0>
 8009d36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	f000 80db 	beq.w	8009ef4 <_dtoa_r+0x8bc>
 8009d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d40:	2a01      	cmp	r2, #1
 8009d42:	f300 80bf 	bgt.w	8009ec4 <_dtoa_r+0x88c>
 8009d46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009d48:	2a00      	cmp	r2, #0
 8009d4a:	f000 80b7 	beq.w	8009ebc <_dtoa_r+0x884>
 8009d4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d54:	4646      	mov	r6, r8
 8009d56:	9a08      	ldr	r2, [sp, #32]
 8009d58:	2101      	movs	r1, #1
 8009d5a:	441a      	add	r2, r3
 8009d5c:	4658      	mov	r0, fp
 8009d5e:	4498      	add	r8, r3
 8009d60:	9208      	str	r2, [sp, #32]
 8009d62:	f000 fc6b 	bl	800a63c <__i2b>
 8009d66:	4605      	mov	r5, r0
 8009d68:	b15e      	cbz	r6, 8009d82 <_dtoa_r+0x74a>
 8009d6a:	9b08      	ldr	r3, [sp, #32]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dd08      	ble.n	8009d82 <_dtoa_r+0x74a>
 8009d70:	42b3      	cmp	r3, r6
 8009d72:	9a08      	ldr	r2, [sp, #32]
 8009d74:	bfa8      	it	ge
 8009d76:	4633      	movge	r3, r6
 8009d78:	eba8 0803 	sub.w	r8, r8, r3
 8009d7c:	1af6      	subs	r6, r6, r3
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	9308      	str	r3, [sp, #32]
 8009d82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d84:	b1f3      	cbz	r3, 8009dc4 <_dtoa_r+0x78c>
 8009d86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 80b7 	beq.w	8009efc <_dtoa_r+0x8c4>
 8009d8e:	b18c      	cbz	r4, 8009db4 <_dtoa_r+0x77c>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4622      	mov	r2, r4
 8009d94:	4658      	mov	r0, fp
 8009d96:	f000 fd11 	bl	800a7bc <__pow5mult>
 8009d9a:	464a      	mov	r2, r9
 8009d9c:	4601      	mov	r1, r0
 8009d9e:	4605      	mov	r5, r0
 8009da0:	4658      	mov	r0, fp
 8009da2:	f000 fc61 	bl	800a668 <__multiply>
 8009da6:	4649      	mov	r1, r9
 8009da8:	9004      	str	r0, [sp, #16]
 8009daa:	4658      	mov	r0, fp
 8009dac:	f000 fb48 	bl	800a440 <_Bfree>
 8009db0:	9b04      	ldr	r3, [sp, #16]
 8009db2:	4699      	mov	r9, r3
 8009db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009db6:	1b1a      	subs	r2, r3, r4
 8009db8:	d004      	beq.n	8009dc4 <_dtoa_r+0x78c>
 8009dba:	4649      	mov	r1, r9
 8009dbc:	4658      	mov	r0, fp
 8009dbe:	f000 fcfd 	bl	800a7bc <__pow5mult>
 8009dc2:	4681      	mov	r9, r0
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	4658      	mov	r0, fp
 8009dc8:	f000 fc38 	bl	800a63c <__i2b>
 8009dcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dce:	4604      	mov	r4, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 81cf 	beq.w	800a174 <_dtoa_r+0xb3c>
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	4601      	mov	r1, r0
 8009dda:	4658      	mov	r0, fp
 8009ddc:	f000 fcee 	bl	800a7bc <__pow5mult>
 8009de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	4604      	mov	r4, r0
 8009de6:	f300 8095 	bgt.w	8009f14 <_dtoa_r+0x8dc>
 8009dea:	9b02      	ldr	r3, [sp, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f040 8087 	bne.w	8009f00 <_dtoa_r+0x8c8>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f040 8089 	bne.w	8009f10 <_dtoa_r+0x8d8>
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e04:	0d1b      	lsrs	r3, r3, #20
 8009e06:	051b      	lsls	r3, r3, #20
 8009e08:	b12b      	cbz	r3, 8009e16 <_dtoa_r+0x7de>
 8009e0a:	9b08      	ldr	r3, [sp, #32]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	9308      	str	r3, [sp, #32]
 8009e10:	f108 0801 	add.w	r8, r8, #1
 8009e14:	2301      	movs	r3, #1
 8009e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 81b0 	beq.w	800a180 <_dtoa_r+0xb48>
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e26:	6918      	ldr	r0, [r3, #16]
 8009e28:	f000 fbbc 	bl	800a5a4 <__hi0bits>
 8009e2c:	f1c0 0020 	rsb	r0, r0, #32
 8009e30:	9b08      	ldr	r3, [sp, #32]
 8009e32:	4418      	add	r0, r3
 8009e34:	f010 001f 	ands.w	r0, r0, #31
 8009e38:	d077      	beq.n	8009f2a <_dtoa_r+0x8f2>
 8009e3a:	f1c0 0320 	rsb	r3, r0, #32
 8009e3e:	2b04      	cmp	r3, #4
 8009e40:	dd6b      	ble.n	8009f1a <_dtoa_r+0x8e2>
 8009e42:	9b08      	ldr	r3, [sp, #32]
 8009e44:	f1c0 001c 	rsb	r0, r0, #28
 8009e48:	4403      	add	r3, r0
 8009e4a:	4480      	add	r8, r0
 8009e4c:	4406      	add	r6, r0
 8009e4e:	9308      	str	r3, [sp, #32]
 8009e50:	f1b8 0f00 	cmp.w	r8, #0
 8009e54:	dd05      	ble.n	8009e62 <_dtoa_r+0x82a>
 8009e56:	4649      	mov	r1, r9
 8009e58:	4642      	mov	r2, r8
 8009e5a:	4658      	mov	r0, fp
 8009e5c:	f000 fd08 	bl	800a870 <__lshift>
 8009e60:	4681      	mov	r9, r0
 8009e62:	9b08      	ldr	r3, [sp, #32]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dd05      	ble.n	8009e74 <_dtoa_r+0x83c>
 8009e68:	4621      	mov	r1, r4
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	4658      	mov	r0, fp
 8009e6e:	f000 fcff 	bl	800a870 <__lshift>
 8009e72:	4604      	mov	r4, r0
 8009e74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d059      	beq.n	8009f2e <_dtoa_r+0x8f6>
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	4648      	mov	r0, r9
 8009e7e:	f000 fd63 	bl	800a948 <__mcmp>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	da53      	bge.n	8009f2e <_dtoa_r+0x8f6>
 8009e86:	1e7b      	subs	r3, r7, #1
 8009e88:	9304      	str	r3, [sp, #16]
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	220a      	movs	r2, #10
 8009e90:	4658      	mov	r0, fp
 8009e92:	f000 faf7 	bl	800a484 <__multadd>
 8009e96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e98:	4681      	mov	r9, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 8172 	beq.w	800a184 <_dtoa_r+0xb4c>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	220a      	movs	r2, #10
 8009ea6:	4658      	mov	r0, fp
 8009ea8:	f000 faec 	bl	800a484 <__multadd>
 8009eac:	9b00      	ldr	r3, [sp, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	dc67      	bgt.n	8009f84 <_dtoa_r+0x94c>
 8009eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	dc41      	bgt.n	8009f3e <_dtoa_r+0x906>
 8009eba:	e063      	b.n	8009f84 <_dtoa_r+0x94c>
 8009ebc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ebe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ec2:	e746      	b.n	8009d52 <_dtoa_r+0x71a>
 8009ec4:	9b07      	ldr	r3, [sp, #28]
 8009ec6:	1e5c      	subs	r4, r3, #1
 8009ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eca:	42a3      	cmp	r3, r4
 8009ecc:	bfbf      	itttt	lt
 8009ece:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ed0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009ed2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009ed4:	1ae3      	sublt	r3, r4, r3
 8009ed6:	bfb4      	ite	lt
 8009ed8:	18d2      	addlt	r2, r2, r3
 8009eda:	1b1c      	subge	r4, r3, r4
 8009edc:	9b07      	ldr	r3, [sp, #28]
 8009ede:	bfbc      	itt	lt
 8009ee0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009ee2:	2400      	movlt	r4, #0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	bfb5      	itete	lt
 8009ee8:	eba8 0603 	sublt.w	r6, r8, r3
 8009eec:	9b07      	ldrge	r3, [sp, #28]
 8009eee:	2300      	movlt	r3, #0
 8009ef0:	4646      	movge	r6, r8
 8009ef2:	e730      	b.n	8009d56 <_dtoa_r+0x71e>
 8009ef4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ef6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ef8:	4646      	mov	r6, r8
 8009efa:	e735      	b.n	8009d68 <_dtoa_r+0x730>
 8009efc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009efe:	e75c      	b.n	8009dba <_dtoa_r+0x782>
 8009f00:	2300      	movs	r3, #0
 8009f02:	e788      	b.n	8009e16 <_dtoa_r+0x7de>
 8009f04:	3fe00000 	.word	0x3fe00000
 8009f08:	40240000 	.word	0x40240000
 8009f0c:	40140000 	.word	0x40140000
 8009f10:	9b02      	ldr	r3, [sp, #8]
 8009f12:	e780      	b.n	8009e16 <_dtoa_r+0x7de>
 8009f14:	2300      	movs	r3, #0
 8009f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f18:	e782      	b.n	8009e20 <_dtoa_r+0x7e8>
 8009f1a:	d099      	beq.n	8009e50 <_dtoa_r+0x818>
 8009f1c:	9a08      	ldr	r2, [sp, #32]
 8009f1e:	331c      	adds	r3, #28
 8009f20:	441a      	add	r2, r3
 8009f22:	4498      	add	r8, r3
 8009f24:	441e      	add	r6, r3
 8009f26:	9208      	str	r2, [sp, #32]
 8009f28:	e792      	b.n	8009e50 <_dtoa_r+0x818>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	e7f6      	b.n	8009f1c <_dtoa_r+0x8e4>
 8009f2e:	9b07      	ldr	r3, [sp, #28]
 8009f30:	9704      	str	r7, [sp, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dc20      	bgt.n	8009f78 <_dtoa_r+0x940>
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	dd1e      	ble.n	8009f7c <_dtoa_r+0x944>
 8009f3e:	9b00      	ldr	r3, [sp, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f47f aec0 	bne.w	8009cc6 <_dtoa_r+0x68e>
 8009f46:	4621      	mov	r1, r4
 8009f48:	2205      	movs	r2, #5
 8009f4a:	4658      	mov	r0, fp
 8009f4c:	f000 fa9a 	bl	800a484 <__multadd>
 8009f50:	4601      	mov	r1, r0
 8009f52:	4604      	mov	r4, r0
 8009f54:	4648      	mov	r0, r9
 8009f56:	f000 fcf7 	bl	800a948 <__mcmp>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	f77f aeb3 	ble.w	8009cc6 <_dtoa_r+0x68e>
 8009f60:	4656      	mov	r6, sl
 8009f62:	2331      	movs	r3, #49	@ 0x31
 8009f64:	f806 3b01 	strb.w	r3, [r6], #1
 8009f68:	9b04      	ldr	r3, [sp, #16]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	9304      	str	r3, [sp, #16]
 8009f6e:	e6ae      	b.n	8009cce <_dtoa_r+0x696>
 8009f70:	9c07      	ldr	r4, [sp, #28]
 8009f72:	9704      	str	r7, [sp, #16]
 8009f74:	4625      	mov	r5, r4
 8009f76:	e7f3      	b.n	8009f60 <_dtoa_r+0x928>
 8009f78:	9b07      	ldr	r3, [sp, #28]
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f000 8104 	beq.w	800a18c <_dtoa_r+0xb54>
 8009f84:	2e00      	cmp	r6, #0
 8009f86:	dd05      	ble.n	8009f94 <_dtoa_r+0x95c>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4632      	mov	r2, r6
 8009f8c:	4658      	mov	r0, fp
 8009f8e:	f000 fc6f 	bl	800a870 <__lshift>
 8009f92:	4605      	mov	r5, r0
 8009f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d05a      	beq.n	800a050 <_dtoa_r+0xa18>
 8009f9a:	6869      	ldr	r1, [r5, #4]
 8009f9c:	4658      	mov	r0, fp
 8009f9e:	f000 fa0f 	bl	800a3c0 <_Balloc>
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	b928      	cbnz	r0, 8009fb2 <_dtoa_r+0x97a>
 8009fa6:	4b84      	ldr	r3, [pc, #528]	@ (800a1b8 <_dtoa_r+0xb80>)
 8009fa8:	4602      	mov	r2, r0
 8009faa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fae:	f7ff bb5a 	b.w	8009666 <_dtoa_r+0x2e>
 8009fb2:	692a      	ldr	r2, [r5, #16]
 8009fb4:	3202      	adds	r2, #2
 8009fb6:	0092      	lsls	r2, r2, #2
 8009fb8:	f105 010c 	add.w	r1, r5, #12
 8009fbc:	300c      	adds	r0, #12
 8009fbe:	f001 ff75 	bl	800beac <memcpy>
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	4658      	mov	r0, fp
 8009fc8:	f000 fc52 	bl	800a870 <__lshift>
 8009fcc:	f10a 0301 	add.w	r3, sl, #1
 8009fd0:	9307      	str	r3, [sp, #28]
 8009fd2:	9b00      	ldr	r3, [sp, #0]
 8009fd4:	4453      	add	r3, sl
 8009fd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	462f      	mov	r7, r5
 8009fe0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	9b07      	ldr	r3, [sp, #28]
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	4648      	mov	r0, r9
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	f7ff fa99 	bl	8009524 <quorem>
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	9002      	str	r0, [sp, #8]
 8009ff6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ffa:	4648      	mov	r0, r9
 8009ffc:	f000 fca4 	bl	800a948 <__mcmp>
 800a000:	462a      	mov	r2, r5
 800a002:	9008      	str	r0, [sp, #32]
 800a004:	4621      	mov	r1, r4
 800a006:	4658      	mov	r0, fp
 800a008:	f000 fcba 	bl	800a980 <__mdiff>
 800a00c:	68c2      	ldr	r2, [r0, #12]
 800a00e:	4606      	mov	r6, r0
 800a010:	bb02      	cbnz	r2, 800a054 <_dtoa_r+0xa1c>
 800a012:	4601      	mov	r1, r0
 800a014:	4648      	mov	r0, r9
 800a016:	f000 fc97 	bl	800a948 <__mcmp>
 800a01a:	4602      	mov	r2, r0
 800a01c:	4631      	mov	r1, r6
 800a01e:	4658      	mov	r0, fp
 800a020:	920e      	str	r2, [sp, #56]	@ 0x38
 800a022:	f000 fa0d 	bl	800a440 <_Bfree>
 800a026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a028:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a02a:	9e07      	ldr	r6, [sp, #28]
 800a02c:	ea43 0102 	orr.w	r1, r3, r2
 800a030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a032:	4319      	orrs	r1, r3
 800a034:	d110      	bne.n	800a058 <_dtoa_r+0xa20>
 800a036:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a03a:	d029      	beq.n	800a090 <_dtoa_r+0xa58>
 800a03c:	9b08      	ldr	r3, [sp, #32]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	dd02      	ble.n	800a048 <_dtoa_r+0xa10>
 800a042:	9b02      	ldr	r3, [sp, #8]
 800a044:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a048:	9b00      	ldr	r3, [sp, #0]
 800a04a:	f883 8000 	strb.w	r8, [r3]
 800a04e:	e63f      	b.n	8009cd0 <_dtoa_r+0x698>
 800a050:	4628      	mov	r0, r5
 800a052:	e7bb      	b.n	8009fcc <_dtoa_r+0x994>
 800a054:	2201      	movs	r2, #1
 800a056:	e7e1      	b.n	800a01c <_dtoa_r+0x9e4>
 800a058:	9b08      	ldr	r3, [sp, #32]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	db04      	blt.n	800a068 <_dtoa_r+0xa30>
 800a05e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a060:	430b      	orrs	r3, r1
 800a062:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a064:	430b      	orrs	r3, r1
 800a066:	d120      	bne.n	800a0aa <_dtoa_r+0xa72>
 800a068:	2a00      	cmp	r2, #0
 800a06a:	dded      	ble.n	800a048 <_dtoa_r+0xa10>
 800a06c:	4649      	mov	r1, r9
 800a06e:	2201      	movs	r2, #1
 800a070:	4658      	mov	r0, fp
 800a072:	f000 fbfd 	bl	800a870 <__lshift>
 800a076:	4621      	mov	r1, r4
 800a078:	4681      	mov	r9, r0
 800a07a:	f000 fc65 	bl	800a948 <__mcmp>
 800a07e:	2800      	cmp	r0, #0
 800a080:	dc03      	bgt.n	800a08a <_dtoa_r+0xa52>
 800a082:	d1e1      	bne.n	800a048 <_dtoa_r+0xa10>
 800a084:	f018 0f01 	tst.w	r8, #1
 800a088:	d0de      	beq.n	800a048 <_dtoa_r+0xa10>
 800a08a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a08e:	d1d8      	bne.n	800a042 <_dtoa_r+0xa0a>
 800a090:	9a00      	ldr	r2, [sp, #0]
 800a092:	2339      	movs	r3, #57	@ 0x39
 800a094:	7013      	strb	r3, [r2, #0]
 800a096:	4633      	mov	r3, r6
 800a098:	461e      	mov	r6, r3
 800a09a:	3b01      	subs	r3, #1
 800a09c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0a0:	2a39      	cmp	r2, #57	@ 0x39
 800a0a2:	d052      	beq.n	800a14a <_dtoa_r+0xb12>
 800a0a4:	3201      	adds	r2, #1
 800a0a6:	701a      	strb	r2, [r3, #0]
 800a0a8:	e612      	b.n	8009cd0 <_dtoa_r+0x698>
 800a0aa:	2a00      	cmp	r2, #0
 800a0ac:	dd07      	ble.n	800a0be <_dtoa_r+0xa86>
 800a0ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0b2:	d0ed      	beq.n	800a090 <_dtoa_r+0xa58>
 800a0b4:	9a00      	ldr	r2, [sp, #0]
 800a0b6:	f108 0301 	add.w	r3, r8, #1
 800a0ba:	7013      	strb	r3, [r2, #0]
 800a0bc:	e608      	b.n	8009cd0 <_dtoa_r+0x698>
 800a0be:	9b07      	ldr	r3, [sp, #28]
 800a0c0:	9a07      	ldr	r2, [sp, #28]
 800a0c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d028      	beq.n	800a11e <_dtoa_r+0xae6>
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	220a      	movs	r2, #10
 800a0d2:	4658      	mov	r0, fp
 800a0d4:	f000 f9d6 	bl	800a484 <__multadd>
 800a0d8:	42af      	cmp	r7, r5
 800a0da:	4681      	mov	r9, r0
 800a0dc:	f04f 0300 	mov.w	r3, #0
 800a0e0:	f04f 020a 	mov.w	r2, #10
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	4658      	mov	r0, fp
 800a0e8:	d107      	bne.n	800a0fa <_dtoa_r+0xac2>
 800a0ea:	f000 f9cb 	bl	800a484 <__multadd>
 800a0ee:	4607      	mov	r7, r0
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	9b07      	ldr	r3, [sp, #28]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	9307      	str	r3, [sp, #28]
 800a0f8:	e774      	b.n	8009fe4 <_dtoa_r+0x9ac>
 800a0fa:	f000 f9c3 	bl	800a484 <__multadd>
 800a0fe:	4629      	mov	r1, r5
 800a100:	4607      	mov	r7, r0
 800a102:	2300      	movs	r3, #0
 800a104:	220a      	movs	r2, #10
 800a106:	4658      	mov	r0, fp
 800a108:	f000 f9bc 	bl	800a484 <__multadd>
 800a10c:	4605      	mov	r5, r0
 800a10e:	e7f0      	b.n	800a0f2 <_dtoa_r+0xaba>
 800a110:	9b00      	ldr	r3, [sp, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	bfcc      	ite	gt
 800a116:	461e      	movgt	r6, r3
 800a118:	2601      	movle	r6, #1
 800a11a:	4456      	add	r6, sl
 800a11c:	2700      	movs	r7, #0
 800a11e:	4649      	mov	r1, r9
 800a120:	2201      	movs	r2, #1
 800a122:	4658      	mov	r0, fp
 800a124:	f000 fba4 	bl	800a870 <__lshift>
 800a128:	4621      	mov	r1, r4
 800a12a:	4681      	mov	r9, r0
 800a12c:	f000 fc0c 	bl	800a948 <__mcmp>
 800a130:	2800      	cmp	r0, #0
 800a132:	dcb0      	bgt.n	800a096 <_dtoa_r+0xa5e>
 800a134:	d102      	bne.n	800a13c <_dtoa_r+0xb04>
 800a136:	f018 0f01 	tst.w	r8, #1
 800a13a:	d1ac      	bne.n	800a096 <_dtoa_r+0xa5e>
 800a13c:	4633      	mov	r3, r6
 800a13e:	461e      	mov	r6, r3
 800a140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a144:	2a30      	cmp	r2, #48	@ 0x30
 800a146:	d0fa      	beq.n	800a13e <_dtoa_r+0xb06>
 800a148:	e5c2      	b.n	8009cd0 <_dtoa_r+0x698>
 800a14a:	459a      	cmp	sl, r3
 800a14c:	d1a4      	bne.n	800a098 <_dtoa_r+0xa60>
 800a14e:	9b04      	ldr	r3, [sp, #16]
 800a150:	3301      	adds	r3, #1
 800a152:	9304      	str	r3, [sp, #16]
 800a154:	2331      	movs	r3, #49	@ 0x31
 800a156:	f88a 3000 	strb.w	r3, [sl]
 800a15a:	e5b9      	b.n	8009cd0 <_dtoa_r+0x698>
 800a15c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a15e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a1bc <_dtoa_r+0xb84>
 800a162:	b11b      	cbz	r3, 800a16c <_dtoa_r+0xb34>
 800a164:	f10a 0308 	add.w	r3, sl, #8
 800a168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	4650      	mov	r0, sl
 800a16e:	b019      	add	sp, #100	@ 0x64
 800a170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a176:	2b01      	cmp	r3, #1
 800a178:	f77f ae37 	ble.w	8009dea <_dtoa_r+0x7b2>
 800a17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a180:	2001      	movs	r0, #1
 800a182:	e655      	b.n	8009e30 <_dtoa_r+0x7f8>
 800a184:	9b00      	ldr	r3, [sp, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	f77f aed6 	ble.w	8009f38 <_dtoa_r+0x900>
 800a18c:	4656      	mov	r6, sl
 800a18e:	4621      	mov	r1, r4
 800a190:	4648      	mov	r0, r9
 800a192:	f7ff f9c7 	bl	8009524 <quorem>
 800a196:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a19a:	f806 8b01 	strb.w	r8, [r6], #1
 800a19e:	9b00      	ldr	r3, [sp, #0]
 800a1a0:	eba6 020a 	sub.w	r2, r6, sl
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	ddb3      	ble.n	800a110 <_dtoa_r+0xad8>
 800a1a8:	4649      	mov	r1, r9
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	220a      	movs	r2, #10
 800a1ae:	4658      	mov	r0, fp
 800a1b0:	f000 f968 	bl	800a484 <__multadd>
 800a1b4:	4681      	mov	r9, r0
 800a1b6:	e7ea      	b.n	800a18e <_dtoa_r+0xb56>
 800a1b8:	0800ccf9 	.word	0x0800ccf9
 800a1bc:	0800cc7d 	.word	0x0800cc7d

0800a1c0 <_free_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	2900      	cmp	r1, #0
 800a1c6:	d041      	beq.n	800a24c <_free_r+0x8c>
 800a1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1cc:	1f0c      	subs	r4, r1, #4
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bfb8      	it	lt
 800a1d2:	18e4      	addlt	r4, r4, r3
 800a1d4:	f000 f8e8 	bl	800a3a8 <__malloc_lock>
 800a1d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a250 <_free_r+0x90>)
 800a1da:	6813      	ldr	r3, [r2, #0]
 800a1dc:	b933      	cbnz	r3, 800a1ec <_free_r+0x2c>
 800a1de:	6063      	str	r3, [r4, #4]
 800a1e0:	6014      	str	r4, [r2, #0]
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e8:	f000 b8e4 	b.w	800a3b4 <__malloc_unlock>
 800a1ec:	42a3      	cmp	r3, r4
 800a1ee:	d908      	bls.n	800a202 <_free_r+0x42>
 800a1f0:	6820      	ldr	r0, [r4, #0]
 800a1f2:	1821      	adds	r1, r4, r0
 800a1f4:	428b      	cmp	r3, r1
 800a1f6:	bf01      	itttt	eq
 800a1f8:	6819      	ldreq	r1, [r3, #0]
 800a1fa:	685b      	ldreq	r3, [r3, #4]
 800a1fc:	1809      	addeq	r1, r1, r0
 800a1fe:	6021      	streq	r1, [r4, #0]
 800a200:	e7ed      	b.n	800a1de <_free_r+0x1e>
 800a202:	461a      	mov	r2, r3
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	b10b      	cbz	r3, 800a20c <_free_r+0x4c>
 800a208:	42a3      	cmp	r3, r4
 800a20a:	d9fa      	bls.n	800a202 <_free_r+0x42>
 800a20c:	6811      	ldr	r1, [r2, #0]
 800a20e:	1850      	adds	r0, r2, r1
 800a210:	42a0      	cmp	r0, r4
 800a212:	d10b      	bne.n	800a22c <_free_r+0x6c>
 800a214:	6820      	ldr	r0, [r4, #0]
 800a216:	4401      	add	r1, r0
 800a218:	1850      	adds	r0, r2, r1
 800a21a:	4283      	cmp	r3, r0
 800a21c:	6011      	str	r1, [r2, #0]
 800a21e:	d1e0      	bne.n	800a1e2 <_free_r+0x22>
 800a220:	6818      	ldr	r0, [r3, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	6053      	str	r3, [r2, #4]
 800a226:	4408      	add	r0, r1
 800a228:	6010      	str	r0, [r2, #0]
 800a22a:	e7da      	b.n	800a1e2 <_free_r+0x22>
 800a22c:	d902      	bls.n	800a234 <_free_r+0x74>
 800a22e:	230c      	movs	r3, #12
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	e7d6      	b.n	800a1e2 <_free_r+0x22>
 800a234:	6820      	ldr	r0, [r4, #0]
 800a236:	1821      	adds	r1, r4, r0
 800a238:	428b      	cmp	r3, r1
 800a23a:	bf04      	itt	eq
 800a23c:	6819      	ldreq	r1, [r3, #0]
 800a23e:	685b      	ldreq	r3, [r3, #4]
 800a240:	6063      	str	r3, [r4, #4]
 800a242:	bf04      	itt	eq
 800a244:	1809      	addeq	r1, r1, r0
 800a246:	6021      	streq	r1, [r4, #0]
 800a248:	6054      	str	r4, [r2, #4]
 800a24a:	e7ca      	b.n	800a1e2 <_free_r+0x22>
 800a24c:	bd38      	pop	{r3, r4, r5, pc}
 800a24e:	bf00      	nop
 800a250:	20000560 	.word	0x20000560

0800a254 <malloc>:
 800a254:	4b02      	ldr	r3, [pc, #8]	@ (800a260 <malloc+0xc>)
 800a256:	4601      	mov	r1, r0
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	f000 b825 	b.w	800a2a8 <_malloc_r>
 800a25e:	bf00      	nop
 800a260:	20000018 	.word	0x20000018

0800a264 <sbrk_aligned>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	4e0f      	ldr	r6, [pc, #60]	@ (800a2a4 <sbrk_aligned+0x40>)
 800a268:	460c      	mov	r4, r1
 800a26a:	6831      	ldr	r1, [r6, #0]
 800a26c:	4605      	mov	r5, r0
 800a26e:	b911      	cbnz	r1, 800a276 <sbrk_aligned+0x12>
 800a270:	f001 fe0c 	bl	800be8c <_sbrk_r>
 800a274:	6030      	str	r0, [r6, #0]
 800a276:	4621      	mov	r1, r4
 800a278:	4628      	mov	r0, r5
 800a27a:	f001 fe07 	bl	800be8c <_sbrk_r>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	d103      	bne.n	800a28a <sbrk_aligned+0x26>
 800a282:	f04f 34ff 	mov.w	r4, #4294967295
 800a286:	4620      	mov	r0, r4
 800a288:	bd70      	pop	{r4, r5, r6, pc}
 800a28a:	1cc4      	adds	r4, r0, #3
 800a28c:	f024 0403 	bic.w	r4, r4, #3
 800a290:	42a0      	cmp	r0, r4
 800a292:	d0f8      	beq.n	800a286 <sbrk_aligned+0x22>
 800a294:	1a21      	subs	r1, r4, r0
 800a296:	4628      	mov	r0, r5
 800a298:	f001 fdf8 	bl	800be8c <_sbrk_r>
 800a29c:	3001      	adds	r0, #1
 800a29e:	d1f2      	bne.n	800a286 <sbrk_aligned+0x22>
 800a2a0:	e7ef      	b.n	800a282 <sbrk_aligned+0x1e>
 800a2a2:	bf00      	nop
 800a2a4:	2000055c 	.word	0x2000055c

0800a2a8 <_malloc_r>:
 800a2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2ac:	1ccd      	adds	r5, r1, #3
 800a2ae:	f025 0503 	bic.w	r5, r5, #3
 800a2b2:	3508      	adds	r5, #8
 800a2b4:	2d0c      	cmp	r5, #12
 800a2b6:	bf38      	it	cc
 800a2b8:	250c      	movcc	r5, #12
 800a2ba:	2d00      	cmp	r5, #0
 800a2bc:	4606      	mov	r6, r0
 800a2be:	db01      	blt.n	800a2c4 <_malloc_r+0x1c>
 800a2c0:	42a9      	cmp	r1, r5
 800a2c2:	d904      	bls.n	800a2ce <_malloc_r+0x26>
 800a2c4:	230c      	movs	r3, #12
 800a2c6:	6033      	str	r3, [r6, #0]
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3a4 <_malloc_r+0xfc>
 800a2d2:	f000 f869 	bl	800a3a8 <__malloc_lock>
 800a2d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a2da:	461c      	mov	r4, r3
 800a2dc:	bb44      	cbnz	r4, 800a330 <_malloc_r+0x88>
 800a2de:	4629      	mov	r1, r5
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f7ff ffbf 	bl	800a264 <sbrk_aligned>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	d158      	bne.n	800a39e <_malloc_r+0xf6>
 800a2ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a2f0:	4627      	mov	r7, r4
 800a2f2:	2f00      	cmp	r7, #0
 800a2f4:	d143      	bne.n	800a37e <_malloc_r+0xd6>
 800a2f6:	2c00      	cmp	r4, #0
 800a2f8:	d04b      	beq.n	800a392 <_malloc_r+0xea>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	4630      	mov	r0, r6
 800a300:	eb04 0903 	add.w	r9, r4, r3
 800a304:	f001 fdc2 	bl	800be8c <_sbrk_r>
 800a308:	4581      	cmp	r9, r0
 800a30a:	d142      	bne.n	800a392 <_malloc_r+0xea>
 800a30c:	6821      	ldr	r1, [r4, #0]
 800a30e:	1a6d      	subs	r5, r5, r1
 800a310:	4629      	mov	r1, r5
 800a312:	4630      	mov	r0, r6
 800a314:	f7ff ffa6 	bl	800a264 <sbrk_aligned>
 800a318:	3001      	adds	r0, #1
 800a31a:	d03a      	beq.n	800a392 <_malloc_r+0xea>
 800a31c:	6823      	ldr	r3, [r4, #0]
 800a31e:	442b      	add	r3, r5
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	f8d8 3000 	ldr.w	r3, [r8]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	bb62      	cbnz	r2, 800a384 <_malloc_r+0xdc>
 800a32a:	f8c8 7000 	str.w	r7, [r8]
 800a32e:	e00f      	b.n	800a350 <_malloc_r+0xa8>
 800a330:	6822      	ldr	r2, [r4, #0]
 800a332:	1b52      	subs	r2, r2, r5
 800a334:	d420      	bmi.n	800a378 <_malloc_r+0xd0>
 800a336:	2a0b      	cmp	r2, #11
 800a338:	d917      	bls.n	800a36a <_malloc_r+0xc2>
 800a33a:	1961      	adds	r1, r4, r5
 800a33c:	42a3      	cmp	r3, r4
 800a33e:	6025      	str	r5, [r4, #0]
 800a340:	bf18      	it	ne
 800a342:	6059      	strne	r1, [r3, #4]
 800a344:	6863      	ldr	r3, [r4, #4]
 800a346:	bf08      	it	eq
 800a348:	f8c8 1000 	streq.w	r1, [r8]
 800a34c:	5162      	str	r2, [r4, r5]
 800a34e:	604b      	str	r3, [r1, #4]
 800a350:	4630      	mov	r0, r6
 800a352:	f000 f82f 	bl	800a3b4 <__malloc_unlock>
 800a356:	f104 000b 	add.w	r0, r4, #11
 800a35a:	1d23      	adds	r3, r4, #4
 800a35c:	f020 0007 	bic.w	r0, r0, #7
 800a360:	1ac2      	subs	r2, r0, r3
 800a362:	bf1c      	itt	ne
 800a364:	1a1b      	subne	r3, r3, r0
 800a366:	50a3      	strne	r3, [r4, r2]
 800a368:	e7af      	b.n	800a2ca <_malloc_r+0x22>
 800a36a:	6862      	ldr	r2, [r4, #4]
 800a36c:	42a3      	cmp	r3, r4
 800a36e:	bf0c      	ite	eq
 800a370:	f8c8 2000 	streq.w	r2, [r8]
 800a374:	605a      	strne	r2, [r3, #4]
 800a376:	e7eb      	b.n	800a350 <_malloc_r+0xa8>
 800a378:	4623      	mov	r3, r4
 800a37a:	6864      	ldr	r4, [r4, #4]
 800a37c:	e7ae      	b.n	800a2dc <_malloc_r+0x34>
 800a37e:	463c      	mov	r4, r7
 800a380:	687f      	ldr	r7, [r7, #4]
 800a382:	e7b6      	b.n	800a2f2 <_malloc_r+0x4a>
 800a384:	461a      	mov	r2, r3
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	42a3      	cmp	r3, r4
 800a38a:	d1fb      	bne.n	800a384 <_malloc_r+0xdc>
 800a38c:	2300      	movs	r3, #0
 800a38e:	6053      	str	r3, [r2, #4]
 800a390:	e7de      	b.n	800a350 <_malloc_r+0xa8>
 800a392:	230c      	movs	r3, #12
 800a394:	6033      	str	r3, [r6, #0]
 800a396:	4630      	mov	r0, r6
 800a398:	f000 f80c 	bl	800a3b4 <__malloc_unlock>
 800a39c:	e794      	b.n	800a2c8 <_malloc_r+0x20>
 800a39e:	6005      	str	r5, [r0, #0]
 800a3a0:	e7d6      	b.n	800a350 <_malloc_r+0xa8>
 800a3a2:	bf00      	nop
 800a3a4:	20000560 	.word	0x20000560

0800a3a8 <__malloc_lock>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	@ (800a3b0 <__malloc_lock+0x8>)
 800a3aa:	f7ff b8b2 	b.w	8009512 <__retarget_lock_acquire_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	20000558 	.word	0x20000558

0800a3b4 <__malloc_unlock>:
 800a3b4:	4801      	ldr	r0, [pc, #4]	@ (800a3bc <__malloc_unlock+0x8>)
 800a3b6:	f7ff b8ad 	b.w	8009514 <__retarget_lock_release_recursive>
 800a3ba:	bf00      	nop
 800a3bc:	20000558 	.word	0x20000558

0800a3c0 <_Balloc>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	69c6      	ldr	r6, [r0, #28]
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	b976      	cbnz	r6, 800a3e8 <_Balloc+0x28>
 800a3ca:	2010      	movs	r0, #16
 800a3cc:	f7ff ff42 	bl	800a254 <malloc>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	61e0      	str	r0, [r4, #28]
 800a3d4:	b920      	cbnz	r0, 800a3e0 <_Balloc+0x20>
 800a3d6:	4b18      	ldr	r3, [pc, #96]	@ (800a438 <_Balloc+0x78>)
 800a3d8:	4818      	ldr	r0, [pc, #96]	@ (800a43c <_Balloc+0x7c>)
 800a3da:	216b      	movs	r1, #107	@ 0x6b
 800a3dc:	f001 fd7c 	bl	800bed8 <__assert_func>
 800a3e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3e4:	6006      	str	r6, [r0, #0]
 800a3e6:	60c6      	str	r6, [r0, #12]
 800a3e8:	69e6      	ldr	r6, [r4, #28]
 800a3ea:	68f3      	ldr	r3, [r6, #12]
 800a3ec:	b183      	cbz	r3, 800a410 <_Balloc+0x50>
 800a3ee:	69e3      	ldr	r3, [r4, #28]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3f6:	b9b8      	cbnz	r0, 800a428 <_Balloc+0x68>
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	fa01 f605 	lsl.w	r6, r1, r5
 800a3fe:	1d72      	adds	r2, r6, #5
 800a400:	0092      	lsls	r2, r2, #2
 800a402:	4620      	mov	r0, r4
 800a404:	f001 fd86 	bl	800bf14 <_calloc_r>
 800a408:	b160      	cbz	r0, 800a424 <_Balloc+0x64>
 800a40a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a40e:	e00e      	b.n	800a42e <_Balloc+0x6e>
 800a410:	2221      	movs	r2, #33	@ 0x21
 800a412:	2104      	movs	r1, #4
 800a414:	4620      	mov	r0, r4
 800a416:	f001 fd7d 	bl	800bf14 <_calloc_r>
 800a41a:	69e3      	ldr	r3, [r4, #28]
 800a41c:	60f0      	str	r0, [r6, #12]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1e4      	bne.n	800a3ee <_Balloc+0x2e>
 800a424:	2000      	movs	r0, #0
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	6802      	ldr	r2, [r0, #0]
 800a42a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a42e:	2300      	movs	r3, #0
 800a430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a434:	e7f7      	b.n	800a426 <_Balloc+0x66>
 800a436:	bf00      	nop
 800a438:	0800cc8a 	.word	0x0800cc8a
 800a43c:	0800cd0a 	.word	0x0800cd0a

0800a440 <_Bfree>:
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	69c6      	ldr	r6, [r0, #28]
 800a444:	4605      	mov	r5, r0
 800a446:	460c      	mov	r4, r1
 800a448:	b976      	cbnz	r6, 800a468 <_Bfree+0x28>
 800a44a:	2010      	movs	r0, #16
 800a44c:	f7ff ff02 	bl	800a254 <malloc>
 800a450:	4602      	mov	r2, r0
 800a452:	61e8      	str	r0, [r5, #28]
 800a454:	b920      	cbnz	r0, 800a460 <_Bfree+0x20>
 800a456:	4b09      	ldr	r3, [pc, #36]	@ (800a47c <_Bfree+0x3c>)
 800a458:	4809      	ldr	r0, [pc, #36]	@ (800a480 <_Bfree+0x40>)
 800a45a:	218f      	movs	r1, #143	@ 0x8f
 800a45c:	f001 fd3c 	bl	800bed8 <__assert_func>
 800a460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a464:	6006      	str	r6, [r0, #0]
 800a466:	60c6      	str	r6, [r0, #12]
 800a468:	b13c      	cbz	r4, 800a47a <_Bfree+0x3a>
 800a46a:	69eb      	ldr	r3, [r5, #28]
 800a46c:	6862      	ldr	r2, [r4, #4]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a474:	6021      	str	r1, [r4, #0]
 800a476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	0800cc8a 	.word	0x0800cc8a
 800a480:	0800cd0a 	.word	0x0800cd0a

0800a484 <__multadd>:
 800a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a488:	690d      	ldr	r5, [r1, #16]
 800a48a:	4607      	mov	r7, r0
 800a48c:	460c      	mov	r4, r1
 800a48e:	461e      	mov	r6, r3
 800a490:	f101 0c14 	add.w	ip, r1, #20
 800a494:	2000      	movs	r0, #0
 800a496:	f8dc 3000 	ldr.w	r3, [ip]
 800a49a:	b299      	uxth	r1, r3
 800a49c:	fb02 6101 	mla	r1, r2, r1, r6
 800a4a0:	0c1e      	lsrs	r6, r3, #16
 800a4a2:	0c0b      	lsrs	r3, r1, #16
 800a4a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a4a8:	b289      	uxth	r1, r1
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4b0:	4285      	cmp	r5, r0
 800a4b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a4b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4ba:	dcec      	bgt.n	800a496 <__multadd+0x12>
 800a4bc:	b30e      	cbz	r6, 800a502 <__multadd+0x7e>
 800a4be:	68a3      	ldr	r3, [r4, #8]
 800a4c0:	42ab      	cmp	r3, r5
 800a4c2:	dc19      	bgt.n	800a4f8 <__multadd+0x74>
 800a4c4:	6861      	ldr	r1, [r4, #4]
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	3101      	adds	r1, #1
 800a4ca:	f7ff ff79 	bl	800a3c0 <_Balloc>
 800a4ce:	4680      	mov	r8, r0
 800a4d0:	b928      	cbnz	r0, 800a4de <__multadd+0x5a>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a508 <__multadd+0x84>)
 800a4d6:	480d      	ldr	r0, [pc, #52]	@ (800a50c <__multadd+0x88>)
 800a4d8:	21ba      	movs	r1, #186	@ 0xba
 800a4da:	f001 fcfd 	bl	800bed8 <__assert_func>
 800a4de:	6922      	ldr	r2, [r4, #16]
 800a4e0:	3202      	adds	r2, #2
 800a4e2:	f104 010c 	add.w	r1, r4, #12
 800a4e6:	0092      	lsls	r2, r2, #2
 800a4e8:	300c      	adds	r0, #12
 800a4ea:	f001 fcdf 	bl	800beac <memcpy>
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	f7ff ffa5 	bl	800a440 <_Bfree>
 800a4f6:	4644      	mov	r4, r8
 800a4f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4fc:	3501      	adds	r5, #1
 800a4fe:	615e      	str	r6, [r3, #20]
 800a500:	6125      	str	r5, [r4, #16]
 800a502:	4620      	mov	r0, r4
 800a504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a508:	0800ccf9 	.word	0x0800ccf9
 800a50c:	0800cd0a 	.word	0x0800cd0a

0800a510 <__s2b>:
 800a510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	4615      	mov	r5, r2
 800a518:	461f      	mov	r7, r3
 800a51a:	2209      	movs	r2, #9
 800a51c:	3308      	adds	r3, #8
 800a51e:	4606      	mov	r6, r0
 800a520:	fb93 f3f2 	sdiv	r3, r3, r2
 800a524:	2100      	movs	r1, #0
 800a526:	2201      	movs	r2, #1
 800a528:	429a      	cmp	r2, r3
 800a52a:	db09      	blt.n	800a540 <__s2b+0x30>
 800a52c:	4630      	mov	r0, r6
 800a52e:	f7ff ff47 	bl	800a3c0 <_Balloc>
 800a532:	b940      	cbnz	r0, 800a546 <__s2b+0x36>
 800a534:	4602      	mov	r2, r0
 800a536:	4b19      	ldr	r3, [pc, #100]	@ (800a59c <__s2b+0x8c>)
 800a538:	4819      	ldr	r0, [pc, #100]	@ (800a5a0 <__s2b+0x90>)
 800a53a:	21d3      	movs	r1, #211	@ 0xd3
 800a53c:	f001 fccc 	bl	800bed8 <__assert_func>
 800a540:	0052      	lsls	r2, r2, #1
 800a542:	3101      	adds	r1, #1
 800a544:	e7f0      	b.n	800a528 <__s2b+0x18>
 800a546:	9b08      	ldr	r3, [sp, #32]
 800a548:	6143      	str	r3, [r0, #20]
 800a54a:	2d09      	cmp	r5, #9
 800a54c:	f04f 0301 	mov.w	r3, #1
 800a550:	6103      	str	r3, [r0, #16]
 800a552:	dd16      	ble.n	800a582 <__s2b+0x72>
 800a554:	f104 0909 	add.w	r9, r4, #9
 800a558:	46c8      	mov	r8, r9
 800a55a:	442c      	add	r4, r5
 800a55c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a560:	4601      	mov	r1, r0
 800a562:	3b30      	subs	r3, #48	@ 0x30
 800a564:	220a      	movs	r2, #10
 800a566:	4630      	mov	r0, r6
 800a568:	f7ff ff8c 	bl	800a484 <__multadd>
 800a56c:	45a0      	cmp	r8, r4
 800a56e:	d1f5      	bne.n	800a55c <__s2b+0x4c>
 800a570:	f1a5 0408 	sub.w	r4, r5, #8
 800a574:	444c      	add	r4, r9
 800a576:	1b2d      	subs	r5, r5, r4
 800a578:	1963      	adds	r3, r4, r5
 800a57a:	42bb      	cmp	r3, r7
 800a57c:	db04      	blt.n	800a588 <__s2b+0x78>
 800a57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a582:	340a      	adds	r4, #10
 800a584:	2509      	movs	r5, #9
 800a586:	e7f6      	b.n	800a576 <__s2b+0x66>
 800a588:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a58c:	4601      	mov	r1, r0
 800a58e:	3b30      	subs	r3, #48	@ 0x30
 800a590:	220a      	movs	r2, #10
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ff76 	bl	800a484 <__multadd>
 800a598:	e7ee      	b.n	800a578 <__s2b+0x68>
 800a59a:	bf00      	nop
 800a59c:	0800ccf9 	.word	0x0800ccf9
 800a5a0:	0800cd0a 	.word	0x0800cd0a

0800a5a4 <__hi0bits>:
 800a5a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	bf36      	itet	cc
 800a5ac:	0403      	lslcc	r3, r0, #16
 800a5ae:	2000      	movcs	r0, #0
 800a5b0:	2010      	movcc	r0, #16
 800a5b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5b6:	bf3c      	itt	cc
 800a5b8:	021b      	lslcc	r3, r3, #8
 800a5ba:	3008      	addcc	r0, #8
 800a5bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5c0:	bf3c      	itt	cc
 800a5c2:	011b      	lslcc	r3, r3, #4
 800a5c4:	3004      	addcc	r0, #4
 800a5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ca:	bf3c      	itt	cc
 800a5cc:	009b      	lslcc	r3, r3, #2
 800a5ce:	3002      	addcc	r0, #2
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	db05      	blt.n	800a5e0 <__hi0bits+0x3c>
 800a5d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a5d8:	f100 0001 	add.w	r0, r0, #1
 800a5dc:	bf08      	it	eq
 800a5de:	2020      	moveq	r0, #32
 800a5e0:	4770      	bx	lr

0800a5e2 <__lo0bits>:
 800a5e2:	6803      	ldr	r3, [r0, #0]
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	f013 0007 	ands.w	r0, r3, #7
 800a5ea:	d00b      	beq.n	800a604 <__lo0bits+0x22>
 800a5ec:	07d9      	lsls	r1, r3, #31
 800a5ee:	d421      	bmi.n	800a634 <__lo0bits+0x52>
 800a5f0:	0798      	lsls	r0, r3, #30
 800a5f2:	bf49      	itett	mi
 800a5f4:	085b      	lsrmi	r3, r3, #1
 800a5f6:	089b      	lsrpl	r3, r3, #2
 800a5f8:	2001      	movmi	r0, #1
 800a5fa:	6013      	strmi	r3, [r2, #0]
 800a5fc:	bf5c      	itt	pl
 800a5fe:	6013      	strpl	r3, [r2, #0]
 800a600:	2002      	movpl	r0, #2
 800a602:	4770      	bx	lr
 800a604:	b299      	uxth	r1, r3
 800a606:	b909      	cbnz	r1, 800a60c <__lo0bits+0x2a>
 800a608:	0c1b      	lsrs	r3, r3, #16
 800a60a:	2010      	movs	r0, #16
 800a60c:	b2d9      	uxtb	r1, r3
 800a60e:	b909      	cbnz	r1, 800a614 <__lo0bits+0x32>
 800a610:	3008      	adds	r0, #8
 800a612:	0a1b      	lsrs	r3, r3, #8
 800a614:	0719      	lsls	r1, r3, #28
 800a616:	bf04      	itt	eq
 800a618:	091b      	lsreq	r3, r3, #4
 800a61a:	3004      	addeq	r0, #4
 800a61c:	0799      	lsls	r1, r3, #30
 800a61e:	bf04      	itt	eq
 800a620:	089b      	lsreq	r3, r3, #2
 800a622:	3002      	addeq	r0, #2
 800a624:	07d9      	lsls	r1, r3, #31
 800a626:	d403      	bmi.n	800a630 <__lo0bits+0x4e>
 800a628:	085b      	lsrs	r3, r3, #1
 800a62a:	f100 0001 	add.w	r0, r0, #1
 800a62e:	d003      	beq.n	800a638 <__lo0bits+0x56>
 800a630:	6013      	str	r3, [r2, #0]
 800a632:	4770      	bx	lr
 800a634:	2000      	movs	r0, #0
 800a636:	4770      	bx	lr
 800a638:	2020      	movs	r0, #32
 800a63a:	4770      	bx	lr

0800a63c <__i2b>:
 800a63c:	b510      	push	{r4, lr}
 800a63e:	460c      	mov	r4, r1
 800a640:	2101      	movs	r1, #1
 800a642:	f7ff febd 	bl	800a3c0 <_Balloc>
 800a646:	4602      	mov	r2, r0
 800a648:	b928      	cbnz	r0, 800a656 <__i2b+0x1a>
 800a64a:	4b05      	ldr	r3, [pc, #20]	@ (800a660 <__i2b+0x24>)
 800a64c:	4805      	ldr	r0, [pc, #20]	@ (800a664 <__i2b+0x28>)
 800a64e:	f240 1145 	movw	r1, #325	@ 0x145
 800a652:	f001 fc41 	bl	800bed8 <__assert_func>
 800a656:	2301      	movs	r3, #1
 800a658:	6144      	str	r4, [r0, #20]
 800a65a:	6103      	str	r3, [r0, #16]
 800a65c:	bd10      	pop	{r4, pc}
 800a65e:	bf00      	nop
 800a660:	0800ccf9 	.word	0x0800ccf9
 800a664:	0800cd0a 	.word	0x0800cd0a

0800a668 <__multiply>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	4614      	mov	r4, r2
 800a66e:	690a      	ldr	r2, [r1, #16]
 800a670:	6923      	ldr	r3, [r4, #16]
 800a672:	429a      	cmp	r2, r3
 800a674:	bfa8      	it	ge
 800a676:	4623      	movge	r3, r4
 800a678:	460f      	mov	r7, r1
 800a67a:	bfa4      	itt	ge
 800a67c:	460c      	movge	r4, r1
 800a67e:	461f      	movge	r7, r3
 800a680:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a684:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a688:	68a3      	ldr	r3, [r4, #8]
 800a68a:	6861      	ldr	r1, [r4, #4]
 800a68c:	eb0a 0609 	add.w	r6, sl, r9
 800a690:	42b3      	cmp	r3, r6
 800a692:	b085      	sub	sp, #20
 800a694:	bfb8      	it	lt
 800a696:	3101      	addlt	r1, #1
 800a698:	f7ff fe92 	bl	800a3c0 <_Balloc>
 800a69c:	b930      	cbnz	r0, 800a6ac <__multiply+0x44>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	4b44      	ldr	r3, [pc, #272]	@ (800a7b4 <__multiply+0x14c>)
 800a6a2:	4845      	ldr	r0, [pc, #276]	@ (800a7b8 <__multiply+0x150>)
 800a6a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a6a8:	f001 fc16 	bl	800bed8 <__assert_func>
 800a6ac:	f100 0514 	add.w	r5, r0, #20
 800a6b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	4543      	cmp	r3, r8
 800a6ba:	d321      	bcc.n	800a700 <__multiply+0x98>
 800a6bc:	f107 0114 	add.w	r1, r7, #20
 800a6c0:	f104 0214 	add.w	r2, r4, #20
 800a6c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a6c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a6cc:	9302      	str	r3, [sp, #8]
 800a6ce:	1b13      	subs	r3, r2, r4
 800a6d0:	3b15      	subs	r3, #21
 800a6d2:	f023 0303 	bic.w	r3, r3, #3
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	f104 0715 	add.w	r7, r4, #21
 800a6dc:	42ba      	cmp	r2, r7
 800a6de:	bf38      	it	cc
 800a6e0:	2304      	movcc	r3, #4
 800a6e2:	9301      	str	r3, [sp, #4]
 800a6e4:	9b02      	ldr	r3, [sp, #8]
 800a6e6:	9103      	str	r1, [sp, #12]
 800a6e8:	428b      	cmp	r3, r1
 800a6ea:	d80c      	bhi.n	800a706 <__multiply+0x9e>
 800a6ec:	2e00      	cmp	r6, #0
 800a6ee:	dd03      	ble.n	800a6f8 <__multiply+0x90>
 800a6f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d05b      	beq.n	800a7b0 <__multiply+0x148>
 800a6f8:	6106      	str	r6, [r0, #16]
 800a6fa:	b005      	add	sp, #20
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a700:	f843 2b04 	str.w	r2, [r3], #4
 800a704:	e7d8      	b.n	800a6b8 <__multiply+0x50>
 800a706:	f8b1 a000 	ldrh.w	sl, [r1]
 800a70a:	f1ba 0f00 	cmp.w	sl, #0
 800a70e:	d024      	beq.n	800a75a <__multiply+0xf2>
 800a710:	f104 0e14 	add.w	lr, r4, #20
 800a714:	46a9      	mov	r9, r5
 800a716:	f04f 0c00 	mov.w	ip, #0
 800a71a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a71e:	f8d9 3000 	ldr.w	r3, [r9]
 800a722:	fa1f fb87 	uxth.w	fp, r7
 800a726:	b29b      	uxth	r3, r3
 800a728:	fb0a 330b 	mla	r3, sl, fp, r3
 800a72c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a730:	f8d9 7000 	ldr.w	r7, [r9]
 800a734:	4463      	add	r3, ip
 800a736:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a73a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a73e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a742:	b29b      	uxth	r3, r3
 800a744:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a748:	4572      	cmp	r2, lr
 800a74a:	f849 3b04 	str.w	r3, [r9], #4
 800a74e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a752:	d8e2      	bhi.n	800a71a <__multiply+0xb2>
 800a754:	9b01      	ldr	r3, [sp, #4]
 800a756:	f845 c003 	str.w	ip, [r5, r3]
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a760:	3104      	adds	r1, #4
 800a762:	f1b9 0f00 	cmp.w	r9, #0
 800a766:	d021      	beq.n	800a7ac <__multiply+0x144>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	f104 0c14 	add.w	ip, r4, #20
 800a76e:	46ae      	mov	lr, r5
 800a770:	f04f 0a00 	mov.w	sl, #0
 800a774:	f8bc b000 	ldrh.w	fp, [ip]
 800a778:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a77c:	fb09 770b 	mla	r7, r9, fp, r7
 800a780:	4457      	add	r7, sl
 800a782:	b29b      	uxth	r3, r3
 800a784:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a788:	f84e 3b04 	str.w	r3, [lr], #4
 800a78c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a790:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a794:	f8be 3000 	ldrh.w	r3, [lr]
 800a798:	fb09 330a 	mla	r3, r9, sl, r3
 800a79c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a7a0:	4562      	cmp	r2, ip
 800a7a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7a6:	d8e5      	bhi.n	800a774 <__multiply+0x10c>
 800a7a8:	9f01      	ldr	r7, [sp, #4]
 800a7aa:	51eb      	str	r3, [r5, r7]
 800a7ac:	3504      	adds	r5, #4
 800a7ae:	e799      	b.n	800a6e4 <__multiply+0x7c>
 800a7b0:	3e01      	subs	r6, #1
 800a7b2:	e79b      	b.n	800a6ec <__multiply+0x84>
 800a7b4:	0800ccf9 	.word	0x0800ccf9
 800a7b8:	0800cd0a 	.word	0x0800cd0a

0800a7bc <__pow5mult>:
 800a7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c0:	4615      	mov	r5, r2
 800a7c2:	f012 0203 	ands.w	r2, r2, #3
 800a7c6:	4607      	mov	r7, r0
 800a7c8:	460e      	mov	r6, r1
 800a7ca:	d007      	beq.n	800a7dc <__pow5mult+0x20>
 800a7cc:	4c25      	ldr	r4, [pc, #148]	@ (800a864 <__pow5mult+0xa8>)
 800a7ce:	3a01      	subs	r2, #1
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7d6:	f7ff fe55 	bl	800a484 <__multadd>
 800a7da:	4606      	mov	r6, r0
 800a7dc:	10ad      	asrs	r5, r5, #2
 800a7de:	d03d      	beq.n	800a85c <__pow5mult+0xa0>
 800a7e0:	69fc      	ldr	r4, [r7, #28]
 800a7e2:	b97c      	cbnz	r4, 800a804 <__pow5mult+0x48>
 800a7e4:	2010      	movs	r0, #16
 800a7e6:	f7ff fd35 	bl	800a254 <malloc>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	61f8      	str	r0, [r7, #28]
 800a7ee:	b928      	cbnz	r0, 800a7fc <__pow5mult+0x40>
 800a7f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a868 <__pow5mult+0xac>)
 800a7f2:	481e      	ldr	r0, [pc, #120]	@ (800a86c <__pow5mult+0xb0>)
 800a7f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a7f8:	f001 fb6e 	bl	800bed8 <__assert_func>
 800a7fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a800:	6004      	str	r4, [r0, #0]
 800a802:	60c4      	str	r4, [r0, #12]
 800a804:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a80c:	b94c      	cbnz	r4, 800a822 <__pow5mult+0x66>
 800a80e:	f240 2171 	movw	r1, #625	@ 0x271
 800a812:	4638      	mov	r0, r7
 800a814:	f7ff ff12 	bl	800a63c <__i2b>
 800a818:	2300      	movs	r3, #0
 800a81a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a81e:	4604      	mov	r4, r0
 800a820:	6003      	str	r3, [r0, #0]
 800a822:	f04f 0900 	mov.w	r9, #0
 800a826:	07eb      	lsls	r3, r5, #31
 800a828:	d50a      	bpl.n	800a840 <__pow5mult+0x84>
 800a82a:	4631      	mov	r1, r6
 800a82c:	4622      	mov	r2, r4
 800a82e:	4638      	mov	r0, r7
 800a830:	f7ff ff1a 	bl	800a668 <__multiply>
 800a834:	4631      	mov	r1, r6
 800a836:	4680      	mov	r8, r0
 800a838:	4638      	mov	r0, r7
 800a83a:	f7ff fe01 	bl	800a440 <_Bfree>
 800a83e:	4646      	mov	r6, r8
 800a840:	106d      	asrs	r5, r5, #1
 800a842:	d00b      	beq.n	800a85c <__pow5mult+0xa0>
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	b938      	cbnz	r0, 800a858 <__pow5mult+0x9c>
 800a848:	4622      	mov	r2, r4
 800a84a:	4621      	mov	r1, r4
 800a84c:	4638      	mov	r0, r7
 800a84e:	f7ff ff0b 	bl	800a668 <__multiply>
 800a852:	6020      	str	r0, [r4, #0]
 800a854:	f8c0 9000 	str.w	r9, [r0]
 800a858:	4604      	mov	r4, r0
 800a85a:	e7e4      	b.n	800a826 <__pow5mult+0x6a>
 800a85c:	4630      	mov	r0, r6
 800a85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a862:	bf00      	nop
 800a864:	0800cd64 	.word	0x0800cd64
 800a868:	0800cc8a 	.word	0x0800cc8a
 800a86c:	0800cd0a 	.word	0x0800cd0a

0800a870 <__lshift>:
 800a870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a874:	460c      	mov	r4, r1
 800a876:	6849      	ldr	r1, [r1, #4]
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a87e:	68a3      	ldr	r3, [r4, #8]
 800a880:	4607      	mov	r7, r0
 800a882:	4691      	mov	r9, r2
 800a884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a888:	f108 0601 	add.w	r6, r8, #1
 800a88c:	42b3      	cmp	r3, r6
 800a88e:	db0b      	blt.n	800a8a8 <__lshift+0x38>
 800a890:	4638      	mov	r0, r7
 800a892:	f7ff fd95 	bl	800a3c0 <_Balloc>
 800a896:	4605      	mov	r5, r0
 800a898:	b948      	cbnz	r0, 800a8ae <__lshift+0x3e>
 800a89a:	4602      	mov	r2, r0
 800a89c:	4b28      	ldr	r3, [pc, #160]	@ (800a940 <__lshift+0xd0>)
 800a89e:	4829      	ldr	r0, [pc, #164]	@ (800a944 <__lshift+0xd4>)
 800a8a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a8a4:	f001 fb18 	bl	800bed8 <__assert_func>
 800a8a8:	3101      	adds	r1, #1
 800a8aa:	005b      	lsls	r3, r3, #1
 800a8ac:	e7ee      	b.n	800a88c <__lshift+0x1c>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f100 0114 	add.w	r1, r0, #20
 800a8b4:	f100 0210 	add.w	r2, r0, #16
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	4553      	cmp	r3, sl
 800a8bc:	db33      	blt.n	800a926 <__lshift+0xb6>
 800a8be:	6920      	ldr	r0, [r4, #16]
 800a8c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8c4:	f104 0314 	add.w	r3, r4, #20
 800a8c8:	f019 091f 	ands.w	r9, r9, #31
 800a8cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8d4:	d02b      	beq.n	800a92e <__lshift+0xbe>
 800a8d6:	f1c9 0e20 	rsb	lr, r9, #32
 800a8da:	468a      	mov	sl, r1
 800a8dc:	2200      	movs	r2, #0
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	fa00 f009 	lsl.w	r0, r0, r9
 800a8e4:	4310      	orrs	r0, r2
 800a8e6:	f84a 0b04 	str.w	r0, [sl], #4
 800a8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ee:	459c      	cmp	ip, r3
 800a8f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8f4:	d8f3      	bhi.n	800a8de <__lshift+0x6e>
 800a8f6:	ebac 0304 	sub.w	r3, ip, r4
 800a8fa:	3b15      	subs	r3, #21
 800a8fc:	f023 0303 	bic.w	r3, r3, #3
 800a900:	3304      	adds	r3, #4
 800a902:	f104 0015 	add.w	r0, r4, #21
 800a906:	4584      	cmp	ip, r0
 800a908:	bf38      	it	cc
 800a90a:	2304      	movcc	r3, #4
 800a90c:	50ca      	str	r2, [r1, r3]
 800a90e:	b10a      	cbz	r2, 800a914 <__lshift+0xa4>
 800a910:	f108 0602 	add.w	r6, r8, #2
 800a914:	3e01      	subs	r6, #1
 800a916:	4638      	mov	r0, r7
 800a918:	612e      	str	r6, [r5, #16]
 800a91a:	4621      	mov	r1, r4
 800a91c:	f7ff fd90 	bl	800a440 <_Bfree>
 800a920:	4628      	mov	r0, r5
 800a922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a926:	f842 0f04 	str.w	r0, [r2, #4]!
 800a92a:	3301      	adds	r3, #1
 800a92c:	e7c5      	b.n	800a8ba <__lshift+0x4a>
 800a92e:	3904      	subs	r1, #4
 800a930:	f853 2b04 	ldr.w	r2, [r3], #4
 800a934:	f841 2f04 	str.w	r2, [r1, #4]!
 800a938:	459c      	cmp	ip, r3
 800a93a:	d8f9      	bhi.n	800a930 <__lshift+0xc0>
 800a93c:	e7ea      	b.n	800a914 <__lshift+0xa4>
 800a93e:	bf00      	nop
 800a940:	0800ccf9 	.word	0x0800ccf9
 800a944:	0800cd0a 	.word	0x0800cd0a

0800a948 <__mcmp>:
 800a948:	690a      	ldr	r2, [r1, #16]
 800a94a:	4603      	mov	r3, r0
 800a94c:	6900      	ldr	r0, [r0, #16]
 800a94e:	1a80      	subs	r0, r0, r2
 800a950:	b530      	push	{r4, r5, lr}
 800a952:	d10e      	bne.n	800a972 <__mcmp+0x2a>
 800a954:	3314      	adds	r3, #20
 800a956:	3114      	adds	r1, #20
 800a958:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a95c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a960:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a964:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a968:	4295      	cmp	r5, r2
 800a96a:	d003      	beq.n	800a974 <__mcmp+0x2c>
 800a96c:	d205      	bcs.n	800a97a <__mcmp+0x32>
 800a96e:	f04f 30ff 	mov.w	r0, #4294967295
 800a972:	bd30      	pop	{r4, r5, pc}
 800a974:	42a3      	cmp	r3, r4
 800a976:	d3f3      	bcc.n	800a960 <__mcmp+0x18>
 800a978:	e7fb      	b.n	800a972 <__mcmp+0x2a>
 800a97a:	2001      	movs	r0, #1
 800a97c:	e7f9      	b.n	800a972 <__mcmp+0x2a>
	...

0800a980 <__mdiff>:
 800a980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	4689      	mov	r9, r1
 800a986:	4606      	mov	r6, r0
 800a988:	4611      	mov	r1, r2
 800a98a:	4648      	mov	r0, r9
 800a98c:	4614      	mov	r4, r2
 800a98e:	f7ff ffdb 	bl	800a948 <__mcmp>
 800a992:	1e05      	subs	r5, r0, #0
 800a994:	d112      	bne.n	800a9bc <__mdiff+0x3c>
 800a996:	4629      	mov	r1, r5
 800a998:	4630      	mov	r0, r6
 800a99a:	f7ff fd11 	bl	800a3c0 <_Balloc>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	b928      	cbnz	r0, 800a9ae <__mdiff+0x2e>
 800a9a2:	4b3f      	ldr	r3, [pc, #252]	@ (800aaa0 <__mdiff+0x120>)
 800a9a4:	f240 2137 	movw	r1, #567	@ 0x237
 800a9a8:	483e      	ldr	r0, [pc, #248]	@ (800aaa4 <__mdiff+0x124>)
 800a9aa:	f001 fa95 	bl	800bed8 <__assert_func>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	b003      	add	sp, #12
 800a9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9bc:	bfbc      	itt	lt
 800a9be:	464b      	movlt	r3, r9
 800a9c0:	46a1      	movlt	r9, r4
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a9c8:	bfba      	itte	lt
 800a9ca:	461c      	movlt	r4, r3
 800a9cc:	2501      	movlt	r5, #1
 800a9ce:	2500      	movge	r5, #0
 800a9d0:	f7ff fcf6 	bl	800a3c0 <_Balloc>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	b918      	cbnz	r0, 800a9e0 <__mdiff+0x60>
 800a9d8:	4b31      	ldr	r3, [pc, #196]	@ (800aaa0 <__mdiff+0x120>)
 800a9da:	f240 2145 	movw	r1, #581	@ 0x245
 800a9de:	e7e3      	b.n	800a9a8 <__mdiff+0x28>
 800a9e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9e4:	6926      	ldr	r6, [r4, #16]
 800a9e6:	60c5      	str	r5, [r0, #12]
 800a9e8:	f109 0310 	add.w	r3, r9, #16
 800a9ec:	f109 0514 	add.w	r5, r9, #20
 800a9f0:	f104 0e14 	add.w	lr, r4, #20
 800a9f4:	f100 0b14 	add.w	fp, r0, #20
 800a9f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a9fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	46d9      	mov	r9, fp
 800aa04:	f04f 0c00 	mov.w	ip, #0
 800aa08:	9b01      	ldr	r3, [sp, #4]
 800aa0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	fa1f f38a 	uxth.w	r3, sl
 800aa18:	4619      	mov	r1, r3
 800aa1a:	b283      	uxth	r3, r0
 800aa1c:	1acb      	subs	r3, r1, r3
 800aa1e:	0c00      	lsrs	r0, r0, #16
 800aa20:	4463      	add	r3, ip
 800aa22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa30:	4576      	cmp	r6, lr
 800aa32:	f849 3b04 	str.w	r3, [r9], #4
 800aa36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa3a:	d8e5      	bhi.n	800aa08 <__mdiff+0x88>
 800aa3c:	1b33      	subs	r3, r6, r4
 800aa3e:	3b15      	subs	r3, #21
 800aa40:	f023 0303 	bic.w	r3, r3, #3
 800aa44:	3415      	adds	r4, #21
 800aa46:	3304      	adds	r3, #4
 800aa48:	42a6      	cmp	r6, r4
 800aa4a:	bf38      	it	cc
 800aa4c:	2304      	movcc	r3, #4
 800aa4e:	441d      	add	r5, r3
 800aa50:	445b      	add	r3, fp
 800aa52:	461e      	mov	r6, r3
 800aa54:	462c      	mov	r4, r5
 800aa56:	4544      	cmp	r4, r8
 800aa58:	d30e      	bcc.n	800aa78 <__mdiff+0xf8>
 800aa5a:	f108 0103 	add.w	r1, r8, #3
 800aa5e:	1b49      	subs	r1, r1, r5
 800aa60:	f021 0103 	bic.w	r1, r1, #3
 800aa64:	3d03      	subs	r5, #3
 800aa66:	45a8      	cmp	r8, r5
 800aa68:	bf38      	it	cc
 800aa6a:	2100      	movcc	r1, #0
 800aa6c:	440b      	add	r3, r1
 800aa6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa72:	b191      	cbz	r1, 800aa9a <__mdiff+0x11a>
 800aa74:	6117      	str	r7, [r2, #16]
 800aa76:	e79d      	b.n	800a9b4 <__mdiff+0x34>
 800aa78:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa7c:	46e6      	mov	lr, ip
 800aa7e:	0c08      	lsrs	r0, r1, #16
 800aa80:	fa1c fc81 	uxtah	ip, ip, r1
 800aa84:	4471      	add	r1, lr
 800aa86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa8a:	b289      	uxth	r1, r1
 800aa8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa90:	f846 1b04 	str.w	r1, [r6], #4
 800aa94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa98:	e7dd      	b.n	800aa56 <__mdiff+0xd6>
 800aa9a:	3f01      	subs	r7, #1
 800aa9c:	e7e7      	b.n	800aa6e <__mdiff+0xee>
 800aa9e:	bf00      	nop
 800aaa0:	0800ccf9 	.word	0x0800ccf9
 800aaa4:	0800cd0a 	.word	0x0800cd0a

0800aaa8 <__ulp>:
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	ed8d 0b00 	vstr	d0, [sp]
 800aaae:	9a01      	ldr	r2, [sp, #4]
 800aab0:	4b0f      	ldr	r3, [pc, #60]	@ (800aaf0 <__ulp+0x48>)
 800aab2:	4013      	ands	r3, r2
 800aab4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	dc08      	bgt.n	800aace <__ulp+0x26>
 800aabc:	425b      	negs	r3, r3
 800aabe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aac2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aac6:	da04      	bge.n	800aad2 <__ulp+0x2a>
 800aac8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aacc:	4113      	asrs	r3, r2
 800aace:	2200      	movs	r2, #0
 800aad0:	e008      	b.n	800aae4 <__ulp+0x3c>
 800aad2:	f1a2 0314 	sub.w	r3, r2, #20
 800aad6:	2b1e      	cmp	r3, #30
 800aad8:	bfda      	itte	le
 800aada:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aade:	40da      	lsrle	r2, r3
 800aae0:	2201      	movgt	r2, #1
 800aae2:	2300      	movs	r3, #0
 800aae4:	4619      	mov	r1, r3
 800aae6:	4610      	mov	r0, r2
 800aae8:	ec41 0b10 	vmov	d0, r0, r1
 800aaec:	b002      	add	sp, #8
 800aaee:	4770      	bx	lr
 800aaf0:	7ff00000 	.word	0x7ff00000

0800aaf4 <__b2d>:
 800aaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf8:	6906      	ldr	r6, [r0, #16]
 800aafa:	f100 0814 	add.w	r8, r0, #20
 800aafe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ab02:	1f37      	subs	r7, r6, #4
 800ab04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab08:	4610      	mov	r0, r2
 800ab0a:	f7ff fd4b 	bl	800a5a4 <__hi0bits>
 800ab0e:	f1c0 0320 	rsb	r3, r0, #32
 800ab12:	280a      	cmp	r0, #10
 800ab14:	600b      	str	r3, [r1, #0]
 800ab16:	491b      	ldr	r1, [pc, #108]	@ (800ab84 <__b2d+0x90>)
 800ab18:	dc15      	bgt.n	800ab46 <__b2d+0x52>
 800ab1a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab1e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ab22:	45b8      	cmp	r8, r7
 800ab24:	ea43 0501 	orr.w	r5, r3, r1
 800ab28:	bf34      	ite	cc
 800ab2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab2e:	2300      	movcs	r3, #0
 800ab30:	3015      	adds	r0, #21
 800ab32:	fa02 f000 	lsl.w	r0, r2, r0
 800ab36:	fa23 f30c 	lsr.w	r3, r3, ip
 800ab3a:	4303      	orrs	r3, r0
 800ab3c:	461c      	mov	r4, r3
 800ab3e:	ec45 4b10 	vmov	d0, r4, r5
 800ab42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab46:	45b8      	cmp	r8, r7
 800ab48:	bf3a      	itte	cc
 800ab4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab4e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab52:	2300      	movcs	r3, #0
 800ab54:	380b      	subs	r0, #11
 800ab56:	d012      	beq.n	800ab7e <__b2d+0x8a>
 800ab58:	f1c0 0120 	rsb	r1, r0, #32
 800ab5c:	fa23 f401 	lsr.w	r4, r3, r1
 800ab60:	4082      	lsls	r2, r0
 800ab62:	4322      	orrs	r2, r4
 800ab64:	4547      	cmp	r7, r8
 800ab66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ab6a:	bf8c      	ite	hi
 800ab6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab70:	2200      	movls	r2, #0
 800ab72:	4083      	lsls	r3, r0
 800ab74:	40ca      	lsrs	r2, r1
 800ab76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	e7de      	b.n	800ab3c <__b2d+0x48>
 800ab7e:	ea42 0501 	orr.w	r5, r2, r1
 800ab82:	e7db      	b.n	800ab3c <__b2d+0x48>
 800ab84:	3ff00000 	.word	0x3ff00000

0800ab88 <__d2b>:
 800ab88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab8c:	460f      	mov	r7, r1
 800ab8e:	2101      	movs	r1, #1
 800ab90:	ec59 8b10 	vmov	r8, r9, d0
 800ab94:	4616      	mov	r6, r2
 800ab96:	f7ff fc13 	bl	800a3c0 <_Balloc>
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	b930      	cbnz	r0, 800abac <__d2b+0x24>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	4b23      	ldr	r3, [pc, #140]	@ (800ac30 <__d2b+0xa8>)
 800aba2:	4824      	ldr	r0, [pc, #144]	@ (800ac34 <__d2b+0xac>)
 800aba4:	f240 310f 	movw	r1, #783	@ 0x30f
 800aba8:	f001 f996 	bl	800bed8 <__assert_func>
 800abac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abb4:	b10d      	cbz	r5, 800abba <__d2b+0x32>
 800abb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abba:	9301      	str	r3, [sp, #4]
 800abbc:	f1b8 0300 	subs.w	r3, r8, #0
 800abc0:	d023      	beq.n	800ac0a <__d2b+0x82>
 800abc2:	4668      	mov	r0, sp
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	f7ff fd0c 	bl	800a5e2 <__lo0bits>
 800abca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abce:	b1d0      	cbz	r0, 800ac06 <__d2b+0x7e>
 800abd0:	f1c0 0320 	rsb	r3, r0, #32
 800abd4:	fa02 f303 	lsl.w	r3, r2, r3
 800abd8:	430b      	orrs	r3, r1
 800abda:	40c2      	lsrs	r2, r0
 800abdc:	6163      	str	r3, [r4, #20]
 800abde:	9201      	str	r2, [sp, #4]
 800abe0:	9b01      	ldr	r3, [sp, #4]
 800abe2:	61a3      	str	r3, [r4, #24]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	bf0c      	ite	eq
 800abe8:	2201      	moveq	r2, #1
 800abea:	2202      	movne	r2, #2
 800abec:	6122      	str	r2, [r4, #16]
 800abee:	b1a5      	cbz	r5, 800ac1a <__d2b+0x92>
 800abf0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abf4:	4405      	add	r5, r0
 800abf6:	603d      	str	r5, [r7, #0]
 800abf8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800abfc:	6030      	str	r0, [r6, #0]
 800abfe:	4620      	mov	r0, r4
 800ac00:	b003      	add	sp, #12
 800ac02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac06:	6161      	str	r1, [r4, #20]
 800ac08:	e7ea      	b.n	800abe0 <__d2b+0x58>
 800ac0a:	a801      	add	r0, sp, #4
 800ac0c:	f7ff fce9 	bl	800a5e2 <__lo0bits>
 800ac10:	9b01      	ldr	r3, [sp, #4]
 800ac12:	6163      	str	r3, [r4, #20]
 800ac14:	3020      	adds	r0, #32
 800ac16:	2201      	movs	r2, #1
 800ac18:	e7e8      	b.n	800abec <__d2b+0x64>
 800ac1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac22:	6038      	str	r0, [r7, #0]
 800ac24:	6918      	ldr	r0, [r3, #16]
 800ac26:	f7ff fcbd 	bl	800a5a4 <__hi0bits>
 800ac2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac2e:	e7e5      	b.n	800abfc <__d2b+0x74>
 800ac30:	0800ccf9 	.word	0x0800ccf9
 800ac34:	0800cd0a 	.word	0x0800cd0a

0800ac38 <__ratio>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	b085      	sub	sp, #20
 800ac3e:	e9cd 1000 	strd	r1, r0, [sp]
 800ac42:	a902      	add	r1, sp, #8
 800ac44:	f7ff ff56 	bl	800aaf4 <__b2d>
 800ac48:	9800      	ldr	r0, [sp, #0]
 800ac4a:	a903      	add	r1, sp, #12
 800ac4c:	ec55 4b10 	vmov	r4, r5, d0
 800ac50:	f7ff ff50 	bl	800aaf4 <__b2d>
 800ac54:	9b01      	ldr	r3, [sp, #4]
 800ac56:	6919      	ldr	r1, [r3, #16]
 800ac58:	9b00      	ldr	r3, [sp, #0]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	1ac9      	subs	r1, r1, r3
 800ac5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ac62:	1a9b      	subs	r3, r3, r2
 800ac64:	ec5b ab10 	vmov	sl, fp, d0
 800ac68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	bfce      	itee	gt
 800ac70:	462a      	movgt	r2, r5
 800ac72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac76:	465a      	movle	r2, fp
 800ac78:	462f      	mov	r7, r5
 800ac7a:	46d9      	mov	r9, fp
 800ac7c:	bfcc      	ite	gt
 800ac7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ac86:	464b      	mov	r3, r9
 800ac88:	4652      	mov	r2, sl
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	4639      	mov	r1, r7
 800ac8e:	f7f5 fddd 	bl	800084c <__aeabi_ddiv>
 800ac92:	ec41 0b10 	vmov	d0, r0, r1
 800ac96:	b005      	add	sp, #20
 800ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac9c <__copybits>:
 800ac9c:	3901      	subs	r1, #1
 800ac9e:	b570      	push	{r4, r5, r6, lr}
 800aca0:	1149      	asrs	r1, r1, #5
 800aca2:	6914      	ldr	r4, [r2, #16]
 800aca4:	3101      	adds	r1, #1
 800aca6:	f102 0314 	add.w	r3, r2, #20
 800acaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acb2:	1f05      	subs	r5, r0, #4
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	d30c      	bcc.n	800acd2 <__copybits+0x36>
 800acb8:	1aa3      	subs	r3, r4, r2
 800acba:	3b11      	subs	r3, #17
 800acbc:	f023 0303 	bic.w	r3, r3, #3
 800acc0:	3211      	adds	r2, #17
 800acc2:	42a2      	cmp	r2, r4
 800acc4:	bf88      	it	hi
 800acc6:	2300      	movhi	r3, #0
 800acc8:	4418      	add	r0, r3
 800acca:	2300      	movs	r3, #0
 800accc:	4288      	cmp	r0, r1
 800acce:	d305      	bcc.n	800acdc <__copybits+0x40>
 800acd0:	bd70      	pop	{r4, r5, r6, pc}
 800acd2:	f853 6b04 	ldr.w	r6, [r3], #4
 800acd6:	f845 6f04 	str.w	r6, [r5, #4]!
 800acda:	e7eb      	b.n	800acb4 <__copybits+0x18>
 800acdc:	f840 3b04 	str.w	r3, [r0], #4
 800ace0:	e7f4      	b.n	800accc <__copybits+0x30>

0800ace2 <__any_on>:
 800ace2:	f100 0214 	add.w	r2, r0, #20
 800ace6:	6900      	ldr	r0, [r0, #16]
 800ace8:	114b      	asrs	r3, r1, #5
 800acea:	4298      	cmp	r0, r3
 800acec:	b510      	push	{r4, lr}
 800acee:	db11      	blt.n	800ad14 <__any_on+0x32>
 800acf0:	dd0a      	ble.n	800ad08 <__any_on+0x26>
 800acf2:	f011 011f 	ands.w	r1, r1, #31
 800acf6:	d007      	beq.n	800ad08 <__any_on+0x26>
 800acf8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800acfc:	fa24 f001 	lsr.w	r0, r4, r1
 800ad00:	fa00 f101 	lsl.w	r1, r0, r1
 800ad04:	428c      	cmp	r4, r1
 800ad06:	d10b      	bne.n	800ad20 <__any_on+0x3e>
 800ad08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d803      	bhi.n	800ad18 <__any_on+0x36>
 800ad10:	2000      	movs	r0, #0
 800ad12:	bd10      	pop	{r4, pc}
 800ad14:	4603      	mov	r3, r0
 800ad16:	e7f7      	b.n	800ad08 <__any_on+0x26>
 800ad18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad1c:	2900      	cmp	r1, #0
 800ad1e:	d0f5      	beq.n	800ad0c <__any_on+0x2a>
 800ad20:	2001      	movs	r0, #1
 800ad22:	e7f6      	b.n	800ad12 <__any_on+0x30>

0800ad24 <sulp>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	4604      	mov	r4, r0
 800ad28:	460d      	mov	r5, r1
 800ad2a:	ec45 4b10 	vmov	d0, r4, r5
 800ad2e:	4616      	mov	r6, r2
 800ad30:	f7ff feba 	bl	800aaa8 <__ulp>
 800ad34:	ec51 0b10 	vmov	r0, r1, d0
 800ad38:	b17e      	cbz	r6, 800ad5a <sulp+0x36>
 800ad3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	dd09      	ble.n	800ad5a <sulp+0x36>
 800ad46:	051b      	lsls	r3, r3, #20
 800ad48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ad4c:	2400      	movs	r4, #0
 800ad4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ad52:	4622      	mov	r2, r4
 800ad54:	462b      	mov	r3, r5
 800ad56:	f7f5 fc4f 	bl	80005f8 <__aeabi_dmul>
 800ad5a:	ec41 0b10 	vmov	d0, r0, r1
 800ad5e:	bd70      	pop	{r4, r5, r6, pc}

0800ad60 <_strtod_l>:
 800ad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad64:	b09f      	sub	sp, #124	@ 0x7c
 800ad66:	460c      	mov	r4, r1
 800ad68:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ad6e:	9005      	str	r0, [sp, #20]
 800ad70:	f04f 0a00 	mov.w	sl, #0
 800ad74:	f04f 0b00 	mov.w	fp, #0
 800ad78:	460a      	mov	r2, r1
 800ad7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad7c:	7811      	ldrb	r1, [r2, #0]
 800ad7e:	292b      	cmp	r1, #43	@ 0x2b
 800ad80:	d04a      	beq.n	800ae18 <_strtod_l+0xb8>
 800ad82:	d838      	bhi.n	800adf6 <_strtod_l+0x96>
 800ad84:	290d      	cmp	r1, #13
 800ad86:	d832      	bhi.n	800adee <_strtod_l+0x8e>
 800ad88:	2908      	cmp	r1, #8
 800ad8a:	d832      	bhi.n	800adf2 <_strtod_l+0x92>
 800ad8c:	2900      	cmp	r1, #0
 800ad8e:	d03b      	beq.n	800ae08 <_strtod_l+0xa8>
 800ad90:	2200      	movs	r2, #0
 800ad92:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ad94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ad96:	782a      	ldrb	r2, [r5, #0]
 800ad98:	2a30      	cmp	r2, #48	@ 0x30
 800ad9a:	f040 80b3 	bne.w	800af04 <_strtod_l+0x1a4>
 800ad9e:	786a      	ldrb	r2, [r5, #1]
 800ada0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ada4:	2a58      	cmp	r2, #88	@ 0x58
 800ada6:	d16e      	bne.n	800ae86 <_strtod_l+0x126>
 800ada8:	9302      	str	r3, [sp, #8]
 800adaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adac:	9301      	str	r3, [sp, #4]
 800adae:	ab1a      	add	r3, sp, #104	@ 0x68
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	4a8e      	ldr	r2, [pc, #568]	@ (800afec <_strtod_l+0x28c>)
 800adb4:	9805      	ldr	r0, [sp, #20]
 800adb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800adb8:	a919      	add	r1, sp, #100	@ 0x64
 800adba:	f001 f927 	bl	800c00c <__gethex>
 800adbe:	f010 060f 	ands.w	r6, r0, #15
 800adc2:	4604      	mov	r4, r0
 800adc4:	d005      	beq.n	800add2 <_strtod_l+0x72>
 800adc6:	2e06      	cmp	r6, #6
 800adc8:	d128      	bne.n	800ae1c <_strtod_l+0xbc>
 800adca:	3501      	adds	r5, #1
 800adcc:	2300      	movs	r3, #0
 800adce:	9519      	str	r5, [sp, #100]	@ 0x64
 800add0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800add2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800add4:	2b00      	cmp	r3, #0
 800add6:	f040 858e 	bne.w	800b8f6 <_strtod_l+0xb96>
 800adda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800addc:	b1cb      	cbz	r3, 800ae12 <_strtod_l+0xb2>
 800adde:	4652      	mov	r2, sl
 800ade0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ade4:	ec43 2b10 	vmov	d0, r2, r3
 800ade8:	b01f      	add	sp, #124	@ 0x7c
 800adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adee:	2920      	cmp	r1, #32
 800adf0:	d1ce      	bne.n	800ad90 <_strtod_l+0x30>
 800adf2:	3201      	adds	r2, #1
 800adf4:	e7c1      	b.n	800ad7a <_strtod_l+0x1a>
 800adf6:	292d      	cmp	r1, #45	@ 0x2d
 800adf8:	d1ca      	bne.n	800ad90 <_strtod_l+0x30>
 800adfa:	2101      	movs	r1, #1
 800adfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800adfe:	1c51      	adds	r1, r2, #1
 800ae00:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae02:	7852      	ldrb	r2, [r2, #1]
 800ae04:	2a00      	cmp	r2, #0
 800ae06:	d1c5      	bne.n	800ad94 <_strtod_l+0x34>
 800ae08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae0a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f040 8570 	bne.w	800b8f2 <_strtod_l+0xb92>
 800ae12:	4652      	mov	r2, sl
 800ae14:	465b      	mov	r3, fp
 800ae16:	e7e5      	b.n	800ade4 <_strtod_l+0x84>
 800ae18:	2100      	movs	r1, #0
 800ae1a:	e7ef      	b.n	800adfc <_strtod_l+0x9c>
 800ae1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ae1e:	b13a      	cbz	r2, 800ae30 <_strtod_l+0xd0>
 800ae20:	2135      	movs	r1, #53	@ 0x35
 800ae22:	a81c      	add	r0, sp, #112	@ 0x70
 800ae24:	f7ff ff3a 	bl	800ac9c <__copybits>
 800ae28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae2a:	9805      	ldr	r0, [sp, #20]
 800ae2c:	f7ff fb08 	bl	800a440 <_Bfree>
 800ae30:	3e01      	subs	r6, #1
 800ae32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ae34:	2e04      	cmp	r6, #4
 800ae36:	d806      	bhi.n	800ae46 <_strtod_l+0xe6>
 800ae38:	e8df f006 	tbb	[pc, r6]
 800ae3c:	201d0314 	.word	0x201d0314
 800ae40:	14          	.byte	0x14
 800ae41:	00          	.byte	0x00
 800ae42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ae46:	05e1      	lsls	r1, r4, #23
 800ae48:	bf48      	it	mi
 800ae4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ae4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae52:	0d1b      	lsrs	r3, r3, #20
 800ae54:	051b      	lsls	r3, r3, #20
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1bb      	bne.n	800add2 <_strtod_l+0x72>
 800ae5a:	f7fe fb2f 	bl	80094bc <__errno>
 800ae5e:	2322      	movs	r3, #34	@ 0x22
 800ae60:	6003      	str	r3, [r0, #0]
 800ae62:	e7b6      	b.n	800add2 <_strtod_l+0x72>
 800ae64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ae68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ae6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ae70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae74:	e7e7      	b.n	800ae46 <_strtod_l+0xe6>
 800ae76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800aff4 <_strtod_l+0x294>
 800ae7a:	e7e4      	b.n	800ae46 <_strtod_l+0xe6>
 800ae7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ae80:	f04f 3aff 	mov.w	sl, #4294967295
 800ae84:	e7df      	b.n	800ae46 <_strtod_l+0xe6>
 800ae86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae88:	1c5a      	adds	r2, r3, #1
 800ae8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	2b30      	cmp	r3, #48	@ 0x30
 800ae90:	d0f9      	beq.n	800ae86 <_strtod_l+0x126>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d09d      	beq.n	800add2 <_strtod_l+0x72>
 800ae96:	2301      	movs	r3, #1
 800ae98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae9e:	2300      	movs	r3, #0
 800aea0:	9308      	str	r3, [sp, #32]
 800aea2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aea4:	461f      	mov	r7, r3
 800aea6:	220a      	movs	r2, #10
 800aea8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aeaa:	7805      	ldrb	r5, [r0, #0]
 800aeac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aeb0:	b2d9      	uxtb	r1, r3
 800aeb2:	2909      	cmp	r1, #9
 800aeb4:	d928      	bls.n	800af08 <_strtod_l+0x1a8>
 800aeb6:	494e      	ldr	r1, [pc, #312]	@ (800aff0 <_strtod_l+0x290>)
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f000 ffd5 	bl	800be68 <strncmp>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d032      	beq.n	800af28 <_strtod_l+0x1c8>
 800aec2:	2000      	movs	r0, #0
 800aec4:	462a      	mov	r2, r5
 800aec6:	4681      	mov	r9, r0
 800aec8:	463d      	mov	r5, r7
 800aeca:	4603      	mov	r3, r0
 800aecc:	2a65      	cmp	r2, #101	@ 0x65
 800aece:	d001      	beq.n	800aed4 <_strtod_l+0x174>
 800aed0:	2a45      	cmp	r2, #69	@ 0x45
 800aed2:	d114      	bne.n	800aefe <_strtod_l+0x19e>
 800aed4:	b91d      	cbnz	r5, 800aede <_strtod_l+0x17e>
 800aed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aed8:	4302      	orrs	r2, r0
 800aeda:	d095      	beq.n	800ae08 <_strtod_l+0xa8>
 800aedc:	2500      	movs	r5, #0
 800aede:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aee0:	1c62      	adds	r2, r4, #1
 800aee2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aee4:	7862      	ldrb	r2, [r4, #1]
 800aee6:	2a2b      	cmp	r2, #43	@ 0x2b
 800aee8:	d077      	beq.n	800afda <_strtod_l+0x27a>
 800aeea:	2a2d      	cmp	r2, #45	@ 0x2d
 800aeec:	d07b      	beq.n	800afe6 <_strtod_l+0x286>
 800aeee:	f04f 0c00 	mov.w	ip, #0
 800aef2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aef6:	2909      	cmp	r1, #9
 800aef8:	f240 8082 	bls.w	800b000 <_strtod_l+0x2a0>
 800aefc:	9419      	str	r4, [sp, #100]	@ 0x64
 800aefe:	f04f 0800 	mov.w	r8, #0
 800af02:	e0a2      	b.n	800b04a <_strtod_l+0x2ea>
 800af04:	2300      	movs	r3, #0
 800af06:	e7c7      	b.n	800ae98 <_strtod_l+0x138>
 800af08:	2f08      	cmp	r7, #8
 800af0a:	bfd5      	itete	le
 800af0c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800af0e:	9908      	ldrgt	r1, [sp, #32]
 800af10:	fb02 3301 	mlale	r3, r2, r1, r3
 800af14:	fb02 3301 	mlagt	r3, r2, r1, r3
 800af18:	f100 0001 	add.w	r0, r0, #1
 800af1c:	bfd4      	ite	le
 800af1e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800af20:	9308      	strgt	r3, [sp, #32]
 800af22:	3701      	adds	r7, #1
 800af24:	9019      	str	r0, [sp, #100]	@ 0x64
 800af26:	e7bf      	b.n	800aea8 <_strtod_l+0x148>
 800af28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	9219      	str	r2, [sp, #100]	@ 0x64
 800af2e:	785a      	ldrb	r2, [r3, #1]
 800af30:	b37f      	cbz	r7, 800af92 <_strtod_l+0x232>
 800af32:	4681      	mov	r9, r0
 800af34:	463d      	mov	r5, r7
 800af36:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800af3a:	2b09      	cmp	r3, #9
 800af3c:	d912      	bls.n	800af64 <_strtod_l+0x204>
 800af3e:	2301      	movs	r3, #1
 800af40:	e7c4      	b.n	800aecc <_strtod_l+0x16c>
 800af42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	9219      	str	r2, [sp, #100]	@ 0x64
 800af48:	785a      	ldrb	r2, [r3, #1]
 800af4a:	3001      	adds	r0, #1
 800af4c:	2a30      	cmp	r2, #48	@ 0x30
 800af4e:	d0f8      	beq.n	800af42 <_strtod_l+0x1e2>
 800af50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800af54:	2b08      	cmp	r3, #8
 800af56:	f200 84d3 	bhi.w	800b900 <_strtod_l+0xba0>
 800af5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800af5e:	4681      	mov	r9, r0
 800af60:	2000      	movs	r0, #0
 800af62:	4605      	mov	r5, r0
 800af64:	3a30      	subs	r2, #48	@ 0x30
 800af66:	f100 0301 	add.w	r3, r0, #1
 800af6a:	d02a      	beq.n	800afc2 <_strtod_l+0x262>
 800af6c:	4499      	add	r9, r3
 800af6e:	eb00 0c05 	add.w	ip, r0, r5
 800af72:	462b      	mov	r3, r5
 800af74:	210a      	movs	r1, #10
 800af76:	4563      	cmp	r3, ip
 800af78:	d10d      	bne.n	800af96 <_strtod_l+0x236>
 800af7a:	1c69      	adds	r1, r5, #1
 800af7c:	4401      	add	r1, r0
 800af7e:	4428      	add	r0, r5
 800af80:	2808      	cmp	r0, #8
 800af82:	dc16      	bgt.n	800afb2 <_strtod_l+0x252>
 800af84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af86:	230a      	movs	r3, #10
 800af88:	fb03 2300 	mla	r3, r3, r0, r2
 800af8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800af8e:	2300      	movs	r3, #0
 800af90:	e018      	b.n	800afc4 <_strtod_l+0x264>
 800af92:	4638      	mov	r0, r7
 800af94:	e7da      	b.n	800af4c <_strtod_l+0x1ec>
 800af96:	2b08      	cmp	r3, #8
 800af98:	f103 0301 	add.w	r3, r3, #1
 800af9c:	dc03      	bgt.n	800afa6 <_strtod_l+0x246>
 800af9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800afa0:	434e      	muls	r6, r1
 800afa2:	960a      	str	r6, [sp, #40]	@ 0x28
 800afa4:	e7e7      	b.n	800af76 <_strtod_l+0x216>
 800afa6:	2b10      	cmp	r3, #16
 800afa8:	bfde      	ittt	le
 800afaa:	9e08      	ldrle	r6, [sp, #32]
 800afac:	434e      	mulle	r6, r1
 800afae:	9608      	strle	r6, [sp, #32]
 800afb0:	e7e1      	b.n	800af76 <_strtod_l+0x216>
 800afb2:	280f      	cmp	r0, #15
 800afb4:	dceb      	bgt.n	800af8e <_strtod_l+0x22e>
 800afb6:	9808      	ldr	r0, [sp, #32]
 800afb8:	230a      	movs	r3, #10
 800afba:	fb03 2300 	mla	r3, r3, r0, r2
 800afbe:	9308      	str	r3, [sp, #32]
 800afc0:	e7e5      	b.n	800af8e <_strtod_l+0x22e>
 800afc2:	4629      	mov	r1, r5
 800afc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afc6:	1c50      	adds	r0, r2, #1
 800afc8:	9019      	str	r0, [sp, #100]	@ 0x64
 800afca:	7852      	ldrb	r2, [r2, #1]
 800afcc:	4618      	mov	r0, r3
 800afce:	460d      	mov	r5, r1
 800afd0:	e7b1      	b.n	800af36 <_strtod_l+0x1d6>
 800afd2:	f04f 0900 	mov.w	r9, #0
 800afd6:	2301      	movs	r3, #1
 800afd8:	e77d      	b.n	800aed6 <_strtod_l+0x176>
 800afda:	f04f 0c00 	mov.w	ip, #0
 800afde:	1ca2      	adds	r2, r4, #2
 800afe0:	9219      	str	r2, [sp, #100]	@ 0x64
 800afe2:	78a2      	ldrb	r2, [r4, #2]
 800afe4:	e785      	b.n	800aef2 <_strtod_l+0x192>
 800afe6:	f04f 0c01 	mov.w	ip, #1
 800afea:	e7f8      	b.n	800afde <_strtod_l+0x27e>
 800afec:	0800ce78 	.word	0x0800ce78
 800aff0:	0800ce60 	.word	0x0800ce60
 800aff4:	7ff00000 	.word	0x7ff00000
 800aff8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800affa:	1c51      	adds	r1, r2, #1
 800affc:	9119      	str	r1, [sp, #100]	@ 0x64
 800affe:	7852      	ldrb	r2, [r2, #1]
 800b000:	2a30      	cmp	r2, #48	@ 0x30
 800b002:	d0f9      	beq.n	800aff8 <_strtod_l+0x298>
 800b004:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b008:	2908      	cmp	r1, #8
 800b00a:	f63f af78 	bhi.w	800aefe <_strtod_l+0x19e>
 800b00e:	3a30      	subs	r2, #48	@ 0x30
 800b010:	920e      	str	r2, [sp, #56]	@ 0x38
 800b012:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b014:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b016:	f04f 080a 	mov.w	r8, #10
 800b01a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b01c:	1c56      	adds	r6, r2, #1
 800b01e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b020:	7852      	ldrb	r2, [r2, #1]
 800b022:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b026:	f1be 0f09 	cmp.w	lr, #9
 800b02a:	d939      	bls.n	800b0a0 <_strtod_l+0x340>
 800b02c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b02e:	1a76      	subs	r6, r6, r1
 800b030:	2e08      	cmp	r6, #8
 800b032:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b036:	dc03      	bgt.n	800b040 <_strtod_l+0x2e0>
 800b038:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b03a:	4588      	cmp	r8, r1
 800b03c:	bfa8      	it	ge
 800b03e:	4688      	movge	r8, r1
 800b040:	f1bc 0f00 	cmp.w	ip, #0
 800b044:	d001      	beq.n	800b04a <_strtod_l+0x2ea>
 800b046:	f1c8 0800 	rsb	r8, r8, #0
 800b04a:	2d00      	cmp	r5, #0
 800b04c:	d14e      	bne.n	800b0ec <_strtod_l+0x38c>
 800b04e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b050:	4308      	orrs	r0, r1
 800b052:	f47f aebe 	bne.w	800add2 <_strtod_l+0x72>
 800b056:	2b00      	cmp	r3, #0
 800b058:	f47f aed6 	bne.w	800ae08 <_strtod_l+0xa8>
 800b05c:	2a69      	cmp	r2, #105	@ 0x69
 800b05e:	d028      	beq.n	800b0b2 <_strtod_l+0x352>
 800b060:	dc25      	bgt.n	800b0ae <_strtod_l+0x34e>
 800b062:	2a49      	cmp	r2, #73	@ 0x49
 800b064:	d025      	beq.n	800b0b2 <_strtod_l+0x352>
 800b066:	2a4e      	cmp	r2, #78	@ 0x4e
 800b068:	f47f aece 	bne.w	800ae08 <_strtod_l+0xa8>
 800b06c:	499b      	ldr	r1, [pc, #620]	@ (800b2dc <_strtod_l+0x57c>)
 800b06e:	a819      	add	r0, sp, #100	@ 0x64
 800b070:	f001 f9ee 	bl	800c450 <__match>
 800b074:	2800      	cmp	r0, #0
 800b076:	f43f aec7 	beq.w	800ae08 <_strtod_l+0xa8>
 800b07a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	2b28      	cmp	r3, #40	@ 0x28
 800b080:	d12e      	bne.n	800b0e0 <_strtod_l+0x380>
 800b082:	4997      	ldr	r1, [pc, #604]	@ (800b2e0 <_strtod_l+0x580>)
 800b084:	aa1c      	add	r2, sp, #112	@ 0x70
 800b086:	a819      	add	r0, sp, #100	@ 0x64
 800b088:	f001 f9f6 	bl	800c478 <__hexnan>
 800b08c:	2805      	cmp	r0, #5
 800b08e:	d127      	bne.n	800b0e0 <_strtod_l+0x380>
 800b090:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b092:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b096:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b09a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b09e:	e698      	b.n	800add2 <_strtod_l+0x72>
 800b0a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b0a2:	fb08 2101 	mla	r1, r8, r1, r2
 800b0a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b0aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0ac:	e7b5      	b.n	800b01a <_strtod_l+0x2ba>
 800b0ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800b0b0:	e7da      	b.n	800b068 <_strtod_l+0x308>
 800b0b2:	498c      	ldr	r1, [pc, #560]	@ (800b2e4 <_strtod_l+0x584>)
 800b0b4:	a819      	add	r0, sp, #100	@ 0x64
 800b0b6:	f001 f9cb 	bl	800c450 <__match>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	f43f aea4 	beq.w	800ae08 <_strtod_l+0xa8>
 800b0c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0c2:	4989      	ldr	r1, [pc, #548]	@ (800b2e8 <_strtod_l+0x588>)
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	a819      	add	r0, sp, #100	@ 0x64
 800b0c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b0ca:	f001 f9c1 	bl	800c450 <__match>
 800b0ce:	b910      	cbnz	r0, 800b0d6 <_strtod_l+0x376>
 800b0d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b0d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b2f8 <_strtod_l+0x598>
 800b0da:	f04f 0a00 	mov.w	sl, #0
 800b0de:	e678      	b.n	800add2 <_strtod_l+0x72>
 800b0e0:	4882      	ldr	r0, [pc, #520]	@ (800b2ec <_strtod_l+0x58c>)
 800b0e2:	f000 fef1 	bl	800bec8 <nan>
 800b0e6:	ec5b ab10 	vmov	sl, fp, d0
 800b0ea:	e672      	b.n	800add2 <_strtod_l+0x72>
 800b0ec:	eba8 0309 	sub.w	r3, r8, r9
 800b0f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0f4:	2f00      	cmp	r7, #0
 800b0f6:	bf08      	it	eq
 800b0f8:	462f      	moveq	r7, r5
 800b0fa:	2d10      	cmp	r5, #16
 800b0fc:	462c      	mov	r4, r5
 800b0fe:	bfa8      	it	ge
 800b100:	2410      	movge	r4, #16
 800b102:	f7f5 f9ff 	bl	8000504 <__aeabi_ui2d>
 800b106:	2d09      	cmp	r5, #9
 800b108:	4682      	mov	sl, r0
 800b10a:	468b      	mov	fp, r1
 800b10c:	dc13      	bgt.n	800b136 <_strtod_l+0x3d6>
 800b10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b110:	2b00      	cmp	r3, #0
 800b112:	f43f ae5e 	beq.w	800add2 <_strtod_l+0x72>
 800b116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b118:	dd78      	ble.n	800b20c <_strtod_l+0x4ac>
 800b11a:	2b16      	cmp	r3, #22
 800b11c:	dc5f      	bgt.n	800b1de <_strtod_l+0x47e>
 800b11e:	4974      	ldr	r1, [pc, #464]	@ (800b2f0 <_strtod_l+0x590>)
 800b120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b124:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b128:	4652      	mov	r2, sl
 800b12a:	465b      	mov	r3, fp
 800b12c:	f7f5 fa64 	bl	80005f8 <__aeabi_dmul>
 800b130:	4682      	mov	sl, r0
 800b132:	468b      	mov	fp, r1
 800b134:	e64d      	b.n	800add2 <_strtod_l+0x72>
 800b136:	4b6e      	ldr	r3, [pc, #440]	@ (800b2f0 <_strtod_l+0x590>)
 800b138:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b13c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b140:	f7f5 fa5a 	bl	80005f8 <__aeabi_dmul>
 800b144:	4682      	mov	sl, r0
 800b146:	9808      	ldr	r0, [sp, #32]
 800b148:	468b      	mov	fp, r1
 800b14a:	f7f5 f9db 	bl	8000504 <__aeabi_ui2d>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4650      	mov	r0, sl
 800b154:	4659      	mov	r1, fp
 800b156:	f7f5 f899 	bl	800028c <__adddf3>
 800b15a:	2d0f      	cmp	r5, #15
 800b15c:	4682      	mov	sl, r0
 800b15e:	468b      	mov	fp, r1
 800b160:	ddd5      	ble.n	800b10e <_strtod_l+0x3ae>
 800b162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b164:	1b2c      	subs	r4, r5, r4
 800b166:	441c      	add	r4, r3
 800b168:	2c00      	cmp	r4, #0
 800b16a:	f340 8096 	ble.w	800b29a <_strtod_l+0x53a>
 800b16e:	f014 030f 	ands.w	r3, r4, #15
 800b172:	d00a      	beq.n	800b18a <_strtod_l+0x42a>
 800b174:	495e      	ldr	r1, [pc, #376]	@ (800b2f0 <_strtod_l+0x590>)
 800b176:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b17a:	4652      	mov	r2, sl
 800b17c:	465b      	mov	r3, fp
 800b17e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b182:	f7f5 fa39 	bl	80005f8 <__aeabi_dmul>
 800b186:	4682      	mov	sl, r0
 800b188:	468b      	mov	fp, r1
 800b18a:	f034 040f 	bics.w	r4, r4, #15
 800b18e:	d073      	beq.n	800b278 <_strtod_l+0x518>
 800b190:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b194:	dd48      	ble.n	800b228 <_strtod_l+0x4c8>
 800b196:	2400      	movs	r4, #0
 800b198:	46a0      	mov	r8, r4
 800b19a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b19c:	46a1      	mov	r9, r4
 800b19e:	9a05      	ldr	r2, [sp, #20]
 800b1a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b2f8 <_strtod_l+0x598>
 800b1a4:	2322      	movs	r3, #34	@ 0x22
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	f04f 0a00 	mov.w	sl, #0
 800b1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f43f ae0f 	beq.w	800add2 <_strtod_l+0x72>
 800b1b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1b6:	9805      	ldr	r0, [sp, #20]
 800b1b8:	f7ff f942 	bl	800a440 <_Bfree>
 800b1bc:	9805      	ldr	r0, [sp, #20]
 800b1be:	4649      	mov	r1, r9
 800b1c0:	f7ff f93e 	bl	800a440 <_Bfree>
 800b1c4:	9805      	ldr	r0, [sp, #20]
 800b1c6:	4641      	mov	r1, r8
 800b1c8:	f7ff f93a 	bl	800a440 <_Bfree>
 800b1cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1ce:	9805      	ldr	r0, [sp, #20]
 800b1d0:	f7ff f936 	bl	800a440 <_Bfree>
 800b1d4:	9805      	ldr	r0, [sp, #20]
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	f7ff f932 	bl	800a440 <_Bfree>
 800b1dc:	e5f9      	b.n	800add2 <_strtod_l+0x72>
 800b1de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	dbbc      	blt.n	800b162 <_strtod_l+0x402>
 800b1e8:	4c41      	ldr	r4, [pc, #260]	@ (800b2f0 <_strtod_l+0x590>)
 800b1ea:	f1c5 050f 	rsb	r5, r5, #15
 800b1ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b1f2:	4652      	mov	r2, sl
 800b1f4:	465b      	mov	r3, fp
 800b1f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1fa:	f7f5 f9fd 	bl	80005f8 <__aeabi_dmul>
 800b1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b200:	1b5d      	subs	r5, r3, r5
 800b202:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b206:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b20a:	e78f      	b.n	800b12c <_strtod_l+0x3cc>
 800b20c:	3316      	adds	r3, #22
 800b20e:	dba8      	blt.n	800b162 <_strtod_l+0x402>
 800b210:	4b37      	ldr	r3, [pc, #220]	@ (800b2f0 <_strtod_l+0x590>)
 800b212:	eba9 0808 	sub.w	r8, r9, r8
 800b216:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b21a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b21e:	4650      	mov	r0, sl
 800b220:	4659      	mov	r1, fp
 800b222:	f7f5 fb13 	bl	800084c <__aeabi_ddiv>
 800b226:	e783      	b.n	800b130 <_strtod_l+0x3d0>
 800b228:	4b32      	ldr	r3, [pc, #200]	@ (800b2f4 <_strtod_l+0x594>)
 800b22a:	9308      	str	r3, [sp, #32]
 800b22c:	2300      	movs	r3, #0
 800b22e:	1124      	asrs	r4, r4, #4
 800b230:	4650      	mov	r0, sl
 800b232:	4659      	mov	r1, fp
 800b234:	461e      	mov	r6, r3
 800b236:	2c01      	cmp	r4, #1
 800b238:	dc21      	bgt.n	800b27e <_strtod_l+0x51e>
 800b23a:	b10b      	cbz	r3, 800b240 <_strtod_l+0x4e0>
 800b23c:	4682      	mov	sl, r0
 800b23e:	468b      	mov	fp, r1
 800b240:	492c      	ldr	r1, [pc, #176]	@ (800b2f4 <_strtod_l+0x594>)
 800b242:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b246:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b24a:	4652      	mov	r2, sl
 800b24c:	465b      	mov	r3, fp
 800b24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b252:	f7f5 f9d1 	bl	80005f8 <__aeabi_dmul>
 800b256:	4b28      	ldr	r3, [pc, #160]	@ (800b2f8 <_strtod_l+0x598>)
 800b258:	460a      	mov	r2, r1
 800b25a:	400b      	ands	r3, r1
 800b25c:	4927      	ldr	r1, [pc, #156]	@ (800b2fc <_strtod_l+0x59c>)
 800b25e:	428b      	cmp	r3, r1
 800b260:	4682      	mov	sl, r0
 800b262:	d898      	bhi.n	800b196 <_strtod_l+0x436>
 800b264:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b268:	428b      	cmp	r3, r1
 800b26a:	bf86      	itte	hi
 800b26c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b300 <_strtod_l+0x5a0>
 800b270:	f04f 3aff 	movhi.w	sl, #4294967295
 800b274:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b278:	2300      	movs	r3, #0
 800b27a:	9308      	str	r3, [sp, #32]
 800b27c:	e07a      	b.n	800b374 <_strtod_l+0x614>
 800b27e:	07e2      	lsls	r2, r4, #31
 800b280:	d505      	bpl.n	800b28e <_strtod_l+0x52e>
 800b282:	9b08      	ldr	r3, [sp, #32]
 800b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b288:	f7f5 f9b6 	bl	80005f8 <__aeabi_dmul>
 800b28c:	2301      	movs	r3, #1
 800b28e:	9a08      	ldr	r2, [sp, #32]
 800b290:	3208      	adds	r2, #8
 800b292:	3601      	adds	r6, #1
 800b294:	1064      	asrs	r4, r4, #1
 800b296:	9208      	str	r2, [sp, #32]
 800b298:	e7cd      	b.n	800b236 <_strtod_l+0x4d6>
 800b29a:	d0ed      	beq.n	800b278 <_strtod_l+0x518>
 800b29c:	4264      	negs	r4, r4
 800b29e:	f014 020f 	ands.w	r2, r4, #15
 800b2a2:	d00a      	beq.n	800b2ba <_strtod_l+0x55a>
 800b2a4:	4b12      	ldr	r3, [pc, #72]	@ (800b2f0 <_strtod_l+0x590>)
 800b2a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	4659      	mov	r1, fp
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f5 facb 	bl	800084c <__aeabi_ddiv>
 800b2b6:	4682      	mov	sl, r0
 800b2b8:	468b      	mov	fp, r1
 800b2ba:	1124      	asrs	r4, r4, #4
 800b2bc:	d0dc      	beq.n	800b278 <_strtod_l+0x518>
 800b2be:	2c1f      	cmp	r4, #31
 800b2c0:	dd20      	ble.n	800b304 <_strtod_l+0x5a4>
 800b2c2:	2400      	movs	r4, #0
 800b2c4:	46a0      	mov	r8, r4
 800b2c6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b2c8:	46a1      	mov	r9, r4
 800b2ca:	9a05      	ldr	r2, [sp, #20]
 800b2cc:	2322      	movs	r3, #34	@ 0x22
 800b2ce:	f04f 0a00 	mov.w	sl, #0
 800b2d2:	f04f 0b00 	mov.w	fp, #0
 800b2d6:	6013      	str	r3, [r2, #0]
 800b2d8:	e768      	b.n	800b1ac <_strtod_l+0x44c>
 800b2da:	bf00      	nop
 800b2dc:	0800cc51 	.word	0x0800cc51
 800b2e0:	0800ce64 	.word	0x0800ce64
 800b2e4:	0800cc49 	.word	0x0800cc49
 800b2e8:	0800cc80 	.word	0x0800cc80
 800b2ec:	0800d00d 	.word	0x0800d00d
 800b2f0:	0800cd98 	.word	0x0800cd98
 800b2f4:	0800cd70 	.word	0x0800cd70
 800b2f8:	7ff00000 	.word	0x7ff00000
 800b2fc:	7ca00000 	.word	0x7ca00000
 800b300:	7fefffff 	.word	0x7fefffff
 800b304:	f014 0310 	ands.w	r3, r4, #16
 800b308:	bf18      	it	ne
 800b30a:	236a      	movne	r3, #106	@ 0x6a
 800b30c:	4ea9      	ldr	r6, [pc, #676]	@ (800b5b4 <_strtod_l+0x854>)
 800b30e:	9308      	str	r3, [sp, #32]
 800b310:	4650      	mov	r0, sl
 800b312:	4659      	mov	r1, fp
 800b314:	2300      	movs	r3, #0
 800b316:	07e2      	lsls	r2, r4, #31
 800b318:	d504      	bpl.n	800b324 <_strtod_l+0x5c4>
 800b31a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b31e:	f7f5 f96b 	bl	80005f8 <__aeabi_dmul>
 800b322:	2301      	movs	r3, #1
 800b324:	1064      	asrs	r4, r4, #1
 800b326:	f106 0608 	add.w	r6, r6, #8
 800b32a:	d1f4      	bne.n	800b316 <_strtod_l+0x5b6>
 800b32c:	b10b      	cbz	r3, 800b332 <_strtod_l+0x5d2>
 800b32e:	4682      	mov	sl, r0
 800b330:	468b      	mov	fp, r1
 800b332:	9b08      	ldr	r3, [sp, #32]
 800b334:	b1b3      	cbz	r3, 800b364 <_strtod_l+0x604>
 800b336:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b33a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b33e:	2b00      	cmp	r3, #0
 800b340:	4659      	mov	r1, fp
 800b342:	dd0f      	ble.n	800b364 <_strtod_l+0x604>
 800b344:	2b1f      	cmp	r3, #31
 800b346:	dd55      	ble.n	800b3f4 <_strtod_l+0x694>
 800b348:	2b34      	cmp	r3, #52	@ 0x34
 800b34a:	bfde      	ittt	le
 800b34c:	f04f 33ff 	movle.w	r3, #4294967295
 800b350:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b354:	4093      	lslle	r3, r2
 800b356:	f04f 0a00 	mov.w	sl, #0
 800b35a:	bfcc      	ite	gt
 800b35c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b360:	ea03 0b01 	andle.w	fp, r3, r1
 800b364:	2200      	movs	r2, #0
 800b366:	2300      	movs	r3, #0
 800b368:	4650      	mov	r0, sl
 800b36a:	4659      	mov	r1, fp
 800b36c:	f7f5 fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 800b370:	2800      	cmp	r0, #0
 800b372:	d1a6      	bne.n	800b2c2 <_strtod_l+0x562>
 800b374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b37a:	9805      	ldr	r0, [sp, #20]
 800b37c:	462b      	mov	r3, r5
 800b37e:	463a      	mov	r2, r7
 800b380:	f7ff f8c6 	bl	800a510 <__s2b>
 800b384:	900a      	str	r0, [sp, #40]	@ 0x28
 800b386:	2800      	cmp	r0, #0
 800b388:	f43f af05 	beq.w	800b196 <_strtod_l+0x436>
 800b38c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b38e:	2a00      	cmp	r2, #0
 800b390:	eba9 0308 	sub.w	r3, r9, r8
 800b394:	bfa8      	it	ge
 800b396:	2300      	movge	r3, #0
 800b398:	9312      	str	r3, [sp, #72]	@ 0x48
 800b39a:	2400      	movs	r4, #0
 800b39c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b3a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b3a2:	46a0      	mov	r8, r4
 800b3a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3a6:	9805      	ldr	r0, [sp, #20]
 800b3a8:	6859      	ldr	r1, [r3, #4]
 800b3aa:	f7ff f809 	bl	800a3c0 <_Balloc>
 800b3ae:	4681      	mov	r9, r0
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	f43f aef4 	beq.w	800b19e <_strtod_l+0x43e>
 800b3b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3b8:	691a      	ldr	r2, [r3, #16]
 800b3ba:	3202      	adds	r2, #2
 800b3bc:	f103 010c 	add.w	r1, r3, #12
 800b3c0:	0092      	lsls	r2, r2, #2
 800b3c2:	300c      	adds	r0, #12
 800b3c4:	f000 fd72 	bl	800beac <memcpy>
 800b3c8:	ec4b ab10 	vmov	d0, sl, fp
 800b3cc:	9805      	ldr	r0, [sp, #20]
 800b3ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800b3d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800b3d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b3d6:	f7ff fbd7 	bl	800ab88 <__d2b>
 800b3da:	901a      	str	r0, [sp, #104]	@ 0x68
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	f43f aede 	beq.w	800b19e <_strtod_l+0x43e>
 800b3e2:	9805      	ldr	r0, [sp, #20]
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	f7ff f929 	bl	800a63c <__i2b>
 800b3ea:	4680      	mov	r8, r0
 800b3ec:	b948      	cbnz	r0, 800b402 <_strtod_l+0x6a2>
 800b3ee:	f04f 0800 	mov.w	r8, #0
 800b3f2:	e6d4      	b.n	800b19e <_strtod_l+0x43e>
 800b3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3fc:	ea03 0a0a 	and.w	sl, r3, sl
 800b400:	e7b0      	b.n	800b364 <_strtod_l+0x604>
 800b402:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b404:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b406:	2d00      	cmp	r5, #0
 800b408:	bfab      	itete	ge
 800b40a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b40c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b40e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b410:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b412:	bfac      	ite	ge
 800b414:	18ef      	addge	r7, r5, r3
 800b416:	1b5e      	sublt	r6, r3, r5
 800b418:	9b08      	ldr	r3, [sp, #32]
 800b41a:	1aed      	subs	r5, r5, r3
 800b41c:	4415      	add	r5, r2
 800b41e:	4b66      	ldr	r3, [pc, #408]	@ (800b5b8 <_strtod_l+0x858>)
 800b420:	3d01      	subs	r5, #1
 800b422:	429d      	cmp	r5, r3
 800b424:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b428:	da50      	bge.n	800b4cc <_strtod_l+0x76c>
 800b42a:	1b5b      	subs	r3, r3, r5
 800b42c:	2b1f      	cmp	r3, #31
 800b42e:	eba2 0203 	sub.w	r2, r2, r3
 800b432:	f04f 0101 	mov.w	r1, #1
 800b436:	dc3d      	bgt.n	800b4b4 <_strtod_l+0x754>
 800b438:	fa01 f303 	lsl.w	r3, r1, r3
 800b43c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b43e:	2300      	movs	r3, #0
 800b440:	9310      	str	r3, [sp, #64]	@ 0x40
 800b442:	18bd      	adds	r5, r7, r2
 800b444:	9b08      	ldr	r3, [sp, #32]
 800b446:	42af      	cmp	r7, r5
 800b448:	4416      	add	r6, r2
 800b44a:	441e      	add	r6, r3
 800b44c:	463b      	mov	r3, r7
 800b44e:	bfa8      	it	ge
 800b450:	462b      	movge	r3, r5
 800b452:	42b3      	cmp	r3, r6
 800b454:	bfa8      	it	ge
 800b456:	4633      	movge	r3, r6
 800b458:	2b00      	cmp	r3, #0
 800b45a:	bfc2      	ittt	gt
 800b45c:	1aed      	subgt	r5, r5, r3
 800b45e:	1af6      	subgt	r6, r6, r3
 800b460:	1aff      	subgt	r7, r7, r3
 800b462:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b464:	2b00      	cmp	r3, #0
 800b466:	dd16      	ble.n	800b496 <_strtod_l+0x736>
 800b468:	4641      	mov	r1, r8
 800b46a:	9805      	ldr	r0, [sp, #20]
 800b46c:	461a      	mov	r2, r3
 800b46e:	f7ff f9a5 	bl	800a7bc <__pow5mult>
 800b472:	4680      	mov	r8, r0
 800b474:	2800      	cmp	r0, #0
 800b476:	d0ba      	beq.n	800b3ee <_strtod_l+0x68e>
 800b478:	4601      	mov	r1, r0
 800b47a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b47c:	9805      	ldr	r0, [sp, #20]
 800b47e:	f7ff f8f3 	bl	800a668 <__multiply>
 800b482:	900e      	str	r0, [sp, #56]	@ 0x38
 800b484:	2800      	cmp	r0, #0
 800b486:	f43f ae8a 	beq.w	800b19e <_strtod_l+0x43e>
 800b48a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b48c:	9805      	ldr	r0, [sp, #20]
 800b48e:	f7fe ffd7 	bl	800a440 <_Bfree>
 800b492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b494:	931a      	str	r3, [sp, #104]	@ 0x68
 800b496:	2d00      	cmp	r5, #0
 800b498:	dc1d      	bgt.n	800b4d6 <_strtod_l+0x776>
 800b49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	dd23      	ble.n	800b4e8 <_strtod_l+0x788>
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b4a4:	9805      	ldr	r0, [sp, #20]
 800b4a6:	f7ff f989 	bl	800a7bc <__pow5mult>
 800b4aa:	4681      	mov	r9, r0
 800b4ac:	b9e0      	cbnz	r0, 800b4e8 <_strtod_l+0x788>
 800b4ae:	f04f 0900 	mov.w	r9, #0
 800b4b2:	e674      	b.n	800b19e <_strtod_l+0x43e>
 800b4b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b4b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b4bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b4c0:	35e2      	adds	r5, #226	@ 0xe2
 800b4c2:	fa01 f305 	lsl.w	r3, r1, r5
 800b4c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b4c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b4ca:	e7ba      	b.n	800b442 <_strtod_l+0x6e2>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4d4:	e7b5      	b.n	800b442 <_strtod_l+0x6e2>
 800b4d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4d8:	9805      	ldr	r0, [sp, #20]
 800b4da:	462a      	mov	r2, r5
 800b4dc:	f7ff f9c8 	bl	800a870 <__lshift>
 800b4e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d1d9      	bne.n	800b49a <_strtod_l+0x73a>
 800b4e6:	e65a      	b.n	800b19e <_strtod_l+0x43e>
 800b4e8:	2e00      	cmp	r6, #0
 800b4ea:	dd07      	ble.n	800b4fc <_strtod_l+0x79c>
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	9805      	ldr	r0, [sp, #20]
 800b4f0:	4632      	mov	r2, r6
 800b4f2:	f7ff f9bd 	bl	800a870 <__lshift>
 800b4f6:	4681      	mov	r9, r0
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d0d8      	beq.n	800b4ae <_strtod_l+0x74e>
 800b4fc:	2f00      	cmp	r7, #0
 800b4fe:	dd08      	ble.n	800b512 <_strtod_l+0x7b2>
 800b500:	4641      	mov	r1, r8
 800b502:	9805      	ldr	r0, [sp, #20]
 800b504:	463a      	mov	r2, r7
 800b506:	f7ff f9b3 	bl	800a870 <__lshift>
 800b50a:	4680      	mov	r8, r0
 800b50c:	2800      	cmp	r0, #0
 800b50e:	f43f ae46 	beq.w	800b19e <_strtod_l+0x43e>
 800b512:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b514:	9805      	ldr	r0, [sp, #20]
 800b516:	464a      	mov	r2, r9
 800b518:	f7ff fa32 	bl	800a980 <__mdiff>
 800b51c:	4604      	mov	r4, r0
 800b51e:	2800      	cmp	r0, #0
 800b520:	f43f ae3d 	beq.w	800b19e <_strtod_l+0x43e>
 800b524:	68c3      	ldr	r3, [r0, #12]
 800b526:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b528:	2300      	movs	r3, #0
 800b52a:	60c3      	str	r3, [r0, #12]
 800b52c:	4641      	mov	r1, r8
 800b52e:	f7ff fa0b 	bl	800a948 <__mcmp>
 800b532:	2800      	cmp	r0, #0
 800b534:	da46      	bge.n	800b5c4 <_strtod_l+0x864>
 800b536:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b538:	ea53 030a 	orrs.w	r3, r3, sl
 800b53c:	d16c      	bne.n	800b618 <_strtod_l+0x8b8>
 800b53e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b542:	2b00      	cmp	r3, #0
 800b544:	d168      	bne.n	800b618 <_strtod_l+0x8b8>
 800b546:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b54a:	0d1b      	lsrs	r3, r3, #20
 800b54c:	051b      	lsls	r3, r3, #20
 800b54e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b552:	d961      	bls.n	800b618 <_strtod_l+0x8b8>
 800b554:	6963      	ldr	r3, [r4, #20]
 800b556:	b913      	cbnz	r3, 800b55e <_strtod_l+0x7fe>
 800b558:	6923      	ldr	r3, [r4, #16]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	dd5c      	ble.n	800b618 <_strtod_l+0x8b8>
 800b55e:	4621      	mov	r1, r4
 800b560:	2201      	movs	r2, #1
 800b562:	9805      	ldr	r0, [sp, #20]
 800b564:	f7ff f984 	bl	800a870 <__lshift>
 800b568:	4641      	mov	r1, r8
 800b56a:	4604      	mov	r4, r0
 800b56c:	f7ff f9ec 	bl	800a948 <__mcmp>
 800b570:	2800      	cmp	r0, #0
 800b572:	dd51      	ble.n	800b618 <_strtod_l+0x8b8>
 800b574:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b578:	9a08      	ldr	r2, [sp, #32]
 800b57a:	0d1b      	lsrs	r3, r3, #20
 800b57c:	051b      	lsls	r3, r3, #20
 800b57e:	2a00      	cmp	r2, #0
 800b580:	d06b      	beq.n	800b65a <_strtod_l+0x8fa>
 800b582:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b586:	d868      	bhi.n	800b65a <_strtod_l+0x8fa>
 800b588:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b58c:	f67f ae9d 	bls.w	800b2ca <_strtod_l+0x56a>
 800b590:	4b0a      	ldr	r3, [pc, #40]	@ (800b5bc <_strtod_l+0x85c>)
 800b592:	4650      	mov	r0, sl
 800b594:	4659      	mov	r1, fp
 800b596:	2200      	movs	r2, #0
 800b598:	f7f5 f82e 	bl	80005f8 <__aeabi_dmul>
 800b59c:	4b08      	ldr	r3, [pc, #32]	@ (800b5c0 <_strtod_l+0x860>)
 800b59e:	400b      	ands	r3, r1
 800b5a0:	4682      	mov	sl, r0
 800b5a2:	468b      	mov	fp, r1
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f47f ae05 	bne.w	800b1b4 <_strtod_l+0x454>
 800b5aa:	9a05      	ldr	r2, [sp, #20]
 800b5ac:	2322      	movs	r3, #34	@ 0x22
 800b5ae:	6013      	str	r3, [r2, #0]
 800b5b0:	e600      	b.n	800b1b4 <_strtod_l+0x454>
 800b5b2:	bf00      	nop
 800b5b4:	0800ce90 	.word	0x0800ce90
 800b5b8:	fffffc02 	.word	0xfffffc02
 800b5bc:	39500000 	.word	0x39500000
 800b5c0:	7ff00000 	.word	0x7ff00000
 800b5c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b5c8:	d165      	bne.n	800b696 <_strtod_l+0x936>
 800b5ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b5cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5d0:	b35a      	cbz	r2, 800b62a <_strtod_l+0x8ca>
 800b5d2:	4a9f      	ldr	r2, [pc, #636]	@ (800b850 <_strtod_l+0xaf0>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d12b      	bne.n	800b630 <_strtod_l+0x8d0>
 800b5d8:	9b08      	ldr	r3, [sp, #32]
 800b5da:	4651      	mov	r1, sl
 800b5dc:	b303      	cbz	r3, 800b620 <_strtod_l+0x8c0>
 800b5de:	4b9d      	ldr	r3, [pc, #628]	@ (800b854 <_strtod_l+0xaf4>)
 800b5e0:	465a      	mov	r2, fp
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ec:	d81b      	bhi.n	800b626 <_strtod_l+0x8c6>
 800b5ee:	0d1b      	lsrs	r3, r3, #20
 800b5f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f8:	4299      	cmp	r1, r3
 800b5fa:	d119      	bne.n	800b630 <_strtod_l+0x8d0>
 800b5fc:	4b96      	ldr	r3, [pc, #600]	@ (800b858 <_strtod_l+0xaf8>)
 800b5fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b600:	429a      	cmp	r2, r3
 800b602:	d102      	bne.n	800b60a <_strtod_l+0x8aa>
 800b604:	3101      	adds	r1, #1
 800b606:	f43f adca 	beq.w	800b19e <_strtod_l+0x43e>
 800b60a:	4b92      	ldr	r3, [pc, #584]	@ (800b854 <_strtod_l+0xaf4>)
 800b60c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b60e:	401a      	ands	r2, r3
 800b610:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b614:	f04f 0a00 	mov.w	sl, #0
 800b618:	9b08      	ldr	r3, [sp, #32]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1b8      	bne.n	800b590 <_strtod_l+0x830>
 800b61e:	e5c9      	b.n	800b1b4 <_strtod_l+0x454>
 800b620:	f04f 33ff 	mov.w	r3, #4294967295
 800b624:	e7e8      	b.n	800b5f8 <_strtod_l+0x898>
 800b626:	4613      	mov	r3, r2
 800b628:	e7e6      	b.n	800b5f8 <_strtod_l+0x898>
 800b62a:	ea53 030a 	orrs.w	r3, r3, sl
 800b62e:	d0a1      	beq.n	800b574 <_strtod_l+0x814>
 800b630:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b632:	b1db      	cbz	r3, 800b66c <_strtod_l+0x90c>
 800b634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b636:	4213      	tst	r3, r2
 800b638:	d0ee      	beq.n	800b618 <_strtod_l+0x8b8>
 800b63a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b63c:	9a08      	ldr	r2, [sp, #32]
 800b63e:	4650      	mov	r0, sl
 800b640:	4659      	mov	r1, fp
 800b642:	b1bb      	cbz	r3, 800b674 <_strtod_l+0x914>
 800b644:	f7ff fb6e 	bl	800ad24 <sulp>
 800b648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b64c:	ec53 2b10 	vmov	r2, r3, d0
 800b650:	f7f4 fe1c 	bl	800028c <__adddf3>
 800b654:	4682      	mov	sl, r0
 800b656:	468b      	mov	fp, r1
 800b658:	e7de      	b.n	800b618 <_strtod_l+0x8b8>
 800b65a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b65e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b662:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b666:	f04f 3aff 	mov.w	sl, #4294967295
 800b66a:	e7d5      	b.n	800b618 <_strtod_l+0x8b8>
 800b66c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b66e:	ea13 0f0a 	tst.w	r3, sl
 800b672:	e7e1      	b.n	800b638 <_strtod_l+0x8d8>
 800b674:	f7ff fb56 	bl	800ad24 <sulp>
 800b678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b67c:	ec53 2b10 	vmov	r2, r3, d0
 800b680:	f7f4 fe02 	bl	8000288 <__aeabi_dsub>
 800b684:	2200      	movs	r2, #0
 800b686:	2300      	movs	r3, #0
 800b688:	4682      	mov	sl, r0
 800b68a:	468b      	mov	fp, r1
 800b68c:	f7f5 fa1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b690:	2800      	cmp	r0, #0
 800b692:	d0c1      	beq.n	800b618 <_strtod_l+0x8b8>
 800b694:	e619      	b.n	800b2ca <_strtod_l+0x56a>
 800b696:	4641      	mov	r1, r8
 800b698:	4620      	mov	r0, r4
 800b69a:	f7ff facd 	bl	800ac38 <__ratio>
 800b69e:	ec57 6b10 	vmov	r6, r7, d0
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	f7f5 fa20 	bl	8000af0 <__aeabi_dcmple>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d06f      	beq.n	800b794 <_strtod_l+0xa34>
 800b6b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d17a      	bne.n	800b7b0 <_strtod_l+0xa50>
 800b6ba:	f1ba 0f00 	cmp.w	sl, #0
 800b6be:	d158      	bne.n	800b772 <_strtod_l+0xa12>
 800b6c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d15a      	bne.n	800b780 <_strtod_l+0xa20>
 800b6ca:	4b64      	ldr	r3, [pc, #400]	@ (800b85c <_strtod_l+0xafc>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	f7f5 fa03 	bl	8000adc <__aeabi_dcmplt>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d159      	bne.n	800b78e <_strtod_l+0xa2e>
 800b6da:	4630      	mov	r0, r6
 800b6dc:	4639      	mov	r1, r7
 800b6de:	4b60      	ldr	r3, [pc, #384]	@ (800b860 <_strtod_l+0xb00>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f7f4 ff89 	bl	80005f8 <__aeabi_dmul>
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	460f      	mov	r7, r1
 800b6ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b6ee:	9606      	str	r6, [sp, #24]
 800b6f0:	9307      	str	r3, [sp, #28]
 800b6f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6f6:	4d57      	ldr	r5, [pc, #348]	@ (800b854 <_strtod_l+0xaf4>)
 800b6f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6fe:	401d      	ands	r5, r3
 800b700:	4b58      	ldr	r3, [pc, #352]	@ (800b864 <_strtod_l+0xb04>)
 800b702:	429d      	cmp	r5, r3
 800b704:	f040 80b2 	bne.w	800b86c <_strtod_l+0xb0c>
 800b708:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b70a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b70e:	ec4b ab10 	vmov	d0, sl, fp
 800b712:	f7ff f9c9 	bl	800aaa8 <__ulp>
 800b716:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b71a:	ec51 0b10 	vmov	r0, r1, d0
 800b71e:	f7f4 ff6b 	bl	80005f8 <__aeabi_dmul>
 800b722:	4652      	mov	r2, sl
 800b724:	465b      	mov	r3, fp
 800b726:	f7f4 fdb1 	bl	800028c <__adddf3>
 800b72a:	460b      	mov	r3, r1
 800b72c:	4949      	ldr	r1, [pc, #292]	@ (800b854 <_strtod_l+0xaf4>)
 800b72e:	4a4e      	ldr	r2, [pc, #312]	@ (800b868 <_strtod_l+0xb08>)
 800b730:	4019      	ands	r1, r3
 800b732:	4291      	cmp	r1, r2
 800b734:	4682      	mov	sl, r0
 800b736:	d942      	bls.n	800b7be <_strtod_l+0xa5e>
 800b738:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b73a:	4b47      	ldr	r3, [pc, #284]	@ (800b858 <_strtod_l+0xaf8>)
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d103      	bne.n	800b748 <_strtod_l+0x9e8>
 800b740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b742:	3301      	adds	r3, #1
 800b744:	f43f ad2b 	beq.w	800b19e <_strtod_l+0x43e>
 800b748:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b858 <_strtod_l+0xaf8>
 800b74c:	f04f 3aff 	mov.w	sl, #4294967295
 800b750:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b752:	9805      	ldr	r0, [sp, #20]
 800b754:	f7fe fe74 	bl	800a440 <_Bfree>
 800b758:	9805      	ldr	r0, [sp, #20]
 800b75a:	4649      	mov	r1, r9
 800b75c:	f7fe fe70 	bl	800a440 <_Bfree>
 800b760:	9805      	ldr	r0, [sp, #20]
 800b762:	4641      	mov	r1, r8
 800b764:	f7fe fe6c 	bl	800a440 <_Bfree>
 800b768:	9805      	ldr	r0, [sp, #20]
 800b76a:	4621      	mov	r1, r4
 800b76c:	f7fe fe68 	bl	800a440 <_Bfree>
 800b770:	e618      	b.n	800b3a4 <_strtod_l+0x644>
 800b772:	f1ba 0f01 	cmp.w	sl, #1
 800b776:	d103      	bne.n	800b780 <_strtod_l+0xa20>
 800b778:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f43f ada5 	beq.w	800b2ca <_strtod_l+0x56a>
 800b780:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b830 <_strtod_l+0xad0>
 800b784:	4f35      	ldr	r7, [pc, #212]	@ (800b85c <_strtod_l+0xafc>)
 800b786:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b78a:	2600      	movs	r6, #0
 800b78c:	e7b1      	b.n	800b6f2 <_strtod_l+0x992>
 800b78e:	4f34      	ldr	r7, [pc, #208]	@ (800b860 <_strtod_l+0xb00>)
 800b790:	2600      	movs	r6, #0
 800b792:	e7aa      	b.n	800b6ea <_strtod_l+0x98a>
 800b794:	4b32      	ldr	r3, [pc, #200]	@ (800b860 <_strtod_l+0xb00>)
 800b796:	4630      	mov	r0, r6
 800b798:	4639      	mov	r1, r7
 800b79a:	2200      	movs	r2, #0
 800b79c:	f7f4 ff2c 	bl	80005f8 <__aeabi_dmul>
 800b7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	460f      	mov	r7, r1
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d09f      	beq.n	800b6ea <_strtod_l+0x98a>
 800b7aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b7ae:	e7a0      	b.n	800b6f2 <_strtod_l+0x992>
 800b7b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b838 <_strtod_l+0xad8>
 800b7b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7b8:	ec57 6b17 	vmov	r6, r7, d7
 800b7bc:	e799      	b.n	800b6f2 <_strtod_l+0x992>
 800b7be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b7c2:	9b08      	ldr	r3, [sp, #32]
 800b7c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1c1      	bne.n	800b750 <_strtod_l+0x9f0>
 800b7cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b7d0:	0d1b      	lsrs	r3, r3, #20
 800b7d2:	051b      	lsls	r3, r3, #20
 800b7d4:	429d      	cmp	r5, r3
 800b7d6:	d1bb      	bne.n	800b750 <_strtod_l+0x9f0>
 800b7d8:	4630      	mov	r0, r6
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f5 fa6c 	bl	8000cb8 <__aeabi_d2lz>
 800b7e0:	f7f4 fedc 	bl	800059c <__aeabi_l2d>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	f7f4 fd4c 	bl	8000288 <__aeabi_dsub>
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b7f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7fe:	ea46 060a 	orr.w	r6, r6, sl
 800b802:	431e      	orrs	r6, r3
 800b804:	d06f      	beq.n	800b8e6 <_strtod_l+0xb86>
 800b806:	a30e      	add	r3, pc, #56	@ (adr r3, 800b840 <_strtod_l+0xae0>)
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	f7f5 f966 	bl	8000adc <__aeabi_dcmplt>
 800b810:	2800      	cmp	r0, #0
 800b812:	f47f accf 	bne.w	800b1b4 <_strtod_l+0x454>
 800b816:	a30c      	add	r3, pc, #48	@ (adr r3, 800b848 <_strtod_l+0xae8>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b820:	f7f5 f97a 	bl	8000b18 <__aeabi_dcmpgt>
 800b824:	2800      	cmp	r0, #0
 800b826:	d093      	beq.n	800b750 <_strtod_l+0x9f0>
 800b828:	e4c4      	b.n	800b1b4 <_strtod_l+0x454>
 800b82a:	bf00      	nop
 800b82c:	f3af 8000 	nop.w
 800b830:	00000000 	.word	0x00000000
 800b834:	bff00000 	.word	0xbff00000
 800b838:	00000000 	.word	0x00000000
 800b83c:	3ff00000 	.word	0x3ff00000
 800b840:	94a03595 	.word	0x94a03595
 800b844:	3fdfffff 	.word	0x3fdfffff
 800b848:	35afe535 	.word	0x35afe535
 800b84c:	3fe00000 	.word	0x3fe00000
 800b850:	000fffff 	.word	0x000fffff
 800b854:	7ff00000 	.word	0x7ff00000
 800b858:	7fefffff 	.word	0x7fefffff
 800b85c:	3ff00000 	.word	0x3ff00000
 800b860:	3fe00000 	.word	0x3fe00000
 800b864:	7fe00000 	.word	0x7fe00000
 800b868:	7c9fffff 	.word	0x7c9fffff
 800b86c:	9b08      	ldr	r3, [sp, #32]
 800b86e:	b323      	cbz	r3, 800b8ba <_strtod_l+0xb5a>
 800b870:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b874:	d821      	bhi.n	800b8ba <_strtod_l+0xb5a>
 800b876:	a328      	add	r3, pc, #160	@ (adr r3, 800b918 <_strtod_l+0xbb8>)
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	4630      	mov	r0, r6
 800b87e:	4639      	mov	r1, r7
 800b880:	f7f5 f936 	bl	8000af0 <__aeabi_dcmple>
 800b884:	b1a0      	cbz	r0, 800b8b0 <_strtod_l+0xb50>
 800b886:	4639      	mov	r1, r7
 800b888:	4630      	mov	r0, r6
 800b88a:	f7f5 f98d 	bl	8000ba8 <__aeabi_d2uiz>
 800b88e:	2801      	cmp	r0, #1
 800b890:	bf38      	it	cc
 800b892:	2001      	movcc	r0, #1
 800b894:	f7f4 fe36 	bl	8000504 <__aeabi_ui2d>
 800b898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	b9fb      	cbnz	r3, 800b8e0 <_strtod_l+0xb80>
 800b8a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b8a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b8a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b8a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b8ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b8b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b8b6:	1b5b      	subs	r3, r3, r5
 800b8b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b8ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b8c2:	f7ff f8f1 	bl	800aaa8 <__ulp>
 800b8c6:	4650      	mov	r0, sl
 800b8c8:	ec53 2b10 	vmov	r2, r3, d0
 800b8cc:	4659      	mov	r1, fp
 800b8ce:	f7f4 fe93 	bl	80005f8 <__aeabi_dmul>
 800b8d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b8d6:	f7f4 fcd9 	bl	800028c <__adddf3>
 800b8da:	4682      	mov	sl, r0
 800b8dc:	468b      	mov	fp, r1
 800b8de:	e770      	b.n	800b7c2 <_strtod_l+0xa62>
 800b8e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b8e4:	e7e0      	b.n	800b8a8 <_strtod_l+0xb48>
 800b8e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b920 <_strtod_l+0xbc0>)
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	f7f5 f8f6 	bl	8000adc <__aeabi_dcmplt>
 800b8f0:	e798      	b.n	800b824 <_strtod_l+0xac4>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b8f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8fa:	6013      	str	r3, [r2, #0]
 800b8fc:	f7ff ba6d 	b.w	800adda <_strtod_l+0x7a>
 800b900:	2a65      	cmp	r2, #101	@ 0x65
 800b902:	f43f ab66 	beq.w	800afd2 <_strtod_l+0x272>
 800b906:	2a45      	cmp	r2, #69	@ 0x45
 800b908:	f43f ab63 	beq.w	800afd2 <_strtod_l+0x272>
 800b90c:	2301      	movs	r3, #1
 800b90e:	f7ff bb9e 	b.w	800b04e <_strtod_l+0x2ee>
 800b912:	bf00      	nop
 800b914:	f3af 8000 	nop.w
 800b918:	ffc00000 	.word	0xffc00000
 800b91c:	41dfffff 	.word	0x41dfffff
 800b920:	94a03595 	.word	0x94a03595
 800b924:	3fcfffff 	.word	0x3fcfffff

0800b928 <_strtod_r>:
 800b928:	4b01      	ldr	r3, [pc, #4]	@ (800b930 <_strtod_r+0x8>)
 800b92a:	f7ff ba19 	b.w	800ad60 <_strtod_l>
 800b92e:	bf00      	nop
 800b930:	20000068 	.word	0x20000068

0800b934 <_strtol_l.constprop.0>:
 800b934:	2b24      	cmp	r3, #36	@ 0x24
 800b936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b93a:	4686      	mov	lr, r0
 800b93c:	4690      	mov	r8, r2
 800b93e:	d801      	bhi.n	800b944 <_strtol_l.constprop.0+0x10>
 800b940:	2b01      	cmp	r3, #1
 800b942:	d106      	bne.n	800b952 <_strtol_l.constprop.0+0x1e>
 800b944:	f7fd fdba 	bl	80094bc <__errno>
 800b948:	2316      	movs	r3, #22
 800b94a:	6003      	str	r3, [r0, #0]
 800b94c:	2000      	movs	r0, #0
 800b94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b952:	4834      	ldr	r0, [pc, #208]	@ (800ba24 <_strtol_l.constprop.0+0xf0>)
 800b954:	460d      	mov	r5, r1
 800b956:	462a      	mov	r2, r5
 800b958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b95c:	5d06      	ldrb	r6, [r0, r4]
 800b95e:	f016 0608 	ands.w	r6, r6, #8
 800b962:	d1f8      	bne.n	800b956 <_strtol_l.constprop.0+0x22>
 800b964:	2c2d      	cmp	r4, #45	@ 0x2d
 800b966:	d12d      	bne.n	800b9c4 <_strtol_l.constprop.0+0x90>
 800b968:	782c      	ldrb	r4, [r5, #0]
 800b96a:	2601      	movs	r6, #1
 800b96c:	1c95      	adds	r5, r2, #2
 800b96e:	f033 0210 	bics.w	r2, r3, #16
 800b972:	d109      	bne.n	800b988 <_strtol_l.constprop.0+0x54>
 800b974:	2c30      	cmp	r4, #48	@ 0x30
 800b976:	d12a      	bne.n	800b9ce <_strtol_l.constprop.0+0x9a>
 800b978:	782a      	ldrb	r2, [r5, #0]
 800b97a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b97e:	2a58      	cmp	r2, #88	@ 0x58
 800b980:	d125      	bne.n	800b9ce <_strtol_l.constprop.0+0x9a>
 800b982:	786c      	ldrb	r4, [r5, #1]
 800b984:	2310      	movs	r3, #16
 800b986:	3502      	adds	r5, #2
 800b988:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b98c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b990:	2200      	movs	r2, #0
 800b992:	fbbc f9f3 	udiv	r9, ip, r3
 800b996:	4610      	mov	r0, r2
 800b998:	fb03 ca19 	mls	sl, r3, r9, ip
 800b99c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b9a0:	2f09      	cmp	r7, #9
 800b9a2:	d81b      	bhi.n	800b9dc <_strtol_l.constprop.0+0xa8>
 800b9a4:	463c      	mov	r4, r7
 800b9a6:	42a3      	cmp	r3, r4
 800b9a8:	dd27      	ble.n	800b9fa <_strtol_l.constprop.0+0xc6>
 800b9aa:	1c57      	adds	r7, r2, #1
 800b9ac:	d007      	beq.n	800b9be <_strtol_l.constprop.0+0x8a>
 800b9ae:	4581      	cmp	r9, r0
 800b9b0:	d320      	bcc.n	800b9f4 <_strtol_l.constprop.0+0xc0>
 800b9b2:	d101      	bne.n	800b9b8 <_strtol_l.constprop.0+0x84>
 800b9b4:	45a2      	cmp	sl, r4
 800b9b6:	db1d      	blt.n	800b9f4 <_strtol_l.constprop.0+0xc0>
 800b9b8:	fb00 4003 	mla	r0, r0, r3, r4
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9c2:	e7eb      	b.n	800b99c <_strtol_l.constprop.0+0x68>
 800b9c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b9c6:	bf04      	itt	eq
 800b9c8:	782c      	ldrbeq	r4, [r5, #0]
 800b9ca:	1c95      	addeq	r5, r2, #2
 800b9cc:	e7cf      	b.n	800b96e <_strtol_l.constprop.0+0x3a>
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1da      	bne.n	800b988 <_strtol_l.constprop.0+0x54>
 800b9d2:	2c30      	cmp	r4, #48	@ 0x30
 800b9d4:	bf0c      	ite	eq
 800b9d6:	2308      	moveq	r3, #8
 800b9d8:	230a      	movne	r3, #10
 800b9da:	e7d5      	b.n	800b988 <_strtol_l.constprop.0+0x54>
 800b9dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b9e0:	2f19      	cmp	r7, #25
 800b9e2:	d801      	bhi.n	800b9e8 <_strtol_l.constprop.0+0xb4>
 800b9e4:	3c37      	subs	r4, #55	@ 0x37
 800b9e6:	e7de      	b.n	800b9a6 <_strtol_l.constprop.0+0x72>
 800b9e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b9ec:	2f19      	cmp	r7, #25
 800b9ee:	d804      	bhi.n	800b9fa <_strtol_l.constprop.0+0xc6>
 800b9f0:	3c57      	subs	r4, #87	@ 0x57
 800b9f2:	e7d8      	b.n	800b9a6 <_strtol_l.constprop.0+0x72>
 800b9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f8:	e7e1      	b.n	800b9be <_strtol_l.constprop.0+0x8a>
 800b9fa:	1c53      	adds	r3, r2, #1
 800b9fc:	d108      	bne.n	800ba10 <_strtol_l.constprop.0+0xdc>
 800b9fe:	2322      	movs	r3, #34	@ 0x22
 800ba00:	f8ce 3000 	str.w	r3, [lr]
 800ba04:	4660      	mov	r0, ip
 800ba06:	f1b8 0f00 	cmp.w	r8, #0
 800ba0a:	d0a0      	beq.n	800b94e <_strtol_l.constprop.0+0x1a>
 800ba0c:	1e69      	subs	r1, r5, #1
 800ba0e:	e006      	b.n	800ba1e <_strtol_l.constprop.0+0xea>
 800ba10:	b106      	cbz	r6, 800ba14 <_strtol_l.constprop.0+0xe0>
 800ba12:	4240      	negs	r0, r0
 800ba14:	f1b8 0f00 	cmp.w	r8, #0
 800ba18:	d099      	beq.n	800b94e <_strtol_l.constprop.0+0x1a>
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	d1f6      	bne.n	800ba0c <_strtol_l.constprop.0+0xd8>
 800ba1e:	f8c8 1000 	str.w	r1, [r8]
 800ba22:	e794      	b.n	800b94e <_strtol_l.constprop.0+0x1a>
 800ba24:	0800ceb9 	.word	0x0800ceb9

0800ba28 <_strtol_r>:
 800ba28:	f7ff bf84 	b.w	800b934 <_strtol_l.constprop.0>

0800ba2c <__ssputs_r>:
 800ba2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba30:	688e      	ldr	r6, [r1, #8]
 800ba32:	461f      	mov	r7, r3
 800ba34:	42be      	cmp	r6, r7
 800ba36:	680b      	ldr	r3, [r1, #0]
 800ba38:	4682      	mov	sl, r0
 800ba3a:	460c      	mov	r4, r1
 800ba3c:	4690      	mov	r8, r2
 800ba3e:	d82d      	bhi.n	800ba9c <__ssputs_r+0x70>
 800ba40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba48:	d026      	beq.n	800ba98 <__ssputs_r+0x6c>
 800ba4a:	6965      	ldr	r5, [r4, #20]
 800ba4c:	6909      	ldr	r1, [r1, #16]
 800ba4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba52:	eba3 0901 	sub.w	r9, r3, r1
 800ba56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba5a:	1c7b      	adds	r3, r7, #1
 800ba5c:	444b      	add	r3, r9
 800ba5e:	106d      	asrs	r5, r5, #1
 800ba60:	429d      	cmp	r5, r3
 800ba62:	bf38      	it	cc
 800ba64:	461d      	movcc	r5, r3
 800ba66:	0553      	lsls	r3, r2, #21
 800ba68:	d527      	bpl.n	800baba <__ssputs_r+0x8e>
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	f7fe fc1c 	bl	800a2a8 <_malloc_r>
 800ba70:	4606      	mov	r6, r0
 800ba72:	b360      	cbz	r0, 800bace <__ssputs_r+0xa2>
 800ba74:	6921      	ldr	r1, [r4, #16]
 800ba76:	464a      	mov	r2, r9
 800ba78:	f000 fa18 	bl	800beac <memcpy>
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	6126      	str	r6, [r4, #16]
 800ba8a:	6165      	str	r5, [r4, #20]
 800ba8c:	444e      	add	r6, r9
 800ba8e:	eba5 0509 	sub.w	r5, r5, r9
 800ba92:	6026      	str	r6, [r4, #0]
 800ba94:	60a5      	str	r5, [r4, #8]
 800ba96:	463e      	mov	r6, r7
 800ba98:	42be      	cmp	r6, r7
 800ba9a:	d900      	bls.n	800ba9e <__ssputs_r+0x72>
 800ba9c:	463e      	mov	r6, r7
 800ba9e:	6820      	ldr	r0, [r4, #0]
 800baa0:	4632      	mov	r2, r6
 800baa2:	4641      	mov	r1, r8
 800baa4:	f000 f9c6 	bl	800be34 <memmove>
 800baa8:	68a3      	ldr	r3, [r4, #8]
 800baaa:	1b9b      	subs	r3, r3, r6
 800baac:	60a3      	str	r3, [r4, #8]
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	4433      	add	r3, r6
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	2000      	movs	r0, #0
 800bab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baba:	462a      	mov	r2, r5
 800babc:	f000 fd89 	bl	800c5d2 <_realloc_r>
 800bac0:	4606      	mov	r6, r0
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d1e0      	bne.n	800ba88 <__ssputs_r+0x5c>
 800bac6:	6921      	ldr	r1, [r4, #16]
 800bac8:	4650      	mov	r0, sl
 800baca:	f7fe fb79 	bl	800a1c0 <_free_r>
 800bace:	230c      	movs	r3, #12
 800bad0:	f8ca 3000 	str.w	r3, [sl]
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bada:	81a3      	strh	r3, [r4, #12]
 800badc:	f04f 30ff 	mov.w	r0, #4294967295
 800bae0:	e7e9      	b.n	800bab6 <__ssputs_r+0x8a>
	...

0800bae4 <_svfiprintf_r>:
 800bae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae8:	4698      	mov	r8, r3
 800baea:	898b      	ldrh	r3, [r1, #12]
 800baec:	061b      	lsls	r3, r3, #24
 800baee:	b09d      	sub	sp, #116	@ 0x74
 800baf0:	4607      	mov	r7, r0
 800baf2:	460d      	mov	r5, r1
 800baf4:	4614      	mov	r4, r2
 800baf6:	d510      	bpl.n	800bb1a <_svfiprintf_r+0x36>
 800baf8:	690b      	ldr	r3, [r1, #16]
 800bafa:	b973      	cbnz	r3, 800bb1a <_svfiprintf_r+0x36>
 800bafc:	2140      	movs	r1, #64	@ 0x40
 800bafe:	f7fe fbd3 	bl	800a2a8 <_malloc_r>
 800bb02:	6028      	str	r0, [r5, #0]
 800bb04:	6128      	str	r0, [r5, #16]
 800bb06:	b930      	cbnz	r0, 800bb16 <_svfiprintf_r+0x32>
 800bb08:	230c      	movs	r3, #12
 800bb0a:	603b      	str	r3, [r7, #0]
 800bb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb10:	b01d      	add	sp, #116	@ 0x74
 800bb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb16:	2340      	movs	r3, #64	@ 0x40
 800bb18:	616b      	str	r3, [r5, #20]
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb1e:	2320      	movs	r3, #32
 800bb20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb24:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb28:	2330      	movs	r3, #48	@ 0x30
 800bb2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bcc8 <_svfiprintf_r+0x1e4>
 800bb2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb32:	f04f 0901 	mov.w	r9, #1
 800bb36:	4623      	mov	r3, r4
 800bb38:	469a      	mov	sl, r3
 800bb3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb3e:	b10a      	cbz	r2, 800bb44 <_svfiprintf_r+0x60>
 800bb40:	2a25      	cmp	r2, #37	@ 0x25
 800bb42:	d1f9      	bne.n	800bb38 <_svfiprintf_r+0x54>
 800bb44:	ebba 0b04 	subs.w	fp, sl, r4
 800bb48:	d00b      	beq.n	800bb62 <_svfiprintf_r+0x7e>
 800bb4a:	465b      	mov	r3, fp
 800bb4c:	4622      	mov	r2, r4
 800bb4e:	4629      	mov	r1, r5
 800bb50:	4638      	mov	r0, r7
 800bb52:	f7ff ff6b 	bl	800ba2c <__ssputs_r>
 800bb56:	3001      	adds	r0, #1
 800bb58:	f000 80a7 	beq.w	800bcaa <_svfiprintf_r+0x1c6>
 800bb5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb5e:	445a      	add	r2, fp
 800bb60:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb62:	f89a 3000 	ldrb.w	r3, [sl]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f000 809f 	beq.w	800bcaa <_svfiprintf_r+0x1c6>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb76:	f10a 0a01 	add.w	sl, sl, #1
 800bb7a:	9304      	str	r3, [sp, #16]
 800bb7c:	9307      	str	r3, [sp, #28]
 800bb7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb82:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb84:	4654      	mov	r4, sl
 800bb86:	2205      	movs	r2, #5
 800bb88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8c:	484e      	ldr	r0, [pc, #312]	@ (800bcc8 <_svfiprintf_r+0x1e4>)
 800bb8e:	f7f4 fb1f 	bl	80001d0 <memchr>
 800bb92:	9a04      	ldr	r2, [sp, #16]
 800bb94:	b9d8      	cbnz	r0, 800bbce <_svfiprintf_r+0xea>
 800bb96:	06d0      	lsls	r0, r2, #27
 800bb98:	bf44      	itt	mi
 800bb9a:	2320      	movmi	r3, #32
 800bb9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bba0:	0711      	lsls	r1, r2, #28
 800bba2:	bf44      	itt	mi
 800bba4:	232b      	movmi	r3, #43	@ 0x2b
 800bba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbaa:	f89a 3000 	ldrb.w	r3, [sl]
 800bbae:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbb0:	d015      	beq.n	800bbde <_svfiprintf_r+0xfa>
 800bbb2:	9a07      	ldr	r2, [sp, #28]
 800bbb4:	4654      	mov	r4, sl
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	f04f 0c0a 	mov.w	ip, #10
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbc2:	3b30      	subs	r3, #48	@ 0x30
 800bbc4:	2b09      	cmp	r3, #9
 800bbc6:	d94b      	bls.n	800bc60 <_svfiprintf_r+0x17c>
 800bbc8:	b1b0      	cbz	r0, 800bbf8 <_svfiprintf_r+0x114>
 800bbca:	9207      	str	r2, [sp, #28]
 800bbcc:	e014      	b.n	800bbf8 <_svfiprintf_r+0x114>
 800bbce:	eba0 0308 	sub.w	r3, r0, r8
 800bbd2:	fa09 f303 	lsl.w	r3, r9, r3
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	9304      	str	r3, [sp, #16]
 800bbda:	46a2      	mov	sl, r4
 800bbdc:	e7d2      	b.n	800bb84 <_svfiprintf_r+0xa0>
 800bbde:	9b03      	ldr	r3, [sp, #12]
 800bbe0:	1d19      	adds	r1, r3, #4
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	9103      	str	r1, [sp, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	bfbb      	ittet	lt
 800bbea:	425b      	neglt	r3, r3
 800bbec:	f042 0202 	orrlt.w	r2, r2, #2
 800bbf0:	9307      	strge	r3, [sp, #28]
 800bbf2:	9307      	strlt	r3, [sp, #28]
 800bbf4:	bfb8      	it	lt
 800bbf6:	9204      	strlt	r2, [sp, #16]
 800bbf8:	7823      	ldrb	r3, [r4, #0]
 800bbfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbfc:	d10a      	bne.n	800bc14 <_svfiprintf_r+0x130>
 800bbfe:	7863      	ldrb	r3, [r4, #1]
 800bc00:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc02:	d132      	bne.n	800bc6a <_svfiprintf_r+0x186>
 800bc04:	9b03      	ldr	r3, [sp, #12]
 800bc06:	1d1a      	adds	r2, r3, #4
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	9203      	str	r2, [sp, #12]
 800bc0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc10:	3402      	adds	r4, #2
 800bc12:	9305      	str	r3, [sp, #20]
 800bc14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bcd8 <_svfiprintf_r+0x1f4>
 800bc18:	7821      	ldrb	r1, [r4, #0]
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	4650      	mov	r0, sl
 800bc1e:	f7f4 fad7 	bl	80001d0 <memchr>
 800bc22:	b138      	cbz	r0, 800bc34 <_svfiprintf_r+0x150>
 800bc24:	9b04      	ldr	r3, [sp, #16]
 800bc26:	eba0 000a 	sub.w	r0, r0, sl
 800bc2a:	2240      	movs	r2, #64	@ 0x40
 800bc2c:	4082      	lsls	r2, r0
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	3401      	adds	r4, #1
 800bc32:	9304      	str	r3, [sp, #16]
 800bc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc38:	4824      	ldr	r0, [pc, #144]	@ (800bccc <_svfiprintf_r+0x1e8>)
 800bc3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc3e:	2206      	movs	r2, #6
 800bc40:	f7f4 fac6 	bl	80001d0 <memchr>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d036      	beq.n	800bcb6 <_svfiprintf_r+0x1d2>
 800bc48:	4b21      	ldr	r3, [pc, #132]	@ (800bcd0 <_svfiprintf_r+0x1ec>)
 800bc4a:	bb1b      	cbnz	r3, 800bc94 <_svfiprintf_r+0x1b0>
 800bc4c:	9b03      	ldr	r3, [sp, #12]
 800bc4e:	3307      	adds	r3, #7
 800bc50:	f023 0307 	bic.w	r3, r3, #7
 800bc54:	3308      	adds	r3, #8
 800bc56:	9303      	str	r3, [sp, #12]
 800bc58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc5a:	4433      	add	r3, r6
 800bc5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc5e:	e76a      	b.n	800bb36 <_svfiprintf_r+0x52>
 800bc60:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc64:	460c      	mov	r4, r1
 800bc66:	2001      	movs	r0, #1
 800bc68:	e7a8      	b.n	800bbbc <_svfiprintf_r+0xd8>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	3401      	adds	r4, #1
 800bc6e:	9305      	str	r3, [sp, #20]
 800bc70:	4619      	mov	r1, r3
 800bc72:	f04f 0c0a 	mov.w	ip, #10
 800bc76:	4620      	mov	r0, r4
 800bc78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc7c:	3a30      	subs	r2, #48	@ 0x30
 800bc7e:	2a09      	cmp	r2, #9
 800bc80:	d903      	bls.n	800bc8a <_svfiprintf_r+0x1a6>
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d0c6      	beq.n	800bc14 <_svfiprintf_r+0x130>
 800bc86:	9105      	str	r1, [sp, #20]
 800bc88:	e7c4      	b.n	800bc14 <_svfiprintf_r+0x130>
 800bc8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc8e:	4604      	mov	r4, r0
 800bc90:	2301      	movs	r3, #1
 800bc92:	e7f0      	b.n	800bc76 <_svfiprintf_r+0x192>
 800bc94:	ab03      	add	r3, sp, #12
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	462a      	mov	r2, r5
 800bc9a:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd4 <_svfiprintf_r+0x1f0>)
 800bc9c:	a904      	add	r1, sp, #16
 800bc9e:	4638      	mov	r0, r7
 800bca0:	f7fc fcc8 	bl	8008634 <_printf_float>
 800bca4:	1c42      	adds	r2, r0, #1
 800bca6:	4606      	mov	r6, r0
 800bca8:	d1d6      	bne.n	800bc58 <_svfiprintf_r+0x174>
 800bcaa:	89ab      	ldrh	r3, [r5, #12]
 800bcac:	065b      	lsls	r3, r3, #25
 800bcae:	f53f af2d 	bmi.w	800bb0c <_svfiprintf_r+0x28>
 800bcb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcb4:	e72c      	b.n	800bb10 <_svfiprintf_r+0x2c>
 800bcb6:	ab03      	add	r3, sp, #12
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	462a      	mov	r2, r5
 800bcbc:	4b05      	ldr	r3, [pc, #20]	@ (800bcd4 <_svfiprintf_r+0x1f0>)
 800bcbe:	a904      	add	r1, sp, #16
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	f7fc ff4f 	bl	8008b64 <_printf_i>
 800bcc6:	e7ed      	b.n	800bca4 <_svfiprintf_r+0x1c0>
 800bcc8:	0800cfb9 	.word	0x0800cfb9
 800bccc:	0800cfc3 	.word	0x0800cfc3
 800bcd0:	08008635 	.word	0x08008635
 800bcd4:	0800ba2d 	.word	0x0800ba2d
 800bcd8:	0800cfbf 	.word	0x0800cfbf

0800bcdc <__sflush_r>:
 800bcdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce4:	0716      	lsls	r6, r2, #28
 800bce6:	4605      	mov	r5, r0
 800bce8:	460c      	mov	r4, r1
 800bcea:	d454      	bmi.n	800bd96 <__sflush_r+0xba>
 800bcec:	684b      	ldr	r3, [r1, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	dc02      	bgt.n	800bcf8 <__sflush_r+0x1c>
 800bcf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	dd48      	ble.n	800bd8a <__sflush_r+0xae>
 800bcf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcfa:	2e00      	cmp	r6, #0
 800bcfc:	d045      	beq.n	800bd8a <__sflush_r+0xae>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd04:	682f      	ldr	r7, [r5, #0]
 800bd06:	6a21      	ldr	r1, [r4, #32]
 800bd08:	602b      	str	r3, [r5, #0]
 800bd0a:	d030      	beq.n	800bd6e <__sflush_r+0x92>
 800bd0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	0759      	lsls	r1, r3, #29
 800bd12:	d505      	bpl.n	800bd20 <__sflush_r+0x44>
 800bd14:	6863      	ldr	r3, [r4, #4]
 800bd16:	1ad2      	subs	r2, r2, r3
 800bd18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd1a:	b10b      	cbz	r3, 800bd20 <__sflush_r+0x44>
 800bd1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd1e:	1ad2      	subs	r2, r2, r3
 800bd20:	2300      	movs	r3, #0
 800bd22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd24:	6a21      	ldr	r1, [r4, #32]
 800bd26:	4628      	mov	r0, r5
 800bd28:	47b0      	blx	r6
 800bd2a:	1c43      	adds	r3, r0, #1
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	d106      	bne.n	800bd3e <__sflush_r+0x62>
 800bd30:	6829      	ldr	r1, [r5, #0]
 800bd32:	291d      	cmp	r1, #29
 800bd34:	d82b      	bhi.n	800bd8e <__sflush_r+0xb2>
 800bd36:	4a2a      	ldr	r2, [pc, #168]	@ (800bde0 <__sflush_r+0x104>)
 800bd38:	410a      	asrs	r2, r1
 800bd3a:	07d6      	lsls	r6, r2, #31
 800bd3c:	d427      	bmi.n	800bd8e <__sflush_r+0xb2>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	6062      	str	r2, [r4, #4]
 800bd42:	04d9      	lsls	r1, r3, #19
 800bd44:	6922      	ldr	r2, [r4, #16]
 800bd46:	6022      	str	r2, [r4, #0]
 800bd48:	d504      	bpl.n	800bd54 <__sflush_r+0x78>
 800bd4a:	1c42      	adds	r2, r0, #1
 800bd4c:	d101      	bne.n	800bd52 <__sflush_r+0x76>
 800bd4e:	682b      	ldr	r3, [r5, #0]
 800bd50:	b903      	cbnz	r3, 800bd54 <__sflush_r+0x78>
 800bd52:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd56:	602f      	str	r7, [r5, #0]
 800bd58:	b1b9      	cbz	r1, 800bd8a <__sflush_r+0xae>
 800bd5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd5e:	4299      	cmp	r1, r3
 800bd60:	d002      	beq.n	800bd68 <__sflush_r+0x8c>
 800bd62:	4628      	mov	r0, r5
 800bd64:	f7fe fa2c 	bl	800a1c0 <_free_r>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd6c:	e00d      	b.n	800bd8a <__sflush_r+0xae>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	4628      	mov	r0, r5
 800bd72:	47b0      	blx	r6
 800bd74:	4602      	mov	r2, r0
 800bd76:	1c50      	adds	r0, r2, #1
 800bd78:	d1c9      	bne.n	800bd0e <__sflush_r+0x32>
 800bd7a:	682b      	ldr	r3, [r5, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d0c6      	beq.n	800bd0e <__sflush_r+0x32>
 800bd80:	2b1d      	cmp	r3, #29
 800bd82:	d001      	beq.n	800bd88 <__sflush_r+0xac>
 800bd84:	2b16      	cmp	r3, #22
 800bd86:	d11e      	bne.n	800bdc6 <__sflush_r+0xea>
 800bd88:	602f      	str	r7, [r5, #0]
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	e022      	b.n	800bdd4 <__sflush_r+0xf8>
 800bd8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd92:	b21b      	sxth	r3, r3
 800bd94:	e01b      	b.n	800bdce <__sflush_r+0xf2>
 800bd96:	690f      	ldr	r7, [r1, #16]
 800bd98:	2f00      	cmp	r7, #0
 800bd9a:	d0f6      	beq.n	800bd8a <__sflush_r+0xae>
 800bd9c:	0793      	lsls	r3, r2, #30
 800bd9e:	680e      	ldr	r6, [r1, #0]
 800bda0:	bf08      	it	eq
 800bda2:	694b      	ldreq	r3, [r1, #20]
 800bda4:	600f      	str	r7, [r1, #0]
 800bda6:	bf18      	it	ne
 800bda8:	2300      	movne	r3, #0
 800bdaa:	eba6 0807 	sub.w	r8, r6, r7
 800bdae:	608b      	str	r3, [r1, #8]
 800bdb0:	f1b8 0f00 	cmp.w	r8, #0
 800bdb4:	dde9      	ble.n	800bd8a <__sflush_r+0xae>
 800bdb6:	6a21      	ldr	r1, [r4, #32]
 800bdb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdba:	4643      	mov	r3, r8
 800bdbc:	463a      	mov	r2, r7
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	47b0      	blx	r6
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	dc08      	bgt.n	800bdd8 <__sflush_r+0xfc>
 800bdc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdce:	81a3      	strh	r3, [r4, #12]
 800bdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd8:	4407      	add	r7, r0
 800bdda:	eba8 0800 	sub.w	r8, r8, r0
 800bdde:	e7e7      	b.n	800bdb0 <__sflush_r+0xd4>
 800bde0:	dfbffffe 	.word	0xdfbffffe

0800bde4 <_fflush_r>:
 800bde4:	b538      	push	{r3, r4, r5, lr}
 800bde6:	690b      	ldr	r3, [r1, #16]
 800bde8:	4605      	mov	r5, r0
 800bdea:	460c      	mov	r4, r1
 800bdec:	b913      	cbnz	r3, 800bdf4 <_fflush_r+0x10>
 800bdee:	2500      	movs	r5, #0
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	bd38      	pop	{r3, r4, r5, pc}
 800bdf4:	b118      	cbz	r0, 800bdfe <_fflush_r+0x1a>
 800bdf6:	6a03      	ldr	r3, [r0, #32]
 800bdf8:	b90b      	cbnz	r3, 800bdfe <_fflush_r+0x1a>
 800bdfa:	f7fd fa73 	bl	80092e4 <__sinit>
 800bdfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d0f3      	beq.n	800bdee <_fflush_r+0xa>
 800be06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be08:	07d0      	lsls	r0, r2, #31
 800be0a:	d404      	bmi.n	800be16 <_fflush_r+0x32>
 800be0c:	0599      	lsls	r1, r3, #22
 800be0e:	d402      	bmi.n	800be16 <_fflush_r+0x32>
 800be10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be12:	f7fd fb7e 	bl	8009512 <__retarget_lock_acquire_recursive>
 800be16:	4628      	mov	r0, r5
 800be18:	4621      	mov	r1, r4
 800be1a:	f7ff ff5f 	bl	800bcdc <__sflush_r>
 800be1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be20:	07da      	lsls	r2, r3, #31
 800be22:	4605      	mov	r5, r0
 800be24:	d4e4      	bmi.n	800bdf0 <_fflush_r+0xc>
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	059b      	lsls	r3, r3, #22
 800be2a:	d4e1      	bmi.n	800bdf0 <_fflush_r+0xc>
 800be2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be2e:	f7fd fb71 	bl	8009514 <__retarget_lock_release_recursive>
 800be32:	e7dd      	b.n	800bdf0 <_fflush_r+0xc>

0800be34 <memmove>:
 800be34:	4288      	cmp	r0, r1
 800be36:	b510      	push	{r4, lr}
 800be38:	eb01 0402 	add.w	r4, r1, r2
 800be3c:	d902      	bls.n	800be44 <memmove+0x10>
 800be3e:	4284      	cmp	r4, r0
 800be40:	4623      	mov	r3, r4
 800be42:	d807      	bhi.n	800be54 <memmove+0x20>
 800be44:	1e43      	subs	r3, r0, #1
 800be46:	42a1      	cmp	r1, r4
 800be48:	d008      	beq.n	800be5c <memmove+0x28>
 800be4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be52:	e7f8      	b.n	800be46 <memmove+0x12>
 800be54:	4402      	add	r2, r0
 800be56:	4601      	mov	r1, r0
 800be58:	428a      	cmp	r2, r1
 800be5a:	d100      	bne.n	800be5e <memmove+0x2a>
 800be5c:	bd10      	pop	{r4, pc}
 800be5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be66:	e7f7      	b.n	800be58 <memmove+0x24>

0800be68 <strncmp>:
 800be68:	b510      	push	{r4, lr}
 800be6a:	b16a      	cbz	r2, 800be88 <strncmp+0x20>
 800be6c:	3901      	subs	r1, #1
 800be6e:	1884      	adds	r4, r0, r2
 800be70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800be78:	429a      	cmp	r2, r3
 800be7a:	d103      	bne.n	800be84 <strncmp+0x1c>
 800be7c:	42a0      	cmp	r0, r4
 800be7e:	d001      	beq.n	800be84 <strncmp+0x1c>
 800be80:	2a00      	cmp	r2, #0
 800be82:	d1f5      	bne.n	800be70 <strncmp+0x8>
 800be84:	1ad0      	subs	r0, r2, r3
 800be86:	bd10      	pop	{r4, pc}
 800be88:	4610      	mov	r0, r2
 800be8a:	e7fc      	b.n	800be86 <strncmp+0x1e>

0800be8c <_sbrk_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4d06      	ldr	r5, [pc, #24]	@ (800bea8 <_sbrk_r+0x1c>)
 800be90:	2300      	movs	r3, #0
 800be92:	4604      	mov	r4, r0
 800be94:	4608      	mov	r0, r1
 800be96:	602b      	str	r3, [r5, #0]
 800be98:	f7f5 ffae 	bl	8001df8 <_sbrk>
 800be9c:	1c43      	adds	r3, r0, #1
 800be9e:	d102      	bne.n	800bea6 <_sbrk_r+0x1a>
 800bea0:	682b      	ldr	r3, [r5, #0]
 800bea2:	b103      	cbz	r3, 800bea6 <_sbrk_r+0x1a>
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	bd38      	pop	{r3, r4, r5, pc}
 800bea8:	20000554 	.word	0x20000554

0800beac <memcpy>:
 800beac:	440a      	add	r2, r1
 800beae:	4291      	cmp	r1, r2
 800beb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800beb4:	d100      	bne.n	800beb8 <memcpy+0xc>
 800beb6:	4770      	bx	lr
 800beb8:	b510      	push	{r4, lr}
 800beba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bec2:	4291      	cmp	r1, r2
 800bec4:	d1f9      	bne.n	800beba <memcpy+0xe>
 800bec6:	bd10      	pop	{r4, pc}

0800bec8 <nan>:
 800bec8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bed0 <nan+0x8>
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	00000000 	.word	0x00000000
 800bed4:	7ff80000 	.word	0x7ff80000

0800bed8 <__assert_func>:
 800bed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800beda:	4614      	mov	r4, r2
 800bedc:	461a      	mov	r2, r3
 800bede:	4b09      	ldr	r3, [pc, #36]	@ (800bf04 <__assert_func+0x2c>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4605      	mov	r5, r0
 800bee4:	68d8      	ldr	r0, [r3, #12]
 800bee6:	b954      	cbnz	r4, 800befe <__assert_func+0x26>
 800bee8:	4b07      	ldr	r3, [pc, #28]	@ (800bf08 <__assert_func+0x30>)
 800beea:	461c      	mov	r4, r3
 800beec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bef0:	9100      	str	r1, [sp, #0]
 800bef2:	462b      	mov	r3, r5
 800bef4:	4905      	ldr	r1, [pc, #20]	@ (800bf0c <__assert_func+0x34>)
 800bef6:	f000 fba7 	bl	800c648 <fiprintf>
 800befa:	f000 fbb7 	bl	800c66c <abort>
 800befe:	4b04      	ldr	r3, [pc, #16]	@ (800bf10 <__assert_func+0x38>)
 800bf00:	e7f4      	b.n	800beec <__assert_func+0x14>
 800bf02:	bf00      	nop
 800bf04:	20000018 	.word	0x20000018
 800bf08:	0800d00d 	.word	0x0800d00d
 800bf0c:	0800cfdf 	.word	0x0800cfdf
 800bf10:	0800cfd2 	.word	0x0800cfd2

0800bf14 <_calloc_r>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	fba1 5402 	umull	r5, r4, r1, r2
 800bf1a:	b93c      	cbnz	r4, 800bf2c <_calloc_r+0x18>
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	f7fe f9c3 	bl	800a2a8 <_malloc_r>
 800bf22:	4606      	mov	r6, r0
 800bf24:	b928      	cbnz	r0, 800bf32 <_calloc_r+0x1e>
 800bf26:	2600      	movs	r6, #0
 800bf28:	4630      	mov	r0, r6
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
 800bf2c:	220c      	movs	r2, #12
 800bf2e:	6002      	str	r2, [r0, #0]
 800bf30:	e7f9      	b.n	800bf26 <_calloc_r+0x12>
 800bf32:	462a      	mov	r2, r5
 800bf34:	4621      	mov	r1, r4
 800bf36:	f7fd fa6e 	bl	8009416 <memset>
 800bf3a:	e7f5      	b.n	800bf28 <_calloc_r+0x14>

0800bf3c <rshift>:
 800bf3c:	6903      	ldr	r3, [r0, #16]
 800bf3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf46:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bf4a:	f100 0414 	add.w	r4, r0, #20
 800bf4e:	dd45      	ble.n	800bfdc <rshift+0xa0>
 800bf50:	f011 011f 	ands.w	r1, r1, #31
 800bf54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf5c:	d10c      	bne.n	800bf78 <rshift+0x3c>
 800bf5e:	f100 0710 	add.w	r7, r0, #16
 800bf62:	4629      	mov	r1, r5
 800bf64:	42b1      	cmp	r1, r6
 800bf66:	d334      	bcc.n	800bfd2 <rshift+0x96>
 800bf68:	1a9b      	subs	r3, r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	1eea      	subs	r2, r5, #3
 800bf6e:	4296      	cmp	r6, r2
 800bf70:	bf38      	it	cc
 800bf72:	2300      	movcc	r3, #0
 800bf74:	4423      	add	r3, r4
 800bf76:	e015      	b.n	800bfa4 <rshift+0x68>
 800bf78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf7c:	f1c1 0820 	rsb	r8, r1, #32
 800bf80:	40cf      	lsrs	r7, r1
 800bf82:	f105 0e04 	add.w	lr, r5, #4
 800bf86:	46a1      	mov	r9, r4
 800bf88:	4576      	cmp	r6, lr
 800bf8a:	46f4      	mov	ip, lr
 800bf8c:	d815      	bhi.n	800bfba <rshift+0x7e>
 800bf8e:	1a9a      	subs	r2, r3, r2
 800bf90:	0092      	lsls	r2, r2, #2
 800bf92:	3a04      	subs	r2, #4
 800bf94:	3501      	adds	r5, #1
 800bf96:	42ae      	cmp	r6, r5
 800bf98:	bf38      	it	cc
 800bf9a:	2200      	movcc	r2, #0
 800bf9c:	18a3      	adds	r3, r4, r2
 800bf9e:	50a7      	str	r7, [r4, r2]
 800bfa0:	b107      	cbz	r7, 800bfa4 <rshift+0x68>
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	1b1a      	subs	r2, r3, r4
 800bfa6:	42a3      	cmp	r3, r4
 800bfa8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bfac:	bf08      	it	eq
 800bfae:	2300      	moveq	r3, #0
 800bfb0:	6102      	str	r2, [r0, #16]
 800bfb2:	bf08      	it	eq
 800bfb4:	6143      	streq	r3, [r0, #20]
 800bfb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfba:	f8dc c000 	ldr.w	ip, [ip]
 800bfbe:	fa0c fc08 	lsl.w	ip, ip, r8
 800bfc2:	ea4c 0707 	orr.w	r7, ip, r7
 800bfc6:	f849 7b04 	str.w	r7, [r9], #4
 800bfca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bfce:	40cf      	lsrs	r7, r1
 800bfd0:	e7da      	b.n	800bf88 <rshift+0x4c>
 800bfd2:	f851 cb04 	ldr.w	ip, [r1], #4
 800bfd6:	f847 cf04 	str.w	ip, [r7, #4]!
 800bfda:	e7c3      	b.n	800bf64 <rshift+0x28>
 800bfdc:	4623      	mov	r3, r4
 800bfde:	e7e1      	b.n	800bfa4 <rshift+0x68>

0800bfe0 <__hexdig_fun>:
 800bfe0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bfe4:	2b09      	cmp	r3, #9
 800bfe6:	d802      	bhi.n	800bfee <__hexdig_fun+0xe>
 800bfe8:	3820      	subs	r0, #32
 800bfea:	b2c0      	uxtb	r0, r0
 800bfec:	4770      	bx	lr
 800bfee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bff2:	2b05      	cmp	r3, #5
 800bff4:	d801      	bhi.n	800bffa <__hexdig_fun+0x1a>
 800bff6:	3847      	subs	r0, #71	@ 0x47
 800bff8:	e7f7      	b.n	800bfea <__hexdig_fun+0xa>
 800bffa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bffe:	2b05      	cmp	r3, #5
 800c000:	d801      	bhi.n	800c006 <__hexdig_fun+0x26>
 800c002:	3827      	subs	r0, #39	@ 0x27
 800c004:	e7f1      	b.n	800bfea <__hexdig_fun+0xa>
 800c006:	2000      	movs	r0, #0
 800c008:	4770      	bx	lr
	...

0800c00c <__gethex>:
 800c00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	b085      	sub	sp, #20
 800c012:	468a      	mov	sl, r1
 800c014:	9302      	str	r3, [sp, #8]
 800c016:	680b      	ldr	r3, [r1, #0]
 800c018:	9001      	str	r0, [sp, #4]
 800c01a:	4690      	mov	r8, r2
 800c01c:	1c9c      	adds	r4, r3, #2
 800c01e:	46a1      	mov	r9, r4
 800c020:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c024:	2830      	cmp	r0, #48	@ 0x30
 800c026:	d0fa      	beq.n	800c01e <__gethex+0x12>
 800c028:	eba9 0303 	sub.w	r3, r9, r3
 800c02c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c030:	f7ff ffd6 	bl	800bfe0 <__hexdig_fun>
 800c034:	4605      	mov	r5, r0
 800c036:	2800      	cmp	r0, #0
 800c038:	d168      	bne.n	800c10c <__gethex+0x100>
 800c03a:	49a0      	ldr	r1, [pc, #640]	@ (800c2bc <__gethex+0x2b0>)
 800c03c:	2201      	movs	r2, #1
 800c03e:	4648      	mov	r0, r9
 800c040:	f7ff ff12 	bl	800be68 <strncmp>
 800c044:	4607      	mov	r7, r0
 800c046:	2800      	cmp	r0, #0
 800c048:	d167      	bne.n	800c11a <__gethex+0x10e>
 800c04a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c04e:	4626      	mov	r6, r4
 800c050:	f7ff ffc6 	bl	800bfe0 <__hexdig_fun>
 800c054:	2800      	cmp	r0, #0
 800c056:	d062      	beq.n	800c11e <__gethex+0x112>
 800c058:	4623      	mov	r3, r4
 800c05a:	7818      	ldrb	r0, [r3, #0]
 800c05c:	2830      	cmp	r0, #48	@ 0x30
 800c05e:	4699      	mov	r9, r3
 800c060:	f103 0301 	add.w	r3, r3, #1
 800c064:	d0f9      	beq.n	800c05a <__gethex+0x4e>
 800c066:	f7ff ffbb 	bl	800bfe0 <__hexdig_fun>
 800c06a:	fab0 f580 	clz	r5, r0
 800c06e:	096d      	lsrs	r5, r5, #5
 800c070:	f04f 0b01 	mov.w	fp, #1
 800c074:	464a      	mov	r2, r9
 800c076:	4616      	mov	r6, r2
 800c078:	3201      	adds	r2, #1
 800c07a:	7830      	ldrb	r0, [r6, #0]
 800c07c:	f7ff ffb0 	bl	800bfe0 <__hexdig_fun>
 800c080:	2800      	cmp	r0, #0
 800c082:	d1f8      	bne.n	800c076 <__gethex+0x6a>
 800c084:	498d      	ldr	r1, [pc, #564]	@ (800c2bc <__gethex+0x2b0>)
 800c086:	2201      	movs	r2, #1
 800c088:	4630      	mov	r0, r6
 800c08a:	f7ff feed 	bl	800be68 <strncmp>
 800c08e:	2800      	cmp	r0, #0
 800c090:	d13f      	bne.n	800c112 <__gethex+0x106>
 800c092:	b944      	cbnz	r4, 800c0a6 <__gethex+0x9a>
 800c094:	1c74      	adds	r4, r6, #1
 800c096:	4622      	mov	r2, r4
 800c098:	4616      	mov	r6, r2
 800c09a:	3201      	adds	r2, #1
 800c09c:	7830      	ldrb	r0, [r6, #0]
 800c09e:	f7ff ff9f 	bl	800bfe0 <__hexdig_fun>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d1f8      	bne.n	800c098 <__gethex+0x8c>
 800c0a6:	1ba4      	subs	r4, r4, r6
 800c0a8:	00a7      	lsls	r7, r4, #2
 800c0aa:	7833      	ldrb	r3, [r6, #0]
 800c0ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c0b0:	2b50      	cmp	r3, #80	@ 0x50
 800c0b2:	d13e      	bne.n	800c132 <__gethex+0x126>
 800c0b4:	7873      	ldrb	r3, [r6, #1]
 800c0b6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c0b8:	d033      	beq.n	800c122 <__gethex+0x116>
 800c0ba:	2b2d      	cmp	r3, #45	@ 0x2d
 800c0bc:	d034      	beq.n	800c128 <__gethex+0x11c>
 800c0be:	1c71      	adds	r1, r6, #1
 800c0c0:	2400      	movs	r4, #0
 800c0c2:	7808      	ldrb	r0, [r1, #0]
 800c0c4:	f7ff ff8c 	bl	800bfe0 <__hexdig_fun>
 800c0c8:	1e43      	subs	r3, r0, #1
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	2b18      	cmp	r3, #24
 800c0ce:	d830      	bhi.n	800c132 <__gethex+0x126>
 800c0d0:	f1a0 0210 	sub.w	r2, r0, #16
 800c0d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c0d8:	f7ff ff82 	bl	800bfe0 <__hexdig_fun>
 800c0dc:	f100 3cff 	add.w	ip, r0, #4294967295
 800c0e0:	fa5f fc8c 	uxtb.w	ip, ip
 800c0e4:	f1bc 0f18 	cmp.w	ip, #24
 800c0e8:	f04f 030a 	mov.w	r3, #10
 800c0ec:	d91e      	bls.n	800c12c <__gethex+0x120>
 800c0ee:	b104      	cbz	r4, 800c0f2 <__gethex+0xe6>
 800c0f0:	4252      	negs	r2, r2
 800c0f2:	4417      	add	r7, r2
 800c0f4:	f8ca 1000 	str.w	r1, [sl]
 800c0f8:	b1ed      	cbz	r5, 800c136 <__gethex+0x12a>
 800c0fa:	f1bb 0f00 	cmp.w	fp, #0
 800c0fe:	bf0c      	ite	eq
 800c100:	2506      	moveq	r5, #6
 800c102:	2500      	movne	r5, #0
 800c104:	4628      	mov	r0, r5
 800c106:	b005      	add	sp, #20
 800c108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10c:	2500      	movs	r5, #0
 800c10e:	462c      	mov	r4, r5
 800c110:	e7b0      	b.n	800c074 <__gethex+0x68>
 800c112:	2c00      	cmp	r4, #0
 800c114:	d1c7      	bne.n	800c0a6 <__gethex+0x9a>
 800c116:	4627      	mov	r7, r4
 800c118:	e7c7      	b.n	800c0aa <__gethex+0x9e>
 800c11a:	464e      	mov	r6, r9
 800c11c:	462f      	mov	r7, r5
 800c11e:	2501      	movs	r5, #1
 800c120:	e7c3      	b.n	800c0aa <__gethex+0x9e>
 800c122:	2400      	movs	r4, #0
 800c124:	1cb1      	adds	r1, r6, #2
 800c126:	e7cc      	b.n	800c0c2 <__gethex+0xb6>
 800c128:	2401      	movs	r4, #1
 800c12a:	e7fb      	b.n	800c124 <__gethex+0x118>
 800c12c:	fb03 0002 	mla	r0, r3, r2, r0
 800c130:	e7ce      	b.n	800c0d0 <__gethex+0xc4>
 800c132:	4631      	mov	r1, r6
 800c134:	e7de      	b.n	800c0f4 <__gethex+0xe8>
 800c136:	eba6 0309 	sub.w	r3, r6, r9
 800c13a:	3b01      	subs	r3, #1
 800c13c:	4629      	mov	r1, r5
 800c13e:	2b07      	cmp	r3, #7
 800c140:	dc0a      	bgt.n	800c158 <__gethex+0x14c>
 800c142:	9801      	ldr	r0, [sp, #4]
 800c144:	f7fe f93c 	bl	800a3c0 <_Balloc>
 800c148:	4604      	mov	r4, r0
 800c14a:	b940      	cbnz	r0, 800c15e <__gethex+0x152>
 800c14c:	4b5c      	ldr	r3, [pc, #368]	@ (800c2c0 <__gethex+0x2b4>)
 800c14e:	4602      	mov	r2, r0
 800c150:	21e4      	movs	r1, #228	@ 0xe4
 800c152:	485c      	ldr	r0, [pc, #368]	@ (800c2c4 <__gethex+0x2b8>)
 800c154:	f7ff fec0 	bl	800bed8 <__assert_func>
 800c158:	3101      	adds	r1, #1
 800c15a:	105b      	asrs	r3, r3, #1
 800c15c:	e7ef      	b.n	800c13e <__gethex+0x132>
 800c15e:	f100 0a14 	add.w	sl, r0, #20
 800c162:	2300      	movs	r3, #0
 800c164:	4655      	mov	r5, sl
 800c166:	469b      	mov	fp, r3
 800c168:	45b1      	cmp	r9, r6
 800c16a:	d337      	bcc.n	800c1dc <__gethex+0x1d0>
 800c16c:	f845 bb04 	str.w	fp, [r5], #4
 800c170:	eba5 050a 	sub.w	r5, r5, sl
 800c174:	10ad      	asrs	r5, r5, #2
 800c176:	6125      	str	r5, [r4, #16]
 800c178:	4658      	mov	r0, fp
 800c17a:	f7fe fa13 	bl	800a5a4 <__hi0bits>
 800c17e:	016d      	lsls	r5, r5, #5
 800c180:	f8d8 6000 	ldr.w	r6, [r8]
 800c184:	1a2d      	subs	r5, r5, r0
 800c186:	42b5      	cmp	r5, r6
 800c188:	dd54      	ble.n	800c234 <__gethex+0x228>
 800c18a:	1bad      	subs	r5, r5, r6
 800c18c:	4629      	mov	r1, r5
 800c18e:	4620      	mov	r0, r4
 800c190:	f7fe fda7 	bl	800ace2 <__any_on>
 800c194:	4681      	mov	r9, r0
 800c196:	b178      	cbz	r0, 800c1b8 <__gethex+0x1ac>
 800c198:	1e6b      	subs	r3, r5, #1
 800c19a:	1159      	asrs	r1, r3, #5
 800c19c:	f003 021f 	and.w	r2, r3, #31
 800c1a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c1a4:	f04f 0901 	mov.w	r9, #1
 800c1a8:	fa09 f202 	lsl.w	r2, r9, r2
 800c1ac:	420a      	tst	r2, r1
 800c1ae:	d003      	beq.n	800c1b8 <__gethex+0x1ac>
 800c1b0:	454b      	cmp	r3, r9
 800c1b2:	dc36      	bgt.n	800c222 <__gethex+0x216>
 800c1b4:	f04f 0902 	mov.w	r9, #2
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f7ff febe 	bl	800bf3c <rshift>
 800c1c0:	442f      	add	r7, r5
 800c1c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1c6:	42bb      	cmp	r3, r7
 800c1c8:	da42      	bge.n	800c250 <__gethex+0x244>
 800c1ca:	9801      	ldr	r0, [sp, #4]
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	f7fe f937 	bl	800a440 <_Bfree>
 800c1d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	25a3      	movs	r5, #163	@ 0xa3
 800c1da:	e793      	b.n	800c104 <__gethex+0xf8>
 800c1dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c1e0:	2a2e      	cmp	r2, #46	@ 0x2e
 800c1e2:	d012      	beq.n	800c20a <__gethex+0x1fe>
 800c1e4:	2b20      	cmp	r3, #32
 800c1e6:	d104      	bne.n	800c1f2 <__gethex+0x1e6>
 800c1e8:	f845 bb04 	str.w	fp, [r5], #4
 800c1ec:	f04f 0b00 	mov.w	fp, #0
 800c1f0:	465b      	mov	r3, fp
 800c1f2:	7830      	ldrb	r0, [r6, #0]
 800c1f4:	9303      	str	r3, [sp, #12]
 800c1f6:	f7ff fef3 	bl	800bfe0 <__hexdig_fun>
 800c1fa:	9b03      	ldr	r3, [sp, #12]
 800c1fc:	f000 000f 	and.w	r0, r0, #15
 800c200:	4098      	lsls	r0, r3
 800c202:	ea4b 0b00 	orr.w	fp, fp, r0
 800c206:	3304      	adds	r3, #4
 800c208:	e7ae      	b.n	800c168 <__gethex+0x15c>
 800c20a:	45b1      	cmp	r9, r6
 800c20c:	d8ea      	bhi.n	800c1e4 <__gethex+0x1d8>
 800c20e:	492b      	ldr	r1, [pc, #172]	@ (800c2bc <__gethex+0x2b0>)
 800c210:	9303      	str	r3, [sp, #12]
 800c212:	2201      	movs	r2, #1
 800c214:	4630      	mov	r0, r6
 800c216:	f7ff fe27 	bl	800be68 <strncmp>
 800c21a:	9b03      	ldr	r3, [sp, #12]
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d1e1      	bne.n	800c1e4 <__gethex+0x1d8>
 800c220:	e7a2      	b.n	800c168 <__gethex+0x15c>
 800c222:	1ea9      	subs	r1, r5, #2
 800c224:	4620      	mov	r0, r4
 800c226:	f7fe fd5c 	bl	800ace2 <__any_on>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d0c2      	beq.n	800c1b4 <__gethex+0x1a8>
 800c22e:	f04f 0903 	mov.w	r9, #3
 800c232:	e7c1      	b.n	800c1b8 <__gethex+0x1ac>
 800c234:	da09      	bge.n	800c24a <__gethex+0x23e>
 800c236:	1b75      	subs	r5, r6, r5
 800c238:	4621      	mov	r1, r4
 800c23a:	9801      	ldr	r0, [sp, #4]
 800c23c:	462a      	mov	r2, r5
 800c23e:	f7fe fb17 	bl	800a870 <__lshift>
 800c242:	1b7f      	subs	r7, r7, r5
 800c244:	4604      	mov	r4, r0
 800c246:	f100 0a14 	add.w	sl, r0, #20
 800c24a:	f04f 0900 	mov.w	r9, #0
 800c24e:	e7b8      	b.n	800c1c2 <__gethex+0x1b6>
 800c250:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c254:	42bd      	cmp	r5, r7
 800c256:	dd6f      	ble.n	800c338 <__gethex+0x32c>
 800c258:	1bed      	subs	r5, r5, r7
 800c25a:	42ae      	cmp	r6, r5
 800c25c:	dc34      	bgt.n	800c2c8 <__gethex+0x2bc>
 800c25e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c262:	2b02      	cmp	r3, #2
 800c264:	d022      	beq.n	800c2ac <__gethex+0x2a0>
 800c266:	2b03      	cmp	r3, #3
 800c268:	d024      	beq.n	800c2b4 <__gethex+0x2a8>
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d115      	bne.n	800c29a <__gethex+0x28e>
 800c26e:	42ae      	cmp	r6, r5
 800c270:	d113      	bne.n	800c29a <__gethex+0x28e>
 800c272:	2e01      	cmp	r6, #1
 800c274:	d10b      	bne.n	800c28e <__gethex+0x282>
 800c276:	9a02      	ldr	r2, [sp, #8]
 800c278:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c27c:	6013      	str	r3, [r2, #0]
 800c27e:	2301      	movs	r3, #1
 800c280:	6123      	str	r3, [r4, #16]
 800c282:	f8ca 3000 	str.w	r3, [sl]
 800c286:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c288:	2562      	movs	r5, #98	@ 0x62
 800c28a:	601c      	str	r4, [r3, #0]
 800c28c:	e73a      	b.n	800c104 <__gethex+0xf8>
 800c28e:	1e71      	subs	r1, r6, #1
 800c290:	4620      	mov	r0, r4
 800c292:	f7fe fd26 	bl	800ace2 <__any_on>
 800c296:	2800      	cmp	r0, #0
 800c298:	d1ed      	bne.n	800c276 <__gethex+0x26a>
 800c29a:	9801      	ldr	r0, [sp, #4]
 800c29c:	4621      	mov	r1, r4
 800c29e:	f7fe f8cf 	bl	800a440 <_Bfree>
 800c2a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	6013      	str	r3, [r2, #0]
 800c2a8:	2550      	movs	r5, #80	@ 0x50
 800c2aa:	e72b      	b.n	800c104 <__gethex+0xf8>
 800c2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1f3      	bne.n	800c29a <__gethex+0x28e>
 800c2b2:	e7e0      	b.n	800c276 <__gethex+0x26a>
 800c2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1dd      	bne.n	800c276 <__gethex+0x26a>
 800c2ba:	e7ee      	b.n	800c29a <__gethex+0x28e>
 800c2bc:	0800ce60 	.word	0x0800ce60
 800c2c0:	0800ccf9 	.word	0x0800ccf9
 800c2c4:	0800d00e 	.word	0x0800d00e
 800c2c8:	1e6f      	subs	r7, r5, #1
 800c2ca:	f1b9 0f00 	cmp.w	r9, #0
 800c2ce:	d130      	bne.n	800c332 <__gethex+0x326>
 800c2d0:	b127      	cbz	r7, 800c2dc <__gethex+0x2d0>
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f7fe fd04 	bl	800ace2 <__any_on>
 800c2da:	4681      	mov	r9, r0
 800c2dc:	117a      	asrs	r2, r7, #5
 800c2de:	2301      	movs	r3, #1
 800c2e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c2e4:	f007 071f 	and.w	r7, r7, #31
 800c2e8:	40bb      	lsls	r3, r7
 800c2ea:	4213      	tst	r3, r2
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	bf18      	it	ne
 800c2f2:	f049 0902 	orrne.w	r9, r9, #2
 800c2f6:	f7ff fe21 	bl	800bf3c <rshift>
 800c2fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c2fe:	1b76      	subs	r6, r6, r5
 800c300:	2502      	movs	r5, #2
 800c302:	f1b9 0f00 	cmp.w	r9, #0
 800c306:	d047      	beq.n	800c398 <__gethex+0x38c>
 800c308:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d015      	beq.n	800c33c <__gethex+0x330>
 800c310:	2b03      	cmp	r3, #3
 800c312:	d017      	beq.n	800c344 <__gethex+0x338>
 800c314:	2b01      	cmp	r3, #1
 800c316:	d109      	bne.n	800c32c <__gethex+0x320>
 800c318:	f019 0f02 	tst.w	r9, #2
 800c31c:	d006      	beq.n	800c32c <__gethex+0x320>
 800c31e:	f8da 3000 	ldr.w	r3, [sl]
 800c322:	ea49 0903 	orr.w	r9, r9, r3
 800c326:	f019 0f01 	tst.w	r9, #1
 800c32a:	d10e      	bne.n	800c34a <__gethex+0x33e>
 800c32c:	f045 0510 	orr.w	r5, r5, #16
 800c330:	e032      	b.n	800c398 <__gethex+0x38c>
 800c332:	f04f 0901 	mov.w	r9, #1
 800c336:	e7d1      	b.n	800c2dc <__gethex+0x2d0>
 800c338:	2501      	movs	r5, #1
 800c33a:	e7e2      	b.n	800c302 <__gethex+0x2f6>
 800c33c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c33e:	f1c3 0301 	rsb	r3, r3, #1
 800c342:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c346:	2b00      	cmp	r3, #0
 800c348:	d0f0      	beq.n	800c32c <__gethex+0x320>
 800c34a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c34e:	f104 0314 	add.w	r3, r4, #20
 800c352:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c356:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c35a:	f04f 0c00 	mov.w	ip, #0
 800c35e:	4618      	mov	r0, r3
 800c360:	f853 2b04 	ldr.w	r2, [r3], #4
 800c364:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c368:	d01b      	beq.n	800c3a2 <__gethex+0x396>
 800c36a:	3201      	adds	r2, #1
 800c36c:	6002      	str	r2, [r0, #0]
 800c36e:	2d02      	cmp	r5, #2
 800c370:	f104 0314 	add.w	r3, r4, #20
 800c374:	d13c      	bne.n	800c3f0 <__gethex+0x3e4>
 800c376:	f8d8 2000 	ldr.w	r2, [r8]
 800c37a:	3a01      	subs	r2, #1
 800c37c:	42b2      	cmp	r2, r6
 800c37e:	d109      	bne.n	800c394 <__gethex+0x388>
 800c380:	1171      	asrs	r1, r6, #5
 800c382:	2201      	movs	r2, #1
 800c384:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c388:	f006 061f 	and.w	r6, r6, #31
 800c38c:	fa02 f606 	lsl.w	r6, r2, r6
 800c390:	421e      	tst	r6, r3
 800c392:	d13a      	bne.n	800c40a <__gethex+0x3fe>
 800c394:	f045 0520 	orr.w	r5, r5, #32
 800c398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c39a:	601c      	str	r4, [r3, #0]
 800c39c:	9b02      	ldr	r3, [sp, #8]
 800c39e:	601f      	str	r7, [r3, #0]
 800c3a0:	e6b0      	b.n	800c104 <__gethex+0xf8>
 800c3a2:	4299      	cmp	r1, r3
 800c3a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c3a8:	d8d9      	bhi.n	800c35e <__gethex+0x352>
 800c3aa:	68a3      	ldr	r3, [r4, #8]
 800c3ac:	459b      	cmp	fp, r3
 800c3ae:	db17      	blt.n	800c3e0 <__gethex+0x3d4>
 800c3b0:	6861      	ldr	r1, [r4, #4]
 800c3b2:	9801      	ldr	r0, [sp, #4]
 800c3b4:	3101      	adds	r1, #1
 800c3b6:	f7fe f803 	bl	800a3c0 <_Balloc>
 800c3ba:	4681      	mov	r9, r0
 800c3bc:	b918      	cbnz	r0, 800c3c6 <__gethex+0x3ba>
 800c3be:	4b1a      	ldr	r3, [pc, #104]	@ (800c428 <__gethex+0x41c>)
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	2184      	movs	r1, #132	@ 0x84
 800c3c4:	e6c5      	b.n	800c152 <__gethex+0x146>
 800c3c6:	6922      	ldr	r2, [r4, #16]
 800c3c8:	3202      	adds	r2, #2
 800c3ca:	f104 010c 	add.w	r1, r4, #12
 800c3ce:	0092      	lsls	r2, r2, #2
 800c3d0:	300c      	adds	r0, #12
 800c3d2:	f7ff fd6b 	bl	800beac <memcpy>
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	9801      	ldr	r0, [sp, #4]
 800c3da:	f7fe f831 	bl	800a440 <_Bfree>
 800c3de:	464c      	mov	r4, r9
 800c3e0:	6923      	ldr	r3, [r4, #16]
 800c3e2:	1c5a      	adds	r2, r3, #1
 800c3e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c3e8:	6122      	str	r2, [r4, #16]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	615a      	str	r2, [r3, #20]
 800c3ee:	e7be      	b.n	800c36e <__gethex+0x362>
 800c3f0:	6922      	ldr	r2, [r4, #16]
 800c3f2:	455a      	cmp	r2, fp
 800c3f4:	dd0b      	ble.n	800c40e <__gethex+0x402>
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f7ff fd9f 	bl	800bf3c <rshift>
 800c3fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c402:	3701      	adds	r7, #1
 800c404:	42bb      	cmp	r3, r7
 800c406:	f6ff aee0 	blt.w	800c1ca <__gethex+0x1be>
 800c40a:	2501      	movs	r5, #1
 800c40c:	e7c2      	b.n	800c394 <__gethex+0x388>
 800c40e:	f016 061f 	ands.w	r6, r6, #31
 800c412:	d0fa      	beq.n	800c40a <__gethex+0x3fe>
 800c414:	4453      	add	r3, sl
 800c416:	f1c6 0620 	rsb	r6, r6, #32
 800c41a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c41e:	f7fe f8c1 	bl	800a5a4 <__hi0bits>
 800c422:	42b0      	cmp	r0, r6
 800c424:	dbe7      	blt.n	800c3f6 <__gethex+0x3ea>
 800c426:	e7f0      	b.n	800c40a <__gethex+0x3fe>
 800c428:	0800ccf9 	.word	0x0800ccf9

0800c42c <L_shift>:
 800c42c:	f1c2 0208 	rsb	r2, r2, #8
 800c430:	0092      	lsls	r2, r2, #2
 800c432:	b570      	push	{r4, r5, r6, lr}
 800c434:	f1c2 0620 	rsb	r6, r2, #32
 800c438:	6843      	ldr	r3, [r0, #4]
 800c43a:	6804      	ldr	r4, [r0, #0]
 800c43c:	fa03 f506 	lsl.w	r5, r3, r6
 800c440:	432c      	orrs	r4, r5
 800c442:	40d3      	lsrs	r3, r2
 800c444:	6004      	str	r4, [r0, #0]
 800c446:	f840 3f04 	str.w	r3, [r0, #4]!
 800c44a:	4288      	cmp	r0, r1
 800c44c:	d3f4      	bcc.n	800c438 <L_shift+0xc>
 800c44e:	bd70      	pop	{r4, r5, r6, pc}

0800c450 <__match>:
 800c450:	b530      	push	{r4, r5, lr}
 800c452:	6803      	ldr	r3, [r0, #0]
 800c454:	3301      	adds	r3, #1
 800c456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c45a:	b914      	cbnz	r4, 800c462 <__match+0x12>
 800c45c:	6003      	str	r3, [r0, #0]
 800c45e:	2001      	movs	r0, #1
 800c460:	bd30      	pop	{r4, r5, pc}
 800c462:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c466:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c46a:	2d19      	cmp	r5, #25
 800c46c:	bf98      	it	ls
 800c46e:	3220      	addls	r2, #32
 800c470:	42a2      	cmp	r2, r4
 800c472:	d0f0      	beq.n	800c456 <__match+0x6>
 800c474:	2000      	movs	r0, #0
 800c476:	e7f3      	b.n	800c460 <__match+0x10>

0800c478 <__hexnan>:
 800c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	680b      	ldr	r3, [r1, #0]
 800c47e:	6801      	ldr	r1, [r0, #0]
 800c480:	115e      	asrs	r6, r3, #5
 800c482:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c486:	f013 031f 	ands.w	r3, r3, #31
 800c48a:	b087      	sub	sp, #28
 800c48c:	bf18      	it	ne
 800c48e:	3604      	addne	r6, #4
 800c490:	2500      	movs	r5, #0
 800c492:	1f37      	subs	r7, r6, #4
 800c494:	4682      	mov	sl, r0
 800c496:	4690      	mov	r8, r2
 800c498:	9301      	str	r3, [sp, #4]
 800c49a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c49e:	46b9      	mov	r9, r7
 800c4a0:	463c      	mov	r4, r7
 800c4a2:	9502      	str	r5, [sp, #8]
 800c4a4:	46ab      	mov	fp, r5
 800c4a6:	784a      	ldrb	r2, [r1, #1]
 800c4a8:	1c4b      	adds	r3, r1, #1
 800c4aa:	9303      	str	r3, [sp, #12]
 800c4ac:	b342      	cbz	r2, 800c500 <__hexnan+0x88>
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	9105      	str	r1, [sp, #20]
 800c4b2:	9204      	str	r2, [sp, #16]
 800c4b4:	f7ff fd94 	bl	800bfe0 <__hexdig_fun>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d151      	bne.n	800c560 <__hexnan+0xe8>
 800c4bc:	9a04      	ldr	r2, [sp, #16]
 800c4be:	9905      	ldr	r1, [sp, #20]
 800c4c0:	2a20      	cmp	r2, #32
 800c4c2:	d818      	bhi.n	800c4f6 <__hexnan+0x7e>
 800c4c4:	9b02      	ldr	r3, [sp, #8]
 800c4c6:	459b      	cmp	fp, r3
 800c4c8:	dd13      	ble.n	800c4f2 <__hexnan+0x7a>
 800c4ca:	454c      	cmp	r4, r9
 800c4cc:	d206      	bcs.n	800c4dc <__hexnan+0x64>
 800c4ce:	2d07      	cmp	r5, #7
 800c4d0:	dc04      	bgt.n	800c4dc <__hexnan+0x64>
 800c4d2:	462a      	mov	r2, r5
 800c4d4:	4649      	mov	r1, r9
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f7ff ffa8 	bl	800c42c <L_shift>
 800c4dc:	4544      	cmp	r4, r8
 800c4de:	d952      	bls.n	800c586 <__hexnan+0x10e>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	f1a4 0904 	sub.w	r9, r4, #4
 800c4e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4ea:	f8cd b008 	str.w	fp, [sp, #8]
 800c4ee:	464c      	mov	r4, r9
 800c4f0:	461d      	mov	r5, r3
 800c4f2:	9903      	ldr	r1, [sp, #12]
 800c4f4:	e7d7      	b.n	800c4a6 <__hexnan+0x2e>
 800c4f6:	2a29      	cmp	r2, #41	@ 0x29
 800c4f8:	d157      	bne.n	800c5aa <__hexnan+0x132>
 800c4fa:	3102      	adds	r1, #2
 800c4fc:	f8ca 1000 	str.w	r1, [sl]
 800c500:	f1bb 0f00 	cmp.w	fp, #0
 800c504:	d051      	beq.n	800c5aa <__hexnan+0x132>
 800c506:	454c      	cmp	r4, r9
 800c508:	d206      	bcs.n	800c518 <__hexnan+0xa0>
 800c50a:	2d07      	cmp	r5, #7
 800c50c:	dc04      	bgt.n	800c518 <__hexnan+0xa0>
 800c50e:	462a      	mov	r2, r5
 800c510:	4649      	mov	r1, r9
 800c512:	4620      	mov	r0, r4
 800c514:	f7ff ff8a 	bl	800c42c <L_shift>
 800c518:	4544      	cmp	r4, r8
 800c51a:	d936      	bls.n	800c58a <__hexnan+0x112>
 800c51c:	f1a8 0204 	sub.w	r2, r8, #4
 800c520:	4623      	mov	r3, r4
 800c522:	f853 1b04 	ldr.w	r1, [r3], #4
 800c526:	f842 1f04 	str.w	r1, [r2, #4]!
 800c52a:	429f      	cmp	r7, r3
 800c52c:	d2f9      	bcs.n	800c522 <__hexnan+0xaa>
 800c52e:	1b3b      	subs	r3, r7, r4
 800c530:	f023 0303 	bic.w	r3, r3, #3
 800c534:	3304      	adds	r3, #4
 800c536:	3401      	adds	r4, #1
 800c538:	3e03      	subs	r6, #3
 800c53a:	42b4      	cmp	r4, r6
 800c53c:	bf88      	it	hi
 800c53e:	2304      	movhi	r3, #4
 800c540:	4443      	add	r3, r8
 800c542:	2200      	movs	r2, #0
 800c544:	f843 2b04 	str.w	r2, [r3], #4
 800c548:	429f      	cmp	r7, r3
 800c54a:	d2fb      	bcs.n	800c544 <__hexnan+0xcc>
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	b91b      	cbnz	r3, 800c558 <__hexnan+0xe0>
 800c550:	4547      	cmp	r7, r8
 800c552:	d128      	bne.n	800c5a6 <__hexnan+0x12e>
 800c554:	2301      	movs	r3, #1
 800c556:	603b      	str	r3, [r7, #0]
 800c558:	2005      	movs	r0, #5
 800c55a:	b007      	add	sp, #28
 800c55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c560:	3501      	adds	r5, #1
 800c562:	2d08      	cmp	r5, #8
 800c564:	f10b 0b01 	add.w	fp, fp, #1
 800c568:	dd06      	ble.n	800c578 <__hexnan+0x100>
 800c56a:	4544      	cmp	r4, r8
 800c56c:	d9c1      	bls.n	800c4f2 <__hexnan+0x7a>
 800c56e:	2300      	movs	r3, #0
 800c570:	f844 3c04 	str.w	r3, [r4, #-4]
 800c574:	2501      	movs	r5, #1
 800c576:	3c04      	subs	r4, #4
 800c578:	6822      	ldr	r2, [r4, #0]
 800c57a:	f000 000f 	and.w	r0, r0, #15
 800c57e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c582:	6020      	str	r0, [r4, #0]
 800c584:	e7b5      	b.n	800c4f2 <__hexnan+0x7a>
 800c586:	2508      	movs	r5, #8
 800c588:	e7b3      	b.n	800c4f2 <__hexnan+0x7a>
 800c58a:	9b01      	ldr	r3, [sp, #4]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d0dd      	beq.n	800c54c <__hexnan+0xd4>
 800c590:	f1c3 0320 	rsb	r3, r3, #32
 800c594:	f04f 32ff 	mov.w	r2, #4294967295
 800c598:	40da      	lsrs	r2, r3
 800c59a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c59e:	4013      	ands	r3, r2
 800c5a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c5a4:	e7d2      	b.n	800c54c <__hexnan+0xd4>
 800c5a6:	3f04      	subs	r7, #4
 800c5a8:	e7d0      	b.n	800c54c <__hexnan+0xd4>
 800c5aa:	2004      	movs	r0, #4
 800c5ac:	e7d5      	b.n	800c55a <__hexnan+0xe2>

0800c5ae <__ascii_mbtowc>:
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	b901      	cbnz	r1, 800c5b4 <__ascii_mbtowc+0x6>
 800c5b2:	a901      	add	r1, sp, #4
 800c5b4:	b142      	cbz	r2, 800c5c8 <__ascii_mbtowc+0x1a>
 800c5b6:	b14b      	cbz	r3, 800c5cc <__ascii_mbtowc+0x1e>
 800c5b8:	7813      	ldrb	r3, [r2, #0]
 800c5ba:	600b      	str	r3, [r1, #0]
 800c5bc:	7812      	ldrb	r2, [r2, #0]
 800c5be:	1e10      	subs	r0, r2, #0
 800c5c0:	bf18      	it	ne
 800c5c2:	2001      	movne	r0, #1
 800c5c4:	b002      	add	sp, #8
 800c5c6:	4770      	bx	lr
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	e7fb      	b.n	800c5c4 <__ascii_mbtowc+0x16>
 800c5cc:	f06f 0001 	mvn.w	r0, #1
 800c5d0:	e7f8      	b.n	800c5c4 <__ascii_mbtowc+0x16>

0800c5d2 <_realloc_r>:
 800c5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d6:	4680      	mov	r8, r0
 800c5d8:	4615      	mov	r5, r2
 800c5da:	460c      	mov	r4, r1
 800c5dc:	b921      	cbnz	r1, 800c5e8 <_realloc_r+0x16>
 800c5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e2:	4611      	mov	r1, r2
 800c5e4:	f7fd be60 	b.w	800a2a8 <_malloc_r>
 800c5e8:	b92a      	cbnz	r2, 800c5f6 <_realloc_r+0x24>
 800c5ea:	f7fd fde9 	bl	800a1c0 <_free_r>
 800c5ee:	2400      	movs	r4, #0
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f6:	f000 f840 	bl	800c67a <_malloc_usable_size_r>
 800c5fa:	4285      	cmp	r5, r0
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	d802      	bhi.n	800c606 <_realloc_r+0x34>
 800c600:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c604:	d8f4      	bhi.n	800c5f0 <_realloc_r+0x1e>
 800c606:	4629      	mov	r1, r5
 800c608:	4640      	mov	r0, r8
 800c60a:	f7fd fe4d 	bl	800a2a8 <_malloc_r>
 800c60e:	4607      	mov	r7, r0
 800c610:	2800      	cmp	r0, #0
 800c612:	d0ec      	beq.n	800c5ee <_realloc_r+0x1c>
 800c614:	42b5      	cmp	r5, r6
 800c616:	462a      	mov	r2, r5
 800c618:	4621      	mov	r1, r4
 800c61a:	bf28      	it	cs
 800c61c:	4632      	movcs	r2, r6
 800c61e:	f7ff fc45 	bl	800beac <memcpy>
 800c622:	4621      	mov	r1, r4
 800c624:	4640      	mov	r0, r8
 800c626:	f7fd fdcb 	bl	800a1c0 <_free_r>
 800c62a:	463c      	mov	r4, r7
 800c62c:	e7e0      	b.n	800c5f0 <_realloc_r+0x1e>

0800c62e <__ascii_wctomb>:
 800c62e:	4603      	mov	r3, r0
 800c630:	4608      	mov	r0, r1
 800c632:	b141      	cbz	r1, 800c646 <__ascii_wctomb+0x18>
 800c634:	2aff      	cmp	r2, #255	@ 0xff
 800c636:	d904      	bls.n	800c642 <__ascii_wctomb+0x14>
 800c638:	228a      	movs	r2, #138	@ 0x8a
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	f04f 30ff 	mov.w	r0, #4294967295
 800c640:	4770      	bx	lr
 800c642:	700a      	strb	r2, [r1, #0]
 800c644:	2001      	movs	r0, #1
 800c646:	4770      	bx	lr

0800c648 <fiprintf>:
 800c648:	b40e      	push	{r1, r2, r3}
 800c64a:	b503      	push	{r0, r1, lr}
 800c64c:	4601      	mov	r1, r0
 800c64e:	ab03      	add	r3, sp, #12
 800c650:	4805      	ldr	r0, [pc, #20]	@ (800c668 <fiprintf+0x20>)
 800c652:	f853 2b04 	ldr.w	r2, [r3], #4
 800c656:	6800      	ldr	r0, [r0, #0]
 800c658:	9301      	str	r3, [sp, #4]
 800c65a:	f000 f83f 	bl	800c6dc <_vfiprintf_r>
 800c65e:	b002      	add	sp, #8
 800c660:	f85d eb04 	ldr.w	lr, [sp], #4
 800c664:	b003      	add	sp, #12
 800c666:	4770      	bx	lr
 800c668:	20000018 	.word	0x20000018

0800c66c <abort>:
 800c66c:	b508      	push	{r3, lr}
 800c66e:	2006      	movs	r0, #6
 800c670:	f000 fa08 	bl	800ca84 <raise>
 800c674:	2001      	movs	r0, #1
 800c676:	f7f5 fb47 	bl	8001d08 <_exit>

0800c67a <_malloc_usable_size_r>:
 800c67a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c67e:	1f18      	subs	r0, r3, #4
 800c680:	2b00      	cmp	r3, #0
 800c682:	bfbc      	itt	lt
 800c684:	580b      	ldrlt	r3, [r1, r0]
 800c686:	18c0      	addlt	r0, r0, r3
 800c688:	4770      	bx	lr

0800c68a <__sfputc_r>:
 800c68a:	6893      	ldr	r3, [r2, #8]
 800c68c:	3b01      	subs	r3, #1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	b410      	push	{r4}
 800c692:	6093      	str	r3, [r2, #8]
 800c694:	da08      	bge.n	800c6a8 <__sfputc_r+0x1e>
 800c696:	6994      	ldr	r4, [r2, #24]
 800c698:	42a3      	cmp	r3, r4
 800c69a:	db01      	blt.n	800c6a0 <__sfputc_r+0x16>
 800c69c:	290a      	cmp	r1, #10
 800c69e:	d103      	bne.n	800c6a8 <__sfputc_r+0x1e>
 800c6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6a4:	f000 b932 	b.w	800c90c <__swbuf_r>
 800c6a8:	6813      	ldr	r3, [r2, #0]
 800c6aa:	1c58      	adds	r0, r3, #1
 800c6ac:	6010      	str	r0, [r2, #0]
 800c6ae:	7019      	strb	r1, [r3, #0]
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <__sfputs_r>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	460f      	mov	r7, r1
 800c6be:	4614      	mov	r4, r2
 800c6c0:	18d5      	adds	r5, r2, r3
 800c6c2:	42ac      	cmp	r4, r5
 800c6c4:	d101      	bne.n	800c6ca <__sfputs_r+0x12>
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	e007      	b.n	800c6da <__sfputs_r+0x22>
 800c6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ce:	463a      	mov	r2, r7
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	f7ff ffda 	bl	800c68a <__sfputc_r>
 800c6d6:	1c43      	adds	r3, r0, #1
 800c6d8:	d1f3      	bne.n	800c6c2 <__sfputs_r+0xa>
 800c6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6dc <_vfiprintf_r>:
 800c6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	460d      	mov	r5, r1
 800c6e2:	b09d      	sub	sp, #116	@ 0x74
 800c6e4:	4614      	mov	r4, r2
 800c6e6:	4698      	mov	r8, r3
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	b118      	cbz	r0, 800c6f4 <_vfiprintf_r+0x18>
 800c6ec:	6a03      	ldr	r3, [r0, #32]
 800c6ee:	b90b      	cbnz	r3, 800c6f4 <_vfiprintf_r+0x18>
 800c6f0:	f7fc fdf8 	bl	80092e4 <__sinit>
 800c6f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6f6:	07d9      	lsls	r1, r3, #31
 800c6f8:	d405      	bmi.n	800c706 <_vfiprintf_r+0x2a>
 800c6fa:	89ab      	ldrh	r3, [r5, #12]
 800c6fc:	059a      	lsls	r2, r3, #22
 800c6fe:	d402      	bmi.n	800c706 <_vfiprintf_r+0x2a>
 800c700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c702:	f7fc ff06 	bl	8009512 <__retarget_lock_acquire_recursive>
 800c706:	89ab      	ldrh	r3, [r5, #12]
 800c708:	071b      	lsls	r3, r3, #28
 800c70a:	d501      	bpl.n	800c710 <_vfiprintf_r+0x34>
 800c70c:	692b      	ldr	r3, [r5, #16]
 800c70e:	b99b      	cbnz	r3, 800c738 <_vfiprintf_r+0x5c>
 800c710:	4629      	mov	r1, r5
 800c712:	4630      	mov	r0, r6
 800c714:	f000 f938 	bl	800c988 <__swsetup_r>
 800c718:	b170      	cbz	r0, 800c738 <_vfiprintf_r+0x5c>
 800c71a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c71c:	07dc      	lsls	r4, r3, #31
 800c71e:	d504      	bpl.n	800c72a <_vfiprintf_r+0x4e>
 800c720:	f04f 30ff 	mov.w	r0, #4294967295
 800c724:	b01d      	add	sp, #116	@ 0x74
 800c726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72a:	89ab      	ldrh	r3, [r5, #12]
 800c72c:	0598      	lsls	r0, r3, #22
 800c72e:	d4f7      	bmi.n	800c720 <_vfiprintf_r+0x44>
 800c730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c732:	f7fc feef 	bl	8009514 <__retarget_lock_release_recursive>
 800c736:	e7f3      	b.n	800c720 <_vfiprintf_r+0x44>
 800c738:	2300      	movs	r3, #0
 800c73a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c73c:	2320      	movs	r3, #32
 800c73e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c742:	f8cd 800c 	str.w	r8, [sp, #12]
 800c746:	2330      	movs	r3, #48	@ 0x30
 800c748:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c8f8 <_vfiprintf_r+0x21c>
 800c74c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c750:	f04f 0901 	mov.w	r9, #1
 800c754:	4623      	mov	r3, r4
 800c756:	469a      	mov	sl, r3
 800c758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c75c:	b10a      	cbz	r2, 800c762 <_vfiprintf_r+0x86>
 800c75e:	2a25      	cmp	r2, #37	@ 0x25
 800c760:	d1f9      	bne.n	800c756 <_vfiprintf_r+0x7a>
 800c762:	ebba 0b04 	subs.w	fp, sl, r4
 800c766:	d00b      	beq.n	800c780 <_vfiprintf_r+0xa4>
 800c768:	465b      	mov	r3, fp
 800c76a:	4622      	mov	r2, r4
 800c76c:	4629      	mov	r1, r5
 800c76e:	4630      	mov	r0, r6
 800c770:	f7ff ffa2 	bl	800c6b8 <__sfputs_r>
 800c774:	3001      	adds	r0, #1
 800c776:	f000 80a7 	beq.w	800c8c8 <_vfiprintf_r+0x1ec>
 800c77a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c77c:	445a      	add	r2, fp
 800c77e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c780:	f89a 3000 	ldrb.w	r3, [sl]
 800c784:	2b00      	cmp	r3, #0
 800c786:	f000 809f 	beq.w	800c8c8 <_vfiprintf_r+0x1ec>
 800c78a:	2300      	movs	r3, #0
 800c78c:	f04f 32ff 	mov.w	r2, #4294967295
 800c790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c794:	f10a 0a01 	add.w	sl, sl, #1
 800c798:	9304      	str	r3, [sp, #16]
 800c79a:	9307      	str	r3, [sp, #28]
 800c79c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7a2:	4654      	mov	r4, sl
 800c7a4:	2205      	movs	r2, #5
 800c7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7aa:	4853      	ldr	r0, [pc, #332]	@ (800c8f8 <_vfiprintf_r+0x21c>)
 800c7ac:	f7f3 fd10 	bl	80001d0 <memchr>
 800c7b0:	9a04      	ldr	r2, [sp, #16]
 800c7b2:	b9d8      	cbnz	r0, 800c7ec <_vfiprintf_r+0x110>
 800c7b4:	06d1      	lsls	r1, r2, #27
 800c7b6:	bf44      	itt	mi
 800c7b8:	2320      	movmi	r3, #32
 800c7ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7be:	0713      	lsls	r3, r2, #28
 800c7c0:	bf44      	itt	mi
 800c7c2:	232b      	movmi	r3, #43	@ 0x2b
 800c7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c7cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7ce:	d015      	beq.n	800c7fc <_vfiprintf_r+0x120>
 800c7d0:	9a07      	ldr	r2, [sp, #28]
 800c7d2:	4654      	mov	r4, sl
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	f04f 0c0a 	mov.w	ip, #10
 800c7da:	4621      	mov	r1, r4
 800c7dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7e0:	3b30      	subs	r3, #48	@ 0x30
 800c7e2:	2b09      	cmp	r3, #9
 800c7e4:	d94b      	bls.n	800c87e <_vfiprintf_r+0x1a2>
 800c7e6:	b1b0      	cbz	r0, 800c816 <_vfiprintf_r+0x13a>
 800c7e8:	9207      	str	r2, [sp, #28]
 800c7ea:	e014      	b.n	800c816 <_vfiprintf_r+0x13a>
 800c7ec:	eba0 0308 	sub.w	r3, r0, r8
 800c7f0:	fa09 f303 	lsl.w	r3, r9, r3
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	9304      	str	r3, [sp, #16]
 800c7f8:	46a2      	mov	sl, r4
 800c7fa:	e7d2      	b.n	800c7a2 <_vfiprintf_r+0xc6>
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	1d19      	adds	r1, r3, #4
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	9103      	str	r1, [sp, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	bfbb      	ittet	lt
 800c808:	425b      	neglt	r3, r3
 800c80a:	f042 0202 	orrlt.w	r2, r2, #2
 800c80e:	9307      	strge	r3, [sp, #28]
 800c810:	9307      	strlt	r3, [sp, #28]
 800c812:	bfb8      	it	lt
 800c814:	9204      	strlt	r2, [sp, #16]
 800c816:	7823      	ldrb	r3, [r4, #0]
 800c818:	2b2e      	cmp	r3, #46	@ 0x2e
 800c81a:	d10a      	bne.n	800c832 <_vfiprintf_r+0x156>
 800c81c:	7863      	ldrb	r3, [r4, #1]
 800c81e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c820:	d132      	bne.n	800c888 <_vfiprintf_r+0x1ac>
 800c822:	9b03      	ldr	r3, [sp, #12]
 800c824:	1d1a      	adds	r2, r3, #4
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	9203      	str	r2, [sp, #12]
 800c82a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c82e:	3402      	adds	r4, #2
 800c830:	9305      	str	r3, [sp, #20]
 800c832:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c908 <_vfiprintf_r+0x22c>
 800c836:	7821      	ldrb	r1, [r4, #0]
 800c838:	2203      	movs	r2, #3
 800c83a:	4650      	mov	r0, sl
 800c83c:	f7f3 fcc8 	bl	80001d0 <memchr>
 800c840:	b138      	cbz	r0, 800c852 <_vfiprintf_r+0x176>
 800c842:	9b04      	ldr	r3, [sp, #16]
 800c844:	eba0 000a 	sub.w	r0, r0, sl
 800c848:	2240      	movs	r2, #64	@ 0x40
 800c84a:	4082      	lsls	r2, r0
 800c84c:	4313      	orrs	r3, r2
 800c84e:	3401      	adds	r4, #1
 800c850:	9304      	str	r3, [sp, #16]
 800c852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c856:	4829      	ldr	r0, [pc, #164]	@ (800c8fc <_vfiprintf_r+0x220>)
 800c858:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c85c:	2206      	movs	r2, #6
 800c85e:	f7f3 fcb7 	bl	80001d0 <memchr>
 800c862:	2800      	cmp	r0, #0
 800c864:	d03f      	beq.n	800c8e6 <_vfiprintf_r+0x20a>
 800c866:	4b26      	ldr	r3, [pc, #152]	@ (800c900 <_vfiprintf_r+0x224>)
 800c868:	bb1b      	cbnz	r3, 800c8b2 <_vfiprintf_r+0x1d6>
 800c86a:	9b03      	ldr	r3, [sp, #12]
 800c86c:	3307      	adds	r3, #7
 800c86e:	f023 0307 	bic.w	r3, r3, #7
 800c872:	3308      	adds	r3, #8
 800c874:	9303      	str	r3, [sp, #12]
 800c876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c878:	443b      	add	r3, r7
 800c87a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c87c:	e76a      	b.n	800c754 <_vfiprintf_r+0x78>
 800c87e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c882:	460c      	mov	r4, r1
 800c884:	2001      	movs	r0, #1
 800c886:	e7a8      	b.n	800c7da <_vfiprintf_r+0xfe>
 800c888:	2300      	movs	r3, #0
 800c88a:	3401      	adds	r4, #1
 800c88c:	9305      	str	r3, [sp, #20]
 800c88e:	4619      	mov	r1, r3
 800c890:	f04f 0c0a 	mov.w	ip, #10
 800c894:	4620      	mov	r0, r4
 800c896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c89a:	3a30      	subs	r2, #48	@ 0x30
 800c89c:	2a09      	cmp	r2, #9
 800c89e:	d903      	bls.n	800c8a8 <_vfiprintf_r+0x1cc>
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d0c6      	beq.n	800c832 <_vfiprintf_r+0x156>
 800c8a4:	9105      	str	r1, [sp, #20]
 800c8a6:	e7c4      	b.n	800c832 <_vfiprintf_r+0x156>
 800c8a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e7f0      	b.n	800c894 <_vfiprintf_r+0x1b8>
 800c8b2:	ab03      	add	r3, sp, #12
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	462a      	mov	r2, r5
 800c8b8:	4b12      	ldr	r3, [pc, #72]	@ (800c904 <_vfiprintf_r+0x228>)
 800c8ba:	a904      	add	r1, sp, #16
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f7fb feb9 	bl	8008634 <_printf_float>
 800c8c2:	4607      	mov	r7, r0
 800c8c4:	1c78      	adds	r0, r7, #1
 800c8c6:	d1d6      	bne.n	800c876 <_vfiprintf_r+0x19a>
 800c8c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8ca:	07d9      	lsls	r1, r3, #31
 800c8cc:	d405      	bmi.n	800c8da <_vfiprintf_r+0x1fe>
 800c8ce:	89ab      	ldrh	r3, [r5, #12]
 800c8d0:	059a      	lsls	r2, r3, #22
 800c8d2:	d402      	bmi.n	800c8da <_vfiprintf_r+0x1fe>
 800c8d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8d6:	f7fc fe1d 	bl	8009514 <__retarget_lock_release_recursive>
 800c8da:	89ab      	ldrh	r3, [r5, #12]
 800c8dc:	065b      	lsls	r3, r3, #25
 800c8de:	f53f af1f 	bmi.w	800c720 <_vfiprintf_r+0x44>
 800c8e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8e4:	e71e      	b.n	800c724 <_vfiprintf_r+0x48>
 800c8e6:	ab03      	add	r3, sp, #12
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	462a      	mov	r2, r5
 800c8ec:	4b05      	ldr	r3, [pc, #20]	@ (800c904 <_vfiprintf_r+0x228>)
 800c8ee:	a904      	add	r1, sp, #16
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f7fc f937 	bl	8008b64 <_printf_i>
 800c8f6:	e7e4      	b.n	800c8c2 <_vfiprintf_r+0x1e6>
 800c8f8:	0800cfb9 	.word	0x0800cfb9
 800c8fc:	0800cfc3 	.word	0x0800cfc3
 800c900:	08008635 	.word	0x08008635
 800c904:	0800c6b9 	.word	0x0800c6b9
 800c908:	0800cfbf 	.word	0x0800cfbf

0800c90c <__swbuf_r>:
 800c90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90e:	460e      	mov	r6, r1
 800c910:	4614      	mov	r4, r2
 800c912:	4605      	mov	r5, r0
 800c914:	b118      	cbz	r0, 800c91e <__swbuf_r+0x12>
 800c916:	6a03      	ldr	r3, [r0, #32]
 800c918:	b90b      	cbnz	r3, 800c91e <__swbuf_r+0x12>
 800c91a:	f7fc fce3 	bl	80092e4 <__sinit>
 800c91e:	69a3      	ldr	r3, [r4, #24]
 800c920:	60a3      	str	r3, [r4, #8]
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	071a      	lsls	r2, r3, #28
 800c926:	d501      	bpl.n	800c92c <__swbuf_r+0x20>
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	b943      	cbnz	r3, 800c93e <__swbuf_r+0x32>
 800c92c:	4621      	mov	r1, r4
 800c92e:	4628      	mov	r0, r5
 800c930:	f000 f82a 	bl	800c988 <__swsetup_r>
 800c934:	b118      	cbz	r0, 800c93e <__swbuf_r+0x32>
 800c936:	f04f 37ff 	mov.w	r7, #4294967295
 800c93a:	4638      	mov	r0, r7
 800c93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	6922      	ldr	r2, [r4, #16]
 800c942:	1a98      	subs	r0, r3, r2
 800c944:	6963      	ldr	r3, [r4, #20]
 800c946:	b2f6      	uxtb	r6, r6
 800c948:	4283      	cmp	r3, r0
 800c94a:	4637      	mov	r7, r6
 800c94c:	dc05      	bgt.n	800c95a <__swbuf_r+0x4e>
 800c94e:	4621      	mov	r1, r4
 800c950:	4628      	mov	r0, r5
 800c952:	f7ff fa47 	bl	800bde4 <_fflush_r>
 800c956:	2800      	cmp	r0, #0
 800c958:	d1ed      	bne.n	800c936 <__swbuf_r+0x2a>
 800c95a:	68a3      	ldr	r3, [r4, #8]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	60a3      	str	r3, [r4, #8]
 800c960:	6823      	ldr	r3, [r4, #0]
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	6022      	str	r2, [r4, #0]
 800c966:	701e      	strb	r6, [r3, #0]
 800c968:	6962      	ldr	r2, [r4, #20]
 800c96a:	1c43      	adds	r3, r0, #1
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d004      	beq.n	800c97a <__swbuf_r+0x6e>
 800c970:	89a3      	ldrh	r3, [r4, #12]
 800c972:	07db      	lsls	r3, r3, #31
 800c974:	d5e1      	bpl.n	800c93a <__swbuf_r+0x2e>
 800c976:	2e0a      	cmp	r6, #10
 800c978:	d1df      	bne.n	800c93a <__swbuf_r+0x2e>
 800c97a:	4621      	mov	r1, r4
 800c97c:	4628      	mov	r0, r5
 800c97e:	f7ff fa31 	bl	800bde4 <_fflush_r>
 800c982:	2800      	cmp	r0, #0
 800c984:	d0d9      	beq.n	800c93a <__swbuf_r+0x2e>
 800c986:	e7d6      	b.n	800c936 <__swbuf_r+0x2a>

0800c988 <__swsetup_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	4b29      	ldr	r3, [pc, #164]	@ (800ca30 <__swsetup_r+0xa8>)
 800c98c:	4605      	mov	r5, r0
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	460c      	mov	r4, r1
 800c992:	b118      	cbz	r0, 800c99c <__swsetup_r+0x14>
 800c994:	6a03      	ldr	r3, [r0, #32]
 800c996:	b90b      	cbnz	r3, 800c99c <__swsetup_r+0x14>
 800c998:	f7fc fca4 	bl	80092e4 <__sinit>
 800c99c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a0:	0719      	lsls	r1, r3, #28
 800c9a2:	d422      	bmi.n	800c9ea <__swsetup_r+0x62>
 800c9a4:	06da      	lsls	r2, r3, #27
 800c9a6:	d407      	bmi.n	800c9b8 <__swsetup_r+0x30>
 800c9a8:	2209      	movs	r2, #9
 800c9aa:	602a      	str	r2, [r5, #0]
 800c9ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9b0:	81a3      	strh	r3, [r4, #12]
 800c9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b6:	e033      	b.n	800ca20 <__swsetup_r+0x98>
 800c9b8:	0758      	lsls	r0, r3, #29
 800c9ba:	d512      	bpl.n	800c9e2 <__swsetup_r+0x5a>
 800c9bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9be:	b141      	cbz	r1, 800c9d2 <__swsetup_r+0x4a>
 800c9c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9c4:	4299      	cmp	r1, r3
 800c9c6:	d002      	beq.n	800c9ce <__swsetup_r+0x46>
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f7fd fbf9 	bl	800a1c0 <_free_r>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c9d8:	81a3      	strh	r3, [r4, #12]
 800c9da:	2300      	movs	r3, #0
 800c9dc:	6063      	str	r3, [r4, #4]
 800c9de:	6923      	ldr	r3, [r4, #16]
 800c9e0:	6023      	str	r3, [r4, #0]
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	f043 0308 	orr.w	r3, r3, #8
 800c9e8:	81a3      	strh	r3, [r4, #12]
 800c9ea:	6923      	ldr	r3, [r4, #16]
 800c9ec:	b94b      	cbnz	r3, 800ca02 <__swsetup_r+0x7a>
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9f8:	d003      	beq.n	800ca02 <__swsetup_r+0x7a>
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	f000 f883 	bl	800cb08 <__smakebuf_r>
 800ca02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca06:	f013 0201 	ands.w	r2, r3, #1
 800ca0a:	d00a      	beq.n	800ca22 <__swsetup_r+0x9a>
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	60a2      	str	r2, [r4, #8]
 800ca10:	6962      	ldr	r2, [r4, #20]
 800ca12:	4252      	negs	r2, r2
 800ca14:	61a2      	str	r2, [r4, #24]
 800ca16:	6922      	ldr	r2, [r4, #16]
 800ca18:	b942      	cbnz	r2, 800ca2c <__swsetup_r+0xa4>
 800ca1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca1e:	d1c5      	bne.n	800c9ac <__swsetup_r+0x24>
 800ca20:	bd38      	pop	{r3, r4, r5, pc}
 800ca22:	0799      	lsls	r1, r3, #30
 800ca24:	bf58      	it	pl
 800ca26:	6962      	ldrpl	r2, [r4, #20]
 800ca28:	60a2      	str	r2, [r4, #8]
 800ca2a:	e7f4      	b.n	800ca16 <__swsetup_r+0x8e>
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	e7f7      	b.n	800ca20 <__swsetup_r+0x98>
 800ca30:	20000018 	.word	0x20000018

0800ca34 <_raise_r>:
 800ca34:	291f      	cmp	r1, #31
 800ca36:	b538      	push	{r3, r4, r5, lr}
 800ca38:	4605      	mov	r5, r0
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	d904      	bls.n	800ca48 <_raise_r+0x14>
 800ca3e:	2316      	movs	r3, #22
 800ca40:	6003      	str	r3, [r0, #0]
 800ca42:	f04f 30ff 	mov.w	r0, #4294967295
 800ca46:	bd38      	pop	{r3, r4, r5, pc}
 800ca48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca4a:	b112      	cbz	r2, 800ca52 <_raise_r+0x1e>
 800ca4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca50:	b94b      	cbnz	r3, 800ca66 <_raise_r+0x32>
 800ca52:	4628      	mov	r0, r5
 800ca54:	f000 f830 	bl	800cab8 <_getpid_r>
 800ca58:	4622      	mov	r2, r4
 800ca5a:	4601      	mov	r1, r0
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca62:	f000 b817 	b.w	800ca94 <_kill_r>
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d00a      	beq.n	800ca80 <_raise_r+0x4c>
 800ca6a:	1c59      	adds	r1, r3, #1
 800ca6c:	d103      	bne.n	800ca76 <_raise_r+0x42>
 800ca6e:	2316      	movs	r3, #22
 800ca70:	6003      	str	r3, [r0, #0]
 800ca72:	2001      	movs	r0, #1
 800ca74:	e7e7      	b.n	800ca46 <_raise_r+0x12>
 800ca76:	2100      	movs	r1, #0
 800ca78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	4798      	blx	r3
 800ca80:	2000      	movs	r0, #0
 800ca82:	e7e0      	b.n	800ca46 <_raise_r+0x12>

0800ca84 <raise>:
 800ca84:	4b02      	ldr	r3, [pc, #8]	@ (800ca90 <raise+0xc>)
 800ca86:	4601      	mov	r1, r0
 800ca88:	6818      	ldr	r0, [r3, #0]
 800ca8a:	f7ff bfd3 	b.w	800ca34 <_raise_r>
 800ca8e:	bf00      	nop
 800ca90:	20000018 	.word	0x20000018

0800ca94 <_kill_r>:
 800ca94:	b538      	push	{r3, r4, r5, lr}
 800ca96:	4d07      	ldr	r5, [pc, #28]	@ (800cab4 <_kill_r+0x20>)
 800ca98:	2300      	movs	r3, #0
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	4608      	mov	r0, r1
 800ca9e:	4611      	mov	r1, r2
 800caa0:	602b      	str	r3, [r5, #0]
 800caa2:	f7f5 f921 	bl	8001ce8 <_kill>
 800caa6:	1c43      	adds	r3, r0, #1
 800caa8:	d102      	bne.n	800cab0 <_kill_r+0x1c>
 800caaa:	682b      	ldr	r3, [r5, #0]
 800caac:	b103      	cbz	r3, 800cab0 <_kill_r+0x1c>
 800caae:	6023      	str	r3, [r4, #0]
 800cab0:	bd38      	pop	{r3, r4, r5, pc}
 800cab2:	bf00      	nop
 800cab4:	20000554 	.word	0x20000554

0800cab8 <_getpid_r>:
 800cab8:	f7f5 b90e 	b.w	8001cd8 <_getpid>

0800cabc <__swhatbuf_r>:
 800cabc:	b570      	push	{r4, r5, r6, lr}
 800cabe:	460c      	mov	r4, r1
 800cac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac4:	2900      	cmp	r1, #0
 800cac6:	b096      	sub	sp, #88	@ 0x58
 800cac8:	4615      	mov	r5, r2
 800caca:	461e      	mov	r6, r3
 800cacc:	da0d      	bge.n	800caea <__swhatbuf_r+0x2e>
 800cace:	89a3      	ldrh	r3, [r4, #12]
 800cad0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cad4:	f04f 0100 	mov.w	r1, #0
 800cad8:	bf14      	ite	ne
 800cada:	2340      	movne	r3, #64	@ 0x40
 800cadc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cae0:	2000      	movs	r0, #0
 800cae2:	6031      	str	r1, [r6, #0]
 800cae4:	602b      	str	r3, [r5, #0]
 800cae6:	b016      	add	sp, #88	@ 0x58
 800cae8:	bd70      	pop	{r4, r5, r6, pc}
 800caea:	466a      	mov	r2, sp
 800caec:	f000 f848 	bl	800cb80 <_fstat_r>
 800caf0:	2800      	cmp	r0, #0
 800caf2:	dbec      	blt.n	800cace <__swhatbuf_r+0x12>
 800caf4:	9901      	ldr	r1, [sp, #4]
 800caf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cafa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cafe:	4259      	negs	r1, r3
 800cb00:	4159      	adcs	r1, r3
 800cb02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb06:	e7eb      	b.n	800cae0 <__swhatbuf_r+0x24>

0800cb08 <__smakebuf_r>:
 800cb08:	898b      	ldrh	r3, [r1, #12]
 800cb0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb0c:	079d      	lsls	r5, r3, #30
 800cb0e:	4606      	mov	r6, r0
 800cb10:	460c      	mov	r4, r1
 800cb12:	d507      	bpl.n	800cb24 <__smakebuf_r+0x1c>
 800cb14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	6123      	str	r3, [r4, #16]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	6163      	str	r3, [r4, #20]
 800cb20:	b003      	add	sp, #12
 800cb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb24:	ab01      	add	r3, sp, #4
 800cb26:	466a      	mov	r2, sp
 800cb28:	f7ff ffc8 	bl	800cabc <__swhatbuf_r>
 800cb2c:	9f00      	ldr	r7, [sp, #0]
 800cb2e:	4605      	mov	r5, r0
 800cb30:	4639      	mov	r1, r7
 800cb32:	4630      	mov	r0, r6
 800cb34:	f7fd fbb8 	bl	800a2a8 <_malloc_r>
 800cb38:	b948      	cbnz	r0, 800cb4e <__smakebuf_r+0x46>
 800cb3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb3e:	059a      	lsls	r2, r3, #22
 800cb40:	d4ee      	bmi.n	800cb20 <__smakebuf_r+0x18>
 800cb42:	f023 0303 	bic.w	r3, r3, #3
 800cb46:	f043 0302 	orr.w	r3, r3, #2
 800cb4a:	81a3      	strh	r3, [r4, #12]
 800cb4c:	e7e2      	b.n	800cb14 <__smakebuf_r+0xc>
 800cb4e:	89a3      	ldrh	r3, [r4, #12]
 800cb50:	6020      	str	r0, [r4, #0]
 800cb52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb56:	81a3      	strh	r3, [r4, #12]
 800cb58:	9b01      	ldr	r3, [sp, #4]
 800cb5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb5e:	b15b      	cbz	r3, 800cb78 <__smakebuf_r+0x70>
 800cb60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb64:	4630      	mov	r0, r6
 800cb66:	f000 f81d 	bl	800cba4 <_isatty_r>
 800cb6a:	b128      	cbz	r0, 800cb78 <__smakebuf_r+0x70>
 800cb6c:	89a3      	ldrh	r3, [r4, #12]
 800cb6e:	f023 0303 	bic.w	r3, r3, #3
 800cb72:	f043 0301 	orr.w	r3, r3, #1
 800cb76:	81a3      	strh	r3, [r4, #12]
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	431d      	orrs	r5, r3
 800cb7c:	81a5      	strh	r5, [r4, #12]
 800cb7e:	e7cf      	b.n	800cb20 <__smakebuf_r+0x18>

0800cb80 <_fstat_r>:
 800cb80:	b538      	push	{r3, r4, r5, lr}
 800cb82:	4d07      	ldr	r5, [pc, #28]	@ (800cba0 <_fstat_r+0x20>)
 800cb84:	2300      	movs	r3, #0
 800cb86:	4604      	mov	r4, r0
 800cb88:	4608      	mov	r0, r1
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	602b      	str	r3, [r5, #0]
 800cb8e:	f7f5 f90b 	bl	8001da8 <_fstat>
 800cb92:	1c43      	adds	r3, r0, #1
 800cb94:	d102      	bne.n	800cb9c <_fstat_r+0x1c>
 800cb96:	682b      	ldr	r3, [r5, #0]
 800cb98:	b103      	cbz	r3, 800cb9c <_fstat_r+0x1c>
 800cb9a:	6023      	str	r3, [r4, #0]
 800cb9c:	bd38      	pop	{r3, r4, r5, pc}
 800cb9e:	bf00      	nop
 800cba0:	20000554 	.word	0x20000554

0800cba4 <_isatty_r>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	4d06      	ldr	r5, [pc, #24]	@ (800cbc0 <_isatty_r+0x1c>)
 800cba8:	2300      	movs	r3, #0
 800cbaa:	4604      	mov	r4, r0
 800cbac:	4608      	mov	r0, r1
 800cbae:	602b      	str	r3, [r5, #0]
 800cbb0:	f7f5 f90a 	bl	8001dc8 <_isatty>
 800cbb4:	1c43      	adds	r3, r0, #1
 800cbb6:	d102      	bne.n	800cbbe <_isatty_r+0x1a>
 800cbb8:	682b      	ldr	r3, [r5, #0]
 800cbba:	b103      	cbz	r3, 800cbbe <_isatty_r+0x1a>
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	bd38      	pop	{r3, r4, r5, pc}
 800cbc0:	20000554 	.word	0x20000554

0800cbc4 <_init>:
 800cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc6:	bf00      	nop
 800cbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbca:	bc08      	pop	{r3}
 800cbcc:	469e      	mov	lr, r3
 800cbce:	4770      	bx	lr

0800cbd0 <_fini>:
 800cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd2:	bf00      	nop
 800cbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd6:	bc08      	pop	{r3}
 800cbd8:	469e      	mov	lr, r3
 800cbda:	4770      	bx	lr
