
projet_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d52c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800d6c0  0800d6c0  0000e6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db38  0800db38  0000f1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800db38  0800db38  0000eb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db40  0800db40  0000f1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db40  0800db40  0000eb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db44  0800db44  0000eb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800db48  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200001f0  0800dd38  0000f1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800dd38  0000f5c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016729  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b99  00000000  00000000  00025949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  000284e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe2  00000000  00000000  00029938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a93  00000000  00000000  0002a91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174c8  00000000  00000000  000543ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107c68  00000000  00000000  0006b875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001734dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c34  00000000  00000000  00173520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0017a154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d6a4 	.word	0x0800d6a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800d6a4 	.word	0x0800d6a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fe8:	f001 fe1c 	bl	8002c24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fec:	f000 f89e 	bl	800112c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ff0:	f000 faf8 	bl	80015e4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000ff4:	f000 f8ec 	bl	80011d0 <MX_ADC1_Init>
	MX_TIM6_Init();
 8000ff8:	f000 fa8e 	bl	8001518 <MX_TIM6_Init>
	MX_TIM2_Init();
 8000ffc:	f000 f95e 	bl	80012bc <MX_TIM2_Init>
	MX_TIM3_Init();
 8001000:	f000 f9de 	bl	80013c0 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 8001004:	f000 fabe 	bl	8001584 <MX_USART3_UART_Init>
	MX_TIM4_Init();
 8001008:	f000 fa30 	bl	800146c <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 800100c:	4835      	ldr	r0, [pc, #212]	@ (80010e4 <main+0x100>)
 800100e:	f005 f9bb 	bl	8006388 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001012:	2100      	movs	r1, #0
 8001014:	4834      	ldr	r0, [pc, #208]	@ (80010e8 <main+0x104>)
 8001016:	f005 fa89 	bl	800652c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800101a:	210c      	movs	r1, #12
 800101c:	4832      	ldr	r0, [pc, #200]	@ (80010e8 <main+0x104>)
 800101e:	f005 fa85 	bl	800652c <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart3, &rxData, sizeof(rxData));
 8001022:	2201      	movs	r2, #1
 8001024:	4931      	ldr	r1, [pc, #196]	@ (80010ec <main+0x108>)
 8001026:	4832      	ldr	r0, [pc, #200]	@ (80010f0 <main+0x10c>)
 8001028:	f006 fce6 	bl	80079f8 <HAL_UART_Receive_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800102c:	213c      	movs	r1, #60	@ 0x3c
 800102e:	4831      	ldr	r0, [pc, #196]	@ (80010f4 <main+0x110>)
 8001030:	f005 fc28 	bl	8006884 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001034:	213c      	movs	r1, #60	@ 0x3c
 8001036:	4830      	ldr	r0, [pc, #192]	@ (80010f8 <main+0x114>)
 8001038:	f005 fc24 	bl	8006884 <HAL_TIM_Encoder_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		handleEvent(currentEvent);
 800103c:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <main+0x118>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fbe1 	bl	8001808 <handleEvent>
		executeStateActions();
 8001046:	f000 ff33 	bl	8001eb0 <executeStateActions>
		HAL_Delay(150);
 800104a:	2096      	movs	r0, #150	@ 0x96
 800104c:	f001 fe66 	bl	8002d1c <HAL_Delay>
		if (T_batt >= 50)
 8001050:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <main+0x11c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b31      	cmp	r3, #49	@ 0x31
 8001058:	d926      	bls.n	80010a8 <main+0xc4>
		{
			T_batt = 0;
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <main+0x11c>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 8001060:	4828      	ldr	r0, [pc, #160]	@ (8001104 <main+0x120>)
 8001062:	f002 f9c5 	bl	80033f0 <HAL_ADC_Start_IT>
			if (ADC_on == 1)
 8001066:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <main+0x124>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d11b      	bne.n	80010a8 <main+0xc4>
			{
				ADC_on = 0;
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <main+0x124>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
				adcValue = HAL_ADC_GetValue(&hadc1);
 8001076:	4823      	ldr	r0, [pc, #140]	@ (8001104 <main+0x120>)
 8001078:	f002 fae8 	bl	800364c <HAL_ADC_GetValue>
 800107c:	4603      	mov	r3, r0
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <main+0x128>)
 8001082:	701a      	strb	r2, [r3, #0]

				if (adcValue < 231)
 8001084:	4b21      	ldr	r3, [pc, #132]	@ (800110c <main+0x128>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2be6      	cmp	r3, #230	@ 0xe6
 800108c:	d806      	bhi.n	800109c <main+0xb8>
				{
					HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_SET); // Allumer la LED
 800108e:	2201      	movs	r2, #1
 8001090:	2120      	movs	r1, #32
 8001092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001096:	f003 fdcf 	bl	8004c38 <HAL_GPIO_WritePin>
 800109a:	e005      	b.n	80010a8 <main+0xc4>
				}
				else
				{
					HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_RESET); // Éteindre la LED
 800109c:	2200      	movs	r2, #0
 800109e:	2120      	movs	r1, #32
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a4:	f003 fdc8 	bl	8004c38 <HAL_GPIO_WritePin>
				}
			}

		}
		if (T_enc >= 2)
 80010a8:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <main+0x12c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d9c4      	bls.n	800103c <main+0x58>
		{
			T_enc = 0;
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <main+0x12c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
			encoder_value_right_minus200 = encoder_value_right;
 80010b8:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <main+0x130>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <main+0x134>)
 80010c0:	601a      	str	r2, [r3, #0]
			encoder_value_left_minus200 = encoder_value_left;
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <main+0x138>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <main+0x13c>)
 80010ca:	601a      	str	r2, [r3, #0]
			encoder_value_left = (TIM4->CNT);
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <main+0x140>)
 80010ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <main+0x138>)
 80010d4:	601a      	str	r2, [r3, #0]
			encoder_value_right = (TIM3->CNT);
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <main+0x144>)
 80010d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010da:	461a      	mov	r2, r3
 80010dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <main+0x130>)
 80010de:	601a      	str	r2, [r3, #0]
		handleEvent(currentEvent);
 80010e0:	e7ac      	b.n	800103c <main+0x58>
 80010e2:	bf00      	nop
 80010e4:	20000354 	.word	0x20000354
 80010e8:	20000270 	.word	0x20000270
 80010ec:	2000042b 	.word	0x2000042b
 80010f0:	200003a0 	.word	0x200003a0
 80010f4:	200002bc 	.word	0x200002bc
 80010f8:	20000308 	.word	0x20000308
 80010fc:	2000001b 	.word	0x2000001b
 8001100:	20000428 	.word	0x20000428
 8001104:	2000020c 	.word	0x2000020c
 8001108:	2000042a 	.word	0x2000042a
 800110c:	20000429 	.word	0x20000429
 8001110:	20000444 	.word	0x20000444
 8001114:	2000043c 	.word	0x2000043c
 8001118:	20000448 	.word	0x20000448
 800111c:	20000440 	.word	0x20000440
 8001120:	2000044c 	.word	0x2000044c
 8001124:	40000800 	.word	0x40000800
 8001128:	40000400 	.word	0x40000400

0800112c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b096      	sub	sp, #88	@ 0x58
 8001130:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2244      	movs	r2, #68	@ 0x44
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f008 fedd 	bl	8009efa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800114e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001152:	f003 fdaf 	bl	8004cb4 <HAL_PWREx_ControlVoltageScaling>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800115c:	f001 f9c0 	bl	80024e0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001160:	2302      	movs	r3, #2
 8001162:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001164:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001168:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116a:	2310      	movs	r3, #16
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
 8001170:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001172:	2302      	movs	r3, #2
 8001174:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800117a:	230a      	movs	r3, #10
 800117c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800117e:	2307      	movs	r3, #7
 8001180:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001182:	2302      	movs	r3, #2
 8001184:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001186:	2302      	movs	r3, #2
 8001188:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fde6 	bl	8004d60 <HAL_RCC_OscConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0x72>
	{
		Error_Handler();
 800119a:	f001 f9a1 	bl	80024e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119e:	230f      	movs	r3, #15
 80011a0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a2:	2303      	movs	r3, #3
 80011a4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	2104      	movs	r1, #4
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 f9ae 	bl	8005518 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80011c2:	f001 f98d 	bl	80024e0 <Error_Handler>
	}
}
 80011c6:	bf00      	nop
 80011c8:	3758      	adds	r7, #88	@ 0x58
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
 80011f0:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80011f2:	4b2f      	ldr	r3, [pc, #188]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 80011f4:	4a2f      	ldr	r2, [pc, #188]	@ (80012b4 <MX_ADC1_Init+0xe4>)
 80011f6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 8001200:	2210      	movs	r2, #16
 8001202:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001204:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800120a:	4b29      	ldr	r3, [pc, #164]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 8001212:	2204      	movs	r2, #4
 8001214:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001216:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 8001218:	2200      	movs	r2, #0
 800121a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 800121e:	2200      	movs	r2, #0
 8001220:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001222:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 8001224:	2201      	movs	r2, #1
 8001226:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001228:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001244:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 8001246:	2200      	movs	r2, #0
 8001248:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800124a:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001252:	4817      	ldr	r0, [pc, #92]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 8001254:	f001 ff7c 	bl	8003150 <HAL_ADC_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 800125e:	f001 f93f 	bl	80024e0 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4810      	ldr	r0, [pc, #64]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 800126e:	f003 f8f9 	bl	8004464 <HAL_ADCEx_MultiModeConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8001278:	f001 f932 	bl	80024e0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <MX_ADC1_Init+0xe8>)
 800127e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001280:	2306      	movs	r3, #6
 8001282:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001284:	2307      	movs	r3, #7
 8001286:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001288:	237f      	movs	r3, #127	@ 0x7f
 800128a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800128c:	2304      	movs	r3, #4
 800128e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_ADC1_Init+0xe0>)
 800129a:	f002 fc13 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0xd8>
	{
		Error_Handler();
 80012a4:	f001 f91c 	bl	80024e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000020c 	.word	0x2000020c
 80012b4:	50040000 	.word	0x50040000
 80012b8:	3ac04000 	.word	0x3ac04000

080012bc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	@ 0x38
 80012c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80012ee:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <MX_TIM2_Init+0x100>)
 80012f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 4-1;
 80012f6:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <MX_TIM2_Init+0x100>)
 80012f8:	2203      	movs	r2, #3
 80012fa:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b2f      	ldr	r3, [pc, #188]	@ (80013bc <MX_TIM2_Init+0x100>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 40000-1;
 8001302:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <MX_TIM2_Init+0x100>)
 8001304:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001308:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130a:	4b2c      	ldr	r3, [pc, #176]	@ (80013bc <MX_TIM2_Init+0x100>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001310:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <MX_TIM2_Init+0x100>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001316:	4829      	ldr	r0, [pc, #164]	@ (80013bc <MX_TIM2_Init+0x100>)
 8001318:	f004 ffde 	bl	80062d8 <HAL_TIM_Base_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8001322:	f001 f8dd 	bl	80024e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001326:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800132c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001330:	4619      	mov	r1, r3
 8001332:	4822      	ldr	r0, [pc, #136]	@ (80013bc <MX_TIM2_Init+0x100>)
 8001334:	f005 fd4a 	bl	8006dcc <HAL_TIM_ConfigClockSource>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 800133e:	f001 f8cf 	bl	80024e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001342:	481e      	ldr	r0, [pc, #120]	@ (80013bc <MX_TIM2_Init+0x100>)
 8001344:	f005 f890 	bl	8006468 <HAL_TIM_PWM_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 800134e:	f001 f8c7 	bl	80024e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4816      	ldr	r0, [pc, #88]	@ (80013bc <MX_TIM2_Init+0x100>)
 8001362:	f006 fa55 	bl	8007810 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 800136c:	f001 f8b8 	bl	80024e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001370:	2360      	movs	r3, #96	@ 0x60
 8001372:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	480d      	ldr	r0, [pc, #52]	@ (80013bc <MX_TIM2_Init+0x100>)
 8001388:	f005 fc0c 	bl	8006ba4 <HAL_TIM_PWM_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8001392:	f001 f8a5 	bl	80024e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	220c      	movs	r2, #12
 800139a:	4619      	mov	r1, r3
 800139c:	4807      	ldr	r0, [pc, #28]	@ (80013bc <MX_TIM2_Init+0x100>)
 800139e:	f005 fc01 	bl	8006ba4 <HAL_TIM_PWM_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0xf0>
	{
		Error_Handler();
 80013a8:	f001 f89a 	bl	80024e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80013ac:	4803      	ldr	r0, [pc, #12]	@ (80013bc <MX_TIM2_Init+0x100>)
 80013ae:	f001 f9ef 	bl	8002790 <HAL_TIM_MspPostInit>

}
 80013b2:	bf00      	nop
 80013b4:	3738      	adds	r7, #56	@ 0x38
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000270 	.word	0x20000270

080013c0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	2224      	movs	r2, #36	@ 0x24
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f008 fd93 	bl	8009efa <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <MX_TIM3_Init+0xa4>)
 80013e0:	4a21      	ldr	r2, [pc, #132]	@ (8001468 <MX_TIM3_Init+0xa8>)
 80013e2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <MX_TIM3_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <MX_TIM3_Init+0xa4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_TIM3_Init+0xa4>)
 80013f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_TIM3_Init+0xa4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_TIM3_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001404:	2301      	movs	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800140c:	2301      	movs	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800141c:	2301      	movs	r3, #1
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <MX_TIM3_Init+0xa4>)
 8001430:	f005 f982 	bl	8006738 <HAL_TIM_Encoder_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 800143a:	f001 f851 	bl	80024e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	4806      	ldr	r0, [pc, #24]	@ (8001464 <MX_TIM3_Init+0xa4>)
 800144c:	f006 f9e0 	bl	8007810 <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8001456:	f001 f843 	bl	80024e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	@ 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200002bc 	.word	0x200002bc
 8001468:	40000400 	.word	0x40000400

0800146c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	@ 0x30
 8001470:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2224      	movs	r2, #36	@ 0x24
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f008 fd3d 	bl	8009efa <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	463b      	mov	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <MX_TIM4_Init+0xa4>)
 800148c:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <MX_TIM4_Init+0xa8>)
 800148e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <MX_TIM4_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MX_TIM4_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <MX_TIM4_Init+0xa4>)
 800149e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_TIM4_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <MX_TIM4_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b8:	2301      	movs	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	480d      	ldr	r0, [pc, #52]	@ (8001510 <MX_TIM4_Init+0xa4>)
 80014dc:	f005 f92c 	bl	8006738 <HAL_TIM_Encoder_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM4_Init+0x7e>
	{
		Error_Handler();
 80014e6:	f000 fffb 	bl	80024e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	@ (8001510 <MX_TIM4_Init+0xa4>)
 80014f8:	f006 f98a 	bl	8007810 <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM4_Init+0x9a>
	{
		Error_Handler();
 8001502:	f000 ffed 	bl	80024e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3730      	adds	r7, #48	@ 0x30
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000308 	.word	0x20000308
 8001514:	40000800 	.word	0x40000800

08001518 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_TIM6_Init+0x64>)
 800152a:	4a15      	ldr	r2, [pc, #84]	@ (8001580 <MX_TIM6_Init+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 122-1;
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <MX_TIM6_Init+0x64>)
 8001530:	2279      	movs	r2, #121	@ 0x79
 8001532:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_TIM6_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535-1;
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <MX_TIM6_Init+0x64>)
 800153c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001540:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <MX_TIM6_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001548:	480c      	ldr	r0, [pc, #48]	@ (800157c <MX_TIM6_Init+0x64>)
 800154a:	f004 fec5 	bl	80062d8 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8001554:	f000 ffc4 	bl	80024e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_TIM6_Init+0x64>)
 8001566:	f006 f953 	bl	8007810 <HAL_TIMEx_MasterConfigSynchronization>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 8001570:	f000 ffb6 	bl	80024e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000354 	.word	0x20000354
 8001580:	40001000 	.word	0x40001000

08001584 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001588:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <MX_USART3_UART_Init+0x5c>)
 800158c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 8001590:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001594:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_USART3_UART_Init+0x58>)
 80015c8:	f006 f9c8 	bl	800795c <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 80015d2:	f000 ff85 	bl	80024e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200003a0 	.word	0x200003a0
 80015e0:	40004800 	.word	0x40004800

080015e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b43      	ldr	r3, [pc, #268]	@ (8001708 <MX_GPIO_Init+0x124>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	4a42      	ldr	r2, [pc, #264]	@ (8001708 <MX_GPIO_Init+0x124>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001606:	4b40      	ldr	r3, [pc, #256]	@ (8001708 <MX_GPIO_Init+0x124>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	4b3d      	ldr	r3, [pc, #244]	@ (8001708 <MX_GPIO_Init+0x124>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	4a3c      	ldr	r2, [pc, #240]	@ (8001708 <MX_GPIO_Init+0x124>)
 8001618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800161c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161e:	4b3a      	ldr	r3, [pc, #232]	@ (8001708 <MX_GPIO_Init+0x124>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <MX_GPIO_Init+0x124>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	4a36      	ldr	r2, [pc, #216]	@ (8001708 <MX_GPIO_Init+0x124>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001636:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <MX_GPIO_Init+0x124>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <MX_GPIO_Init+0x124>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	4a30      	ldr	r2, [pc, #192]	@ (8001708 <MX_GPIO_Init+0x124>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164e:	4b2e      	ldr	r3, [pc, #184]	@ (8001708 <MX_GPIO_Init+0x124>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2120      	movs	r1, #32
 800165e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001662:	f003 fae9 	bl	8004c38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2104      	movs	r1, #4
 800166a:	4828      	ldr	r0, [pc, #160]	@ (800170c <MX_GPIO_Init+0x128>)
 800166c:	f003 fae4 	bl	8004c38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001676:	4826      	ldr	r0, [pc, #152]	@ (8001710 <MX_GPIO_Init+0x12c>)
 8001678:	f003 fade 	bl	8004c38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800167c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001680:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001682:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001686:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	481f      	ldr	r0, [pc, #124]	@ (8001710 <MX_GPIO_Init+0x12c>)
 8001694:	f003 f926 	bl	80048e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Alert_batt_Pin */
	GPIO_InitStruct.Pin = Alert_batt_Pin;
 8001698:	2320      	movs	r3, #32
 800169a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Alert_batt_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b2:	f003 f917 	bl	80048e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIR2_Pin */
	GPIO_InitStruct.Pin = DIR2_Pin;
 80016b6:	2304      	movs	r3, #4
 80016b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	480f      	ldr	r0, [pc, #60]	@ (800170c <MX_GPIO_Init+0x128>)
 80016ce:	f003 f909 	bl	80048e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIR1_Pin */
	GPIO_InitStruct.Pin = DIR1_Pin;
 80016d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4809      	ldr	r0, [pc, #36]	@ (8001710 <MX_GPIO_Init+0x12c>)
 80016ec:	f003 f8fa 	bl	80048e4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2028      	movs	r0, #40	@ 0x28
 80016f6:	f003 f840 	bl	800477a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016fa:	2028      	movs	r0, #40	@ 0x28
 80016fc:	f003 f859 	bl	80047b2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	@ 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	48000400 	.word	0x48000400
 8001710:	48000800 	.word	0x48000800

08001714 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10d      	bne.n	8001742 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		T_batt++;
 8001726:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	3301      	adds	r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001732:	701a      	strb	r2, [r3, #0]
		T_enc++;
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	3301      	adds	r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001740:	701a      	strb	r2, [r3, #0]
	}
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40001000 	.word	0x40001000
 8001754:	20000428 	.word	0x20000428
 8001758:	20000444 	.word	0x20000444

0800175c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	ADC_on = 1;
 8001764:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	2000042a 	.word	0x2000042a

0800177c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1b      	ldr	r2, [pc, #108]	@ (80017f8 <HAL_UART_RxCpltCallback+0x7c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12f      	bne.n	80017ee <HAL_UART_RxCpltCallback+0x72>
	{
		if(rxData == 'F')
 800178e:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_UART_RxCpltCallback+0x80>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b46      	cmp	r3, #70	@ 0x46
 8001794:	d103      	bne.n	800179e <HAL_UART_RxCpltCallback+0x22>
			currentEvent = EVENT_AV;
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <HAL_UART_RxCpltCallback+0x84>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	e022      	b.n	80017e4 <HAL_UART_RxCpltCallback+0x68>
		else if(rxData == 'B')
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <HAL_UART_RxCpltCallback+0x80>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b42      	cmp	r3, #66	@ 0x42
 80017a4:	d103      	bne.n	80017ae <HAL_UART_RxCpltCallback+0x32>
			currentEvent = EVENT_R;
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <HAL_UART_RxCpltCallback+0x84>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e01a      	b.n	80017e4 <HAL_UART_RxCpltCallback+0x68>
		else if(rxData == 'L')
 80017ae:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_UART_RxCpltCallback+0x80>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b4c      	cmp	r3, #76	@ 0x4c
 80017b4:	d103      	bne.n	80017be <HAL_UART_RxCpltCallback+0x42>
			currentEvent = EVENT_G;
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_UART_RxCpltCallback+0x84>)
 80017b8:	2203      	movs	r2, #3
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e012      	b.n	80017e4 <HAL_UART_RxCpltCallback+0x68>
		else if(rxData == 'R')
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <HAL_UART_RxCpltCallback+0x80>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b52      	cmp	r3, #82	@ 0x52
 80017c4:	d103      	bne.n	80017ce <HAL_UART_RxCpltCallback+0x52>
			currentEvent = EVENT_D;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <HAL_UART_RxCpltCallback+0x84>)
 80017c8:	2202      	movs	r2, #2
 80017ca:	701a      	strb	r2, [r3, #0]
 80017cc:	e00a      	b.n	80017e4 <HAL_UART_RxCpltCallback+0x68>
		else if(rxData == 'X')
 80017ce:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <HAL_UART_RxCpltCallback+0x80>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b58      	cmp	r3, #88	@ 0x58
 80017d4:	d103      	bne.n	80017de <HAL_UART_RxCpltCallback+0x62>
			currentEvent = EVENT_END;
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <HAL_UART_RxCpltCallback+0x84>)
 80017d8:	2204      	movs	r2, #4
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e002      	b.n	80017e4 <HAL_UART_RxCpltCallback+0x68>
		else
			currentEvent = EVENT_NEUTRAL;
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_UART_RxCpltCallback+0x84>)
 80017e0:	2205      	movs	r2, #5
 80017e2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &rxData, sizeof(rxData));
 80017e4:	2201      	movs	r2, #1
 80017e6:	4905      	ldr	r1, [pc, #20]	@ (80017fc <HAL_UART_RxCpltCallback+0x80>)
 80017e8:	4806      	ldr	r0, [pc, #24]	@ (8001804 <HAL_UART_RxCpltCallback+0x88>)
 80017ea:	f006 f905 	bl	80079f8 <HAL_UART_Receive_IT>
	}
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40004800 	.word	0x40004800
 80017fc:	2000042b 	.word	0x2000042b
 8001800:	2000001b 	.word	0x2000001b
 8001804:	200003a0 	.word	0x200003a0

08001808 <handleEvent>:

void handleEvent(Event_t event) {
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
	switch (currentState) {
 8001812:	4b99      	ldr	r3, [pc, #612]	@ (8001a78 <handleEvent+0x270>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b0c      	cmp	r3, #12
 8001818:	f200 825c 	bhi.w	8001cd4 <handleEvent+0x4cc>
 800181c:	a201      	add	r2, pc, #4	@ (adr r2, 8001824 <handleEvent+0x1c>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	08001859 	.word	0x08001859
 8001828:	080018b1 	.word	0x080018b1
 800182c:	08001909 	.word	0x08001909
 8001830:	08001961 	.word	0x08001961
 8001834:	080019b9 	.word	0x080019b9
 8001838:	08001a11 	.word	0x08001a11
 800183c:	08001a69 	.word	0x08001a69
 8001840:	08001ac7 	.word	0x08001ac7
 8001844:	08001b1f 	.word	0x08001b1f
 8001848:	08001b77 	.word	0x08001b77
 800184c:	08001bcf 	.word	0x08001bcf
 8001850:	08001c25 	.word	0x08001c25
 8001854:	08001c7b 	.word	0x08001c7b
	case STATE_NEUTRAL:
		if (event == EVENT_AV) {
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <handleEvent+0x5e>
			currentState = STATE_AV1;
 800185e:	4b86      	ldr	r3, [pc, #536]	@ (8001a78 <handleEvent+0x270>)
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001864:	e23a      	b.n	8001cdc <handleEvent+0x4d4>
		else if (event == EVENT_R) {
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d103      	bne.n	8001874 <handleEvent+0x6c>
			currentState = STATE_R1;
 800186c:	4b82      	ldr	r3, [pc, #520]	@ (8001a78 <handleEvent+0x270>)
 800186e:	2204      	movs	r2, #4
 8001870:	701a      	strb	r2, [r3, #0]
		break;
 8001872:	e233      	b.n	8001cdc <handleEvent+0x4d4>
		else if (event == EVENT_D) {
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d103      	bne.n	8001882 <handleEvent+0x7a>
			currentState = STATE_D1;
 800187a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a78 <handleEvent+0x270>)
 800187c:	2207      	movs	r2, #7
 800187e:	701a      	strb	r2, [r3, #0]
		break;
 8001880:	e22c      	b.n	8001cdc <handleEvent+0x4d4>
		else if (event == EVENT_G) {
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d103      	bne.n	8001890 <handleEvent+0x88>
			currentState = STATE_G1;
 8001888:	4b7b      	ldr	r3, [pc, #492]	@ (8001a78 <handleEvent+0x270>)
 800188a:	220a      	movs	r2, #10
 800188c:	701a      	strb	r2, [r3, #0]
		break;
 800188e:	e225      	b.n	8001cdc <handleEvent+0x4d4>
		else if (event == EVENT_END) {
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d103      	bne.n	800189e <handleEvent+0x96>
			currentState = STATE_END;
 8001896:	4b78      	ldr	r3, [pc, #480]	@ (8001a78 <handleEvent+0x270>)
 8001898:	220d      	movs	r2, #13
 800189a:	701a      	strb	r2, [r3, #0]
		break;
 800189c:	e21e      	b.n	8001cdc <handleEvent+0x4d4>
		else if (event == EVENT_NEUTRAL){
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	f040 821b 	bne.w	8001cdc <handleEvent+0x4d4>
			currentState = currentState;
 80018a6:	4b74      	ldr	r3, [pc, #464]	@ (8001a78 <handleEvent+0x270>)
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	4b73      	ldr	r3, [pc, #460]	@ (8001a78 <handleEvent+0x270>)
 80018ac:	701a      	strb	r2, [r3, #0]
		break;
 80018ae:	e215      	b.n	8001cdc <handleEvent+0x4d4>

	case STATE_AV1:
		if (event == EVENT_AV) {
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <handleEvent+0xb6>
			currentState = STATE_AV2;
 80018b6:	4b70      	ldr	r3, [pc, #448]	@ (8001a78 <handleEvent+0x270>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 80018bc:	e210      	b.n	8001ce0 <handleEvent+0x4d8>
		else if (event == EVENT_R) {
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d103      	bne.n	80018cc <handleEvent+0xc4>
			currentState = STATE_NEUTRAL;
 80018c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a78 <handleEvent+0x270>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
		break;
 80018ca:	e209      	b.n	8001ce0 <handleEvent+0x4d8>
		else if (event == EVENT_D) {
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d103      	bne.n	80018da <handleEvent+0xd2>
			currentState = STATE_D1;
 80018d2:	4b69      	ldr	r3, [pc, #420]	@ (8001a78 <handleEvent+0x270>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	701a      	strb	r2, [r3, #0]
		break;
 80018d8:	e202      	b.n	8001ce0 <handleEvent+0x4d8>
		else if (event == EVENT_G) {
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d103      	bne.n	80018e8 <handleEvent+0xe0>
			currentState = STATE_G1;
 80018e0:	4b65      	ldr	r3, [pc, #404]	@ (8001a78 <handleEvent+0x270>)
 80018e2:	220a      	movs	r2, #10
 80018e4:	701a      	strb	r2, [r3, #0]
		break;
 80018e6:	e1fb      	b.n	8001ce0 <handleEvent+0x4d8>
		else if (event == EVENT_END) {
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d103      	bne.n	80018f6 <handleEvent+0xee>
			currentState = STATE_END;
 80018ee:	4b62      	ldr	r3, [pc, #392]	@ (8001a78 <handleEvent+0x270>)
 80018f0:	220d      	movs	r2, #13
 80018f2:	701a      	strb	r2, [r3, #0]
		break;
 80018f4:	e1f4      	b.n	8001ce0 <handleEvent+0x4d8>
		else if (event == EVENT_NEUTRAL){
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	f040 81f1 	bne.w	8001ce0 <handleEvent+0x4d8>
			currentState = currentState;
 80018fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001a78 <handleEvent+0x270>)
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	4b5d      	ldr	r3, [pc, #372]	@ (8001a78 <handleEvent+0x270>)
 8001904:	701a      	strb	r2, [r3, #0]
		break;
 8001906:	e1eb      	b.n	8001ce0 <handleEvent+0x4d8>

	case STATE_AV2:
		if (event == EVENT_AV) {
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <handleEvent+0x10e>
			currentState = STATE_AV3;
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <handleEvent+0x270>)
 8001910:	2203      	movs	r2, #3
 8001912:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001914:	e1e6      	b.n	8001ce4 <handleEvent+0x4dc>
		else if (event == EVENT_R) {
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d103      	bne.n	8001924 <handleEvent+0x11c>
			currentState = STATE_AV1;
 800191c:	4b56      	ldr	r3, [pc, #344]	@ (8001a78 <handleEvent+0x270>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
		break;
 8001922:	e1df      	b.n	8001ce4 <handleEvent+0x4dc>
		else if (event == EVENT_D) {
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d103      	bne.n	8001932 <handleEvent+0x12a>
			currentState = STATE_D2;
 800192a:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <handleEvent+0x270>)
 800192c:	2208      	movs	r2, #8
 800192e:	701a      	strb	r2, [r3, #0]
		break;
 8001930:	e1d8      	b.n	8001ce4 <handleEvent+0x4dc>
		else if (event == EVENT_G) {
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d103      	bne.n	8001940 <handleEvent+0x138>
			currentState = STATE_G2;
 8001938:	4b4f      	ldr	r3, [pc, #316]	@ (8001a78 <handleEvent+0x270>)
 800193a:	220b      	movs	r2, #11
 800193c:	701a      	strb	r2, [r3, #0]
		break;
 800193e:	e1d1      	b.n	8001ce4 <handleEvent+0x4dc>
		else if (event == EVENT_END) {
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b04      	cmp	r3, #4
 8001944:	d103      	bne.n	800194e <handleEvent+0x146>
			currentState = STATE_END;
 8001946:	4b4c      	ldr	r3, [pc, #304]	@ (8001a78 <handleEvent+0x270>)
 8001948:	220d      	movs	r2, #13
 800194a:	701a      	strb	r2, [r3, #0]
		break;
 800194c:	e1ca      	b.n	8001ce4 <handleEvent+0x4dc>
		else if (event == EVENT_NEUTRAL){
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b05      	cmp	r3, #5
 8001952:	f040 81c7 	bne.w	8001ce4 <handleEvent+0x4dc>
			currentState = currentState;
 8001956:	4b48      	ldr	r3, [pc, #288]	@ (8001a78 <handleEvent+0x270>)
 8001958:	781a      	ldrb	r2, [r3, #0]
 800195a:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <handleEvent+0x270>)
 800195c:	701a      	strb	r2, [r3, #0]
		break;
 800195e:	e1c1      	b.n	8001ce4 <handleEvent+0x4dc>

	case STATE_AV3:
		if (event == EVENT_AV) {
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <handleEvent+0x166>
			currentState = STATE_AV3;
 8001966:	4b44      	ldr	r3, [pc, #272]	@ (8001a78 <handleEvent+0x270>)
 8001968:	2203      	movs	r2, #3
 800196a:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 800196c:	e1bc      	b.n	8001ce8 <handleEvent+0x4e0>
		else if (event == EVENT_R) {
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d103      	bne.n	800197c <handleEvent+0x174>
			currentState = STATE_AV2;
 8001974:	4b40      	ldr	r3, [pc, #256]	@ (8001a78 <handleEvent+0x270>)
 8001976:	2202      	movs	r2, #2
 8001978:	701a      	strb	r2, [r3, #0]
		break;
 800197a:	e1b5      	b.n	8001ce8 <handleEvent+0x4e0>
		else if (event == EVENT_D) {
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d103      	bne.n	800198a <handleEvent+0x182>
			currentState = STATE_D3;
 8001982:	4b3d      	ldr	r3, [pc, #244]	@ (8001a78 <handleEvent+0x270>)
 8001984:	2209      	movs	r2, #9
 8001986:	701a      	strb	r2, [r3, #0]
		break;
 8001988:	e1ae      	b.n	8001ce8 <handleEvent+0x4e0>
		else if (event == EVENT_G) {
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d103      	bne.n	8001998 <handleEvent+0x190>
			currentState = STATE_G3;
 8001990:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <handleEvent+0x270>)
 8001992:	220c      	movs	r2, #12
 8001994:	701a      	strb	r2, [r3, #0]
		break;
 8001996:	e1a7      	b.n	8001ce8 <handleEvent+0x4e0>
		else if (event == EVENT_END) {
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b04      	cmp	r3, #4
 800199c:	d103      	bne.n	80019a6 <handleEvent+0x19e>
			currentState = STATE_END;
 800199e:	4b36      	ldr	r3, [pc, #216]	@ (8001a78 <handleEvent+0x270>)
 80019a0:	220d      	movs	r2, #13
 80019a2:	701a      	strb	r2, [r3, #0]
		break;
 80019a4:	e1a0      	b.n	8001ce8 <handleEvent+0x4e0>
		else if (event == EVENT_NEUTRAL){
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	f040 819d 	bne.w	8001ce8 <handleEvent+0x4e0>
			currentState = currentState;
 80019ae:	4b32      	ldr	r3, [pc, #200]	@ (8001a78 <handleEvent+0x270>)
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <handleEvent+0x270>)
 80019b4:	701a      	strb	r2, [r3, #0]
		break;
 80019b6:	e197      	b.n	8001ce8 <handleEvent+0x4e0>

	case STATE_R1:
		if (event == EVENT_AV) {
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <handleEvent+0x1be>
			currentState = STATE_NEUTRAL;
 80019be:	4b2e      	ldr	r3, [pc, #184]	@ (8001a78 <handleEvent+0x270>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 80019c4:	e192      	b.n	8001cec <handleEvent+0x4e4>
		else if (event == EVENT_R) {
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d103      	bne.n	80019d4 <handleEvent+0x1cc>
			currentState = STATE_R2;
 80019cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <handleEvent+0x270>)
 80019ce:	2205      	movs	r2, #5
 80019d0:	701a      	strb	r2, [r3, #0]
		break;
 80019d2:	e18b      	b.n	8001cec <handleEvent+0x4e4>
		else if (event == EVENT_D) {
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d103      	bne.n	80019e2 <handleEvent+0x1da>
			currentState = STATE_D1;
 80019da:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <handleEvent+0x270>)
 80019dc:	2207      	movs	r2, #7
 80019de:	701a      	strb	r2, [r3, #0]
		break;
 80019e0:	e184      	b.n	8001cec <handleEvent+0x4e4>
		else if (event == EVENT_G) {
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d103      	bne.n	80019f0 <handleEvent+0x1e8>
			currentState = STATE_G1;
 80019e8:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <handleEvent+0x270>)
 80019ea:	220a      	movs	r2, #10
 80019ec:	701a      	strb	r2, [r3, #0]
		break;
 80019ee:	e17d      	b.n	8001cec <handleEvent+0x4e4>
		else if (event == EVENT_END) {
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d103      	bne.n	80019fe <handleEvent+0x1f6>
			currentState = STATE_END;
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <handleEvent+0x270>)
 80019f8:	220d      	movs	r2, #13
 80019fa:	701a      	strb	r2, [r3, #0]
		break;
 80019fc:	e176      	b.n	8001cec <handleEvent+0x4e4>
		else if (event == EVENT_NEUTRAL){
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	f040 8173 	bne.w	8001cec <handleEvent+0x4e4>
			currentState = currentState;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <handleEvent+0x270>)
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <handleEvent+0x270>)
 8001a0c:	701a      	strb	r2, [r3, #0]
		break;
 8001a0e:	e16d      	b.n	8001cec <handleEvent+0x4e4>

	case STATE_R2:
		if (event == EVENT_AV) {
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d103      	bne.n	8001a1e <handleEvent+0x216>
			currentState = STATE_R1;
 8001a16:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <handleEvent+0x270>)
 8001a18:	2204      	movs	r2, #4
 8001a1a:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001a1c:	e168      	b.n	8001cf0 <handleEvent+0x4e8>
		else if (event == EVENT_R) {
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d103      	bne.n	8001a2c <handleEvent+0x224>
			currentState = STATE_R3;
 8001a24:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <handleEvent+0x270>)
 8001a26:	2206      	movs	r2, #6
 8001a28:	701a      	strb	r2, [r3, #0]
		break;
 8001a2a:	e161      	b.n	8001cf0 <handleEvent+0x4e8>
		else if (event == EVENT_D) {
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d103      	bne.n	8001a3a <handleEvent+0x232>
			currentState = STATE_D2;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <handleEvent+0x270>)
 8001a34:	2208      	movs	r2, #8
 8001a36:	701a      	strb	r2, [r3, #0]
		break;
 8001a38:	e15a      	b.n	8001cf0 <handleEvent+0x4e8>
		else if (event == EVENT_G) {
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d103      	bne.n	8001a48 <handleEvent+0x240>
			currentState = STATE_G2;
 8001a40:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <handleEvent+0x270>)
 8001a42:	220b      	movs	r2, #11
 8001a44:	701a      	strb	r2, [r3, #0]
		break;
 8001a46:	e153      	b.n	8001cf0 <handleEvent+0x4e8>
		else if (event == EVENT_END) {
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d103      	bne.n	8001a56 <handleEvent+0x24e>
			currentState = STATE_END;
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <handleEvent+0x270>)
 8001a50:	220d      	movs	r2, #13
 8001a52:	701a      	strb	r2, [r3, #0]
		break;
 8001a54:	e14c      	b.n	8001cf0 <handleEvent+0x4e8>
		else if (event == EVENT_NEUTRAL){
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	f040 8149 	bne.w	8001cf0 <handleEvent+0x4e8>
			currentState = currentState;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <handleEvent+0x270>)
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <handleEvent+0x270>)
 8001a64:	701a      	strb	r2, [r3, #0]
		break;
 8001a66:	e143      	b.n	8001cf0 <handleEvent+0x4e8>

	case STATE_R3:
		if (event == EVENT_AV) {
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <handleEvent+0x274>
			currentState = STATE_R2;
 8001a6e:	4b02      	ldr	r3, [pc, #8]	@ (8001a78 <handleEvent+0x270>)
 8001a70:	2205      	movs	r2, #5
 8001a72:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001a74:	e13e      	b.n	8001cf4 <handleEvent+0x4ec>
 8001a76:	bf00      	nop
 8001a78:	20000468 	.word	0x20000468
		else if (event == EVENT_R) {
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d103      	bne.n	8001a8a <handleEvent+0x282>
			currentState = STATE_R3;
 8001a82:	4b93      	ldr	r3, [pc, #588]	@ (8001cd0 <handleEvent+0x4c8>)
 8001a84:	2206      	movs	r2, #6
 8001a86:	701a      	strb	r2, [r3, #0]
		break;
 8001a88:	e134      	b.n	8001cf4 <handleEvent+0x4ec>
		else if (event == EVENT_D) {
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d103      	bne.n	8001a98 <handleEvent+0x290>
			currentState = STATE_D3;
 8001a90:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd0 <handleEvent+0x4c8>)
 8001a92:	2209      	movs	r2, #9
 8001a94:	701a      	strb	r2, [r3, #0]
		break;
 8001a96:	e12d      	b.n	8001cf4 <handleEvent+0x4ec>
		else if (event == EVENT_G) {
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d103      	bne.n	8001aa6 <handleEvent+0x29e>
			currentState = STATE_G3;
 8001a9e:	4b8c      	ldr	r3, [pc, #560]	@ (8001cd0 <handleEvent+0x4c8>)
 8001aa0:	220c      	movs	r2, #12
 8001aa2:	701a      	strb	r2, [r3, #0]
		break;
 8001aa4:	e126      	b.n	8001cf4 <handleEvent+0x4ec>
		else if (event == EVENT_END) {
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d103      	bne.n	8001ab4 <handleEvent+0x2ac>
			currentState = STATE_END;
 8001aac:	4b88      	ldr	r3, [pc, #544]	@ (8001cd0 <handleEvent+0x4c8>)
 8001aae:	220d      	movs	r2, #13
 8001ab0:	701a      	strb	r2, [r3, #0]
		break;
 8001ab2:	e11f      	b.n	8001cf4 <handleEvent+0x4ec>
		else if (event == EVENT_NEUTRAL){
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	f040 811c 	bne.w	8001cf4 <handleEvent+0x4ec>
			currentState = currentState;
 8001abc:	4b84      	ldr	r3, [pc, #528]	@ (8001cd0 <handleEvent+0x4c8>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4b83      	ldr	r3, [pc, #524]	@ (8001cd0 <handleEvent+0x4c8>)
 8001ac2:	701a      	strb	r2, [r3, #0]
		break;
 8001ac4:	e116      	b.n	8001cf4 <handleEvent+0x4ec>

	case STATE_D1:
		if (event == EVENT_AV) {
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d103      	bne.n	8001ad4 <handleEvent+0x2cc>
			currentState = STATE_AV1;
 8001acc:	4b80      	ldr	r3, [pc, #512]	@ (8001cd0 <handleEvent+0x4c8>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001ad2:	e111      	b.n	8001cf8 <handleEvent+0x4f0>
		else if (event == EVENT_R) {
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d103      	bne.n	8001ae2 <handleEvent+0x2da>
			currentState = STATE_R1;
 8001ada:	4b7d      	ldr	r3, [pc, #500]	@ (8001cd0 <handleEvent+0x4c8>)
 8001adc:	2204      	movs	r2, #4
 8001ade:	701a      	strb	r2, [r3, #0]
		break;
 8001ae0:	e10a      	b.n	8001cf8 <handleEvent+0x4f0>
		else if (event == EVENT_D) {
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d103      	bne.n	8001af0 <handleEvent+0x2e8>
			currentState = STATE_D2;
 8001ae8:	4b79      	ldr	r3, [pc, #484]	@ (8001cd0 <handleEvent+0x4c8>)
 8001aea:	2208      	movs	r2, #8
 8001aec:	701a      	strb	r2, [r3, #0]
		break;
 8001aee:	e103      	b.n	8001cf8 <handleEvent+0x4f0>
		else if (event == EVENT_G) {
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d103      	bne.n	8001afe <handleEvent+0x2f6>
			currentState = STATE_NEUTRAL;
 8001af6:	4b76      	ldr	r3, [pc, #472]	@ (8001cd0 <handleEvent+0x4c8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
		break;
 8001afc:	e0fc      	b.n	8001cf8 <handleEvent+0x4f0>
		else if (event == EVENT_END) {
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d103      	bne.n	8001b0c <handleEvent+0x304>
			currentState = STATE_END;
 8001b04:	4b72      	ldr	r3, [pc, #456]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b06:	220d      	movs	r2, #13
 8001b08:	701a      	strb	r2, [r3, #0]
		break;
 8001b0a:	e0f5      	b.n	8001cf8 <handleEvent+0x4f0>
		else if (event == EVENT_NEUTRAL){
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	f040 80f2 	bne.w	8001cf8 <handleEvent+0x4f0>
			currentState = currentState;
 8001b14:	4b6e      	ldr	r3, [pc, #440]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	4b6d      	ldr	r3, [pc, #436]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b1a:	701a      	strb	r2, [r3, #0]
		break;
 8001b1c:	e0ec      	b.n	8001cf8 <handleEvent+0x4f0>

	case STATE_D2:
		if (event == EVENT_AV) {
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <handleEvent+0x324>
			currentState = STATE_AV2;
 8001b24:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b26:	2202      	movs	r2, #2
 8001b28:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001b2a:	e0e7      	b.n	8001cfc <handleEvent+0x4f4>
		else if (event == EVENT_R) {
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d103      	bne.n	8001b3a <handleEvent+0x332>
			currentState = STATE_R2;
 8001b32:	4b67      	ldr	r3, [pc, #412]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b34:	2205      	movs	r2, #5
 8001b36:	701a      	strb	r2, [r3, #0]
		break;
 8001b38:	e0e0      	b.n	8001cfc <handleEvent+0x4f4>
		else if (event == EVENT_D) {
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d103      	bne.n	8001b48 <handleEvent+0x340>
			currentState = STATE_D3;
 8001b40:	4b63      	ldr	r3, [pc, #396]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b42:	2209      	movs	r2, #9
 8001b44:	701a      	strb	r2, [r3, #0]
		break;
 8001b46:	e0d9      	b.n	8001cfc <handleEvent+0x4f4>
		else if (event == EVENT_G) {
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d103      	bne.n	8001b56 <handleEvent+0x34e>
			currentState = STATE_D1;
 8001b4e:	4b60      	ldr	r3, [pc, #384]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	701a      	strb	r2, [r3, #0]
		break;
 8001b54:	e0d2      	b.n	8001cfc <handleEvent+0x4f4>
		else if (event == EVENT_END) {
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d103      	bne.n	8001b64 <handleEvent+0x35c>
			currentState = STATE_END;
 8001b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b5e:	220d      	movs	r2, #13
 8001b60:	701a      	strb	r2, [r3, #0]
		break;
 8001b62:	e0cb      	b.n	8001cfc <handleEvent+0x4f4>
		else if (event == EVENT_NEUTRAL){
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	f040 80c8 	bne.w	8001cfc <handleEvent+0x4f4>
			currentState = currentState;
 8001b6c:	4b58      	ldr	r3, [pc, #352]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	4b57      	ldr	r3, [pc, #348]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b72:	701a      	strb	r2, [r3, #0]
		break;
 8001b74:	e0c2      	b.n	8001cfc <handleEvent+0x4f4>

	case STATE_D3:
		if (event == EVENT_AV) {
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d103      	bne.n	8001b84 <handleEvent+0x37c>
			currentState = STATE_AV3;
 8001b7c:	4b54      	ldr	r3, [pc, #336]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b7e:	2203      	movs	r2, #3
 8001b80:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001b82:	e0bd      	b.n	8001d00 <handleEvent+0x4f8>
		else if (event == EVENT_R) {
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d103      	bne.n	8001b92 <handleEvent+0x38a>
			currentState = STATE_R3;
 8001b8a:	4b51      	ldr	r3, [pc, #324]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b8c:	2206      	movs	r2, #6
 8001b8e:	701a      	strb	r2, [r3, #0]
		break;
 8001b90:	e0b6      	b.n	8001d00 <handleEvent+0x4f8>
		else if (event == EVENT_D) {
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d103      	bne.n	8001ba0 <handleEvent+0x398>
			currentState = STATE_D3;
 8001b98:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd0 <handleEvent+0x4c8>)
 8001b9a:	2209      	movs	r2, #9
 8001b9c:	701a      	strb	r2, [r3, #0]
		break;
 8001b9e:	e0af      	b.n	8001d00 <handleEvent+0x4f8>
		else if (event == EVENT_G) {
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d103      	bne.n	8001bae <handleEvent+0x3a6>
			currentState = STATE_D2;
 8001ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd0 <handleEvent+0x4c8>)
 8001ba8:	2208      	movs	r2, #8
 8001baa:	701a      	strb	r2, [r3, #0]
		break;
 8001bac:	e0a8      	b.n	8001d00 <handleEvent+0x4f8>
		else if (event == EVENT_END) {
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d103      	bne.n	8001bbc <handleEvent+0x3b4>
			currentState = STATE_END;
 8001bb4:	4b46      	ldr	r3, [pc, #280]	@ (8001cd0 <handleEvent+0x4c8>)
 8001bb6:	220d      	movs	r2, #13
 8001bb8:	701a      	strb	r2, [r3, #0]
		break;
 8001bba:	e0a1      	b.n	8001d00 <handleEvent+0x4f8>
		else if (event == EVENT_NEUTRAL){
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	f040 809e 	bne.w	8001d00 <handleEvent+0x4f8>
			currentState = currentState;
 8001bc4:	4b42      	ldr	r3, [pc, #264]	@ (8001cd0 <handleEvent+0x4c8>)
 8001bc6:	781a      	ldrb	r2, [r3, #0]
 8001bc8:	4b41      	ldr	r3, [pc, #260]	@ (8001cd0 <handleEvent+0x4c8>)
 8001bca:	701a      	strb	r2, [r3, #0]
		break;
 8001bcc:	e098      	b.n	8001d00 <handleEvent+0x4f8>

	case STATE_G1:
		if (event == EVENT_AV) {
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d103      	bne.n	8001bdc <handleEvent+0x3d4>
			currentState = STATE_AV1;
 8001bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd0 <handleEvent+0x4c8>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001bda:	e093      	b.n	8001d04 <handleEvent+0x4fc>
		else if (event == EVENT_R) {
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d103      	bne.n	8001bea <handleEvent+0x3e2>
			currentState = STATE_R1;
 8001be2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <handleEvent+0x4c8>)
 8001be4:	2204      	movs	r2, #4
 8001be6:	701a      	strb	r2, [r3, #0]
		break;
 8001be8:	e08c      	b.n	8001d04 <handleEvent+0x4fc>
		else if (event == EVENT_D) {
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d103      	bne.n	8001bf8 <handleEvent+0x3f0>
			currentState = STATE_NEUTRAL;
 8001bf0:	4b37      	ldr	r3, [pc, #220]	@ (8001cd0 <handleEvent+0x4c8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
		break;
 8001bf6:	e085      	b.n	8001d04 <handleEvent+0x4fc>
		else if (event == EVENT_G) {
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d103      	bne.n	8001c06 <handleEvent+0x3fe>
			currentState = STATE_G2;
 8001bfe:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c00:	220b      	movs	r2, #11
 8001c02:	701a      	strb	r2, [r3, #0]
		break;
 8001c04:	e07e      	b.n	8001d04 <handleEvent+0x4fc>
		else if (event == EVENT_END) {
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d103      	bne.n	8001c14 <handleEvent+0x40c>
			currentState = STATE_END;
 8001c0c:	4b30      	ldr	r3, [pc, #192]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c0e:	220d      	movs	r2, #13
 8001c10:	701a      	strb	r2, [r3, #0]
		break;
 8001c12:	e077      	b.n	8001d04 <handleEvent+0x4fc>
		else if (event == EVENT_NEUTRAL){
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d174      	bne.n	8001d04 <handleEvent+0x4fc>
			currentState = currentState;
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c20:	701a      	strb	r2, [r3, #0]
		break;
 8001c22:	e06f      	b.n	8001d04 <handleEvent+0x4fc>

	case STATE_G2:
		if (event == EVENT_AV) {
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <handleEvent+0x42a>
			currentState = STATE_AV2;
 8001c2a:	4b29      	ldr	r3, [pc, #164]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001c30:	e06a      	b.n	8001d08 <handleEvent+0x500>
		else if (event == EVENT_R) {
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d103      	bne.n	8001c40 <handleEvent+0x438>
			currentState = STATE_R2;
 8001c38:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	701a      	strb	r2, [r3, #0]
		break;
 8001c3e:	e063      	b.n	8001d08 <handleEvent+0x500>
		else if (event == EVENT_D) {
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d103      	bne.n	8001c4e <handleEvent+0x446>
			currentState = STATE_G1;
 8001c46:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c48:	220a      	movs	r2, #10
 8001c4a:	701a      	strb	r2, [r3, #0]
		break;
 8001c4c:	e05c      	b.n	8001d08 <handleEvent+0x500>
		else if (event == EVENT_G) {
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d103      	bne.n	8001c5c <handleEvent+0x454>
			currentState = STATE_G3;
 8001c54:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	701a      	strb	r2, [r3, #0]
		break;
 8001c5a:	e055      	b.n	8001d08 <handleEvent+0x500>
		else if (event == EVENT_END) {
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d103      	bne.n	8001c6a <handleEvent+0x462>
			currentState = STATE_END;
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c64:	220d      	movs	r2, #13
 8001c66:	701a      	strb	r2, [r3, #0]
		break;
 8001c68:	e04e      	b.n	8001d08 <handleEvent+0x500>
		else if (event == EVENT_NEUTRAL){
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d14b      	bne.n	8001d08 <handleEvent+0x500>
			currentState = currentState;
 8001c70:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c76:	701a      	strb	r2, [r3, #0]
		break;
 8001c78:	e046      	b.n	8001d08 <handleEvent+0x500>

	case STATE_G3:
		if (event == EVENT_AV) {
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <handleEvent+0x480>
			currentState = STATE_AV3;
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c82:	2203      	movs	r2, #3
 8001c84:	701a      	strb	r2, [r3, #0]
			currentState = STATE_END;
		}
		else if (event == EVENT_NEUTRAL){
			currentState = currentState;
		}
		break;
 8001c86:	e041      	b.n	8001d0c <handleEvent+0x504>
		else if (event == EVENT_R) {
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d103      	bne.n	8001c96 <handleEvent+0x48e>
			currentState = STATE_R3;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c90:	2206      	movs	r2, #6
 8001c92:	701a      	strb	r2, [r3, #0]
		break;
 8001c94:	e03a      	b.n	8001d0c <handleEvent+0x504>
		else if (event == EVENT_D) {
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d103      	bne.n	8001ca4 <handleEvent+0x49c>
			currentState = STATE_G2;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <handleEvent+0x4c8>)
 8001c9e:	220b      	movs	r2, #11
 8001ca0:	701a      	strb	r2, [r3, #0]
		break;
 8001ca2:	e033      	b.n	8001d0c <handleEvent+0x504>
		else if (event == EVENT_G) {
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d103      	bne.n	8001cb2 <handleEvent+0x4aa>
			currentState = STATE_G3;
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <handleEvent+0x4c8>)
 8001cac:	220c      	movs	r2, #12
 8001cae:	701a      	strb	r2, [r3, #0]
		break;
 8001cb0:	e02c      	b.n	8001d0c <handleEvent+0x504>
		else if (event == EVENT_END) {
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d103      	bne.n	8001cc0 <handleEvent+0x4b8>
			currentState = STATE_END;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <handleEvent+0x4c8>)
 8001cba:	220d      	movs	r2, #13
 8001cbc:	701a      	strb	r2, [r3, #0]
		break;
 8001cbe:	e025      	b.n	8001d0c <handleEvent+0x504>
		else if (event == EVENT_NEUTRAL){
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d122      	bne.n	8001d0c <handleEvent+0x504>
			currentState = currentState;
 8001cc6:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <handleEvent+0x4c8>)
 8001cc8:	781a      	ldrb	r2, [r3, #0]
 8001cca:	4b01      	ldr	r3, [pc, #4]	@ (8001cd0 <handleEvent+0x4c8>)
 8001ccc:	701a      	strb	r2, [r3, #0]
		break;
 8001cce:	e01d      	b.n	8001d0c <handleEvent+0x504>
 8001cd0:	20000468 	.word	0x20000468

	default:
		currentState = STATE_NEUTRAL;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <handleEvent+0x514>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
		break;
 8001cda:	e018      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001cdc:	bf00      	nop
 8001cde:	e016      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001ce0:	bf00      	nop
 8001ce2:	e014      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001ce4:	bf00      	nop
 8001ce6:	e012      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001ce8:	bf00      	nop
 8001cea:	e010      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001cec:	bf00      	nop
 8001cee:	e00e      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001cf0:	bf00      	nop
 8001cf2:	e00c      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001cf4:	bf00      	nop
 8001cf6:	e00a      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001cf8:	bf00      	nop
 8001cfa:	e008      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001cfc:	bf00      	nop
 8001cfe:	e006      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001d00:	bf00      	nop
 8001d02:	e004      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001d04:	bf00      	nop
 8001d06:	e002      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001d08:	bf00      	nop
 8001d0a:	e000      	b.n	8001d0e <handleEvent+0x506>
		break;
 8001d0c:	bf00      	nop
	}
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000468 	.word	0x20000468

08001d20 <calculCommande>:

uint32_t calculCommande(int mode, int cote)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b08d      	sub	sp, #52	@ 0x34
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    uint32_t sortie = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
    int32_t somme_erreurs = 0; // Initialisation de la somme des erreurs
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
    int32_t commande;

    // Définir la valeur maximale du codeur
    const uint32_t MAX_ENCODER_VALUE = 65000;
 8001d32:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 8001d36:	60fb      	str	r3, [r7, #12]

    // Définir les cibles et les valeurs du codeur selon le mode et le côté
    uint32_t target = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t targetTop = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t encoder_value_current = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t encoder_value_previous = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
    float CKp = 0.0f;
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    float CKi = 0.0f;
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]

    // Sélectionner les cibles en fonction du mode
    if (mode == 1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d109      	bne.n	8001d6e <calculCommande+0x4e>
    {
        target = target10;
 8001d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e84 <calculCommande+0x164>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	4613      	mov	r3, r2
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        targetTop = target10_top;
 8001d64:	4b48      	ldr	r3, [pc, #288]	@ (8001e88 <calculCommande+0x168>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d6c:	e018      	b.n	8001da0 <calculCommande+0x80>
    }
    else if (mode == 2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d109      	bne.n	8001d88 <calculCommande+0x68>
    {
        target = target20;
 8001d74:	4b45      	ldr	r3, [pc, #276]	@ (8001e8c <calculCommande+0x16c>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        targetTop = target20_top;
 8001d7e:	4b44      	ldr	r3, [pc, #272]	@ (8001e90 <calculCommande+0x170>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d86:	e00b      	b.n	8001da0 <calculCommande+0x80>
    }
    else if (mode == 3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d108      	bne.n	8001da0 <calculCommande+0x80>
    {
        target = target30;
 8001d8e:	4b41      	ldr	r3, [pc, #260]	@ (8001e94 <calculCommande+0x174>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	4613      	mov	r3, r2
 8001d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        targetTop = target30_top;
 8001d98:	4b3f      	ldr	r3, [pc, #252]	@ (8001e98 <calculCommande+0x178>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    // Sélectionner les valeurs du codeur et les coefficients en fonction du côté
    if (cote == 0)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <calculCommande+0xa0>
    {
        encoder_value_current = encoder_value_right;
 8001da6:	4b3d      	ldr	r3, [pc, #244]	@ (8001e9c <calculCommande+0x17c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
        encoder_value_previous = encoder_value_right_minus200;
 8001dac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea0 <calculCommande+0x180>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	623b      	str	r3, [r7, #32]
        CKp = CKp_D;
 8001db2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001db6:	61fb      	str	r3, [r7, #28]
        CKi = CKi_D;
 8001db8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	e00e      	b.n	8001dde <calculCommande+0xbe>
    }
    else if (cote == 1)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d10b      	bne.n	8001dde <calculCommande+0xbe>
    {
        encoder_value_current = encoder_value_left;
 8001dc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ea4 <calculCommande+0x184>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
        encoder_value_previous = encoder_value_left_minus200;
 8001dcc:	4b36      	ldr	r3, [pc, #216]	@ (8001ea8 <calculCommande+0x188>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	623b      	str	r3, [r7, #32]
        CKp = CKp_G;
 8001dd2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001dd6:	61fb      	str	r3, [r7, #28]
        CKi = CKi_G;
 8001dd8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ddc:	61bb      	str	r3, [r7, #24]
    }

    // Calculer l'écart avec gestion du débordement du codeur
    if (encoder_value_current >= encoder_value_previous)
 8001dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	db0d      	blt.n	8001e02 <calculCommande+0xe2>
    {
        epsilon = target - abs(encoder_value_current - encoder_value_previous);
 8001de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	1acb      	subs	r3, r1, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bfb8      	it	lt
 8001df4:	425b      	neglt	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001eac <calculCommande+0x18c>)
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e00e      	b.n	8001e20 <calculCommande+0x100>
    }
    else
    {
        epsilon = target - abs((MAX_ENCODER_VALUE - encoder_value_previous) + encoder_value_current);
 8001e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	1ac9      	subs	r1, r1, r3
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	440b      	add	r3, r1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bfb8      	it	lt
 8001e14:	425b      	neglt	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <calculCommande+0x18c>)
 8001e1e:	701a      	strb	r2, [r3, #0]
    }

    somme_erreurs += epsilon;
 8001e20:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <calculCommande+0x18c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
    commande = CKp * epsilon + CKi * somme_erreurs;
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001eac <calculCommande+0x18c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5e:	ee17 3a90 	vmov	r3, s15
 8001e62:	60bb      	str	r3, [r7, #8]
    sortie = (target * commande) / targetTop;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e68:	fb03 f202 	mul.w	r2, r3, r2
 8001e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]

    return sortie; // Point-virgule ajouté
 8001e74:	697b      	ldr	r3, [r7, #20]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3734      	adds	r7, #52	@ 0x34
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000018 	.word	0x20000018
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20000019 	.word	0x20000019
 8001e94:	20000010 	.word	0x20000010
 8001e98:	2000001a 	.word	0x2000001a
 8001e9c:	2000043c 	.word	0x2000043c
 8001ea0:	20000448 	.word	0x20000448
 8001ea4:	20000440 	.word	0x20000440
 8001ea8:	2000044c 	.word	0x2000044c
 8001eac:	20000450 	.word	0x20000450

08001eb0 <executeStateActions>:


void executeStateActions(void) {
 8001eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb4:	b0aa      	sub	sp, #168	@ 0xa8
 8001eb6:	af00      	add	r7, sp, #0
	switch (currentState) {
 8001eb8:	4bb7      	ldr	r3, [pc, #732]	@ (8002198 <executeStateActions+0x2e8>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	f200 82a9 	bhi.w	8002414 <executeStateActions+0x564>
 8001ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <executeStateActions+0x18>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001efd 	.word	0x08001efd
 8001ecc:	08001f15 	.word	0x08001f15
 8001ed0:	08001f85 	.word	0x08001f85
 8001ed4:	08001ff5 	.word	0x08001ff5
 8001ed8:	08002061 	.word	0x08002061
 8001edc:	080020c9 	.word	0x080020c9
 8001ee0:	08002131 	.word	0x08002131
 8001ee4:	080021b1 	.word	0x080021b1
 8001ee8:	08002219 	.word	0x08002219
 8001eec:	08002281 	.word	0x08002281
 8001ef0:	080022e9 	.word	0x080022e9
 8001ef4:	08002351 	.word	0x08002351
 8001ef8:	080023b5 	.word	0x080023b5
	case STATE_NEUTRAL:
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2104      	movs	r1, #4
 8001f00:	48a6      	ldr	r0, [pc, #664]	@ (800219c <executeStateActions+0x2ec>)
 8001f02:	f002 fe99 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f0c:	48a4      	ldr	r0, [pc, #656]	@ (80021a0 <executeStateActions+0x2f0>)
 8001f0e:	f002 fe93 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 8001f12:	e283      	b.n	800241c <executeStateActions+0x56c>

	case STATE_AV1:
		VG = calculCommande(1,1);
 8001f14:	2101      	movs	r1, #1
 8001f16:	2001      	movs	r0, #1
 8001f18:	f7ff ff02 	bl	8001d20 <calculCommande>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f24:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001f28:	4b9e      	ldr	r3, [pc, #632]	@ (80021a4 <executeStateActions+0x2f4>)
 8001f2a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8001f2e:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(1,0);
 8001f32:	2100      	movs	r1, #0
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff fef3 	bl	8001d20 <calculCommande>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f42:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001f46:	4b98      	ldr	r3, [pc, #608]	@ (80021a8 <executeStateActions+0x2f8>)
 8001f48:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8001f4c:	e9c3 1200 	strd	r1, r2, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 8001f50:	4b94      	ldr	r3, [pc, #592]	@ (80021a4 <executeStateActions+0x2f4>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	4995      	ldr	r1, [pc, #596]	@ (80021ac <executeStateActions+0x2fc>)
 8001f58:	6809      	ldr	r1, [r1, #0]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 8001f5e:	4b92      	ldr	r3, [pc, #584]	@ (80021a8 <executeStateActions+0x2f8>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	4991      	ldr	r1, [pc, #580]	@ (80021ac <executeStateActions+0x2fc>)
 8001f66:	6809      	ldr	r1, [r1, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2104      	movs	r1, #4
 8001f70:	488a      	ldr	r0, [pc, #552]	@ (800219c <executeStateActions+0x2ec>)
 8001f72:	f002 fe61 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f7c:	4888      	ldr	r0, [pc, #544]	@ (80021a0 <executeStateActions+0x2f0>)
 8001f7e:	f002 fe5b 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 8001f82:	e24b      	b.n	800241c <executeStateActions+0x56c>

	case STATE_AV2:
		VG = calculCommande(2,1);
 8001f84:	2101      	movs	r1, #1
 8001f86:	2002      	movs	r0, #2
 8001f88:	f7ff feca 	bl	8001d20 <calculCommande>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f94:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f98:	4b82      	ldr	r3, [pc, #520]	@ (80021a4 <executeStateActions+0x2f4>)
 8001f9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8001f9e:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(2,0);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f7ff febb 	bl	8001d20 <calculCommande>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2200      	movs	r2, #0
 8001fae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fb2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80021a8 <executeStateActions+0x2f8>)
 8001fb8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8001fbc:	e9c3 1200 	strd	r1, r2, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 8001fc0:	4b78      	ldr	r3, [pc, #480]	@ (80021a4 <executeStateActions+0x2f4>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	4979      	ldr	r1, [pc, #484]	@ (80021ac <executeStateActions+0x2fc>)
 8001fc8:	6809      	ldr	r1, [r1, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 8001fce:	4b76      	ldr	r3, [pc, #472]	@ (80021a8 <executeStateActions+0x2f8>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	4975      	ldr	r1, [pc, #468]	@ (80021ac <executeStateActions+0x2fc>)
 8001fd6:	6809      	ldr	r1, [r1, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2104      	movs	r1, #4
 8001fe0:	486e      	ldr	r0, [pc, #440]	@ (800219c <executeStateActions+0x2ec>)
 8001fe2:	f002 fe29 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fec:	486c      	ldr	r0, [pc, #432]	@ (80021a0 <executeStateActions+0x2f0>)
 8001fee:	f002 fe23 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 8001ff2:	e213      	b.n	800241c <executeStateActions+0x56c>

	case STATE_AV3:
		VG = calculCommande(3,1);
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	f7ff fe92 	bl	8001d20 <calculCommande>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002004:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002008:	4b66      	ldr	r3, [pc, #408]	@ (80021a4 <executeStateActions+0x2f4>)
 800200a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800200e:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(3,0);
 8002012:	2100      	movs	r1, #0
 8002014:	2003      	movs	r0, #3
 8002016:	f7ff fe83 	bl	8001d20 <calculCommande>
 800201a:	4603      	mov	r3, r0
 800201c:	2200      	movs	r2, #0
 800201e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002020:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002022:	4b61      	ldr	r3, [pc, #388]	@ (80021a8 <executeStateActions+0x2f8>)
 8002024:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002028:	e9c3 1200 	strd	r1, r2, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 800202c:	4b5d      	ldr	r3, [pc, #372]	@ (80021a4 <executeStateActions+0x2f4>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	495e      	ldr	r1, [pc, #376]	@ (80021ac <executeStateActions+0x2fc>)
 8002034:	6809      	ldr	r1, [r1, #0]
 8002036:	4613      	mov	r3, r2
 8002038:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 800203a:	4b5b      	ldr	r3, [pc, #364]	@ (80021a8 <executeStateActions+0x2f8>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	495a      	ldr	r1, [pc, #360]	@ (80021ac <executeStateActions+0x2fc>)
 8002042:	6809      	ldr	r1, [r1, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	2104      	movs	r1, #4
 800204c:	4853      	ldr	r0, [pc, #332]	@ (800219c <executeStateActions+0x2ec>)
 800204e:	f002 fdf3 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002058:	4851      	ldr	r0, [pc, #324]	@ (80021a0 <executeStateActions+0x2f0>)
 800205a:	f002 fded 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 800205e:	e1dd      	b.n	800241c <executeStateActions+0x56c>

	case STATE_R1:
		VG = calculCommande(1,1);
 8002060:	2101      	movs	r1, #1
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff fe5c 	bl	8001d20 <calculCommande>
 8002068:	4603      	mov	r3, r0
 800206a:	2200      	movs	r2, #0
 800206c:	673b      	str	r3, [r7, #112]	@ 0x70
 800206e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002070:	4b4c      	ldr	r3, [pc, #304]	@ (80021a4 <executeStateActions+0x2f4>)
 8002072:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002076:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(1,0);
 800207a:	2100      	movs	r1, #0
 800207c:	2001      	movs	r0, #1
 800207e:	f7ff fe4f 	bl	8001d20 <calculCommande>
 8002082:	4603      	mov	r3, r0
 8002084:	2200      	movs	r2, #0
 8002086:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002088:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800208a:	4b47      	ldr	r3, [pc, #284]	@ (80021a8 <executeStateActions+0x2f8>)
 800208c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002090:	e9c3 1200 	strd	r1, r2, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 8002094:	4b43      	ldr	r3, [pc, #268]	@ (80021a4 <executeStateActions+0x2f4>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	4944      	ldr	r1, [pc, #272]	@ (80021ac <executeStateActions+0x2fc>)
 800209c:	6809      	ldr	r1, [r1, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 80020a2:	4b41      	ldr	r3, [pc, #260]	@ (80021a8 <executeStateActions+0x2f8>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	4940      	ldr	r1, [pc, #256]	@ (80021ac <executeStateActions+0x2fc>)
 80020aa:	6809      	ldr	r1, [r1, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 80020b0:	2201      	movs	r2, #1
 80020b2:	2104      	movs	r1, #4
 80020b4:	4839      	ldr	r0, [pc, #228]	@ (800219c <executeStateActions+0x2ec>)
 80020b6:	f002 fdbf 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020c0:	4837      	ldr	r0, [pc, #220]	@ (80021a0 <executeStateActions+0x2f0>)
 80020c2:	f002 fdb9 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 80020c6:	e1a9      	b.n	800241c <executeStateActions+0x56c>

	case STATE_R2:
		VG = calculCommande(2,1);
 80020c8:	2101      	movs	r1, #1
 80020ca:	2002      	movs	r0, #2
 80020cc:	f7ff fe28 	bl	8001d20 <calculCommande>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2200      	movs	r2, #0
 80020d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80020d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80020d8:	4b32      	ldr	r3, [pc, #200]	@ (80021a4 <executeStateActions+0x2f4>)
 80020da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80020de:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(2,0);
 80020e2:	2100      	movs	r1, #0
 80020e4:	2002      	movs	r0, #2
 80020e6:	f7ff fe1b 	bl	8001d20 <calculCommande>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2200      	movs	r2, #0
 80020ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020f0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80020f2:	4b2d      	ldr	r3, [pc, #180]	@ (80021a8 <executeStateActions+0x2f8>)
 80020f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80020f8:	e9c3 1200 	strd	r1, r2, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 80020fc:	4b29      	ldr	r3, [pc, #164]	@ (80021a4 <executeStateActions+0x2f4>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	492a      	ldr	r1, [pc, #168]	@ (80021ac <executeStateActions+0x2fc>)
 8002104:	6809      	ldr	r1, [r1, #0]
 8002106:	4613      	mov	r3, r2
 8002108:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 800210a:	4b27      	ldr	r3, [pc, #156]	@ (80021a8 <executeStateActions+0x2f8>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	4926      	ldr	r1, [pc, #152]	@ (80021ac <executeStateActions+0x2fc>)
 8002112:	6809      	ldr	r1, [r1, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	2104      	movs	r1, #4
 800211c:	481f      	ldr	r0, [pc, #124]	@ (800219c <executeStateActions+0x2ec>)
 800211e:	f002 fd8b 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002128:	481d      	ldr	r0, [pc, #116]	@ (80021a0 <executeStateActions+0x2f0>)
 800212a:	f002 fd85 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 800212e:	e175      	b.n	800241c <executeStateActions+0x56c>

	case STATE_R3:
		VG = calculCommande(3,1);
 8002130:	2101      	movs	r1, #1
 8002132:	2003      	movs	r0, #3
 8002134:	f7ff fdf4 	bl	8001d20 <calculCommande>
 8002138:	4603      	mov	r3, r0
 800213a:	2200      	movs	r2, #0
 800213c:	653b      	str	r3, [r7, #80]	@ 0x50
 800213e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002140:	4b18      	ldr	r3, [pc, #96]	@ (80021a4 <executeStateActions+0x2f4>)
 8002142:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8002146:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(3,0);
 800214a:	2100      	movs	r1, #0
 800214c:	2003      	movs	r0, #3
 800214e:	f7ff fde7 	bl	8001d20 <calculCommande>
 8002152:	4603      	mov	r3, r0
 8002154:	2200      	movs	r2, #0
 8002156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002158:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <executeStateActions+0x2f8>)
 800215c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8002160:	e9c3 1200 	strd	r1, r2, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 8002164:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <executeStateActions+0x2f4>)
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	4910      	ldr	r1, [pc, #64]	@ (80021ac <executeStateActions+0x2fc>)
 800216c:	6809      	ldr	r1, [r1, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <executeStateActions+0x2f8>)
 8002174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002178:	490c      	ldr	r1, [pc, #48]	@ (80021ac <executeStateActions+0x2fc>)
 800217a:	6809      	ldr	r1, [r1, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 8002180:	2201      	movs	r2, #1
 8002182:	2104      	movs	r1, #4
 8002184:	4805      	ldr	r0, [pc, #20]	@ (800219c <executeStateActions+0x2ec>)
 8002186:	f002 fd57 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 800218a:	2201      	movs	r2, #1
 800218c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002190:	4803      	ldr	r0, [pc, #12]	@ (80021a0 <executeStateActions+0x2f0>)
 8002192:	f002 fd51 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 8002196:	e141      	b.n	800241c <executeStateActions+0x56c>
 8002198:	20000468 	.word	0x20000468
 800219c:	48000400 	.word	0x48000400
 80021a0:	48000800 	.word	0x48000800
 80021a4:	20000458 	.word	0x20000458
 80021a8:	20000460 	.word	0x20000460
 80021ac:	20000270 	.word	0x20000270

	case STATE_D1:
		VG = calculCommande(1,1);
 80021b0:	2101      	movs	r1, #1
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7ff fdb4 	bl	8001d20 <calculCommande>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2200      	movs	r2, #0
 80021bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80021be:	647a      	str	r2, [r7, #68]	@ 0x44
 80021c0:	4b99      	ldr	r3, [pc, #612]	@ (8002428 <executeStateActions+0x578>)
 80021c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80021c6:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(1,0);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7ff fda7 	bl	8001d20 <calculCommande>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2200      	movs	r2, #0
 80021d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80021da:	4b94      	ldr	r3, [pc, #592]	@ (800242c <executeStateActions+0x57c>)
 80021dc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80021e0:	e9c3 1200 	strd	r1, r2, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 80021e4:	4b90      	ldr	r3, [pc, #576]	@ (8002428 <executeStateActions+0x578>)
 80021e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ea:	4991      	ldr	r1, [pc, #580]	@ (8002430 <executeStateActions+0x580>)
 80021ec:	6809      	ldr	r1, [r1, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 80021f2:	4b8e      	ldr	r3, [pc, #568]	@ (800242c <executeStateActions+0x57c>)
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	498d      	ldr	r1, [pc, #564]	@ (8002430 <executeStateActions+0x580>)
 80021fa:	6809      	ldr	r1, [r1, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2104      	movs	r1, #4
 8002204:	488b      	ldr	r0, [pc, #556]	@ (8002434 <executeStateActions+0x584>)
 8002206:	f002 fd17 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002210:	4889      	ldr	r0, [pc, #548]	@ (8002438 <executeStateActions+0x588>)
 8002212:	f002 fd11 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 8002216:	e101      	b.n	800241c <executeStateActions+0x56c>

	case STATE_D2:
		VG = calculCommande(2,1);
 8002218:	2101      	movs	r1, #1
 800221a:	2002      	movs	r0, #2
 800221c:	f7ff fd80 	bl	8001d20 <calculCommande>
 8002220:	4603      	mov	r3, r0
 8002222:	2200      	movs	r2, #0
 8002224:	633b      	str	r3, [r7, #48]	@ 0x30
 8002226:	637a      	str	r2, [r7, #52]	@ 0x34
 8002228:	4b7f      	ldr	r3, [pc, #508]	@ (8002428 <executeStateActions+0x578>)
 800222a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800222e:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(2,0);
 8002232:	2100      	movs	r1, #0
 8002234:	2002      	movs	r0, #2
 8002236:	f7ff fd73 	bl	8001d20 <calculCommande>
 800223a:	4603      	mov	r3, r0
 800223c:	2200      	movs	r2, #0
 800223e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002242:	4b7a      	ldr	r3, [pc, #488]	@ (800242c <executeStateActions+0x57c>)
 8002244:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8002248:	e9c3 1200 	strd	r1, r2, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 800224c:	4b76      	ldr	r3, [pc, #472]	@ (8002428 <executeStateActions+0x578>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	4977      	ldr	r1, [pc, #476]	@ (8002430 <executeStateActions+0x580>)
 8002254:	6809      	ldr	r1, [r1, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 800225a:	4b74      	ldr	r3, [pc, #464]	@ (800242c <executeStateActions+0x57c>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	4973      	ldr	r1, [pc, #460]	@ (8002430 <executeStateActions+0x580>)
 8002262:	6809      	ldr	r1, [r1, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	2104      	movs	r1, #4
 800226c:	4871      	ldr	r0, [pc, #452]	@ (8002434 <executeStateActions+0x584>)
 800226e:	f002 fce3 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002278:	486f      	ldr	r0, [pc, #444]	@ (8002438 <executeStateActions+0x588>)
 800227a:	f002 fcdd 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 800227e:	e0cd      	b.n	800241c <executeStateActions+0x56c>

	case STATE_D3:
		VG = calculCommande(3,1);
 8002280:	2101      	movs	r1, #1
 8002282:	2003      	movs	r0, #3
 8002284:	f7ff fd4c 	bl	8001d20 <calculCommande>
 8002288:	4603      	mov	r3, r0
 800228a:	2200      	movs	r2, #0
 800228c:	623b      	str	r3, [r7, #32]
 800228e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002290:	4b65      	ldr	r3, [pc, #404]	@ (8002428 <executeStateActions+0x578>)
 8002292:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002296:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(3,0);
 800229a:	2100      	movs	r1, #0
 800229c:	2003      	movs	r0, #3
 800229e:	f7ff fd3f 	bl	8001d20 <calculCommande>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2200      	movs	r2, #0
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	61fa      	str	r2, [r7, #28]
 80022aa:	4b60      	ldr	r3, [pc, #384]	@ (800242c <executeStateActions+0x57c>)
 80022ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80022b0:	e9c3 1200 	strd	r1, r2, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 80022b4:	4b5c      	ldr	r3, [pc, #368]	@ (8002428 <executeStateActions+0x578>)
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	495d      	ldr	r1, [pc, #372]	@ (8002430 <executeStateActions+0x580>)
 80022bc:	6809      	ldr	r1, [r1, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 80022c2:	4b5a      	ldr	r3, [pc, #360]	@ (800242c <executeStateActions+0x57c>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	4959      	ldr	r1, [pc, #356]	@ (8002430 <executeStateActions+0x580>)
 80022ca:	6809      	ldr	r1, [r1, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_RESET);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2104      	movs	r1, #4
 80022d4:	4857      	ldr	r0, [pc, #348]	@ (8002434 <executeStateActions+0x584>)
 80022d6:	f002 fcaf 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022e0:	4855      	ldr	r0, [pc, #340]	@ (8002438 <executeStateActions+0x588>)
 80022e2:	f002 fca9 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 80022e6:	e099      	b.n	800241c <executeStateActions+0x56c>

	case STATE_G1:
		VG = calculCommande(1,1);
 80022e8:	2101      	movs	r1, #1
 80022ea:	2001      	movs	r0, #1
 80022ec:	f7ff fd18 	bl	8001d20 <calculCommande>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2200      	movs	r2, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	617a      	str	r2, [r7, #20]
 80022f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002428 <executeStateActions+0x578>)
 80022fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80022fe:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(1,0);
 8002302:	2100      	movs	r1, #0
 8002304:	2001      	movs	r0, #1
 8002306:	f7ff fd0b 	bl	8001d20 <calculCommande>
 800230a:	4603      	mov	r3, r0
 800230c:	2200      	movs	r2, #0
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	60fa      	str	r2, [r7, #12]
 8002312:	4b46      	ldr	r3, [pc, #280]	@ (800242c <executeStateActions+0x57c>)
 8002314:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002318:	e9c3 1200 	strd	r1, r2, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 800231c:	4b42      	ldr	r3, [pc, #264]	@ (8002428 <executeStateActions+0x578>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	4943      	ldr	r1, [pc, #268]	@ (8002430 <executeStateActions+0x580>)
 8002324:	6809      	ldr	r1, [r1, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 800232a:	4b40      	ldr	r3, [pc, #256]	@ (800242c <executeStateActions+0x57c>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	493f      	ldr	r1, [pc, #252]	@ (8002430 <executeStateActions+0x580>)
 8002332:	6809      	ldr	r1, [r1, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	2104      	movs	r1, #4
 800233c:	483d      	ldr	r0, [pc, #244]	@ (8002434 <executeStateActions+0x584>)
 800233e:	f002 fc7b 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002348:	483b      	ldr	r0, [pc, #236]	@ (8002438 <executeStateActions+0x588>)
 800234a:	f002 fc75 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 800234e:	e065      	b.n	800241c <executeStateActions+0x56c>

	case STATE_G2:
		VG = calculCommande(2,1);
 8002350:	2101      	movs	r1, #1
 8002352:	2002      	movs	r0, #2
 8002354:	f7ff fce4 	bl	8001d20 <calculCommande>
 8002358:	4603      	mov	r3, r0
 800235a:	2200      	movs	r2, #0
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	4b31      	ldr	r3, [pc, #196]	@ (8002428 <executeStateActions+0x578>)
 8002362:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002366:	e9c3 1200 	strd	r1, r2, [r3]
		VD = calculCommande(2,0);
 800236a:	2100      	movs	r1, #0
 800236c:	2002      	movs	r0, #2
 800236e:	f7ff fcd7 	bl	8001d20 <calculCommande>
 8002372:	4603      	mov	r3, r0
 8002374:	2200      	movs	r2, #0
 8002376:	469a      	mov	sl, r3
 8002378:	4693      	mov	fp, r2
 800237a:	4b2c      	ldr	r3, [pc, #176]	@ (800242c <executeStateActions+0x57c>)
 800237c:	e9c3 ab00 	strd	sl, fp, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 8002380:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <executeStateActions+0x578>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	492a      	ldr	r1, [pc, #168]	@ (8002430 <executeStateActions+0x580>)
 8002388:	6809      	ldr	r1, [r1, #0]
 800238a:	4613      	mov	r3, r2
 800238c:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 800238e:	4b27      	ldr	r3, [pc, #156]	@ (800242c <executeStateActions+0x57c>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	4926      	ldr	r1, [pc, #152]	@ (8002430 <executeStateActions+0x580>)
 8002396:	6809      	ldr	r1, [r1, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 800239c:	2201      	movs	r2, #1
 800239e:	2104      	movs	r1, #4
 80023a0:	4824      	ldr	r0, [pc, #144]	@ (8002434 <executeStateActions+0x584>)
 80023a2:	f002 fc49 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 80023a6:	2200      	movs	r2, #0
 80023a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023ac:	4822      	ldr	r0, [pc, #136]	@ (8002438 <executeStateActions+0x588>)
 80023ae:	f002 fc43 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 80023b2:	e033      	b.n	800241c <executeStateActions+0x56c>

	case STATE_G3:
		VG = calculCommande(3,1);
 80023b4:	2101      	movs	r1, #1
 80023b6:	2003      	movs	r0, #3
 80023b8:	f7ff fcb2 	bl	8001d20 <calculCommande>
 80023bc:	4603      	mov	r3, r0
 80023be:	2200      	movs	r2, #0
 80023c0:	4698      	mov	r8, r3
 80023c2:	4691      	mov	r9, r2
 80023c4:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <executeStateActions+0x578>)
 80023c6:	e9c3 8900 	strd	r8, r9, [r3]
		VD = calculCommande(3,0);
 80023ca:	2100      	movs	r1, #0
 80023cc:	2003      	movs	r0, #3
 80023ce:	f7ff fca7 	bl	8001d20 <calculCommande>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2200      	movs	r2, #0
 80023d6:	461c      	mov	r4, r3
 80023d8:	4615      	mov	r5, r2
 80023da:	4b14      	ldr	r3, [pc, #80]	@ (800242c <executeStateActions+0x57c>)
 80023dc:	e9c3 4500 	strd	r4, r5, [r3]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,VG);
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <executeStateActions+0x578>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	4912      	ldr	r1, [pc, #72]	@ (8002430 <executeStateActions+0x580>)
 80023e8:	6809      	ldr	r1, [r1, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	634b      	str	r3, [r1, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,VD);
 80023ee:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <executeStateActions+0x57c>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	490e      	ldr	r1, [pc, #56]	@ (8002430 <executeStateActions+0x580>)
 80023f6:	6809      	ldr	r1, [r1, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	640b      	str	r3, [r1, #64]	@ 0x40
		HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,GPIO_PIN_SET);
 80023fc:	2201      	movs	r2, #1
 80023fe:	2104      	movs	r1, #4
 8002400:	480c      	ldr	r0, [pc, #48]	@ (8002434 <executeStateActions+0x584>)
 8002402:	f002 fc19 	bl	8004c38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800240c:	480a      	ldr	r0, [pc, #40]	@ (8002438 <executeStateActions+0x588>)
 800240e:	f002 fc13 	bl	8004c38 <HAL_GPIO_WritePin>
		break;
 8002412:	e003      	b.n	800241c <executeStateActions+0x56c>

	default:
		currentState = STATE_NEUTRAL;
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <executeStateActions+0x58c>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
		break;
 800241a:	bf00      	nop
	}
}
 800241c:	bf00      	nop
 800241e:	37a8      	adds	r7, #168	@ 0xa8
 8002420:	46bd      	mov	sp, r7
 8002422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002426:	bf00      	nop
 8002428:	20000458 	.word	0x20000458
 800242c:	20000460 	.word	0x20000460
 8002430:	20000270 	.word	0x20000270
 8002434:	48000400 	.word	0x48000400
 8002438:	48000800 	.word	0x48000800
 800243c:	20000468 	.word	0x20000468

08002440 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ENC1A_Pin)
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	2b10      	cmp	r3, #16
 800244e:	d132      	bne.n	80024b6 <HAL_GPIO_EXTI_Callback+0x76>
	{
		current_capture = __HAL_TIM_GET_COUNTER(&htim6);
 8002450:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <HAL_GPIO_EXTI_Callback+0x88>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <HAL_GPIO_EXTI_Callback+0x8c>)
 8002458:	6013      	str	r3, [r2, #0]
		uint32_t elapsed_time = current_capture - last_capture;
 800245a:	4b1c      	ldr	r3, [pc, #112]	@ (80024cc <HAL_GPIO_EXTI_Callback+0x8c>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	60fb      	str	r3, [r7, #12]
		last_capture = current_capture;
 8002466:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_GPIO_EXTI_Callback+0x8c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a19      	ldr	r2, [pc, #100]	@ (80024d0 <HAL_GPIO_EXTI_Callback+0x90>)
 800246c:	6013      	str	r3, [r2, #0]

		if (elapsed_time > 0)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <HAL_GPIO_EXTI_Callback+0x6c>
		{
			speed = (DISTANCE_PER_PULSE / elapsed_time) * 1000;
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7fe f845 	bl	8000504 <__aeabi_ui2d>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	a110      	add	r1, pc, #64	@ (adr r1, 80024c0 <HAL_GPIO_EXTI_Callback+0x80>)
 8002480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002484:	f7fe f9e2 	bl	800084c <__aeabi_ddiv>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	4b0f      	ldr	r3, [pc, #60]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x94>)
 8002496:	f7fe f8af 	bl	80005f8 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f7fe fba1 	bl	8000be8 <__aeabi_d2f>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4a0b      	ldr	r2, [pc, #44]	@ (80024d8 <HAL_GPIO_EXTI_Callback+0x98>)
 80024aa:	6013      	str	r3, [r2, #0]
		}

		pulse_count++;
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_GPIO_EXTI_Callback+0x9c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_GPIO_EXTI_Callback+0x9c>)
 80024b4:	6013      	str	r3, [r2, #0]
	}
}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	47ae147b 	.word	0x47ae147b
 80024c4:	3f847ae1 	.word	0x3f847ae1
 80024c8:	20000354 	.word	0x20000354
 80024cc:	20000434 	.word	0x20000434
 80024d0:	20000430 	.word	0x20000430
 80024d4:	408f4000 	.word	0x408f4000
 80024d8:	20000438 	.word	0x20000438
 80024dc:	2000042c 	.word	0x2000042c

080024e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
 void Error_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e4:	b672      	cpsid	i
}
 80024e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
			__disable_irq();
	while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <Error_Handler+0x8>

080024ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <HAL_MspInit+0x44>)
 80024f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002530 <HAL_MspInit+0x44>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80024fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <HAL_MspInit+0x44>)
 8002500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_MspInit+0x44>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250e:	4a08      	ldr	r2, [pc, #32]	@ (8002530 <HAL_MspInit+0x44>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002514:	6593      	str	r3, [r2, #88]	@ 0x58
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_MspInit+0x44>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b0ac      	sub	sp, #176	@ 0xb0
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2288      	movs	r2, #136	@ 0x88
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f007 fcd0 	bl	8009efa <memset>
  if(hadc->Instance==ADC1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2b      	ldr	r2, [pc, #172]	@ (800260c <HAL_ADC_MspInit+0xd8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d14e      	bne.n	8002602 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002564:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002568:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800256a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800256e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002572:	2302      	movs	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800257a:	2308      	movs	r3, #8
 800257c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800257e:	2307      	movs	r3, #7
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002582:	2302      	movs	r3, #2
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002586:	2302      	movs	r3, #2
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800258a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4618      	mov	r0, r3
 8002596:	f003 f9e3 	bl	8005960 <HAL_RCCEx_PeriphCLKConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80025a0:	f7ff ff9e 	bl	80024e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80025a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <HAL_ADC_MspInit+0xdc>)
 80025a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a8:	4a19      	ldr	r2, [pc, #100]	@ (8002610 <HAL_ADC_MspInit+0xdc>)
 80025aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025b0:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <HAL_ADC_MspInit+0xdc>)
 80025b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <HAL_ADC_MspInit+0xdc>)
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	4a13      	ldr	r2, [pc, #76]	@ (8002610 <HAL_ADC_MspInit+0xdc>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <HAL_ADC_MspInit+0xdc>)
 80025ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025d4:	2320      	movs	r3, #32
 80025d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025da:	230b      	movs	r3, #11
 80025dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025ea:	4619      	mov	r1, r3
 80025ec:	4809      	ldr	r0, [pc, #36]	@ (8002614 <HAL_ADC_MspInit+0xe0>)
 80025ee:	f002 f979 	bl	80048e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	2012      	movs	r0, #18
 80025f8:	f002 f8bf 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025fc:	2012      	movs	r0, #18
 80025fe:	f002 f8d8 	bl	80047b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002602:	bf00      	nop
 8002604:	37b0      	adds	r7, #176	@ 0xb0
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	50040000 	.word	0x50040000
 8002610:	40021000 	.word	0x40021000
 8002614:	48000800 	.word	0x48000800

08002618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002628:	d10c      	bne.n	8002644 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <HAL_TIM_Base_MspInit+0x68>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	4a14      	ldr	r2, [pc, #80]	@ (8002680 <HAL_TIM_Base_MspInit+0x68>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6593      	str	r3, [r2, #88]	@ 0x58
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <HAL_TIM_Base_MspInit+0x68>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002642:	e018      	b.n	8002676 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0e      	ldr	r2, [pc, #56]	@ (8002684 <HAL_TIM_Base_MspInit+0x6c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d113      	bne.n	8002676 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <HAL_TIM_Base_MspInit+0x68>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002652:	4a0b      	ldr	r2, [pc, #44]	@ (8002680 <HAL_TIM_Base_MspInit+0x68>)
 8002654:	f043 0310 	orr.w	r3, r3, #16
 8002658:	6593      	str	r3, [r2, #88]	@ 0x58
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_TIM_Base_MspInit+0x68>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	2036      	movs	r0, #54	@ 0x36
 800266c:	f002 f885 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002670:	2036      	movs	r0, #54	@ 0x36
 8002672:	f002 f89e 	bl	80047b2 <HAL_NVIC_EnableIRQ>
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	40001000 	.word	0x40001000

08002688 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	@ 0x30
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a36      	ldr	r2, [pc, #216]	@ (8002780 <HAL_TIM_Encoder_MspInit+0xf8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d130      	bne.n	800270c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026aa:	4b36      	ldr	r3, [pc, #216]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ae:	4a35      	ldr	r2, [pc, #212]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80026b6:	4b33      	ldr	r3, [pc, #204]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 80026b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	4b30      	ldr	r3, [pc, #192]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 80026da:	2330      	movs	r3, #48	@ 0x30
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ea:	2302      	movs	r3, #2
 80026ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4619      	mov	r1, r3
 80026f4:	4824      	ldr	r0, [pc, #144]	@ (8002788 <HAL_TIM_Encoder_MspInit+0x100>)
 80026f6:	f002 f8f5 	bl	80048e4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	201d      	movs	r0, #29
 8002700:	f002 f83b 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002704:	201d      	movs	r0, #29
 8002706:	f002 f854 	bl	80047b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800270a:	e034      	b.n	8002776 <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM4)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1e      	ldr	r2, [pc, #120]	@ (800278c <HAL_TIM_Encoder_MspInit+0x104>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d12f      	bne.n	8002776 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002716:	4b1b      	ldr	r3, [pc, #108]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271a:	4a1a      	ldr	r2, [pc, #104]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	6593      	str	r3, [r2, #88]	@ 0x58
 8002722:	4b18      	ldr	r3, [pc, #96]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273a:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <HAL_TIM_Encoder_MspInit+0xfc>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2B_Pin|ENC2A_Pin;
 8002746:	23c0      	movs	r3, #192	@ 0xc0
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002756:	2302      	movs	r3, #2
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275a:	f107 031c 	add.w	r3, r7, #28
 800275e:	4619      	mov	r1, r3
 8002760:	4809      	ldr	r0, [pc, #36]	@ (8002788 <HAL_TIM_Encoder_MspInit+0x100>)
 8002762:	f002 f8bf 	bl	80048e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	201e      	movs	r0, #30
 800276c:	f002 f805 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002770:	201e      	movs	r0, #30
 8002772:	f002 f81e 	bl	80047b2 <HAL_NVIC_EnableIRQ>
}
 8002776:	bf00      	nop
 8002778:	3730      	adds	r7, #48	@ 0x30
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40000400 	.word	0x40000400
 8002784:	40021000 	.word	0x40021000
 8002788:	48000400 	.word	0x48000400
 800278c:	40000800 	.word	0x40000800

08002790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	@ 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b0:	d13a      	bne.n	8002828 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002830 <HAL_TIM_MspPostInit+0xa0>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002830 <HAL_TIM_MspPostInit+0xa0>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027be:	4b1c      	ldr	r3, [pc, #112]	@ (8002830 <HAL_TIM_MspPostInit+0xa0>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <HAL_TIM_MspPostInit+0xa0>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ce:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <HAL_TIM_MspPostInit+0xa0>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027d6:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <HAL_TIM_MspPostInit+0xa0>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MOT1_Pin;
 80027e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOT1_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4619      	mov	r1, r3
 80027fe:	480d      	ldr	r0, [pc, #52]	@ (8002834 <HAL_TIM_MspPostInit+0xa4>)
 8002800:	f002 f870 	bl	80048e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOT2_Pin;
 8002804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002816:	2301      	movs	r3, #1
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOT2_GPIO_Port, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002824:	f002 f85e 	bl	80048e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	@ 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	48000400 	.word	0x48000400

08002838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0ac      	sub	sp, #176	@ 0xb0
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2288      	movs	r2, #136	@ 0x88
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f007 fb4e 	bl	8009efa <memset>
  if(huart->Instance==USART3)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a36      	ldr	r2, [pc, #216]	@ (800293c <HAL_UART_MspInit+0x104>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d165      	bne.n	8002934 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002868:	2304      	movs	r3, #4
 800286a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800286c:	2300      	movs	r3, #0
 800286e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4618      	mov	r0, r3
 8002876:	f003 f873 	bl	8005960 <HAL_RCCEx_PeriphCLKConfig>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002880:	f7ff fe2e 	bl	80024e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002884:	4b2e      	ldr	r3, [pc, #184]	@ (8002940 <HAL_UART_MspInit+0x108>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002888:	4a2d      	ldr	r2, [pc, #180]	@ (8002940 <HAL_UART_MspInit+0x108>)
 800288a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800288e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002890:	4b2b      	ldr	r3, [pc, #172]	@ (8002940 <HAL_UART_MspInit+0x108>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289c:	4b28      	ldr	r3, [pc, #160]	@ (8002940 <HAL_UART_MspInit+0x108>)
 800289e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a0:	4a27      	ldr	r2, [pc, #156]	@ (8002940 <HAL_UART_MspInit+0x108>)
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028a8:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_UART_MspInit+0x108>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b4:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <HAL_UART_MspInit+0x108>)
 80028b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b8:	4a21      	ldr	r2, [pc, #132]	@ (8002940 <HAL_UART_MspInit+0x108>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <HAL_UART_MspInit+0x108>)
 80028c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB12     ------> USART3_CK
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2303      	movs	r3, #3
 80028e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028e6:	2307      	movs	r3, #7
 80028e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028f0:	4619      	mov	r1, r3
 80028f2:	4814      	ldr	r0, [pc, #80]	@ (8002944 <HAL_UART_MspInit+0x10c>)
 80028f4:	f001 fff6 	bl	80048e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002912:	2307      	movs	r3, #7
 8002914:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002918:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800291c:	4619      	mov	r1, r3
 800291e:	480a      	ldr	r0, [pc, #40]	@ (8002948 <HAL_UART_MspInit+0x110>)
 8002920:	f001 ffe0 	bl	80048e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	2027      	movs	r0, #39	@ 0x27
 800292a:	f001 ff26 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800292e:	2027      	movs	r0, #39	@ 0x27
 8002930:	f001 ff3f 	bl	80047b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002934:	bf00      	nop
 8002936:	37b0      	adds	r7, #176	@ 0xb0
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40004800 	.word	0x40004800
 8002940:	40021000 	.word	0x40021000
 8002944:	48000400 	.word	0x48000400
 8002948:	48000800 	.word	0x48000800

0800294c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <NMI_Handler+0x4>

08002954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <MemManage_Handler+0x4>

08002964 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <BusFault_Handler+0x4>

0800296c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <UsageFault_Handler+0x4>

08002974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a2:	f000 f99b 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029b0:	4802      	ldr	r0, [pc, #8]	@ (80029bc <ADC1_2_IRQHandler+0x10>)
 80029b2:	f000 fe59 	bl	8003668 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000020c 	.word	0x2000020c

080029c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029c4:	4802      	ldr	r0, [pc, #8]	@ (80029d0 <TIM3_IRQHandler+0x10>)
 80029c6:	f003 ffeb 	bl	80069a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200002bc 	.word	0x200002bc

080029d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029d8:	4802      	ldr	r0, [pc, #8]	@ (80029e4 <TIM4_IRQHandler+0x10>)
 80029da:	f003 ffe1 	bl	80069a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000308 	.word	0x20000308

080029e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <USART3_IRQHandler+0x10>)
 80029ee:	f005 f84f 	bl	8007a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200003a0 	.word	0x200003a0

080029fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002a00:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a04:	f002 f930 	bl	8004c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a10:	4802      	ldr	r0, [pc, #8]	@ (8002a1c <TIM6_DAC_IRQHandler+0x10>)
 8002a12:	f003 ffc5 	bl	80069a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000354 	.word	0x20000354

08002a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return 1;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_kill>:

int _kill(int pid, int sig)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a3a:	f007 fab1 	bl	8009fa0 <__errno>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2216      	movs	r2, #22
 8002a42:	601a      	str	r2, [r3, #0]
  return -1;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_exit>:

void _exit (int status)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ffe7 	bl	8002a30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a62:	bf00      	nop
 8002a64:	e7fd      	b.n	8002a62 <_exit+0x12>

08002a66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e00a      	b.n	8002a8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a78:	f3af 8000 	nop.w
 8002a7c:	4601      	mov	r1, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	60ba      	str	r2, [r7, #8]
 8002a84:	b2ca      	uxtb	r2, r1
 8002a86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	dbf0      	blt.n	8002a78 <_read+0x12>
  }

  return len;
 8002a96:	687b      	ldr	r3, [r7, #4]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	e009      	b.n	8002ac6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	60ba      	str	r2, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	dbf1      	blt.n	8002ab2 <_write+0x12>
  }
  return len;
 8002ace:	687b      	ldr	r3, [r7, #4]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_close>:

int _close(int file)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b00:	605a      	str	r2, [r3, #4]
  return 0;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <_isatty>:

int _isatty(int file)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b18:	2301      	movs	r3, #1
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b48:	4a14      	ldr	r2, [pc, #80]	@ (8002b9c <_sbrk+0x5c>)
 8002b4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ba0 <_sbrk+0x60>)
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b54:	4b13      	ldr	r3, [pc, #76]	@ (8002ba4 <_sbrk+0x64>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <_sbrk+0x64>)
 8002b5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <_sbrk+0x68>)
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <_sbrk+0x64>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d207      	bcs.n	8002b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b70:	f007 fa16 	bl	8009fa0 <__errno>
 8002b74:	4603      	mov	r3, r0
 8002b76:	220c      	movs	r2, #12
 8002b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	e009      	b.n	8002b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b80:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <_sbrk+0x64>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b86:	4b07      	ldr	r3, [pc, #28]	@ (8002ba4 <_sbrk+0x64>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ba4 <_sbrk+0x64>)
 8002b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b92:	68fb      	ldr	r3, [r7, #12]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20018000 	.word	0x20018000
 8002ba0:	00000400 	.word	0x00000400
 8002ba4:	2000046c 	.word	0x2000046c
 8002ba8:	200005c0 	.word	0x200005c0

08002bac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <SystemInit+0x20>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb6:	4a05      	ldr	r2, [pc, #20]	@ (8002bcc <SystemInit+0x20>)
 8002bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bd4:	f7ff ffea 	bl	8002bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bd8:	480c      	ldr	r0, [pc, #48]	@ (8002c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8002bda:	490d      	ldr	r1, [pc, #52]	@ (8002c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c14 <LoopForever+0xe>)
  movs r3, #0
 8002bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002be0:	e002      	b.n	8002be8 <LoopCopyDataInit>

08002be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be6:	3304      	adds	r3, #4

08002be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bec:	d3f9      	bcc.n	8002be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bee:	4a0a      	ldr	r2, [pc, #40]	@ (8002c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8002c1c <LoopForever+0x16>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf4:	e001      	b.n	8002bfa <LoopFillZerobss>

08002bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf8:	3204      	adds	r2, #4

08002bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bfc:	d3fb      	bcc.n	8002bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bfe:	f007 f9d5 	bl	8009fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c02:	f7fe f9ef 	bl	8000fe4 <main>

08002c06 <LoopForever>:

LoopForever:
    b LoopForever
 8002c06:	e7fe      	b.n	8002c06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c10:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002c14:	0800db48 	.word	0x0800db48
  ldr r2, =_sbss
 8002c18:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c1c:	200005c0 	.word	0x200005c0

08002c20 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c20:	e7fe      	b.n	8002c20 <ADC3_IRQHandler>
	...

08002c24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <HAL_Init+0x3c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a0b      	ldr	r2, [pc, #44]	@ (8002c60 <HAL_Init+0x3c>)
 8002c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	f001 fd92 	bl	8004764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c40:	2000      	movs	r0, #0
 8002c42:	f000 f80f 	bl	8002c64 <HAL_InitTick>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	71fb      	strb	r3, [r7, #7]
 8002c50:	e001      	b.n	8002c56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c52:	f7ff fc4b 	bl	80024ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c56:	79fb      	ldrb	r3, [r7, #7]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40022000 	.word	0x40022000

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c70:	4b17      	ldr	r3, [pc, #92]	@ (8002cd0 <HAL_InitTick+0x6c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d023      	beq.n	8002cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c78:	4b16      	ldr	r3, [pc, #88]	@ (8002cd4 <HAL_InitTick+0x70>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <HAL_InitTick+0x6c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fd9d 	bl	80047ce <HAL_SYSTICK_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10f      	bne.n	8002cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b0f      	cmp	r3, #15
 8002c9e:	d809      	bhi.n	8002cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	f001 fd67 	bl	800477a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cac:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <HAL_InitTick+0x74>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e007      	b.n	8002cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e004      	b.n	8002cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	e001      	b.n	8002cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000024 	.word	0x20000024
 8002cd4:	2000001c 	.word	0x2000001c
 8002cd8:	20000020 	.word	0x20000020

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000024 	.word	0x20000024
 8002d00:	20000470 	.word	0x20000470

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000470 	.word	0x20000470

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000024 	.word	0x20000024

08002d64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3360      	adds	r3, #96	@ 0x60
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <LL_ADC_SetOffset+0x44>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	03fff000 	.word	0x03fff000

08002e14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3360      	adds	r3, #96	@ 0x60
 8002e22:	461a      	mov	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3360      	adds	r3, #96	@ 0x60
 8002e50:	461a      	mov	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3330      	adds	r3, #48	@ 0x30
 8002eac:	461a      	mov	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	4413      	add	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	211f      	movs	r1, #31
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	401a      	ands	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	0e9b      	lsrs	r3, r3, #26
 8002ed4:	f003 011f 	and.w	r1, r3, #31
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f00:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b087      	sub	sp, #28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	0e5b      	lsrs	r3, r3, #25
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	4413      	add	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	0d1b      	lsrs	r3, r3, #20
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2107      	movs	r1, #7
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	401a      	ands	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	0d1b      	lsrs	r3, r3, #20
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f64:	bf00      	nop
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0318 	and.w	r3, r3, #24
 8002f92:	4908      	ldr	r1, [pc, #32]	@ (8002fb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f94:	40d9      	lsrs	r1, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	400b      	ands	r3, r1
 8002f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	0007ffff 	.word	0x0007ffff

08002fb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6093      	str	r3, [r2, #8]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003028:	d101      	bne.n	800302e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800304c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003050:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003078:	d101      	bne.n	800307e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800309c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <LL_ADC_IsEnabled+0x18>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <LL_ADC_IsEnabled+0x1a>
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ee:	f043 0204 	orr.w	r2, r3, #4
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b04      	cmp	r3, #4
 8003114:	d101      	bne.n	800311a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b08      	cmp	r3, #8
 800313a:	d101      	bne.n	8003140 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b089      	sub	sp, #36	@ 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e130      	b.n	80033cc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff f9db 	bl	8002534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff3f 	bl	8003014 <LL_ADC_IsDeepPowerDownEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d004      	beq.n	80031a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff25 	bl	8002ff0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff5a 	bl	8003064 <LL_ADC_IsInternalRegulatorEnabled>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d115      	bne.n	80031e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff3e 	bl	800303c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c0:	4b84      	ldr	r3, [pc, #528]	@ (80033d4 <HAL_ADC_Init+0x284>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	4a84      	ldr	r2, [pc, #528]	@ (80033d8 <HAL_ADC_Init+0x288>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	3301      	adds	r3, #1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031d4:	e002      	b.n	80031dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3b01      	subs	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f9      	bne.n	80031d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff3c 	bl	8003064 <LL_ADC_IsInternalRegulatorEnabled>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	f043 0210 	orr.w	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003202:	f043 0201 	orr.w	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ff75 	bl	8003102 <LL_ADC_REG_IsConversionOngoing>
 8003218:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 80c9 	bne.w	80033ba <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 80c5 	bne.w	80033ba <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003234:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003238:	f043 0202 	orr.w	r2, r3, #2
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff35 	bl	80030b4 <LL_ADC_IsEnabled>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d115      	bne.n	800327c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003250:	4862      	ldr	r0, [pc, #392]	@ (80033dc <HAL_ADC_Init+0x28c>)
 8003252:	f7ff ff2f 	bl	80030b4 <LL_ADC_IsEnabled>
 8003256:	4604      	mov	r4, r0
 8003258:	4861      	ldr	r0, [pc, #388]	@ (80033e0 <HAL_ADC_Init+0x290>)
 800325a:	f7ff ff2b 	bl	80030b4 <LL_ADC_IsEnabled>
 800325e:	4603      	mov	r3, r0
 8003260:	431c      	orrs	r4, r3
 8003262:	4860      	ldr	r0, [pc, #384]	@ (80033e4 <HAL_ADC_Init+0x294>)
 8003264:	f7ff ff26 	bl	80030b4 <LL_ADC_IsEnabled>
 8003268:	4603      	mov	r3, r0
 800326a:	4323      	orrs	r3, r4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4619      	mov	r1, r3
 8003276:	485c      	ldr	r0, [pc, #368]	@ (80033e8 <HAL_ADC_Init+0x298>)
 8003278:	f7ff fd74 	bl	8002d64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7e5b      	ldrb	r3, [r3, #25]
 8003280:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003286:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800328c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003292:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800329a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d106      	bne.n	80032b8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	3b01      	subs	r3, #1
 80032b0:	045b      	lsls	r3, r3, #17
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	4b44      	ldr	r3, [pc, #272]	@ (80033ec <HAL_ADC_Init+0x29c>)
 80032dc:	4013      	ands	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	69b9      	ldr	r1, [r7, #24]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff1b 	bl	8003128 <LL_ADC_INJ_IsConversionOngoing>
 80032f2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d13d      	bne.n	8003376 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d13a      	bne.n	8003376 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003304:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800330c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800331c:	f023 0302 	bic.w	r3, r3, #2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	69b9      	ldr	r1, [r7, #24]
 8003326:	430b      	orrs	r3, r1
 8003328:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003330:	2b01      	cmp	r3, #1
 8003332:	d118      	bne.n	8003366 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800333e:	f023 0304 	bic.w	r3, r3, #4
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003350:	4311      	orrs	r1, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003356:	430a      	orrs	r2, r1
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	611a      	str	r2, [r3, #16]
 8003364:	e007      	b.n	8003376 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d10c      	bne.n	8003398 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	f023 010f 	bic.w	r1, r3, #15
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	1e5a      	subs	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
 8003396:	e007      	b.n	80033a8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 020f 	bic.w	r2, r2, #15
 80033a6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ac:	f023 0303 	bic.w	r3, r3, #3
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80033b8:	e007      	b.n	80033ca <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033be:	f043 0210 	orr.w	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3724      	adds	r7, #36	@ 0x24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd90      	pop	{r4, r7, pc}
 80033d4:	2000001c 	.word	0x2000001c
 80033d8:	053e2d63 	.word	0x053e2d63
 80033dc:	50040000 	.word	0x50040000
 80033e0:	50040100 	.word	0x50040100
 80033e4:	50040200 	.word	0x50040200
 80033e8:	50040300 	.word	0x50040300
 80033ec:	fff0c007 	.word	0xfff0c007

080033f0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033f8:	4891      	ldr	r0, [pc, #580]	@ (8003640 <HAL_ADC_Start_IT+0x250>)
 80033fa:	f7ff fddd 	bl	8002fb8 <LL_ADC_GetMultimode>
 80033fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fe7c 	bl	8003102 <LL_ADC_REG_IsConversionOngoing>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 8110 	bne.w	8003632 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_ADC_Start_IT+0x30>
 800341c:	2302      	movs	r3, #2
 800341e:	e10b      	b.n	8003638 <HAL_ADC_Start_IT+0x248>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 ff3d 	bl	80042a8 <ADC_Enable>
 800342e:	4603      	mov	r3, r0
 8003430:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 80f7 	bne.w	8003628 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a7c      	ldr	r2, [pc, #496]	@ (8003644 <HAL_ADC_Start_IT+0x254>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d002      	beq.n	800345e <HAL_ADC_Start_IT+0x6e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	e000      	b.n	8003460 <HAL_ADC_Start_IT+0x70>
 800345e:	4b7a      	ldr	r3, [pc, #488]	@ (8003648 <HAL_ADC_Start_IT+0x258>)
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	4293      	cmp	r3, r2
 8003466:	d002      	beq.n	800346e <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003472:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348a:	f023 0206 	bic.w	r2, r3, #6
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	659a      	str	r2, [r3, #88]	@ 0x58
 8003492:	e002      	b.n	800349a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	221c      	movs	r2, #28
 80034a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 021c 	bic.w	r2, r2, #28
 80034b8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d108      	bne.n	80034d4 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0208 	orr.w	r2, r2, #8
 80034d0:	605a      	str	r2, [r3, #4]
          break;
 80034d2:	e008      	b.n	80034e6 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0204 	orr.w	r2, r2, #4
 80034e2:	605a      	str	r2, [r3, #4]
          break;
 80034e4:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0210 	orr.w	r2, r2, #16
 80034fc:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a50      	ldr	r2, [pc, #320]	@ (8003644 <HAL_ADC_Start_IT+0x254>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d002      	beq.n	800350e <HAL_ADC_Start_IT+0x11e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	e000      	b.n	8003510 <HAL_ADC_Start_IT+0x120>
 800350e:	4b4e      	ldr	r3, [pc, #312]	@ (8003648 <HAL_ADC_Start_IT+0x258>)
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	4293      	cmp	r3, r2
 8003516:	d008      	beq.n	800352a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b05      	cmp	r3, #5
 8003522:	d002      	beq.n	800352a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b09      	cmp	r3, #9
 8003528:	d13a      	bne.n	80035a0 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d02d      	beq.n	8003594 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003540:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d110      	bne.n	8003572 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0220 	bic.w	r2, r2, #32
 800355e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800356e:	605a      	str	r2, [r3, #4]
              break;
 8003570:	e010      	b.n	8003594 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003580:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0220 	orr.w	r2, r2, #32
 8003590:	605a      	str	r2, [r3, #4]
              break;
 8003592:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fd9e 	bl	80030da <LL_ADC_REG_StartConversion>
 800359e:	e04a      	b.n	8003636 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a24      	ldr	r2, [pc, #144]	@ (8003644 <HAL_ADC_Start_IT+0x254>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d002      	beq.n	80035bc <HAL_ADC_Start_IT+0x1cc>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	e000      	b.n	80035be <HAL_ADC_Start_IT+0x1ce>
 80035bc:	4b22      	ldr	r3, [pc, #136]	@ (8003648 <HAL_ADC_Start_IT+0x258>)
 80035be:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d034      	beq.n	8003636 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d110      	bne.n	8003606 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0220 	bic.w	r2, r2, #32
 80035f2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003602:	605a      	str	r2, [r3, #4]
              break;
 8003604:	e017      	b.n	8003636 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003614:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0220 	orr.w	r2, r2, #32
 8003624:	605a      	str	r2, [r3, #4]
              break;
 8003626:	e006      	b.n	8003636 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003630:	e001      	b.n	8003636 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003632:	2302      	movs	r3, #2
 8003634:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003636:	7dfb      	ldrb	r3, [r7, #23]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	50040300 	.word	0x50040300
 8003644:	50040100 	.word	0x50040100
 8003648:	50040000 	.word	0x50040000

0800364c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	@ 0x28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003670:	2300      	movs	r3, #0
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003684:	4882      	ldr	r0, [pc, #520]	@ (8003890 <HAL_ADC_IRQHandler+0x228>)
 8003686:	f7ff fc97 	bl	8002fb8 <LL_ADC_GetMultimode>
 800368a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d017      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x5e>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d012      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fec9 	bl	8004450 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2202      	movs	r2, #2
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d004      	beq.n	80036da <HAL_ADC_IRQHandler+0x72>
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8083 	beq.w	80037ec <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d07d      	beq.n	80037ec <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003700:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fbb2 	bl	8002e76 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d062      	beq.n	80037de <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5d      	ldr	r2, [pc, #372]	@ (8003894 <HAL_ADC_IRQHandler+0x22c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d002      	beq.n	8003728 <HAL_ADC_IRQHandler+0xc0>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	e000      	b.n	800372a <HAL_ADC_IRQHandler+0xc2>
 8003728:	4b5b      	ldr	r3, [pc, #364]	@ (8003898 <HAL_ADC_IRQHandler+0x230>)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	4293      	cmp	r3, r2
 8003730:	d008      	beq.n	8003744 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b05      	cmp	r3, #5
 800373c:	d002      	beq.n	8003744 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b09      	cmp	r3, #9
 8003742:	d104      	bne.n	800374e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	623b      	str	r3, [r7, #32]
 800374c:	e00c      	b.n	8003768 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a50      	ldr	r2, [pc, #320]	@ (8003894 <HAL_ADC_IRQHandler+0x22c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d002      	beq.n	800375e <HAL_ADC_IRQHandler+0xf6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	e000      	b.n	8003760 <HAL_ADC_IRQHandler+0xf8>
 800375e:	4b4e      	ldr	r3, [pc, #312]	@ (8003898 <HAL_ADC_IRQHandler+0x230>)
 8003760:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d135      	bne.n	80037de <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d12e      	bne.n	80037de <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fcbc 	bl	8003102 <LL_ADC_REG_IsConversionOngoing>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11a      	bne.n	80037c6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 020c 	bic.w	r2, r2, #12
 800379e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d112      	bne.n	80037de <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80037c4:	e00b      	b.n	80037de <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd ffbc 	bl	800175c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	220c      	movs	r2, #12
 80037ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d004      	beq.n	8003800 <HAL_ADC_IRQHandler+0x198>
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10b      	bne.n	8003818 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 809f 	beq.w	800394a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8099 	beq.w	800394a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003828:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fb5d 	bl	8002ef4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800383a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fb18 	bl	8002e76 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003846:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a11      	ldr	r2, [pc, #68]	@ (8003894 <HAL_ADC_IRQHandler+0x22c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d002      	beq.n	8003858 <HAL_ADC_IRQHandler+0x1f0>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	e000      	b.n	800385a <HAL_ADC_IRQHandler+0x1f2>
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <HAL_ADC_IRQHandler+0x230>)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	4293      	cmp	r3, r2
 8003860:	d008      	beq.n	8003874 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b06      	cmp	r3, #6
 800386c:	d002      	beq.n	8003874 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b07      	cmp	r3, #7
 8003872:	d104      	bne.n	800387e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	e013      	b.n	80038a6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a04      	ldr	r2, [pc, #16]	@ (8003894 <HAL_ADC_IRQHandler+0x22c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_ADC_IRQHandler+0x234>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	e007      	b.n	800389e <HAL_ADC_IRQHandler+0x236>
 800388e:	bf00      	nop
 8003890:	50040300 	.word	0x50040300
 8003894:	50040100 	.word	0x50040100
 8003898:	50040000 	.word	0x50040000
 800389c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a94 <HAL_ADC_IRQHandler+0x42c>)
 800389e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d047      	beq.n	800393c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_ADC_IRQHandler+0x25e>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d03f      	beq.n	800393c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d13a      	bne.n	800393c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d0:	2b40      	cmp	r3, #64	@ 0x40
 80038d2:	d133      	bne.n	800393c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d12e      	bne.n	800393c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fc20 	bl	8003128 <LL_ADC_INJ_IsConversionOngoing>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11a      	bne.n	8003924 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038fc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d112      	bne.n	800393c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	655a      	str	r2, [r3, #84]	@ 0x54
 8003922:	e00b      	b.n	800393c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003928:	f043 0210 	orr.w	r2, r3, #16
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fd5f 	bl	8004400 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2260      	movs	r2, #96	@ 0x60
 8003948:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d011      	beq.n	8003978 <HAL_ADC_IRQHandler+0x310>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003962:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f896 	bl	8003a9c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2280      	movs	r2, #128	@ 0x80
 8003976:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d012      	beq.n	80039a8 <HAL_ADC_IRQHandler+0x340>
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00d      	beq.n	80039a8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003990:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fd45 	bl	8004428 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d012      	beq.n	80039d8 <HAL_ADC_IRQHandler+0x370>
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fd37 	bl	800443c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d036      	beq.n	8003a50 <HAL_ADC_IRQHandler+0x3e8>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d031      	beq.n	8003a50 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80039f4:	2301      	movs	r3, #1
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f8:	e014      	b.n	8003a24 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a00:	4825      	ldr	r0, [pc, #148]	@ (8003a98 <HAL_ADC_IRQHandler+0x430>)
 8003a02:	f7ff fae7 	bl	8002fd4 <LL_ADC_GetMultiDMATransfer>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00b      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a10:	e008      	b.n	8003a24 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003a20:	2301      	movs	r3, #1
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d10e      	bne.n	8003a48 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	f043 0202 	orr.w	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f834 	bl	8003ab0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d018      	beq.n	8003a8c <HAL_ADC_IRQHandler+0x424>
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d013      	beq.n	8003a8c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a68:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a74:	f043 0208 	orr.w	r2, r3, #8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a84:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fcc4 	bl	8004414 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003a8c:	bf00      	nop
 8003a8e:	3728      	adds	r7, #40	@ 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	50040000 	.word	0x50040000
 8003a98:	50040300 	.word	0x50040300

08003a9c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b0b6      	sub	sp, #216	@ 0xd8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x22>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e3c9      	b.n	800427a <HAL_ADC_ConfigChannel+0x7b6>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fb05 	bl	8003102 <LL_ADC_REG_IsConversionOngoing>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 83aa 	bne.w	8004254 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	d824      	bhi.n	8003b5a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	3b02      	subs	r3, #2
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d81b      	bhi.n	8003b52 <HAL_ADC_ConfigChannel+0x8e>
 8003b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b20 <HAL_ADC_ConfigChannel+0x5c>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b31 	.word	0x08003b31
 8003b24:	08003b39 	.word	0x08003b39
 8003b28:	08003b41 	.word	0x08003b41
 8003b2c:	08003b49 	.word	0x08003b49
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003b30:	230c      	movs	r3, #12
 8003b32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003b36:	e010      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003b38:	2312      	movs	r3, #18
 8003b3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003b3e:	e00c      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003b40:	2318      	movs	r3, #24
 8003b42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003b46:	e008      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003b48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003b50:	e003      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003b52:	2306      	movs	r3, #6
 8003b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003b58:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003b68:	f7ff f998 	bl	8002e9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fac6 	bl	8003102 <LL_ADC_REG_IsConversionOngoing>
 8003b76:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fad2 	bl	8003128 <LL_ADC_INJ_IsConversionOngoing>
 8003b84:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f040 81a4 	bne.w	8003eda <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 819f 	bne.w	8003eda <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f7ff f9b6 	bl	8002f1a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	08db      	lsrs	r3, r3, #3
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d00a      	beq.n	8003be6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6919      	ldr	r1, [r3, #16]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003be0:	f7ff f8f4 	bl	8002dcc <LL_ADC_SetOffset>
 8003be4:	e179      	b.n	8003eda <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff f911 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x14e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff f906 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	0e9b      	lsrs	r3, r3, #26
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	e01e      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x18c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff f8fb 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e004      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003c44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x1a4>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	0e9b      	lsrs	r3, r3, #26
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	e018      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x1d6>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003c84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	e004      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d106      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff f8ca 	bl	8002e40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff f8ae 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x214>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff f8a3 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	0e9b      	lsrs	r3, r3, #26
 8003cd2:	f003 021f 	and.w	r2, r3, #31
 8003cd6:	e01e      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x252>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff f898 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003d06:	2320      	movs	r3, #32
 8003d08:	e004      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003d0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x26a>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	0e9b      	lsrs	r3, r3, #26
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	e018      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x29c>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003d52:	2320      	movs	r3, #32
 8003d54:	e004      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d106      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff f867 	bl	8002e40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2102      	movs	r1, #2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff f84b 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x2da>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff f840 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003d94:	4603      	mov	r3, r0
 8003d96:	0e9b      	lsrs	r3, r3, #26
 8003d98:	f003 021f 	and.w	r2, r3, #31
 8003d9c:	e01e      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x318>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2102      	movs	r1, #2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff f835 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003dcc:	2320      	movs	r3, #32
 8003dce:	e004      	b.n	8003dda <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x330>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0e9b      	lsrs	r3, r3, #26
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	e014      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x35a>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003e10:	2320      	movs	r3, #32
 8003e12:	e004      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d106      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2102      	movs	r1, #2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f808 	bl	8002e40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2103      	movs	r1, #3
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe ffec 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x398>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2103      	movs	r1, #3
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe ffe1 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003e52:	4603      	mov	r3, r0
 8003e54:	0e9b      	lsrs	r3, r3, #26
 8003e56:	f003 021f 	and.w	r2, r3, #31
 8003e5a:	e017      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x3c8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2103      	movs	r1, #3
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe ffd6 	bl	8002e14 <LL_ADC_GetOffsetChannel>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e76:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003e7e:	2320      	movs	r3, #32
 8003e80:	e003      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e84:	fab3 f383 	clz	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x3e0>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	0e9b      	lsrs	r3, r3, #26
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	e011      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x404>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003eb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e003      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003ec0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d106      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2103      	movs	r1, #3
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe ffb3 	bl	8002e40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff f8e8 	bl	80030b4 <LL_ADC_IsEnabled>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 8140 	bne.w	800416c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f7ff f839 	bl	8002f70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4a8f      	ldr	r2, [pc, #572]	@ (8004140 <HAL_ADC_ConfigChannel+0x67c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	f040 8131 	bne.w	800416c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x46e>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	0e9b      	lsrs	r3, r3, #26
 8003f20:	3301      	adds	r3, #1
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2b09      	cmp	r3, #9
 8003f28:	bf94      	ite	ls
 8003f2a:	2301      	movls	r3, #1
 8003f2c:	2300      	movhi	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	e019      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x4a2>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f42:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003f44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	e003      	b.n	8003f56 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f50:	fab3 f383 	clz	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2b09      	cmp	r3, #9
 8003f5e:	bf94      	ite	ls
 8003f60:	2301      	movls	r3, #1
 8003f62:	2300      	movhi	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d079      	beq.n	800405e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d107      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x4c2>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	0e9b      	lsrs	r3, r3, #26
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	069b      	lsls	r3, r3, #26
 8003f80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f84:	e015      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x4ee>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f96:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	e003      	b.n	8003faa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	3301      	adds	r3, #1
 8003fac:	069b      	lsls	r3, r3, #26
 8003fae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x50e>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	0e9b      	lsrs	r3, r3, #26
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	2101      	movs	r1, #1
 8003fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd0:	e017      	b.n	8004002 <HAL_ADC_ConfigChannel+0x53e>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fda:	fa93 f3a3 	rbit	r3, r3
 8003fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003fea:	2320      	movs	r3, #32
 8003fec:	e003      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff0:	fab3 f383 	clz	r3, r3
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	ea42 0103 	orr.w	r1, r2, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x564>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0e9b      	lsrs	r3, r3, #26
 8004018:	3301      	adds	r3, #1
 800401a:	f003 021f 	and.w	r2, r3, #31
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	051b      	lsls	r3, r3, #20
 8004026:	e018      	b.n	800405a <HAL_ADC_ConfigChannel+0x596>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004038:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e003      	b.n	800404c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	3301      	adds	r3, #1
 800404e:	f003 021f 	and.w	r2, r3, #31
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800405a:	430b      	orrs	r3, r1
 800405c:	e081      	b.n	8004162 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004066:	2b00      	cmp	r3, #0
 8004068:	d107      	bne.n	800407a <HAL_ADC_ConfigChannel+0x5b6>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	0e9b      	lsrs	r3, r3, #26
 8004070:	3301      	adds	r3, #1
 8004072:	069b      	lsls	r3, r3, #26
 8004074:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004078:	e015      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x5e2>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800408c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004092:	2320      	movs	r3, #32
 8004094:	e003      	b.n	800409e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004098:	fab3 f383 	clz	r3, r3
 800409c:	b2db      	uxtb	r3, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	069b      	lsls	r3, r3, #26
 80040a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x602>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0e9b      	lsrs	r3, r3, #26
 80040b8:	3301      	adds	r3, #1
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2101      	movs	r1, #1
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	e017      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x632>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	61bb      	str	r3, [r7, #24]
  return result;
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80040de:	2320      	movs	r3, #32
 80040e0:	e003      	b.n	80040ea <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2101      	movs	r1, #1
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	ea42 0103 	orr.w	r1, r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x65e>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	0e9b      	lsrs	r3, r3, #26
 800410c:	3301      	adds	r3, #1
 800410e:	f003 021f 	and.w	r2, r3, #31
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	3b1e      	subs	r3, #30
 800411a:	051b      	lsls	r3, r3, #20
 800411c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004120:	e01e      	b.n	8004160 <HAL_ADC_ConfigChannel+0x69c>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	60fb      	str	r3, [r7, #12]
  return result;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d104      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800413a:	2320      	movs	r3, #32
 800413c:	e006      	b.n	800414c <HAL_ADC_ConfigChannel+0x688>
 800413e:	bf00      	nop
 8004140:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	3301      	adds	r3, #1
 800414e:	f003 021f 	and.w	r2, r3, #31
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	3b1e      	subs	r3, #30
 800415a:	051b      	lsls	r3, r3, #20
 800415c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004160:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004166:	4619      	mov	r1, r3
 8004168:	f7fe fed7 	bl	8002f1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b44      	ldr	r3, [pc, #272]	@ (8004284 <HAL_ADC_ConfigChannel+0x7c0>)
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d07a      	beq.n	800426e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004178:	4843      	ldr	r0, [pc, #268]	@ (8004288 <HAL_ADC_ConfigChannel+0x7c4>)
 800417a:	f7fe fe19 	bl	8002db0 <LL_ADC_GetCommonPathInternalCh>
 800417e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a41      	ldr	r2, [pc, #260]	@ (800428c <HAL_ADC_ConfigChannel+0x7c8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d12c      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800418c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d126      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a3c      	ldr	r2, [pc, #240]	@ (8004290 <HAL_ADC_ConfigChannel+0x7cc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <HAL_ADC_ConfigChannel+0x6e8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a3b      	ldr	r2, [pc, #236]	@ (8004294 <HAL_ADC_ConfigChannel+0x7d0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d15d      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041b4:	4619      	mov	r1, r3
 80041b6:	4834      	ldr	r0, [pc, #208]	@ (8004288 <HAL_ADC_ConfigChannel+0x7c4>)
 80041b8:	f7fe fde7 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041bc:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <HAL_ADC_ConfigChannel+0x7d4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	099b      	lsrs	r3, r3, #6
 80041c2:	4a36      	ldr	r2, [pc, #216]	@ (800429c <HAL_ADC_ConfigChannel+0x7d8>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	099b      	lsrs	r3, r3, #6
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80041d6:	e002      	b.n	80041de <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	3b01      	subs	r3, #1
 80041dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f9      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041e4:	e040      	b.n	8004268 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2d      	ldr	r2, [pc, #180]	@ (80042a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d118      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d112      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a23      	ldr	r2, [pc, #140]	@ (8004290 <HAL_ADC_ConfigChannel+0x7cc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d004      	beq.n	8004210 <HAL_ADC_ConfigChannel+0x74c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a22      	ldr	r2, [pc, #136]	@ (8004294 <HAL_ADC_ConfigChannel+0x7d0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d12d      	bne.n	800426c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004214:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004218:	4619      	mov	r1, r3
 800421a:	481b      	ldr	r0, [pc, #108]	@ (8004288 <HAL_ADC_ConfigChannel+0x7c4>)
 800421c:	f7fe fdb5 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004220:	e024      	b.n	800426c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1f      	ldr	r2, [pc, #124]	@ (80042a4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d120      	bne.n	800426e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800422c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004230:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11a      	bne.n	800426e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a14      	ldr	r2, [pc, #80]	@ (8004290 <HAL_ADC_ConfigChannel+0x7cc>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d115      	bne.n	800426e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004242:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004246:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800424a:	4619      	mov	r1, r3
 800424c:	480e      	ldr	r0, [pc, #56]	@ (8004288 <HAL_ADC_ConfigChannel+0x7c4>)
 800424e:	f7fe fd9c 	bl	8002d8a <LL_ADC_SetCommonPathInternalCh>
 8004252:	e00c      	b.n	800426e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004266:	e002      	b.n	800426e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004268:	bf00      	nop
 800426a:	e000      	b.n	800426e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800426c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004276:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800427a:	4618      	mov	r0, r3
 800427c:	37d8      	adds	r7, #216	@ 0xd8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	80080000 	.word	0x80080000
 8004288:	50040300 	.word	0x50040300
 800428c:	c7520000 	.word	0xc7520000
 8004290:	50040000 	.word	0x50040000
 8004294:	50040200 	.word	0x50040200
 8004298:	2000001c 	.word	0x2000001c
 800429c:	053e2d63 	.word	0x053e2d63
 80042a0:	cb840000 	.word	0xcb840000
 80042a4:	80000001 	.word	0x80000001

080042a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe fefb 	bl	80030b4 <LL_ADC_IsEnabled>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d169      	bne.n	8004398 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	4b36      	ldr	r3, [pc, #216]	@ (80043a4 <ADC_Enable+0xfc>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	f043 0210 	orr.w	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e055      	b.n	800439a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe feca 	bl	800308c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80042f8:	482b      	ldr	r0, [pc, #172]	@ (80043a8 <ADC_Enable+0x100>)
 80042fa:	f7fe fd59 	bl	8002db0 <LL_ADC_GetCommonPathInternalCh>
 80042fe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004300:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004308:	4b28      	ldr	r3, [pc, #160]	@ (80043ac <ADC_Enable+0x104>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	4a28      	ldr	r2, [pc, #160]	@ (80043b0 <ADC_Enable+0x108>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	099b      	lsrs	r3, r3, #6
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004322:	e002      	b.n	800432a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	3b01      	subs	r3, #1
 8004328:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f9      	bne.n	8004324 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004330:	f7fe fce8 	bl	8002d04 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004336:	e028      	b.n	800438a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe feb9 	bl	80030b4 <LL_ADC_IsEnabled>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d104      	bne.n	8004352 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe fe9d 	bl	800308c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004352:	f7fe fcd7 	bl	8002d04 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d914      	bls.n	800438a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d00d      	beq.n	800438a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004372:	f043 0210 	orr.w	r2, r3, #16
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437e:	f043 0201 	orr.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e007      	b.n	800439a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b01      	cmp	r3, #1
 8004396:	d1cf      	bne.n	8004338 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	8000003f 	.word	0x8000003f
 80043a8:	50040300 	.word	0x50040300
 80043ac:	2000001c 	.word	0x2000001c
 80043b0:	053e2d63 	.word	0x053e2d63

080043b4 <LL_ADC_IsEnabled>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <LL_ADC_IsEnabled+0x18>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <LL_ADC_IsEnabled+0x1a>
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <LL_ADC_REG_IsConversionOngoing>:
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d101      	bne.n	80043f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b09f      	sub	sp, #124	@ 0x7c
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800447e:	2302      	movs	r3, #2
 8004480:	e093      	b.n	80045aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800448a:	2300      	movs	r3, #0
 800448c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800448e:	2300      	movs	r3, #0
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a47      	ldr	r2, [pc, #284]	@ (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d102      	bne.n	80044a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800449c:	4b46      	ldr	r3, [pc, #280]	@ (80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	e001      	b.n	80044a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	f043 0220 	orr.w	r2, r3, #32
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e072      	b.n	80045aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff ff87 	bl	80043da <LL_ADC_REG_IsConversionOngoing>
 80044cc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff ff81 	bl	80043da <LL_ADC_REG_IsConversionOngoing>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d154      	bne.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80044de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d151      	bne.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044e4:	4b35      	ldr	r3, [pc, #212]	@ (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80044e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d02c      	beq.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	6859      	ldr	r1, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004502:	035b      	lsls	r3, r3, #13
 8004504:	430b      	orrs	r3, r1
 8004506:	431a      	orrs	r2, r3
 8004508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800450c:	4829      	ldr	r0, [pc, #164]	@ (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800450e:	f7ff ff51 	bl	80043b4 <LL_ADC_IsEnabled>
 8004512:	4604      	mov	r4, r0
 8004514:	4828      	ldr	r0, [pc, #160]	@ (80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004516:	f7ff ff4d 	bl	80043b4 <LL_ADC_IsEnabled>
 800451a:	4603      	mov	r3, r0
 800451c:	431c      	orrs	r4, r3
 800451e:	4828      	ldr	r0, [pc, #160]	@ (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004520:	f7ff ff48 	bl	80043b4 <LL_ADC_IsEnabled>
 8004524:	4603      	mov	r3, r0
 8004526:	4323      	orrs	r3, r4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d137      	bne.n	800459c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800452c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004534:	f023 030f 	bic.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	6811      	ldr	r1, [r2, #0]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	6892      	ldr	r2, [r2, #8]
 8004540:	430a      	orrs	r2, r1
 8004542:	431a      	orrs	r2, r3
 8004544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004546:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004548:	e028      	b.n	800459c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800454a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004554:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004556:	4817      	ldr	r0, [pc, #92]	@ (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004558:	f7ff ff2c 	bl	80043b4 <LL_ADC_IsEnabled>
 800455c:	4604      	mov	r4, r0
 800455e:	4816      	ldr	r0, [pc, #88]	@ (80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004560:	f7ff ff28 	bl	80043b4 <LL_ADC_IsEnabled>
 8004564:	4603      	mov	r3, r0
 8004566:	431c      	orrs	r4, r3
 8004568:	4815      	ldr	r0, [pc, #84]	@ (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800456a:	f7ff ff23 	bl	80043b4 <LL_ADC_IsEnabled>
 800456e:	4603      	mov	r3, r0
 8004570:	4323      	orrs	r3, r4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d112      	bne.n	800459c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800457e:	f023 030f 	bic.w	r3, r3, #15
 8004582:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004584:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004586:	e009      	b.n	800459c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800459a:	e000      	b.n	800459e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800459c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80045a6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	377c      	adds	r7, #124	@ 0x7c
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd90      	pop	{r4, r7, pc}
 80045b2:	bf00      	nop
 80045b4:	50040000 	.word	0x50040000
 80045b8:	50040100 	.word	0x50040100
 80045bc:	50040300 	.word	0x50040300
 80045c0:	50040200 	.word	0x50040200

080045c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004608 <__NVIC_SetPriorityGrouping+0x44>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045e0:	4013      	ands	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045f6:	4a04      	ldr	r2, [pc, #16]	@ (8004608 <__NVIC_SetPriorityGrouping+0x44>)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	60d3      	str	r3, [r2, #12]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004610:	4b04      	ldr	r3, [pc, #16]	@ (8004624 <__NVIC_GetPriorityGrouping+0x18>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	f003 0307 	and.w	r3, r3, #7
}
 800461a:	4618      	mov	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	e000ed00 	.word	0xe000ed00

08004628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	2b00      	cmp	r3, #0
 8004638:	db0b      	blt.n	8004652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	f003 021f 	and.w	r2, r3, #31
 8004640:	4907      	ldr	r1, [pc, #28]	@ (8004660 <__NVIC_EnableIRQ+0x38>)
 8004642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	2001      	movs	r0, #1
 800464a:	fa00 f202 	lsl.w	r2, r0, r2
 800464e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	e000e100 	.word	0xe000e100

08004664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	6039      	str	r1, [r7, #0]
 800466e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004674:	2b00      	cmp	r3, #0
 8004676:	db0a      	blt.n	800468e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	490c      	ldr	r1, [pc, #48]	@ (80046b0 <__NVIC_SetPriority+0x4c>)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	0112      	lsls	r2, r2, #4
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	440b      	add	r3, r1
 8004688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800468c:	e00a      	b.n	80046a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	4908      	ldr	r1, [pc, #32]	@ (80046b4 <__NVIC_SetPriority+0x50>)
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	3b04      	subs	r3, #4
 800469c:	0112      	lsls	r2, r2, #4
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	440b      	add	r3, r1
 80046a2:	761a      	strb	r2, [r3, #24]
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000e100 	.word	0xe000e100
 80046b4:	e000ed00 	.word	0xe000ed00

080046b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	@ 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f1c3 0307 	rsb	r3, r3, #7
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	bf28      	it	cs
 80046d6:	2304      	movcs	r3, #4
 80046d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	3304      	adds	r3, #4
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d902      	bls.n	80046e8 <NVIC_EncodePriority+0x30>
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3b03      	subs	r3, #3
 80046e6:	e000      	b.n	80046ea <NVIC_EncodePriority+0x32>
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046ec:	f04f 32ff 	mov.w	r2, #4294967295
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43da      	mvns	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	401a      	ands	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004700:	f04f 31ff 	mov.w	r1, #4294967295
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	43d9      	mvns	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004710:	4313      	orrs	r3, r2
         );
}
 8004712:	4618      	mov	r0, r3
 8004714:	3724      	adds	r7, #36	@ 0x24
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3b01      	subs	r3, #1
 800472c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004730:	d301      	bcc.n	8004736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004732:	2301      	movs	r3, #1
 8004734:	e00f      	b.n	8004756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004736:	4a0a      	ldr	r2, [pc, #40]	@ (8004760 <SysTick_Config+0x40>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3b01      	subs	r3, #1
 800473c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800473e:	210f      	movs	r1, #15
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	f7ff ff8e 	bl	8004664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <SysTick_Config+0x40>)
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800474e:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <SysTick_Config+0x40>)
 8004750:	2207      	movs	r2, #7
 8004752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	e000e010 	.word	0xe000e010

08004764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff ff29 	bl	80045c4 <__NVIC_SetPriorityGrouping>
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b086      	sub	sp, #24
 800477e:	af00      	add	r7, sp, #0
 8004780:	4603      	mov	r3, r0
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800478c:	f7ff ff3e 	bl	800460c <__NVIC_GetPriorityGrouping>
 8004790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	6978      	ldr	r0, [r7, #20]
 8004798:	f7ff ff8e 	bl	80046b8 <NVIC_EncodePriority>
 800479c:	4602      	mov	r2, r0
 800479e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff ff5d 	bl	8004664 <__NVIC_SetPriority>
}
 80047aa:	bf00      	nop
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	4603      	mov	r3, r0
 80047ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff ff31 	bl	8004628 <__NVIC_EnableIRQ>
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff ffa2 	bl	8004720 <SysTick_Config>
 80047dc:	4603      	mov	r3, r0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d008      	beq.n	8004810 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2204      	movs	r2, #4
 8004802:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e022      	b.n	8004856 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 020e 	bic.w	r2, r2, #14
 800481e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004834:	f003 021c 	and.w	r2, r3, #28
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	2101      	movs	r1, #1
 800483e:	fa01 f202 	lsl.w	r2, r1, r2
 8004842:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d005      	beq.n	8004886 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2204      	movs	r2, #4
 800487e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	e029      	b.n	80048da <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 020e 	bic.w	r2, r2, #14
 8004894:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048aa:	f003 021c 	and.w	r2, r3, #28
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	2101      	movs	r1, #1
 80048b4:	fa01 f202 	lsl.w	r2, r1, r2
 80048b8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
    }
  }
  return status;
 80048da:	7bfb      	ldrb	r3, [r7, #15]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048f2:	e17f      	b.n	8004bf4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	2101      	movs	r1, #1
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	4013      	ands	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8171 	beq.w	8004bee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d005      	beq.n	8004924 <HAL_GPIO_Init+0x40>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d130      	bne.n	8004986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	2203      	movs	r2, #3
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800495a:	2201      	movs	r2, #1
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4013      	ands	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	f003 0201 	and.w	r2, r3, #1
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b03      	cmp	r3, #3
 8004990:	d118      	bne.n	80049c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004998:	2201      	movs	r2, #1
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4013      	ands	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	08db      	lsrs	r3, r3, #3
 80049ae:	f003 0201 	and.w	r2, r3, #1
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d017      	beq.n	8004a00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	2203      	movs	r2, #3
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4013      	ands	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d123      	bne.n	8004a54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	08da      	lsrs	r2, r3, #3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3208      	adds	r2, #8
 8004a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	220f      	movs	r2, #15
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	08da      	lsrs	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3208      	adds	r2, #8
 8004a4e:	6939      	ldr	r1, [r7, #16]
 8004a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	2203      	movs	r2, #3
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0203 	and.w	r2, r3, #3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80ac 	beq.w	8004bee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a96:	4b5f      	ldr	r3, [pc, #380]	@ (8004c14 <HAL_GPIO_Init+0x330>)
 8004a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a9a:	4a5e      	ldr	r2, [pc, #376]	@ (8004c14 <HAL_GPIO_Init+0x330>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8004aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c14 <HAL_GPIO_Init+0x330>)
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004aae:	4a5a      	ldr	r2, [pc, #360]	@ (8004c18 <HAL_GPIO_Init+0x334>)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	089b      	lsrs	r3, r3, #2
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	220f      	movs	r2, #15
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	43db      	mvns	r3, r3
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ad8:	d025      	beq.n	8004b26 <HAL_GPIO_Init+0x242>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a4f      	ldr	r2, [pc, #316]	@ (8004c1c <HAL_GPIO_Init+0x338>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01f      	beq.n	8004b22 <HAL_GPIO_Init+0x23e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8004c20 <HAL_GPIO_Init+0x33c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d019      	beq.n	8004b1e <HAL_GPIO_Init+0x23a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a4d      	ldr	r2, [pc, #308]	@ (8004c24 <HAL_GPIO_Init+0x340>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <HAL_GPIO_Init+0x236>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a4c      	ldr	r2, [pc, #304]	@ (8004c28 <HAL_GPIO_Init+0x344>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00d      	beq.n	8004b16 <HAL_GPIO_Init+0x232>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a4b      	ldr	r2, [pc, #300]	@ (8004c2c <HAL_GPIO_Init+0x348>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <HAL_GPIO_Init+0x22e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a4a      	ldr	r2, [pc, #296]	@ (8004c30 <HAL_GPIO_Init+0x34c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <HAL_GPIO_Init+0x22a>
 8004b0a:	2306      	movs	r3, #6
 8004b0c:	e00c      	b.n	8004b28 <HAL_GPIO_Init+0x244>
 8004b0e:	2307      	movs	r3, #7
 8004b10:	e00a      	b.n	8004b28 <HAL_GPIO_Init+0x244>
 8004b12:	2305      	movs	r3, #5
 8004b14:	e008      	b.n	8004b28 <HAL_GPIO_Init+0x244>
 8004b16:	2304      	movs	r3, #4
 8004b18:	e006      	b.n	8004b28 <HAL_GPIO_Init+0x244>
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e004      	b.n	8004b28 <HAL_GPIO_Init+0x244>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e002      	b.n	8004b28 <HAL_GPIO_Init+0x244>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_GPIO_Init+0x244>
 8004b26:	2300      	movs	r3, #0
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	f002 0203 	and.w	r2, r2, #3
 8004b2e:	0092      	lsls	r2, r2, #2
 8004b30:	4093      	lsls	r3, r2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b38:	4937      	ldr	r1, [pc, #220]	@ (8004c18 <HAL_GPIO_Init+0x334>)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	089b      	lsrs	r3, r3, #2
 8004b3e:	3302      	adds	r3, #2
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b46:	4b3b      	ldr	r3, [pc, #236]	@ (8004c34 <HAL_GPIO_Init+0x350>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b6a:	4a32      	ldr	r2, [pc, #200]	@ (8004c34 <HAL_GPIO_Init+0x350>)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b70:	4b30      	ldr	r3, [pc, #192]	@ (8004c34 <HAL_GPIO_Init+0x350>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b94:	4a27      	ldr	r2, [pc, #156]	@ (8004c34 <HAL_GPIO_Init+0x350>)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b9a:	4b26      	ldr	r3, [pc, #152]	@ (8004c34 <HAL_GPIO_Init+0x350>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8004c34 <HAL_GPIO_Init+0x350>)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c34 <HAL_GPIO_Init+0x350>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004be8:	4a12      	ldr	r2, [pc, #72]	@ (8004c34 <HAL_GPIO_Init+0x350>)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f47f ae78 	bne.w	80048f4 <HAL_GPIO_Init+0x10>
  }
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
 8004c18:	40010000 	.word	0x40010000
 8004c1c:	48000400 	.word	0x48000400
 8004c20:	48000800 	.word	0x48000800
 8004c24:	48000c00 	.word	0x48000c00
 8004c28:	48001000 	.word	0x48001000
 8004c2c:	48001400 	.word	0x48001400
 8004c30:	48001800 	.word	0x48001800
 8004c34:	40010400 	.word	0x40010400

08004c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
 8004c44:	4613      	mov	r3, r2
 8004c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c48:	787b      	ldrb	r3, [r7, #1]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c54:	e002      	b.n	8004c5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c56:	887a      	ldrh	r2, [r7, #2]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c72:	4b08      	ldr	r3, [pc, #32]	@ (8004c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d006      	beq.n	8004c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c7e:	4a05      	ldr	r2, [pc, #20]	@ (8004c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fd fbda 	bl	8002440 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40010400 	.word	0x40010400

08004c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c9c:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40007000 	.word	0x40007000

08004cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cc2:	d130      	bne.n	8004d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cc4:	4b23      	ldr	r3, [pc, #140]	@ (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd0:	d038      	beq.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cd2:	4b20      	ldr	r3, [pc, #128]	@ (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cda:	4a1e      	ldr	r2, [pc, #120]	@ (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2232      	movs	r2, #50	@ 0x32
 8004ce8:	fb02 f303 	mul.w	r3, r2, r3
 8004cec:	4a1b      	ldr	r2, [pc, #108]	@ (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	0c9b      	lsrs	r3, r3, #18
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cf8:	e002      	b.n	8004d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d00:	4b14      	ldr	r3, [pc, #80]	@ (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d0c:	d102      	bne.n	8004d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f2      	bne.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d14:	4b0f      	ldr	r3, [pc, #60]	@ (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d20:	d110      	bne.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e00f      	b.n	8004d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d26:	4b0b      	ldr	r3, [pc, #44]	@ (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d32:	d007      	beq.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d34:	4b07      	ldr	r3, [pc, #28]	@ (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d3c:	4a05      	ldr	r2, [pc, #20]	@ (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40007000 	.word	0x40007000
 8004d58:	2000001c 	.word	0x2000001c
 8004d5c:	431bde83 	.word	0x431bde83

08004d60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e3ca      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d72:	4b97      	ldr	r3, [pc, #604]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d7c:	4b94      	ldr	r3, [pc, #592]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 80e4 	beq.w	8004f5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <HAL_RCC_OscConfig+0x4a>
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	f040 808b 	bne.w	8004eb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	f040 8087 	bne.w	8004eb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004daa:	4b89      	ldr	r3, [pc, #548]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x62>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e3a2      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	4b82      	ldr	r3, [pc, #520]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <HAL_RCC_OscConfig+0x7c>
 8004dd2:	4b7f      	ldr	r3, [pc, #508]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dda:	e005      	b.n	8004de8 <HAL_RCC_OscConfig+0x88>
 8004ddc:	4b7c      	ldr	r3, [pc, #496]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de2:	091b      	lsrs	r3, r3, #4
 8004de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d223      	bcs.n	8004e34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fd55 	bl	80058a0 <RCC_SetFlashLatencyFromMSIRange>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e383      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e00:	4b73      	ldr	r3, [pc, #460]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a72      	ldr	r2, [pc, #456]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e06:	f043 0308 	orr.w	r3, r3, #8
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b70      	ldr	r3, [pc, #448]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	496d      	ldr	r1, [pc, #436]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e1e:	4b6c      	ldr	r3, [pc, #432]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	4968      	ldr	r1, [pc, #416]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	604b      	str	r3, [r1, #4]
 8004e32:	e025      	b.n	8004e80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e34:	4b66      	ldr	r3, [pc, #408]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a65      	ldr	r2, [pc, #404]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e3a:	f043 0308 	orr.w	r3, r3, #8
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	4b63      	ldr	r3, [pc, #396]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	4960      	ldr	r1, [pc, #384]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e52:	4b5f      	ldr	r3, [pc, #380]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	495b      	ldr	r1, [pc, #364]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d109      	bne.n	8004e80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fd15 	bl	80058a0 <RCC_SetFlashLatencyFromMSIRange>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e343      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e80:	f000 fc4a 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b52      	ldr	r3, [pc, #328]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	4950      	ldr	r1, [pc, #320]	@ (8004fd4 <HAL_RCC_OscConfig+0x274>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9c:	4a4e      	ldr	r2, [pc, #312]	@ (8004fd8 <HAL_RCC_OscConfig+0x278>)
 8004e9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8004fdc <HAL_RCC_OscConfig+0x27c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fd fedd 	bl	8002c64 <HAL_InitTick>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d052      	beq.n	8004f5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	e327      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d032      	beq.n	8004f26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ec0:	4b43      	ldr	r3, [pc, #268]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a42      	ldr	r2, [pc, #264]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ecc:	f7fd ff1a 	bl	8002d04 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ed4:	f7fd ff16 	bl	8002d04 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e310      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ef2:	4b37      	ldr	r3, [pc, #220]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a36      	ldr	r2, [pc, #216]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004ef8:	f043 0308 	orr.w	r3, r3, #8
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4b34      	ldr	r3, [pc, #208]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	4931      	ldr	r1, [pc, #196]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f10:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	492c      	ldr	r1, [pc, #176]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	604b      	str	r3, [r1, #4]
 8004f24:	e01a      	b.n	8004f5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f26:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a29      	ldr	r2, [pc, #164]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f32:	f7fd fee7 	bl	8002d04 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f3a:	f7fd fee3 	bl	8002d04 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e2dd      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f4c:	4b20      	ldr	r3, [pc, #128]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x1da>
 8004f58:	e000      	b.n	8004f5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d074      	beq.n	8005052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d005      	beq.n	8004f7a <HAL_RCC_OscConfig+0x21a>
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b0c      	cmp	r3, #12
 8004f72:	d10e      	bne.n	8004f92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d10b      	bne.n	8004f92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7a:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d064      	beq.n	8005050 <HAL_RCC_OscConfig+0x2f0>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d160      	bne.n	8005050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e2ba      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x24a>
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	e026      	b.n	8004ff8 <HAL_RCC_OscConfig+0x298>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fb2:	d115      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x280>
 8004fb4:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a05      	ldr	r2, [pc, #20]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b03      	ldr	r3, [pc, #12]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a02      	ldr	r2, [pc, #8]	@ (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e014      	b.n	8004ff8 <HAL_RCC_OscConfig+0x298>
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	0800d6c0 	.word	0x0800d6c0
 8004fd8:	2000001c 	.word	0x2000001c
 8004fdc:	20000020 	.word	0x20000020
 8004fe0:	4ba0      	ldr	r3, [pc, #640]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a9f      	ldr	r2, [pc, #636]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	4b9d      	ldr	r3, [pc, #628]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a9c      	ldr	r2, [pc, #624]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8004ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d013      	beq.n	8005028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fd fe80 	bl	8002d04 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005008:	f7fd fe7c 	bl	8002d04 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	@ 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e276      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800501a:	4b92      	ldr	r3, [pc, #584]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x2a8>
 8005026:	e014      	b.n	8005052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fd fe6c 	bl	8002d04 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005030:	f7fd fe68 	bl	8002d04 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	@ 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e262      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005042:	4b88      	ldr	r3, [pc, #544]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x2d0>
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d060      	beq.n	8005120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b04      	cmp	r3, #4
 8005062:	d005      	beq.n	8005070 <HAL_RCC_OscConfig+0x310>
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d119      	bne.n	800509e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d116      	bne.n	800509e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005070:	4b7c      	ldr	r3, [pc, #496]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_OscConfig+0x328>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e23f      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005088:	4b76      	ldr	r3, [pc, #472]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	4973      	ldr	r1, [pc, #460]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800509c:	e040      	b.n	8005120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d023      	beq.n	80050ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a6e      	ldr	r2, [pc, #440]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80050ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fd fe27 	bl	8002d04 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ba:	f7fd fe23 	bl	8002d04 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e21d      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050cc:	4b65      	ldr	r3, [pc, #404]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d8:	4b62      	ldr	r3, [pc, #392]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	495f      	ldr	r1, [pc, #380]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	604b      	str	r3, [r1, #4]
 80050ec:	e018      	b.n	8005120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a5c      	ldr	r2, [pc, #368]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80050f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fd fe03 	bl	8002d04 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005102:	f7fd fdff 	bl	8002d04 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e1f9      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005114:	4b53      	ldr	r3, [pc, #332]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f0      	bne.n	8005102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d03c      	beq.n	80051a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005134:	4b4b      	ldr	r3, [pc, #300]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800513a:	4a4a      	ldr	r2, [pc, #296]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fd fdde 	bl	8002d04 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514c:	f7fd fdda 	bl	8002d04 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e1d4      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800515e:	4b41      	ldr	r3, [pc, #260]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ef      	beq.n	800514c <HAL_RCC_OscConfig+0x3ec>
 800516c:	e01b      	b.n	80051a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516e:	4b3d      	ldr	r3, [pc, #244]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005174:	4a3b      	ldr	r2, [pc, #236]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517e:	f7fd fdc1 	bl	8002d04 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005186:	f7fd fdbd 	bl	8002d04 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e1b7      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005198:	4b32      	ldr	r3, [pc, #200]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 800519a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ef      	bne.n	8005186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 80a6 	beq.w	8005300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051b4:	2300      	movs	r3, #0
 80051b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10d      	bne.n	80051e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c4:	4b27      	ldr	r3, [pc, #156]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c8:	4a26      	ldr	r2, [pc, #152]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80051ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80051d0:	4b24      	ldr	r3, [pc, #144]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 80051d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051dc:	2301      	movs	r3, #1
 80051de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e0:	4b21      	ldr	r3, [pc, #132]	@ (8005268 <HAL_RCC_OscConfig+0x508>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d118      	bne.n	800521e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005268 <HAL_RCC_OscConfig+0x508>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005268 <HAL_RCC_OscConfig+0x508>)
 80051f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051f8:	f7fd fd84 	bl	8002d04 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005200:	f7fd fd80 	bl	8002d04 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e17a      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005212:	4b15      	ldr	r3, [pc, #84]	@ (8005268 <HAL_RCC_OscConfig+0x508>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d108      	bne.n	8005238 <HAL_RCC_OscConfig+0x4d8>
 8005226:	4b0f      	ldr	r3, [pc, #60]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522c:	4a0d      	ldr	r2, [pc, #52]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005236:	e029      	b.n	800528c <HAL_RCC_OscConfig+0x52c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b05      	cmp	r3, #5
 800523e:	d115      	bne.n	800526c <HAL_RCC_OscConfig+0x50c>
 8005240:	4b08      	ldr	r3, [pc, #32]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005246:	4a07      	ldr	r2, [pc, #28]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005250:	4b04      	ldr	r3, [pc, #16]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005256:	4a03      	ldr	r2, [pc, #12]	@ (8005264 <HAL_RCC_OscConfig+0x504>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005260:	e014      	b.n	800528c <HAL_RCC_OscConfig+0x52c>
 8005262:	bf00      	nop
 8005264:	40021000 	.word	0x40021000
 8005268:	40007000 	.word	0x40007000
 800526c:	4b9c      	ldr	r3, [pc, #624]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005272:	4a9b      	ldr	r2, [pc, #620]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005274:	f023 0301 	bic.w	r3, r3, #1
 8005278:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800527c:	4b98      	ldr	r3, [pc, #608]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005282:	4a97      	ldr	r2, [pc, #604]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005284:	f023 0304 	bic.w	r3, r3, #4
 8005288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d016      	beq.n	80052c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fd fd36 	bl	8002d04 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529c:	f7fd fd32 	bl	8002d04 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e12a      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b2:	4b8b      	ldr	r3, [pc, #556]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0ed      	beq.n	800529c <HAL_RCC_OscConfig+0x53c>
 80052c0:	e015      	b.n	80052ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c2:	f7fd fd1f 	bl	8002d04 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052c8:	e00a      	b.n	80052e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ca:	f7fd fd1b 	bl	8002d04 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e113      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e0:	4b7f      	ldr	r3, [pc, #508]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1ed      	bne.n	80052ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052ee:	7ffb      	ldrb	r3, [r7, #31]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d105      	bne.n	8005300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f4:	4b7a      	ldr	r3, [pc, #488]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f8:	4a79      	ldr	r2, [pc, #484]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80052fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80fe 	beq.w	8005506 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530e:	2b02      	cmp	r3, #2
 8005310:	f040 80d0 	bne.w	80054b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005314:	4b72      	ldr	r3, [pc, #456]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f003 0203 	and.w	r2, r3, #3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005324:	429a      	cmp	r2, r3
 8005326:	d130      	bne.n	800538a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005332:	3b01      	subs	r3, #1
 8005334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d127      	bne.n	800538a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005344:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d11f      	bne.n	800538a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005354:	2a07      	cmp	r2, #7
 8005356:	bf14      	ite	ne
 8005358:	2201      	movne	r2, #1
 800535a:	2200      	moveq	r2, #0
 800535c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800535e:	4293      	cmp	r3, r2
 8005360:	d113      	bne.n	800538a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	3b01      	subs	r3, #1
 8005370:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005372:	429a      	cmp	r2, r3
 8005374:	d109      	bne.n	800538a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	3b01      	subs	r3, #1
 8005384:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d06e      	beq.n	8005468 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d069      	beq.n	8005464 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005390:	4b53      	ldr	r3, [pc, #332]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d105      	bne.n	80053a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800539c:	4b50      	ldr	r3, [pc, #320]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0ad      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053ac:	4b4c      	ldr	r3, [pc, #304]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a4b      	ldr	r2, [pc, #300]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80053b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053b8:	f7fd fca4 	bl	8002d04 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c0:	f7fd fca0 	bl	8002d04 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e09a      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d2:	4b43      	ldr	r3, [pc, #268]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053de:	4b40      	ldr	r3, [pc, #256]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	4b40      	ldr	r3, [pc, #256]	@ (80054e4 <HAL_RCC_OscConfig+0x784>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053ee:	3a01      	subs	r2, #1
 80053f0:	0112      	lsls	r2, r2, #4
 80053f2:	4311      	orrs	r1, r2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053f8:	0212      	lsls	r2, r2, #8
 80053fa:	4311      	orrs	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005400:	0852      	lsrs	r2, r2, #1
 8005402:	3a01      	subs	r2, #1
 8005404:	0552      	lsls	r2, r2, #21
 8005406:	4311      	orrs	r1, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800540c:	0852      	lsrs	r2, r2, #1
 800540e:	3a01      	subs	r2, #1
 8005410:	0652      	lsls	r2, r2, #25
 8005412:	4311      	orrs	r1, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005418:	0912      	lsrs	r2, r2, #4
 800541a:	0452      	lsls	r2, r2, #17
 800541c:	430a      	orrs	r2, r1
 800541e:	4930      	ldr	r1, [pc, #192]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005420:	4313      	orrs	r3, r2
 8005422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005424:	4b2e      	ldr	r3, [pc, #184]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a2d      	ldr	r2, [pc, #180]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 800542a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800542e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005430:	4b2b      	ldr	r3, [pc, #172]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4a2a      	ldr	r2, [pc, #168]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800543a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800543c:	f7fd fc62 	bl	8002d04 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005444:	f7fd fc5e 	bl	8002d04 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e058      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005456:	4b22      	ldr	r3, [pc, #136]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005462:	e050      	b.n	8005506 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e04f      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005468:	4b1d      	ldr	r3, [pc, #116]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d148      	bne.n	8005506 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005474:	4b1a      	ldr	r3, [pc, #104]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a19      	ldr	r2, [pc, #100]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 800547a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800547e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005480:	4b17      	ldr	r3, [pc, #92]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4a16      	ldr	r2, [pc, #88]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 8005486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800548a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800548c:	f7fd fc3a 	bl	8002d04 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005494:	f7fd fc36 	bl	8002d04 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e030      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a6:	4b0e      	ldr	r3, [pc, #56]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0x734>
 80054b2:	e028      	b.n	8005506 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	2b0c      	cmp	r3, #12
 80054b8:	d023      	beq.n	8005502 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ba:	4b09      	ldr	r3, [pc, #36]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a08      	ldr	r2, [pc, #32]	@ (80054e0 <HAL_RCC_OscConfig+0x780>)
 80054c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fd fc1d 	bl	8002d04 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054cc:	e00c      	b.n	80054e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ce:	f7fd fc19 	bl	8002d04 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d905      	bls.n	80054e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e013      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
 80054e0:	40021000 	.word	0x40021000
 80054e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054e8:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <HAL_RCC_OscConfig+0x7b0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1ec      	bne.n	80054ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054f4:	4b06      	ldr	r3, [pc, #24]	@ (8005510 <HAL_RCC_OscConfig+0x7b0>)
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	4905      	ldr	r1, [pc, #20]	@ (8005510 <HAL_RCC_OscConfig+0x7b0>)
 80054fa:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <HAL_RCC_OscConfig+0x7b4>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	60cb      	str	r3, [r1, #12]
 8005500:	e001      	b.n	8005506 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40021000 	.word	0x40021000
 8005514:	feeefffc 	.word	0xfeeefffc

08005518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e0e7      	b.n	80056fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800552c:	4b75      	ldr	r3, [pc, #468]	@ (8005704 <HAL_RCC_ClockConfig+0x1ec>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d910      	bls.n	800555c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b72      	ldr	r3, [pc, #456]	@ (8005704 <HAL_RCC_ClockConfig+0x1ec>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 0207 	bic.w	r2, r3, #7
 8005542:	4970      	ldr	r1, [pc, #448]	@ (8005704 <HAL_RCC_ClockConfig+0x1ec>)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b6e      	ldr	r3, [pc, #440]	@ (8005704 <HAL_RCC_ClockConfig+0x1ec>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0cf      	b.n	80056fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d010      	beq.n	800558a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	4b66      	ldr	r3, [pc, #408]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005574:	429a      	cmp	r2, r3
 8005576:	d908      	bls.n	800558a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005578:	4b63      	ldr	r3, [pc, #396]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4960      	ldr	r1, [pc, #384]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d04c      	beq.n	8005630 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b03      	cmp	r3, #3
 800559c:	d107      	bne.n	80055ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800559e:	4b5a      	ldr	r3, [pc, #360]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d121      	bne.n	80055ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e0a6      	b.n	80056fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d107      	bne.n	80055c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055b6:	4b54      	ldr	r3, [pc, #336]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d115      	bne.n	80055ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e09a      	b.n	80056fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055ce:	4b4e      	ldr	r3, [pc, #312]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e08e      	b.n	80056fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055de:	4b4a      	ldr	r3, [pc, #296]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e086      	b.n	80056fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055ee:	4b46      	ldr	r3, [pc, #280]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f023 0203 	bic.w	r2, r3, #3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4943      	ldr	r1, [pc, #268]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005600:	f7fd fb80 	bl	8002d04 <HAL_GetTick>
 8005604:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005606:	e00a      	b.n	800561e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005608:	f7fd fb7c 	bl	8002d04 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005616:	4293      	cmp	r3, r2
 8005618:	d901      	bls.n	800561e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e06e      	b.n	80056fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561e:	4b3a      	ldr	r3, [pc, #232]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 020c 	and.w	r2, r3, #12
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	429a      	cmp	r2, r3
 800562e:	d1eb      	bne.n	8005608 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	4b31      	ldr	r3, [pc, #196]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005648:	429a      	cmp	r2, r3
 800564a:	d208      	bcs.n	800565e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800564c:	4b2e      	ldr	r3, [pc, #184]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	492b      	ldr	r1, [pc, #172]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 800565a:	4313      	orrs	r3, r2
 800565c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800565e:	4b29      	ldr	r3, [pc, #164]	@ (8005704 <HAL_RCC_ClockConfig+0x1ec>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d210      	bcs.n	800568e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566c:	4b25      	ldr	r3, [pc, #148]	@ (8005704 <HAL_RCC_ClockConfig+0x1ec>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f023 0207 	bic.w	r2, r3, #7
 8005674:	4923      	ldr	r1, [pc, #140]	@ (8005704 <HAL_RCC_ClockConfig+0x1ec>)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	4313      	orrs	r3, r2
 800567a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800567c:	4b21      	ldr	r3, [pc, #132]	@ (8005704 <HAL_RCC_ClockConfig+0x1ec>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d001      	beq.n	800568e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e036      	b.n	80056fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800569a:	4b1b      	ldr	r3, [pc, #108]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	4918      	ldr	r1, [pc, #96]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d009      	beq.n	80056cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056b8:	4b13      	ldr	r3, [pc, #76]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4910      	ldr	r1, [pc, #64]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056cc:	f000 f824 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 80056d0:	4602      	mov	r2, r0
 80056d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	091b      	lsrs	r3, r3, #4
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	490b      	ldr	r1, [pc, #44]	@ (800570c <HAL_RCC_ClockConfig+0x1f4>)
 80056de:	5ccb      	ldrb	r3, [r1, r3]
 80056e0:	f003 031f 	and.w	r3, r3, #31
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
 80056e8:	4a09      	ldr	r2, [pc, #36]	@ (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 80056ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056ec:	4b09      	ldr	r3, [pc, #36]	@ (8005714 <HAL_RCC_ClockConfig+0x1fc>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fd fab7 	bl	8002c64 <HAL_InitTick>
 80056f6:	4603      	mov	r3, r0
 80056f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80056fa:	7afb      	ldrb	r3, [r7, #11]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40022000 	.word	0x40022000
 8005708:	40021000 	.word	0x40021000
 800570c:	0800d6c0 	.word	0x0800d6c0
 8005710:	2000001c 	.word	0x2000001c
 8005714:	20000020 	.word	0x20000020

08005718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005718:	b480      	push	{r7}
 800571a:	b089      	sub	sp, #36	@ 0x24
 800571c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005726:	4b3e      	ldr	r3, [pc, #248]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x108>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005730:	4b3b      	ldr	r3, [pc, #236]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x108>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x34>
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2b0c      	cmp	r3, #12
 8005744:	d121      	bne.n	800578a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d11e      	bne.n	800578a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800574c:	4b34      	ldr	r3, [pc, #208]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x108>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d107      	bne.n	8005768 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005758:	4b31      	ldr	r3, [pc, #196]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x108>)
 800575a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	e005      	b.n	8005774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005768:	4b2d      	ldr	r3, [pc, #180]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x108>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005774:	4a2b      	ldr	r2, [pc, #172]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10d      	bne.n	80057a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005788:	e00a      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b04      	cmp	r3, #4
 800578e:	d102      	bne.n	8005796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005790:	4b25      	ldr	r3, [pc, #148]	@ (8005828 <HAL_RCC_GetSysClockFreq+0x110>)
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	e004      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d101      	bne.n	80057a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800579c:	4b23      	ldr	r3, [pc, #140]	@ (800582c <HAL_RCC_GetSysClockFreq+0x114>)
 800579e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2b0c      	cmp	r3, #12
 80057a4:	d134      	bne.n	8005810 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x108>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d003      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0xa6>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d003      	beq.n	80057c4 <HAL_RCC_GetSysClockFreq+0xac>
 80057bc:	e005      	b.n	80057ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057be:	4b1a      	ldr	r3, [pc, #104]	@ (8005828 <HAL_RCC_GetSysClockFreq+0x110>)
 80057c0:	617b      	str	r3, [r7, #20]
      break;
 80057c2:	e005      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057c4:	4b19      	ldr	r3, [pc, #100]	@ (800582c <HAL_RCC_GetSysClockFreq+0x114>)
 80057c6:	617b      	str	r3, [r7, #20]
      break;
 80057c8:	e002      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	617b      	str	r3, [r7, #20]
      break;
 80057ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057d0:	4b13      	ldr	r3, [pc, #76]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x108>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	3301      	adds	r3, #1
 80057dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057de:	4b10      	ldr	r3, [pc, #64]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x108>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	0a1b      	lsrs	r3, r3, #8
 80057e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	fb03 f202 	mul.w	r2, r3, r2
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005820 <HAL_RCC_GetSysClockFreq+0x108>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	0e5b      	lsrs	r3, r3, #25
 80057fc:	f003 0303 	and.w	r3, r3, #3
 8005800:	3301      	adds	r3, #1
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	fbb2 f3f3 	udiv	r3, r2, r3
 800580e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005810:	69bb      	ldr	r3, [r7, #24]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3724      	adds	r7, #36	@ 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40021000 	.word	0x40021000
 8005824:	0800d6d8 	.word	0x0800d6d8
 8005828:	00f42400 	.word	0x00f42400
 800582c:	007a1200 	.word	0x007a1200

08005830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005834:	4b03      	ldr	r3, [pc, #12]	@ (8005844 <HAL_RCC_GetHCLKFreq+0x14>)
 8005836:	681b      	ldr	r3, [r3, #0]
}
 8005838:	4618      	mov	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000001c 	.word	0x2000001c

08005848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800584c:	f7ff fff0 	bl	8005830 <HAL_RCC_GetHCLKFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b06      	ldr	r3, [pc, #24]	@ (800586c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	4904      	ldr	r1, [pc, #16]	@ (8005870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005868:	4618      	mov	r0, r3
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40021000 	.word	0x40021000
 8005870:	0800d6d0 	.word	0x0800d6d0

08005874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005878:	f7ff ffda 	bl	8005830 <HAL_RCC_GetHCLKFreq>
 800587c:	4602      	mov	r2, r0
 800587e:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	0adb      	lsrs	r3, r3, #11
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	4904      	ldr	r1, [pc, #16]	@ (800589c <HAL_RCC_GetPCLK2Freq+0x28>)
 800588a:	5ccb      	ldrb	r3, [r1, r3]
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40021000 	.word	0x40021000
 800589c:	0800d6d0 	.word	0x0800d6d0

080058a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80058ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058b8:	f7ff f9ee 	bl	8004c98 <HAL_PWREx_GetVoltageRange>
 80058bc:	6178      	str	r0, [r7, #20]
 80058be:	e014      	b.n	80058ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058c0:	4b25      	ldr	r3, [pc, #148]	@ (8005958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c4:	4a24      	ldr	r2, [pc, #144]	@ (8005958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80058cc:	4b22      	ldr	r3, [pc, #136]	@ (8005958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058d8:	f7ff f9de 	bl	8004c98 <HAL_PWREx_GetVoltageRange>
 80058dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058de:	4b1e      	ldr	r3, [pc, #120]	@ (8005958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f0:	d10b      	bne.n	800590a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b80      	cmp	r3, #128	@ 0x80
 80058f6:	d919      	bls.n	800592c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80058fc:	d902      	bls.n	8005904 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058fe:	2302      	movs	r3, #2
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	e013      	b.n	800592c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005904:	2301      	movs	r3, #1
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	e010      	b.n	800592c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b80      	cmp	r3, #128	@ 0x80
 800590e:	d902      	bls.n	8005916 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005910:	2303      	movs	r3, #3
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	e00a      	b.n	800592c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b80      	cmp	r3, #128	@ 0x80
 800591a:	d102      	bne.n	8005922 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800591c:	2302      	movs	r3, #2
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	e004      	b.n	800592c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b70      	cmp	r3, #112	@ 0x70
 8005926:	d101      	bne.n	800592c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005928:	2301      	movs	r3, #1
 800592a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800592c:	4b0b      	ldr	r3, [pc, #44]	@ (800595c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f023 0207 	bic.w	r2, r3, #7
 8005934:	4909      	ldr	r1, [pc, #36]	@ (800595c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800593c:	4b07      	ldr	r3, [pc, #28]	@ (800595c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	429a      	cmp	r2, r3
 8005948:	d001      	beq.n	800594e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40021000 	.word	0x40021000
 800595c:	40022000 	.word	0x40022000

08005960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005968:	2300      	movs	r3, #0
 800596a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800596c:	2300      	movs	r3, #0
 800596e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005978:	2b00      	cmp	r3, #0
 800597a:	d041      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005980:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005984:	d02a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005986:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800598a:	d824      	bhi.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800598c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005990:	d008      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005992:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005996:	d81e      	bhi.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800599c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059a0:	d010      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059a2:	e018      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059a4:	4b86      	ldr	r3, [pc, #536]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a85      	ldr	r2, [pc, #532]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059b0:	e015      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3304      	adds	r3, #4
 80059b6:	2100      	movs	r1, #0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fabb 	bl	8005f34 <RCCEx_PLLSAI1_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059c2:	e00c      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3320      	adds	r3, #32
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fba6 	bl	800611c <RCCEx_PLLSAI2_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059d4:	e003      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	74fb      	strb	r3, [r7, #19]
      break;
 80059da:	e000      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059de:	7cfb      	ldrb	r3, [r7, #19]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10b      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059e4:	4b76      	ldr	r3, [pc, #472]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f2:	4973      	ldr	r1, [pc, #460]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80059fa:	e001      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d041      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a14:	d02a      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005a16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a1a:	d824      	bhi.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a20:	d008      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a26:	d81e      	bhi.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a30:	d010      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a32:	e018      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a34:	4b62      	ldr	r3, [pc, #392]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4a61      	ldr	r2, [pc, #388]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a40:	e015      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3304      	adds	r3, #4
 8005a46:	2100      	movs	r1, #0
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fa73 	bl	8005f34 <RCCEx_PLLSAI1_Config>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a52:	e00c      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3320      	adds	r3, #32
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fb5e 	bl	800611c <RCCEx_PLLSAI2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a64:	e003      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	74fb      	strb	r3, [r7, #19]
      break;
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a6e:	7cfb      	ldrb	r3, [r7, #19]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10b      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a74:	4b52      	ldr	r3, [pc, #328]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a82:	494f      	ldr	r1, [pc, #316]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005a8a:	e001      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	7cfb      	ldrb	r3, [r7, #19]
 8005a8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80a0 	beq.w	8005bde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005aa2:	4b47      	ldr	r3, [pc, #284]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00d      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ab8:	4b41      	ldr	r3, [pc, #260]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005abc:	4a40      	ldr	r2, [pc, #256]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac4:	4b3e      	ldr	r3, [pc, #248]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a3a      	ldr	r2, [pc, #232]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ade:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ae0:	f7fd f910 	bl	8002d04 <HAL_GetTick>
 8005ae4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ae6:	e009      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae8:	f7fd f90c 	bl	8002d04 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d902      	bls.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	74fb      	strb	r3, [r7, #19]
        break;
 8005afa:	e005      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005afc:	4b31      	ldr	r3, [pc, #196]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0ef      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d15c      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01f      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d019      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b2c:	4b24      	ldr	r3, [pc, #144]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b38:	4b21      	ldr	r3, [pc, #132]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3e:	4a20      	ldr	r2, [pc, #128]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b48:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b58:	4a19      	ldr	r2, [pc, #100]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6a:	f7fd f8cb 	bl	8002d04 <HAL_GetTick>
 8005b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b70:	e00b      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b72:	f7fd f8c7 	bl	8002d04 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d902      	bls.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	74fb      	strb	r3, [r7, #19]
            break;
 8005b88:	e006      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0ec      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005b98:	7cfb      	ldrb	r3, [r7, #19]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b9e:	4b08      	ldr	r3, [pc, #32]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bae:	4904      	ldr	r1, [pc, #16]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005bb6:	e009      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bb8:	7cfb      	ldrb	r3, [r7, #19]
 8005bba:	74bb      	strb	r3, [r7, #18]
 8005bbc:	e006      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005bbe:	bf00      	nop
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	7cfb      	ldrb	r3, [r7, #19]
 8005bca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bcc:	7c7b      	ldrb	r3, [r7, #17]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d105      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd2:	4b9e      	ldr	r3, [pc, #632]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd6:	4a9d      	ldr	r2, [pc, #628]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bdc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bea:	4b98      	ldr	r3, [pc, #608]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf0:	f023 0203 	bic.w	r2, r3, #3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	4994      	ldr	r1, [pc, #592]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c0c:	4b8f      	ldr	r3, [pc, #572]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c12:	f023 020c 	bic.w	r2, r3, #12
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1a:	498c      	ldr	r1, [pc, #560]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c2e:	4b87      	ldr	r3, [pc, #540]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3c:	4983      	ldr	r1, [pc, #524]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c50:	4b7e      	ldr	r3, [pc, #504]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5e:	497b      	ldr	r1, [pc, #492]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0310 	and.w	r3, r3, #16
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c72:	4b76      	ldr	r3, [pc, #472]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c80:	4972      	ldr	r1, [pc, #456]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c94:	4b6d      	ldr	r3, [pc, #436]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca2:	496a      	ldr	r1, [pc, #424]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cb6:	4b65      	ldr	r3, [pc, #404]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cbc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc4:	4961      	ldr	r1, [pc, #388]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cd8:	4b5c      	ldr	r3, [pc, #368]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce6:	4959      	ldr	r1, [pc, #356]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cfa:	4b54      	ldr	r3, [pc, #336]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d08:	4950      	ldr	r1, [pc, #320]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2a:	4948      	ldr	r1, [pc, #288]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d3e:	4b43      	ldr	r3, [pc, #268]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4c:	493f      	ldr	r1, [pc, #252]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d028      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d60:	4b3a      	ldr	r3, [pc, #232]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d6e:	4937      	ldr	r1, [pc, #220]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d7e:	d106      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d80:	4b32      	ldr	r3, [pc, #200]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4a31      	ldr	r2, [pc, #196]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d8a:	60d3      	str	r3, [r2, #12]
 8005d8c:	e011      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d96:	d10c      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f8c8 	bl	8005f34 <RCCEx_PLLSAI1_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005da8:	7cfb      	ldrb	r3, [r7, #19]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005dae:	7cfb      	ldrb	r3, [r7, #19]
 8005db0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d028      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005dbe:	4b23      	ldr	r3, [pc, #140]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dcc:	491f      	ldr	r1, [pc, #124]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ddc:	d106      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dde:	4b1b      	ldr	r3, [pc, #108]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005de8:	60d3      	str	r3, [r2, #12]
 8005dea:	e011      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005df4:	d10c      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f899 	bl	8005f34 <RCCEx_PLLSAI1_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e06:	7cfb      	ldrb	r3, [r7, #19]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005e0c:	7cfb      	ldrb	r3, [r7, #19]
 8005e0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d02b      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e2a:	4908      	ldr	r1, [pc, #32]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e3a:	d109      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e3c:	4b03      	ldr	r3, [pc, #12]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4a02      	ldr	r2, [pc, #8]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e46:	60d3      	str	r3, [r2, #12]
 8005e48:	e014      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005e4a:	bf00      	nop
 8005e4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e58:	d10c      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	2101      	movs	r1, #1
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 f867 	bl	8005f34 <RCCEx_PLLSAI1_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e6a:	7cfb      	ldrb	r3, [r7, #19]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005e70:	7cfb      	ldrb	r3, [r7, #19]
 8005e72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d02f      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e80:	4b2b      	ldr	r3, [pc, #172]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e8e:	4928      	ldr	r1, [pc, #160]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e9e:	d10d      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	2102      	movs	r1, #2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 f844 	bl	8005f34 <RCCEx_PLLSAI1_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005eb0:	7cfb      	ldrb	r3, [r7, #19]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d014      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005eb6:	7cfb      	ldrb	r3, [r7, #19]
 8005eb8:	74bb      	strb	r3, [r7, #18]
 8005eba:	e011      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3320      	adds	r3, #32
 8005eca:	2102      	movs	r1, #2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 f925 	bl	800611c <RCCEx_PLLSAI2_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ed6:	7cfb      	ldrb	r3, [r7, #19]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005edc:	7cfb      	ldrb	r3, [r7, #19]
 8005ede:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005eec:	4b10      	ldr	r3, [pc, #64]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005efa:	490d      	ldr	r1, [pc, #52]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f0e:	4b08      	ldr	r3, [pc, #32]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f1e:	4904      	ldr	r1, [pc, #16]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f26:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40021000 	.word	0x40021000

08005f34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f42:	4b75      	ldr	r3, [pc, #468]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d018      	beq.n	8005f80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f4e:	4b72      	ldr	r3, [pc, #456]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0203 	and.w	r2, r3, #3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d10d      	bne.n	8005f7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
       ||
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f66:	4b6c      	ldr	r3, [pc, #432]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	091b      	lsrs	r3, r3, #4
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
       ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d047      	beq.n	800600a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	73fb      	strb	r3, [r7, #15]
 8005f7e:	e044      	b.n	800600a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d018      	beq.n	8005fba <RCCEx_PLLSAI1_Config+0x86>
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d825      	bhi.n	8005fd8 <RCCEx_PLLSAI1_Config+0xa4>
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d002      	beq.n	8005f96 <RCCEx_PLLSAI1_Config+0x62>
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d009      	beq.n	8005fa8 <RCCEx_PLLSAI1_Config+0x74>
 8005f94:	e020      	b.n	8005fd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f96:	4b60      	ldr	r3, [pc, #384]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d11d      	bne.n	8005fde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa6:	e01a      	b.n	8005fde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fa8:	4b5b      	ldr	r3, [pc, #364]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d116      	bne.n	8005fe2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb8:	e013      	b.n	8005fe2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fba:	4b57      	ldr	r3, [pc, #348]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10f      	bne.n	8005fe6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fc6:	4b54      	ldr	r3, [pc, #336]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fd6:	e006      	b.n	8005fe6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
      break;
 8005fdc:	e004      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fe6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10d      	bne.n	800600a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fee:	4b4a      	ldr	r3, [pc, #296]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6819      	ldr	r1, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	430b      	orrs	r3, r1
 8006004:	4944      	ldr	r1, [pc, #272]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006006:	4313      	orrs	r3, r2
 8006008:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d17d      	bne.n	800610c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006010:	4b41      	ldr	r3, [pc, #260]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a40      	ldr	r2, [pc, #256]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006016:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800601a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800601c:	f7fc fe72 	bl	8002d04 <HAL_GetTick>
 8006020:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006022:	e009      	b.n	8006038 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006024:	f7fc fe6e 	bl	8002d04 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d902      	bls.n	8006038 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	73fb      	strb	r3, [r7, #15]
        break;
 8006036:	e005      	b.n	8006044 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006038:	4b37      	ldr	r3, [pc, #220]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1ef      	bne.n	8006024 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d160      	bne.n	800610c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d111      	bne.n	8006074 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006050:	4b31      	ldr	r3, [pc, #196]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6892      	ldr	r2, [r2, #8]
 8006060:	0211      	lsls	r1, r2, #8
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68d2      	ldr	r2, [r2, #12]
 8006066:	0912      	lsrs	r2, r2, #4
 8006068:	0452      	lsls	r2, r2, #17
 800606a:	430a      	orrs	r2, r1
 800606c:	492a      	ldr	r1, [pc, #168]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800606e:	4313      	orrs	r3, r2
 8006070:	610b      	str	r3, [r1, #16]
 8006072:	e027      	b.n	80060c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d112      	bne.n	80060a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800607a:	4b27      	ldr	r3, [pc, #156]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006082:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6892      	ldr	r2, [r2, #8]
 800608a:	0211      	lsls	r1, r2, #8
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6912      	ldr	r2, [r2, #16]
 8006090:	0852      	lsrs	r2, r2, #1
 8006092:	3a01      	subs	r2, #1
 8006094:	0552      	lsls	r2, r2, #21
 8006096:	430a      	orrs	r2, r1
 8006098:	491f      	ldr	r1, [pc, #124]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 800609a:	4313      	orrs	r3, r2
 800609c:	610b      	str	r3, [r1, #16]
 800609e:	e011      	b.n	80060c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80060a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6892      	ldr	r2, [r2, #8]
 80060b0:	0211      	lsls	r1, r2, #8
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6952      	ldr	r2, [r2, #20]
 80060b6:	0852      	lsrs	r2, r2, #1
 80060b8:	3a01      	subs	r2, #1
 80060ba:	0652      	lsls	r2, r2, #25
 80060bc:	430a      	orrs	r2, r1
 80060be:	4916      	ldr	r1, [pc, #88]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060c4:	4b14      	ldr	r3, [pc, #80]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a13      	ldr	r2, [pc, #76]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d0:	f7fc fe18 	bl	8002d04 <HAL_GetTick>
 80060d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060d6:	e009      	b.n	80060ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060d8:	f7fc fe14 	bl	8002d04 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d902      	bls.n	80060ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	73fb      	strb	r3, [r7, #15]
          break;
 80060ea:	e005      	b.n	80060f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0ef      	beq.n	80060d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80060fe:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	4904      	ldr	r1, [pc, #16]	@ (8006118 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006108:	4313      	orrs	r3, r2
 800610a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800610c:	7bfb      	ldrb	r3, [r7, #15]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40021000 	.word	0x40021000

0800611c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800612a:	4b6a      	ldr	r3, [pc, #424]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d018      	beq.n	8006168 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006136:	4b67      	ldr	r3, [pc, #412]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f003 0203 	and.w	r2, r3, #3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d10d      	bne.n	8006162 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
       ||
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800614e:	4b61      	ldr	r3, [pc, #388]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
       ||
 800615e:	429a      	cmp	r2, r3
 8006160:	d047      	beq.n	80061f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
 8006166:	e044      	b.n	80061f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b03      	cmp	r3, #3
 800616e:	d018      	beq.n	80061a2 <RCCEx_PLLSAI2_Config+0x86>
 8006170:	2b03      	cmp	r3, #3
 8006172:	d825      	bhi.n	80061c0 <RCCEx_PLLSAI2_Config+0xa4>
 8006174:	2b01      	cmp	r3, #1
 8006176:	d002      	beq.n	800617e <RCCEx_PLLSAI2_Config+0x62>
 8006178:	2b02      	cmp	r3, #2
 800617a:	d009      	beq.n	8006190 <RCCEx_PLLSAI2_Config+0x74>
 800617c:	e020      	b.n	80061c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800617e:	4b55      	ldr	r3, [pc, #340]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d11d      	bne.n	80061c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800618e:	e01a      	b.n	80061c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006190:	4b50      	ldr	r3, [pc, #320]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006198:	2b00      	cmp	r3, #0
 800619a:	d116      	bne.n	80061ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061a0:	e013      	b.n	80061ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061a2:	4b4c      	ldr	r3, [pc, #304]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10f      	bne.n	80061ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061ae:	4b49      	ldr	r3, [pc, #292]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061be:	e006      	b.n	80061ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
      break;
 80061c4:	e004      	b.n	80061d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061c6:	bf00      	nop
 80061c8:	e002      	b.n	80061d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061ca:	bf00      	nop
 80061cc:	e000      	b.n	80061d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10d      	bne.n	80061f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061d6:	4b3f      	ldr	r3, [pc, #252]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	430b      	orrs	r3, r1
 80061ec:	4939      	ldr	r1, [pc, #228]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d167      	bne.n	80062c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061f8:	4b36      	ldr	r3, [pc, #216]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a35      	ldr	r2, [pc, #212]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006204:	f7fc fd7e 	bl	8002d04 <HAL_GetTick>
 8006208:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800620a:	e009      	b.n	8006220 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800620c:	f7fc fd7a 	bl	8002d04 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d902      	bls.n	8006220 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	73fb      	strb	r3, [r7, #15]
        break;
 800621e:	e005      	b.n	800622c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006220:	4b2c      	ldr	r3, [pc, #176]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1ef      	bne.n	800620c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d14a      	bne.n	80062c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d111      	bne.n	800625c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006238:	4b26      	ldr	r3, [pc, #152]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6892      	ldr	r2, [r2, #8]
 8006248:	0211      	lsls	r1, r2, #8
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	68d2      	ldr	r2, [r2, #12]
 800624e:	0912      	lsrs	r2, r2, #4
 8006250:	0452      	lsls	r2, r2, #17
 8006252:	430a      	orrs	r2, r1
 8006254:	491f      	ldr	r1, [pc, #124]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006256:	4313      	orrs	r3, r2
 8006258:	614b      	str	r3, [r1, #20]
 800625a:	e011      	b.n	8006280 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800625c:	4b1d      	ldr	r3, [pc, #116]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006264:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6892      	ldr	r2, [r2, #8]
 800626c:	0211      	lsls	r1, r2, #8
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6912      	ldr	r2, [r2, #16]
 8006272:	0852      	lsrs	r2, r2, #1
 8006274:	3a01      	subs	r2, #1
 8006276:	0652      	lsls	r2, r2, #25
 8006278:	430a      	orrs	r2, r1
 800627a:	4916      	ldr	r1, [pc, #88]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800627c:	4313      	orrs	r3, r2
 800627e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006280:	4b14      	ldr	r3, [pc, #80]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a13      	ldr	r2, [pc, #76]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800628a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628c:	f7fc fd3a 	bl	8002d04 <HAL_GetTick>
 8006290:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006292:	e009      	b.n	80062a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006294:	f7fc fd36 	bl	8002d04 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d902      	bls.n	80062a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	73fb      	strb	r3, [r7, #15]
          break;
 80062a6:	e005      	b.n	80062b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062a8:	4b0a      	ldr	r3, [pc, #40]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0ef      	beq.n	8006294 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80062ba:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	4904      	ldr	r1, [pc, #16]	@ (80062d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40021000 	.word	0x40021000

080062d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e049      	b.n	800637e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fc f98a 	bl	8002618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3304      	adds	r3, #4
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f000 fe4a 	bl	8006fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b01      	cmp	r3, #1
 800639a:	d001      	beq.n	80063a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e04f      	b.n	8006440 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a23      	ldr	r2, [pc, #140]	@ (800644c <HAL_TIM_Base_Start_IT+0xc4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d01d      	beq.n	80063fe <HAL_TIM_Base_Start_IT+0x76>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ca:	d018      	beq.n	80063fe <HAL_TIM_Base_Start_IT+0x76>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006450 <HAL_TIM_Base_Start_IT+0xc8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_TIM_Base_Start_IT+0x76>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1e      	ldr	r2, [pc, #120]	@ (8006454 <HAL_TIM_Base_Start_IT+0xcc>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_TIM_Base_Start_IT+0x76>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006458 <HAL_TIM_Base_Start_IT+0xd0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_TIM_Base_Start_IT+0x76>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1b      	ldr	r2, [pc, #108]	@ (800645c <HAL_TIM_Base_Start_IT+0xd4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_TIM_Base_Start_IT+0x76>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a19      	ldr	r2, [pc, #100]	@ (8006460 <HAL_TIM_Base_Start_IT+0xd8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d115      	bne.n	800642a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	4b17      	ldr	r3, [pc, #92]	@ (8006464 <HAL_TIM_Base_Start_IT+0xdc>)
 8006406:	4013      	ands	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b06      	cmp	r3, #6
 800640e:	d015      	beq.n	800643c <HAL_TIM_Base_Start_IT+0xb4>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006416:	d011      	beq.n	800643c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006428:	e008      	b.n	800643c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0201 	orr.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e000      	b.n	800643e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800
 8006458:	40000c00 	.word	0x40000c00
 800645c:	40013400 	.word	0x40013400
 8006460:	40014000 	.word	0x40014000
 8006464:	00010007 	.word	0x00010007

08006468 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e049      	b.n	800650e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f841 	bl	8006516 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	4610      	mov	r0, r2
 80064a8:	f000 fd82 	bl	8006fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
	...

0800652c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d109      	bne.n	8006550 <HAL_TIM_PWM_Start+0x24>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	bf14      	ite	ne
 8006548:	2301      	movne	r3, #1
 800654a:	2300      	moveq	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	e03c      	b.n	80065ca <HAL_TIM_PWM_Start+0x9e>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b04      	cmp	r3, #4
 8006554:	d109      	bne.n	800656a <HAL_TIM_PWM_Start+0x3e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	bf14      	ite	ne
 8006562:	2301      	movne	r3, #1
 8006564:	2300      	moveq	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	e02f      	b.n	80065ca <HAL_TIM_PWM_Start+0x9e>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b08      	cmp	r3, #8
 800656e:	d109      	bne.n	8006584 <HAL_TIM_PWM_Start+0x58>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b01      	cmp	r3, #1
 800657a:	bf14      	ite	ne
 800657c:	2301      	movne	r3, #1
 800657e:	2300      	moveq	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	e022      	b.n	80065ca <HAL_TIM_PWM_Start+0x9e>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b0c      	cmp	r3, #12
 8006588:	d109      	bne.n	800659e <HAL_TIM_PWM_Start+0x72>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b01      	cmp	r3, #1
 8006594:	bf14      	ite	ne
 8006596:	2301      	movne	r3, #1
 8006598:	2300      	moveq	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	e015      	b.n	80065ca <HAL_TIM_PWM_Start+0x9e>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d109      	bne.n	80065b8 <HAL_TIM_PWM_Start+0x8c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	bf14      	ite	ne
 80065b0:	2301      	movne	r3, #1
 80065b2:	2300      	moveq	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	e008      	b.n	80065ca <HAL_TIM_PWM_Start+0x9e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	bf14      	ite	ne
 80065c4:	2301      	movne	r3, #1
 80065c6:	2300      	moveq	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e09c      	b.n	800670c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <HAL_TIM_PWM_Start+0xb6>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065e0:	e023      	b.n	800662a <HAL_TIM_PWM_Start+0xfe>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d104      	bne.n	80065f2 <HAL_TIM_PWM_Start+0xc6>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065f0:	e01b      	b.n	800662a <HAL_TIM_PWM_Start+0xfe>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d104      	bne.n	8006602 <HAL_TIM_PWM_Start+0xd6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006600:	e013      	b.n	800662a <HAL_TIM_PWM_Start+0xfe>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b0c      	cmp	r3, #12
 8006606:	d104      	bne.n	8006612 <HAL_TIM_PWM_Start+0xe6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006610:	e00b      	b.n	800662a <HAL_TIM_PWM_Start+0xfe>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b10      	cmp	r3, #16
 8006616:	d104      	bne.n	8006622 <HAL_TIM_PWM_Start+0xf6>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006620:	e003      	b.n	800662a <HAL_TIM_PWM_Start+0xfe>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2202      	movs	r2, #2
 8006626:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2201      	movs	r2, #1
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f001 f8c6 	bl	80077c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a35      	ldr	r2, [pc, #212]	@ (8006714 <HAL_TIM_PWM_Start+0x1e8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d013      	beq.n	800666a <HAL_TIM_PWM_Start+0x13e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a34      	ldr	r2, [pc, #208]	@ (8006718 <HAL_TIM_PWM_Start+0x1ec>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00e      	beq.n	800666a <HAL_TIM_PWM_Start+0x13e>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a32      	ldr	r2, [pc, #200]	@ (800671c <HAL_TIM_PWM_Start+0x1f0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d009      	beq.n	800666a <HAL_TIM_PWM_Start+0x13e>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a31      	ldr	r2, [pc, #196]	@ (8006720 <HAL_TIM_PWM_Start+0x1f4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d004      	beq.n	800666a <HAL_TIM_PWM_Start+0x13e>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2f      	ldr	r2, [pc, #188]	@ (8006724 <HAL_TIM_PWM_Start+0x1f8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d101      	bne.n	800666e <HAL_TIM_PWM_Start+0x142>
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <HAL_TIM_PWM_Start+0x144>
 800666e:	2300      	movs	r3, #0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006682:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a22      	ldr	r2, [pc, #136]	@ (8006714 <HAL_TIM_PWM_Start+0x1e8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d01d      	beq.n	80066ca <HAL_TIM_PWM_Start+0x19e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006696:	d018      	beq.n	80066ca <HAL_TIM_PWM_Start+0x19e>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a22      	ldr	r2, [pc, #136]	@ (8006728 <HAL_TIM_PWM_Start+0x1fc>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d013      	beq.n	80066ca <HAL_TIM_PWM_Start+0x19e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a21      	ldr	r2, [pc, #132]	@ (800672c <HAL_TIM_PWM_Start+0x200>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_TIM_PWM_Start+0x19e>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006730 <HAL_TIM_PWM_Start+0x204>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_TIM_PWM_Start+0x19e>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a17      	ldr	r2, [pc, #92]	@ (8006718 <HAL_TIM_PWM_Start+0x1ec>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_TIM_PWM_Start+0x19e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a15      	ldr	r2, [pc, #84]	@ (800671c <HAL_TIM_PWM_Start+0x1f0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d115      	bne.n	80066f6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	4b18      	ldr	r3, [pc, #96]	@ (8006734 <HAL_TIM_PWM_Start+0x208>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b06      	cmp	r3, #6
 80066da:	d015      	beq.n	8006708 <HAL_TIM_PWM_Start+0x1dc>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e2:	d011      	beq.n	8006708 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f4:	e008      	b.n	8006708 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0201 	orr.w	r2, r2, #1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	e000      	b.n	800670a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006708:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40012c00 	.word	0x40012c00
 8006718:	40013400 	.word	0x40013400
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	00010007 	.word	0x00010007

08006738 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e097      	b.n	800687c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7fb ff91 	bl	8002688 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800677c:	f023 0307 	bic.w	r3, r3, #7
 8006780:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3304      	adds	r3, #4
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f000 fc0f 	bl	8006fb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ba:	f023 0303 	bic.w	r3, r3, #3
 80067be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	4313      	orrs	r3, r2
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80067d8:	f023 030c 	bic.w	r3, r3, #12
 80067dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	021b      	lsls	r3, r3, #8
 80067f4:	4313      	orrs	r3, r2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	011a      	lsls	r2, r3, #4
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	031b      	lsls	r3, r3, #12
 8006808:	4313      	orrs	r3, r2
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800681e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	4313      	orrs	r3, r2
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006894:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800689c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d110      	bne.n	80068d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d102      	bne.n	80068c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80068ba:	7b7b      	ldrb	r3, [r7, #13]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d001      	beq.n	80068c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e069      	b.n	8006998 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068d4:	e031      	b.n	800693a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d110      	bne.n	80068fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d102      	bne.n	80068e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068e2:	7b3b      	ldrb	r3, [r7, #12]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d001      	beq.n	80068ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e055      	b.n	8006998 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068fc:	e01d      	b.n	800693a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d108      	bne.n	8006916 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d105      	bne.n	8006916 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800690a:	7b7b      	ldrb	r3, [r7, #13]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d102      	bne.n	8006916 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006910:	7b3b      	ldrb	r3, [r7, #12]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d001      	beq.n	800691a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e03e      	b.n	8006998 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_TIM_Encoder_Start+0xc4>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b04      	cmp	r3, #4
 8006944:	d008      	beq.n	8006958 <HAL_TIM_Encoder_Start+0xd4>
 8006946:	e00f      	b.n	8006968 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2201      	movs	r2, #1
 800694e:	2100      	movs	r1, #0
 8006950:	4618      	mov	r0, r3
 8006952:	f000 ff37 	bl	80077c4 <TIM_CCxChannelCmd>
      break;
 8006956:	e016      	b.n	8006986 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2201      	movs	r2, #1
 800695e:	2104      	movs	r1, #4
 8006960:	4618      	mov	r0, r3
 8006962:	f000 ff2f 	bl	80077c4 <TIM_CCxChannelCmd>
      break;
 8006966:	e00e      	b.n	8006986 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2201      	movs	r2, #1
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f000 ff27 	bl	80077c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2201      	movs	r2, #1
 800697c:	2104      	movs	r1, #4
 800697e:	4618      	mov	r0, r3
 8006980:	f000 ff20 	bl	80077c4 <TIM_CCxChannelCmd>
      break;
 8006984:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d020      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01b      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0202 	mvn.w	r2, #2
 80069d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fac1 	bl	8006f72 <HAL_TIM_IC_CaptureCallback>
 80069f0:	e005      	b.n	80069fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fab3 	bl	8006f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fac4 	bl	8006f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d020      	beq.n	8006a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01b      	beq.n	8006a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0204 	mvn.w	r2, #4
 8006a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa9b 	bl	8006f72 <HAL_TIM_IC_CaptureCallback>
 8006a3c:	e005      	b.n	8006a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa8d 	bl	8006f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fa9e 	bl	8006f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d020      	beq.n	8006a9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01b      	beq.n	8006a9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0208 	mvn.w	r2, #8
 8006a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2204      	movs	r2, #4
 8006a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fa75 	bl	8006f72 <HAL_TIM_IC_CaptureCallback>
 8006a88:	e005      	b.n	8006a96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa67 	bl	8006f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fa78 	bl	8006f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 0310 	and.w	r3, r3, #16
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d020      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01b      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0210 	mvn.w	r2, #16
 8006ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2208      	movs	r2, #8
 8006abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa4f 	bl	8006f72 <HAL_TIM_IC_CaptureCallback>
 8006ad4:	e005      	b.n	8006ae2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa41 	bl	8006f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fa52 	bl	8006f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00c      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0201 	mvn.w	r2, #1
 8006b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fa fe04 	bl	8001714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00c      	beq.n	8006b30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 ff02 	bl	8007934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00c      	beq.n	8006b54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d007      	beq.n	8006b54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fefa 	bl	8007948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00c      	beq.n	8006b78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d007      	beq.n	8006b78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa11 	bl	8006f9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00c      	beq.n	8006b9c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0220 	mvn.w	r2, #32
 8006b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fec2 	bl	8007920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e0ff      	b.n	8006dc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b14      	cmp	r3, #20
 8006bce:	f200 80f0 	bhi.w	8006db2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd8:	08006c2d 	.word	0x08006c2d
 8006bdc:	08006db3 	.word	0x08006db3
 8006be0:	08006db3 	.word	0x08006db3
 8006be4:	08006db3 	.word	0x08006db3
 8006be8:	08006c6d 	.word	0x08006c6d
 8006bec:	08006db3 	.word	0x08006db3
 8006bf0:	08006db3 	.word	0x08006db3
 8006bf4:	08006db3 	.word	0x08006db3
 8006bf8:	08006caf 	.word	0x08006caf
 8006bfc:	08006db3 	.word	0x08006db3
 8006c00:	08006db3 	.word	0x08006db3
 8006c04:	08006db3 	.word	0x08006db3
 8006c08:	08006cef 	.word	0x08006cef
 8006c0c:	08006db3 	.word	0x08006db3
 8006c10:	08006db3 	.word	0x08006db3
 8006c14:	08006db3 	.word	0x08006db3
 8006c18:	08006d31 	.word	0x08006d31
 8006c1c:	08006db3 	.word	0x08006db3
 8006c20:	08006db3 	.word	0x08006db3
 8006c24:	08006db3 	.word	0x08006db3
 8006c28:	08006d71 	.word	0x08006d71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fa56 	bl	80070e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699a      	ldr	r2, [r3, #24]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0208 	orr.w	r2, r2, #8
 8006c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0204 	bic.w	r2, r2, #4
 8006c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6999      	ldr	r1, [r3, #24]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	619a      	str	r2, [r3, #24]
      break;
 8006c6a:	e0a5      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fac6 	bl	8007204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6999      	ldr	r1, [r3, #24]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	021a      	lsls	r2, r3, #8
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	619a      	str	r2, [r3, #24]
      break;
 8006cac:	e084      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fb2f 	bl	8007318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0208 	orr.w	r2, r2, #8
 8006cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0204 	bic.w	r2, r2, #4
 8006cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69d9      	ldr	r1, [r3, #28]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	61da      	str	r2, [r3, #28]
      break;
 8006cec:	e064      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fb97 	bl	8007428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69d9      	ldr	r1, [r3, #28]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	021a      	lsls	r2, r3, #8
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	61da      	str	r2, [r3, #28]
      break;
 8006d2e:	e043      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 fbe0 	bl	80074fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0208 	orr.w	r2, r2, #8
 8006d4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0204 	bic.w	r2, r2, #4
 8006d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006d6e:	e023      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fc24 	bl	80075c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	021a      	lsls	r2, r3, #8
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006db0:	e002      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
      break;
 8006db6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop

08006dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <HAL_TIM_ConfigClockSource+0x1c>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e0b6      	b.n	8006f56 <HAL_TIM_ConfigClockSource+0x18a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e24:	d03e      	beq.n	8006ea4 <HAL_TIM_ConfigClockSource+0xd8>
 8006e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e2a:	f200 8087 	bhi.w	8006f3c <HAL_TIM_ConfigClockSource+0x170>
 8006e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e32:	f000 8086 	beq.w	8006f42 <HAL_TIM_ConfigClockSource+0x176>
 8006e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e3a:	d87f      	bhi.n	8006f3c <HAL_TIM_ConfigClockSource+0x170>
 8006e3c:	2b70      	cmp	r3, #112	@ 0x70
 8006e3e:	d01a      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0xaa>
 8006e40:	2b70      	cmp	r3, #112	@ 0x70
 8006e42:	d87b      	bhi.n	8006f3c <HAL_TIM_ConfigClockSource+0x170>
 8006e44:	2b60      	cmp	r3, #96	@ 0x60
 8006e46:	d050      	beq.n	8006eea <HAL_TIM_ConfigClockSource+0x11e>
 8006e48:	2b60      	cmp	r3, #96	@ 0x60
 8006e4a:	d877      	bhi.n	8006f3c <HAL_TIM_ConfigClockSource+0x170>
 8006e4c:	2b50      	cmp	r3, #80	@ 0x50
 8006e4e:	d03c      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0xfe>
 8006e50:	2b50      	cmp	r3, #80	@ 0x50
 8006e52:	d873      	bhi.n	8006f3c <HAL_TIM_ConfigClockSource+0x170>
 8006e54:	2b40      	cmp	r3, #64	@ 0x40
 8006e56:	d058      	beq.n	8006f0a <HAL_TIM_ConfigClockSource+0x13e>
 8006e58:	2b40      	cmp	r3, #64	@ 0x40
 8006e5a:	d86f      	bhi.n	8006f3c <HAL_TIM_ConfigClockSource+0x170>
 8006e5c:	2b30      	cmp	r3, #48	@ 0x30
 8006e5e:	d064      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0x15e>
 8006e60:	2b30      	cmp	r3, #48	@ 0x30
 8006e62:	d86b      	bhi.n	8006f3c <HAL_TIM_ConfigClockSource+0x170>
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d060      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0x15e>
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d867      	bhi.n	8006f3c <HAL_TIM_ConfigClockSource+0x170>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d05c      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0x15e>
 8006e70:	2b10      	cmp	r3, #16
 8006e72:	d05a      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0x15e>
 8006e74:	e062      	b.n	8006f3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e86:	f000 fc7d 	bl	8007784 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	609a      	str	r2, [r3, #8]
      break;
 8006ea2:	e04f      	b.n	8006f44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eb4:	f000 fc66 	bl	8007784 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ec6:	609a      	str	r2, [r3, #8]
      break;
 8006ec8:	e03c      	b.n	8006f44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f000 fbda 	bl	8007690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2150      	movs	r1, #80	@ 0x50
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 fc33 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 8006ee8:	e02c      	b.n	8006f44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f000 fbf9 	bl	80076ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2160      	movs	r1, #96	@ 0x60
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 fc23 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 8006f08:	e01c      	b.n	8006f44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f16:	461a      	mov	r2, r3
 8006f18:	f000 fbba 	bl	8007690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2140      	movs	r1, #64	@ 0x40
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fc13 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 8006f28:	e00c      	b.n	8006f44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4619      	mov	r1, r3
 8006f34:	4610      	mov	r0, r2
 8006f36:	f000 fc0a 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 8006f3a:	e003      	b.n	8006f44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f40:	e000      	b.n	8006f44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a40      	ldr	r2, [pc, #256]	@ (80070c4 <TIM_Base_SetConfig+0x114>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fce:	d00f      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a3d      	ldr	r2, [pc, #244]	@ (80070c8 <TIM_Base_SetConfig+0x118>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00b      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a3c      	ldr	r2, [pc, #240]	@ (80070cc <TIM_Base_SetConfig+0x11c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d007      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a3b      	ldr	r2, [pc, #236]	@ (80070d0 <TIM_Base_SetConfig+0x120>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_Base_SetConfig+0x40>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a3a      	ldr	r2, [pc, #232]	@ (80070d4 <TIM_Base_SetConfig+0x124>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d108      	bne.n	8007002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2f      	ldr	r2, [pc, #188]	@ (80070c4 <TIM_Base_SetConfig+0x114>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01f      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007010:	d01b      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a2c      	ldr	r2, [pc, #176]	@ (80070c8 <TIM_Base_SetConfig+0x118>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d017      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a2b      	ldr	r2, [pc, #172]	@ (80070cc <TIM_Base_SetConfig+0x11c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d013      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a2a      	ldr	r2, [pc, #168]	@ (80070d0 <TIM_Base_SetConfig+0x120>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00f      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a29      	ldr	r2, [pc, #164]	@ (80070d4 <TIM_Base_SetConfig+0x124>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00b      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a28      	ldr	r2, [pc, #160]	@ (80070d8 <TIM_Base_SetConfig+0x128>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d007      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a27      	ldr	r2, [pc, #156]	@ (80070dc <TIM_Base_SetConfig+0x12c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d003      	beq.n	800704a <TIM_Base_SetConfig+0x9a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a26      	ldr	r2, [pc, #152]	@ (80070e0 <TIM_Base_SetConfig+0x130>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d108      	bne.n	800705c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a10      	ldr	r2, [pc, #64]	@ (80070c4 <TIM_Base_SetConfig+0x114>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00f      	beq.n	80070a8 <TIM_Base_SetConfig+0xf8>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a12      	ldr	r2, [pc, #72]	@ (80070d4 <TIM_Base_SetConfig+0x124>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00b      	beq.n	80070a8 <TIM_Base_SetConfig+0xf8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a11      	ldr	r2, [pc, #68]	@ (80070d8 <TIM_Base_SetConfig+0x128>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d007      	beq.n	80070a8 <TIM_Base_SetConfig+0xf8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a10      	ldr	r2, [pc, #64]	@ (80070dc <TIM_Base_SetConfig+0x12c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_Base_SetConfig+0xf8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a0f      	ldr	r2, [pc, #60]	@ (80070e0 <TIM_Base_SetConfig+0x130>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d103      	bne.n	80070b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	615a      	str	r2, [r3, #20]
}
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40012c00 	.word	0x40012c00
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40000c00 	.word	0x40000c00
 80070d4:	40013400 	.word	0x40013400
 80070d8:	40014000 	.word	0x40014000
 80070dc:	40014400 	.word	0x40014400
 80070e0:	40014800 	.word	0x40014800

080070e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	f023 0201 	bic.w	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f023 0302 	bic.w	r3, r3, #2
 8007130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a2c      	ldr	r2, [pc, #176]	@ (80071f0 <TIM_OC1_SetConfig+0x10c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00f      	beq.n	8007164 <TIM_OC1_SetConfig+0x80>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a2b      	ldr	r2, [pc, #172]	@ (80071f4 <TIM_OC1_SetConfig+0x110>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00b      	beq.n	8007164 <TIM_OC1_SetConfig+0x80>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a2a      	ldr	r2, [pc, #168]	@ (80071f8 <TIM_OC1_SetConfig+0x114>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d007      	beq.n	8007164 <TIM_OC1_SetConfig+0x80>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a29      	ldr	r2, [pc, #164]	@ (80071fc <TIM_OC1_SetConfig+0x118>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_OC1_SetConfig+0x80>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a28      	ldr	r2, [pc, #160]	@ (8007200 <TIM_OC1_SetConfig+0x11c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d10c      	bne.n	800717e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f023 0308 	bic.w	r3, r3, #8
 800716a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	4313      	orrs	r3, r2
 8007174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f023 0304 	bic.w	r3, r3, #4
 800717c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a1b      	ldr	r2, [pc, #108]	@ (80071f0 <TIM_OC1_SetConfig+0x10c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00f      	beq.n	80071a6 <TIM_OC1_SetConfig+0xc2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a1a      	ldr	r2, [pc, #104]	@ (80071f4 <TIM_OC1_SetConfig+0x110>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00b      	beq.n	80071a6 <TIM_OC1_SetConfig+0xc2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a19      	ldr	r2, [pc, #100]	@ (80071f8 <TIM_OC1_SetConfig+0x114>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d007      	beq.n	80071a6 <TIM_OC1_SetConfig+0xc2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a18      	ldr	r2, [pc, #96]	@ (80071fc <TIM_OC1_SetConfig+0x118>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d003      	beq.n	80071a6 <TIM_OC1_SetConfig+0xc2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a17      	ldr	r2, [pc, #92]	@ (8007200 <TIM_OC1_SetConfig+0x11c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d111      	bne.n	80071ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	621a      	str	r2, [r3, #32]
}
 80071e4:	bf00      	nop
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	40012c00 	.word	0x40012c00
 80071f4:	40013400 	.word	0x40013400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400
 8007200:	40014800 	.word	0x40014800

08007204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	f023 0210 	bic.w	r2, r3, #16
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800723e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4313      	orrs	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0320 	bic.w	r3, r3, #32
 8007252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a28      	ldr	r2, [pc, #160]	@ (8007304 <TIM_OC2_SetConfig+0x100>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d003      	beq.n	8007270 <TIM_OC2_SetConfig+0x6c>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a27      	ldr	r2, [pc, #156]	@ (8007308 <TIM_OC2_SetConfig+0x104>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10d      	bne.n	800728c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	011b      	lsls	r3, r3, #4
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800728a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a1d      	ldr	r2, [pc, #116]	@ (8007304 <TIM_OC2_SetConfig+0x100>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00f      	beq.n	80072b4 <TIM_OC2_SetConfig+0xb0>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a1c      	ldr	r2, [pc, #112]	@ (8007308 <TIM_OC2_SetConfig+0x104>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00b      	beq.n	80072b4 <TIM_OC2_SetConfig+0xb0>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a1b      	ldr	r2, [pc, #108]	@ (800730c <TIM_OC2_SetConfig+0x108>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d007      	beq.n	80072b4 <TIM_OC2_SetConfig+0xb0>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007310 <TIM_OC2_SetConfig+0x10c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d003      	beq.n	80072b4 <TIM_OC2_SetConfig+0xb0>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a19      	ldr	r2, [pc, #100]	@ (8007314 <TIM_OC2_SetConfig+0x110>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d113      	bne.n	80072dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	621a      	str	r2, [r3, #32]
}
 80072f6:	bf00      	nop
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40012c00 	.word	0x40012c00
 8007308:	40013400 	.word	0x40013400
 800730c:	40014000 	.word	0x40014000
 8007310:	40014400 	.word	0x40014400
 8007314:	40014800 	.word	0x40014800

08007318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a27      	ldr	r2, [pc, #156]	@ (8007414 <TIM_OC3_SetConfig+0xfc>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d003      	beq.n	8007382 <TIM_OC3_SetConfig+0x6a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a26      	ldr	r2, [pc, #152]	@ (8007418 <TIM_OC3_SetConfig+0x100>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d10d      	bne.n	800739e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800739c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007414 <TIM_OC3_SetConfig+0xfc>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00f      	beq.n	80073c6 <TIM_OC3_SetConfig+0xae>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007418 <TIM_OC3_SetConfig+0x100>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d00b      	beq.n	80073c6 <TIM_OC3_SetConfig+0xae>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a1a      	ldr	r2, [pc, #104]	@ (800741c <TIM_OC3_SetConfig+0x104>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d007      	beq.n	80073c6 <TIM_OC3_SetConfig+0xae>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a19      	ldr	r2, [pc, #100]	@ (8007420 <TIM_OC3_SetConfig+0x108>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d003      	beq.n	80073c6 <TIM_OC3_SetConfig+0xae>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a18      	ldr	r2, [pc, #96]	@ (8007424 <TIM_OC3_SetConfig+0x10c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d113      	bne.n	80073ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	621a      	str	r2, [r3, #32]
}
 8007408:	bf00      	nop
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40013400 	.word	0x40013400
 800741c:	40014000 	.word	0x40014000
 8007420:	40014400 	.word	0x40014400
 8007424:	40014800 	.word	0x40014800

08007428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800745a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	031b      	lsls	r3, r3, #12
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a18      	ldr	r2, [pc, #96]	@ (80074e8 <TIM_OC4_SetConfig+0xc0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00f      	beq.n	80074ac <TIM_OC4_SetConfig+0x84>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a17      	ldr	r2, [pc, #92]	@ (80074ec <TIM_OC4_SetConfig+0xc4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00b      	beq.n	80074ac <TIM_OC4_SetConfig+0x84>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a16      	ldr	r2, [pc, #88]	@ (80074f0 <TIM_OC4_SetConfig+0xc8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d007      	beq.n	80074ac <TIM_OC4_SetConfig+0x84>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a15      	ldr	r2, [pc, #84]	@ (80074f4 <TIM_OC4_SetConfig+0xcc>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d003      	beq.n	80074ac <TIM_OC4_SetConfig+0x84>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a14      	ldr	r2, [pc, #80]	@ (80074f8 <TIM_OC4_SetConfig+0xd0>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d109      	bne.n	80074c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	019b      	lsls	r3, r3, #6
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	4313      	orrs	r3, r2
 80074be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40013400 	.word	0x40013400
 80074f0:	40014000 	.word	0x40014000
 80074f4:	40014400 	.word	0x40014400
 80074f8:	40014800 	.word	0x40014800

080074fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800752a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007540:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	041b      	lsls	r3, r3, #16
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a17      	ldr	r2, [pc, #92]	@ (80075b0 <TIM_OC5_SetConfig+0xb4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00f      	beq.n	8007576 <TIM_OC5_SetConfig+0x7a>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a16      	ldr	r2, [pc, #88]	@ (80075b4 <TIM_OC5_SetConfig+0xb8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00b      	beq.n	8007576 <TIM_OC5_SetConfig+0x7a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a15      	ldr	r2, [pc, #84]	@ (80075b8 <TIM_OC5_SetConfig+0xbc>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d007      	beq.n	8007576 <TIM_OC5_SetConfig+0x7a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a14      	ldr	r2, [pc, #80]	@ (80075bc <TIM_OC5_SetConfig+0xc0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_OC5_SetConfig+0x7a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a13      	ldr	r2, [pc, #76]	@ (80075c0 <TIM_OC5_SetConfig+0xc4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d109      	bne.n	800758a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800757c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	621a      	str	r2, [r3, #32]
}
 80075a4:	bf00      	nop
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	40013400 	.word	0x40013400
 80075b8:	40014000 	.word	0x40014000
 80075bc:	40014400 	.word	0x40014400
 80075c0:	40014800 	.word	0x40014800

080075c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4313      	orrs	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800760a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	051b      	lsls	r3, r3, #20
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a18      	ldr	r2, [pc, #96]	@ (800767c <TIM_OC6_SetConfig+0xb8>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00f      	beq.n	8007640 <TIM_OC6_SetConfig+0x7c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a17      	ldr	r2, [pc, #92]	@ (8007680 <TIM_OC6_SetConfig+0xbc>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00b      	beq.n	8007640 <TIM_OC6_SetConfig+0x7c>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a16      	ldr	r2, [pc, #88]	@ (8007684 <TIM_OC6_SetConfig+0xc0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d007      	beq.n	8007640 <TIM_OC6_SetConfig+0x7c>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a15      	ldr	r2, [pc, #84]	@ (8007688 <TIM_OC6_SetConfig+0xc4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_OC6_SetConfig+0x7c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a14      	ldr	r2, [pc, #80]	@ (800768c <TIM_OC6_SetConfig+0xc8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d109      	bne.n	8007654 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007646:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	029b      	lsls	r3, r3, #10
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	621a      	str	r2, [r3, #32]
}
 800766e:	bf00      	nop
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	40012c00 	.word	0x40012c00
 8007680:	40013400 	.word	0x40013400
 8007684:	40014000 	.word	0x40014000
 8007688:	40014400 	.word	0x40014400
 800768c:	40014800 	.word	0x40014800

08007690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f023 0201 	bic.w	r2, r3, #1
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f023 030a 	bic.w	r3, r3, #10
 80076cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b087      	sub	sp, #28
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	f023 0210 	bic.w	r2, r3, #16
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	031b      	lsls	r3, r3, #12
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800772a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	4313      	orrs	r3, r2
 8007734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	621a      	str	r2, [r3, #32]
}
 8007742:	bf00      	nop
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	f043 0307 	orr.w	r3, r3, #7
 8007770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	609a      	str	r2, [r3, #8]
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800779e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	021a      	lsls	r2, r3, #8
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	609a      	str	r2, [r3, #8]
}
 80077b8:	bf00      	nop
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	2201      	movs	r2, #1
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a1a      	ldr	r2, [r3, #32]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	43db      	mvns	r3, r3
 80077e6:	401a      	ands	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6a1a      	ldr	r2, [r3, #32]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f003 031f 	and.w	r3, r3, #31
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	fa01 f303 	lsl.w	r3, r1, r3
 80077fc:	431a      	orrs	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	621a      	str	r2, [r3, #32]
}
 8007802:	bf00      	nop
 8007804:	371c      	adds	r7, #28
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
	...

08007810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007824:	2302      	movs	r3, #2
 8007826:	e068      	b.n	80078fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2e      	ldr	r2, [pc, #184]	@ (8007908 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d004      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a2d      	ldr	r2, [pc, #180]	@ (800790c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d108      	bne.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007862:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007874:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a1e      	ldr	r2, [pc, #120]	@ (8007908 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d01d      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800789a:	d018      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00e      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a18      	ldr	r2, [pc, #96]	@ (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a13      	ldr	r2, [pc, #76]	@ (800790c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a14      	ldr	r2, [pc, #80]	@ (800791c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d10c      	bne.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40013400 	.word	0x40013400
 8007910:	40000400 	.word	0x40000400
 8007914:	40000800 	.word	0x40000800
 8007918:	40000c00 	.word	0x40000c00
 800791c:	40014000 	.word	0x40014000

08007920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e040      	b.n	80079f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fa ff5a 	bl	8002838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2224      	movs	r2, #36	@ 0x24
 8007988:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0201 	bic.w	r2, r2, #1
 8007998:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fe36 	bl	8008614 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fb7b 	bl	80080a4 <UART_SetConfig>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e01b      	b.n	80079f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 feb5 	bl	8008758 <UART_CheckIdleState>
 80079ee:	4603      	mov	r3, r0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	@ 0x28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	4613      	mov	r3, r2
 8007a04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d137      	bne.n	8007a80 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <HAL_UART_Receive_IT+0x24>
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e030      	b.n	8007a82 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a18      	ldr	r2, [pc, #96]	@ (8007a8c <HAL_UART_Receive_IT+0x94>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d01f      	beq.n	8007a70 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d018      	beq.n	8007a70 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	623b      	str	r3, [r7, #32]
 8007a5e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	69f9      	ldr	r1, [r7, #28]
 8007a62:	6a3a      	ldr	r2, [r7, #32]
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a70:	88fb      	ldrh	r3, [r7, #6]
 8007a72:	461a      	mov	r2, r3
 8007a74:	68b9      	ldr	r1, [r7, #8]
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 ff7e 	bl	8008978 <UART_Start_Receive_IT>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	e000      	b.n	8007a82 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a80:	2302      	movs	r3, #2
  }
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3728      	adds	r7, #40	@ 0x28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	40008000 	.word	0x40008000

08007a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b0ba      	sub	sp, #232	@ 0xe8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ab6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007aba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007abe:	4013      	ands	r3, r2
 8007ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007ac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d115      	bne.n	8007af8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00f      	beq.n	8007af8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d009      	beq.n	8007af8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 82ae 	beq.w	800804a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
      }
      return;
 8007af6:	e2a8      	b.n	800804a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007af8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8117 	beq.w	8007d30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007b0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b12:	4b85      	ldr	r3, [pc, #532]	@ (8007d28 <HAL_UART_IRQHandler+0x298>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 810a 	beq.w	8007d30 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d011      	beq.n	8007b4c <HAL_UART_IRQHandler+0xbc>
 8007b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b42:	f043 0201 	orr.w	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d011      	beq.n	8007b7c <HAL_UART_IRQHandler+0xec>
 8007b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b72:	f043 0204 	orr.w	r2, r3, #4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d011      	beq.n	8007bac <HAL_UART_IRQHandler+0x11c>
 8007b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2204      	movs	r2, #4
 8007b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ba2:	f043 0202 	orr.w	r2, r3, #2
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d017      	beq.n	8007be8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bde:	f043 0208 	orr.w	r2, r3, #8
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d012      	beq.n	8007c1a <HAL_UART_IRQHandler+0x18a>
 8007bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00c      	beq.n	8007c1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c10:	f043 0220 	orr.w	r2, r3, #32
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 8214 	beq.w	800804e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00d      	beq.n	8007c4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c62:	2b40      	cmp	r3, #64	@ 0x40
 8007c64:	d005      	beq.n	8007c72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d04f      	beq.n	8007d12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 ff46 	bl	8008b04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c82:	2b40      	cmp	r3, #64	@ 0x40
 8007c84:	d141      	bne.n	8007d0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3308      	adds	r3, #8
 8007c8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007cbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1d9      	bne.n	8007c86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d013      	beq.n	8007d02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cde:	4a13      	ldr	r2, [pc, #76]	@ (8007d2c <HAL_UART_IRQHandler+0x29c>)
 8007ce0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fc fdbb 	bl	8004862 <HAL_DMA_Abort_IT>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d017      	beq.n	8007d22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d00:	e00f      	b.n	8007d22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f9b8 	bl	8008078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d08:	e00b      	b.n	8007d22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f9b4 	bl	8008078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d10:	e007      	b.n	8007d22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f9b0 	bl	8008078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007d20:	e195      	b.n	800804e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d22:	bf00      	nop
    return;
 8007d24:	e193      	b.n	800804e <HAL_UART_IRQHandler+0x5be>
 8007d26:	bf00      	nop
 8007d28:	04000120 	.word	0x04000120
 8007d2c:	08008bcd 	.word	0x08008bcd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	f040 814e 	bne.w	8007fd6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 8147 	beq.w	8007fd6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 8140 	beq.w	8007fd6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2210      	movs	r2, #16
 8007d5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d68:	2b40      	cmp	r3, #64	@ 0x40
 8007d6a:	f040 80b8 	bne.w	8007ede <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 8167 	beq.w	8008052 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	f080 815f 	bcs.w	8008052 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f040 8086 	bne.w	8007ebc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007dde:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007de6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1da      	bne.n	8007db0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e1      	bne.n	8007dfa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e3      	bne.n	8007e36 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e8c:	f023 0310 	bic.w	r3, r3, #16
 8007e90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ea0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ea4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e4      	bne.n	8007e7c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fc fc95 	bl	80047e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f8d8 	bl	800808c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007edc:	e0b9      	b.n	8008052 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80ab 	beq.w	8008056 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80a6 	beq.w	8008056 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f34:	e841 2300 	strex	r3, r2, [r1]
 8007f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e4      	bne.n	8007f0a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3308      	adds	r3, #8
 8007f46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	f023 0301 	bic.w	r3, r3, #1
 8007f56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3308      	adds	r3, #8
 8007f60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f64:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e3      	bne.n	8007f40 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f023 0310 	bic.w	r3, r3, #16
 8007fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	69b9      	ldr	r1, [r7, #24]
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	617b      	str	r3, [r7, #20]
   return(result);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e4      	bne.n	8007f8c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f85c 	bl	800808c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fd4:	e03f      	b.n	8008056 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00e      	beq.n	8008000 <HAL_UART_IRQHandler+0x570>
 8007fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d008      	beq.n	8008000 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007ff6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 ffe3 	bl	8008fc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ffe:	e02d      	b.n	800805c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00e      	beq.n	800802a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800800c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008014:	2b00      	cmp	r3, #0
 8008016:	d008      	beq.n	800802a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d01c      	beq.n	800805a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	4798      	blx	r3
    }
    return;
 8008028:	e017      	b.n	800805a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800802a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d012      	beq.n	800805c <HAL_UART_IRQHandler+0x5cc>
 8008036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800803a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00c      	beq.n	800805c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fdd8 	bl	8008bf8 <UART_EndTransmit_IT>
    return;
 8008048:	e008      	b.n	800805c <HAL_UART_IRQHandler+0x5cc>
      return;
 800804a:	bf00      	nop
 800804c:	e006      	b.n	800805c <HAL_UART_IRQHandler+0x5cc>
    return;
 800804e:	bf00      	nop
 8008050:	e004      	b.n	800805c <HAL_UART_IRQHandler+0x5cc>
      return;
 8008052:	bf00      	nop
 8008054:	e002      	b.n	800805c <HAL_UART_IRQHandler+0x5cc>
      return;
 8008056:	bf00      	nop
 8008058:	e000      	b.n	800805c <HAL_UART_IRQHandler+0x5cc>
    return;
 800805a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800805c:	37e8      	adds	r7, #232	@ 0xe8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop

08008064 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080a8:	b08a      	sub	sp, #40	@ 0x28
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	431a      	orrs	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4ba4      	ldr	r3, [pc, #656]	@ (8008364 <UART_SetConfig+0x2c0>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	6812      	ldr	r2, [r2, #0]
 80080da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080dc:	430b      	orrs	r3, r1
 80080de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a99      	ldr	r2, [pc, #612]	@ (8008368 <UART_SetConfig+0x2c4>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800810c:	4313      	orrs	r3, r2
 800810e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008120:	430a      	orrs	r2, r1
 8008122:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a90      	ldr	r2, [pc, #576]	@ (800836c <UART_SetConfig+0x2c8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d126      	bne.n	800817c <UART_SetConfig+0xd8>
 800812e:	4b90      	ldr	r3, [pc, #576]	@ (8008370 <UART_SetConfig+0x2cc>)
 8008130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008134:	f003 0303 	and.w	r3, r3, #3
 8008138:	2b03      	cmp	r3, #3
 800813a:	d81b      	bhi.n	8008174 <UART_SetConfig+0xd0>
 800813c:	a201      	add	r2, pc, #4	@ (adr r2, 8008144 <UART_SetConfig+0xa0>)
 800813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008142:	bf00      	nop
 8008144:	08008155 	.word	0x08008155
 8008148:	08008165 	.word	0x08008165
 800814c:	0800815d 	.word	0x0800815d
 8008150:	0800816d 	.word	0x0800816d
 8008154:	2301      	movs	r3, #1
 8008156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800815a:	e116      	b.n	800838a <UART_SetConfig+0x2e6>
 800815c:	2302      	movs	r3, #2
 800815e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008162:	e112      	b.n	800838a <UART_SetConfig+0x2e6>
 8008164:	2304      	movs	r3, #4
 8008166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800816a:	e10e      	b.n	800838a <UART_SetConfig+0x2e6>
 800816c:	2308      	movs	r3, #8
 800816e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008172:	e10a      	b.n	800838a <UART_SetConfig+0x2e6>
 8008174:	2310      	movs	r3, #16
 8008176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800817a:	e106      	b.n	800838a <UART_SetConfig+0x2e6>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a7c      	ldr	r2, [pc, #496]	@ (8008374 <UART_SetConfig+0x2d0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d138      	bne.n	80081f8 <UART_SetConfig+0x154>
 8008186:	4b7a      	ldr	r3, [pc, #488]	@ (8008370 <UART_SetConfig+0x2cc>)
 8008188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800818c:	f003 030c 	and.w	r3, r3, #12
 8008190:	2b0c      	cmp	r3, #12
 8008192:	d82d      	bhi.n	80081f0 <UART_SetConfig+0x14c>
 8008194:	a201      	add	r2, pc, #4	@ (adr r2, 800819c <UART_SetConfig+0xf8>)
 8008196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819a:	bf00      	nop
 800819c:	080081d1 	.word	0x080081d1
 80081a0:	080081f1 	.word	0x080081f1
 80081a4:	080081f1 	.word	0x080081f1
 80081a8:	080081f1 	.word	0x080081f1
 80081ac:	080081e1 	.word	0x080081e1
 80081b0:	080081f1 	.word	0x080081f1
 80081b4:	080081f1 	.word	0x080081f1
 80081b8:	080081f1 	.word	0x080081f1
 80081bc:	080081d9 	.word	0x080081d9
 80081c0:	080081f1 	.word	0x080081f1
 80081c4:	080081f1 	.word	0x080081f1
 80081c8:	080081f1 	.word	0x080081f1
 80081cc:	080081e9 	.word	0x080081e9
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081d6:	e0d8      	b.n	800838a <UART_SetConfig+0x2e6>
 80081d8:	2302      	movs	r3, #2
 80081da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081de:	e0d4      	b.n	800838a <UART_SetConfig+0x2e6>
 80081e0:	2304      	movs	r3, #4
 80081e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081e6:	e0d0      	b.n	800838a <UART_SetConfig+0x2e6>
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081ee:	e0cc      	b.n	800838a <UART_SetConfig+0x2e6>
 80081f0:	2310      	movs	r3, #16
 80081f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081f6:	e0c8      	b.n	800838a <UART_SetConfig+0x2e6>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a5e      	ldr	r2, [pc, #376]	@ (8008378 <UART_SetConfig+0x2d4>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d125      	bne.n	800824e <UART_SetConfig+0x1aa>
 8008202:	4b5b      	ldr	r3, [pc, #364]	@ (8008370 <UART_SetConfig+0x2cc>)
 8008204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008208:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800820c:	2b30      	cmp	r3, #48	@ 0x30
 800820e:	d016      	beq.n	800823e <UART_SetConfig+0x19a>
 8008210:	2b30      	cmp	r3, #48	@ 0x30
 8008212:	d818      	bhi.n	8008246 <UART_SetConfig+0x1a2>
 8008214:	2b20      	cmp	r3, #32
 8008216:	d00a      	beq.n	800822e <UART_SetConfig+0x18a>
 8008218:	2b20      	cmp	r3, #32
 800821a:	d814      	bhi.n	8008246 <UART_SetConfig+0x1a2>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <UART_SetConfig+0x182>
 8008220:	2b10      	cmp	r3, #16
 8008222:	d008      	beq.n	8008236 <UART_SetConfig+0x192>
 8008224:	e00f      	b.n	8008246 <UART_SetConfig+0x1a2>
 8008226:	2300      	movs	r3, #0
 8008228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800822c:	e0ad      	b.n	800838a <UART_SetConfig+0x2e6>
 800822e:	2302      	movs	r3, #2
 8008230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008234:	e0a9      	b.n	800838a <UART_SetConfig+0x2e6>
 8008236:	2304      	movs	r3, #4
 8008238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800823c:	e0a5      	b.n	800838a <UART_SetConfig+0x2e6>
 800823e:	2308      	movs	r3, #8
 8008240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008244:	e0a1      	b.n	800838a <UART_SetConfig+0x2e6>
 8008246:	2310      	movs	r3, #16
 8008248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800824c:	e09d      	b.n	800838a <UART_SetConfig+0x2e6>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a4a      	ldr	r2, [pc, #296]	@ (800837c <UART_SetConfig+0x2d8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d125      	bne.n	80082a4 <UART_SetConfig+0x200>
 8008258:	4b45      	ldr	r3, [pc, #276]	@ (8008370 <UART_SetConfig+0x2cc>)
 800825a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800825e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008262:	2bc0      	cmp	r3, #192	@ 0xc0
 8008264:	d016      	beq.n	8008294 <UART_SetConfig+0x1f0>
 8008266:	2bc0      	cmp	r3, #192	@ 0xc0
 8008268:	d818      	bhi.n	800829c <UART_SetConfig+0x1f8>
 800826a:	2b80      	cmp	r3, #128	@ 0x80
 800826c:	d00a      	beq.n	8008284 <UART_SetConfig+0x1e0>
 800826e:	2b80      	cmp	r3, #128	@ 0x80
 8008270:	d814      	bhi.n	800829c <UART_SetConfig+0x1f8>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <UART_SetConfig+0x1d8>
 8008276:	2b40      	cmp	r3, #64	@ 0x40
 8008278:	d008      	beq.n	800828c <UART_SetConfig+0x1e8>
 800827a:	e00f      	b.n	800829c <UART_SetConfig+0x1f8>
 800827c:	2300      	movs	r3, #0
 800827e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008282:	e082      	b.n	800838a <UART_SetConfig+0x2e6>
 8008284:	2302      	movs	r3, #2
 8008286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800828a:	e07e      	b.n	800838a <UART_SetConfig+0x2e6>
 800828c:	2304      	movs	r3, #4
 800828e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008292:	e07a      	b.n	800838a <UART_SetConfig+0x2e6>
 8008294:	2308      	movs	r3, #8
 8008296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800829a:	e076      	b.n	800838a <UART_SetConfig+0x2e6>
 800829c:	2310      	movs	r3, #16
 800829e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082a2:	e072      	b.n	800838a <UART_SetConfig+0x2e6>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a35      	ldr	r2, [pc, #212]	@ (8008380 <UART_SetConfig+0x2dc>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d12a      	bne.n	8008304 <UART_SetConfig+0x260>
 80082ae:	4b30      	ldr	r3, [pc, #192]	@ (8008370 <UART_SetConfig+0x2cc>)
 80082b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082bc:	d01a      	beq.n	80082f4 <UART_SetConfig+0x250>
 80082be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082c2:	d81b      	bhi.n	80082fc <UART_SetConfig+0x258>
 80082c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c8:	d00c      	beq.n	80082e4 <UART_SetConfig+0x240>
 80082ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082ce:	d815      	bhi.n	80082fc <UART_SetConfig+0x258>
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <UART_SetConfig+0x238>
 80082d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d8:	d008      	beq.n	80082ec <UART_SetConfig+0x248>
 80082da:	e00f      	b.n	80082fc <UART_SetConfig+0x258>
 80082dc:	2300      	movs	r3, #0
 80082de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082e2:	e052      	b.n	800838a <UART_SetConfig+0x2e6>
 80082e4:	2302      	movs	r3, #2
 80082e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082ea:	e04e      	b.n	800838a <UART_SetConfig+0x2e6>
 80082ec:	2304      	movs	r3, #4
 80082ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082f2:	e04a      	b.n	800838a <UART_SetConfig+0x2e6>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082fa:	e046      	b.n	800838a <UART_SetConfig+0x2e6>
 80082fc:	2310      	movs	r3, #16
 80082fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008302:	e042      	b.n	800838a <UART_SetConfig+0x2e6>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a17      	ldr	r2, [pc, #92]	@ (8008368 <UART_SetConfig+0x2c4>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d13a      	bne.n	8008384 <UART_SetConfig+0x2e0>
 800830e:	4b18      	ldr	r3, [pc, #96]	@ (8008370 <UART_SetConfig+0x2cc>)
 8008310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008314:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008318:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800831c:	d01a      	beq.n	8008354 <UART_SetConfig+0x2b0>
 800831e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008322:	d81b      	bhi.n	800835c <UART_SetConfig+0x2b8>
 8008324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008328:	d00c      	beq.n	8008344 <UART_SetConfig+0x2a0>
 800832a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800832e:	d815      	bhi.n	800835c <UART_SetConfig+0x2b8>
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <UART_SetConfig+0x298>
 8008334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008338:	d008      	beq.n	800834c <UART_SetConfig+0x2a8>
 800833a:	e00f      	b.n	800835c <UART_SetConfig+0x2b8>
 800833c:	2300      	movs	r3, #0
 800833e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008342:	e022      	b.n	800838a <UART_SetConfig+0x2e6>
 8008344:	2302      	movs	r3, #2
 8008346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800834a:	e01e      	b.n	800838a <UART_SetConfig+0x2e6>
 800834c:	2304      	movs	r3, #4
 800834e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008352:	e01a      	b.n	800838a <UART_SetConfig+0x2e6>
 8008354:	2308      	movs	r3, #8
 8008356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800835a:	e016      	b.n	800838a <UART_SetConfig+0x2e6>
 800835c:	2310      	movs	r3, #16
 800835e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008362:	e012      	b.n	800838a <UART_SetConfig+0x2e6>
 8008364:	efff69f3 	.word	0xefff69f3
 8008368:	40008000 	.word	0x40008000
 800836c:	40013800 	.word	0x40013800
 8008370:	40021000 	.word	0x40021000
 8008374:	40004400 	.word	0x40004400
 8008378:	40004800 	.word	0x40004800
 800837c:	40004c00 	.word	0x40004c00
 8008380:	40005000 	.word	0x40005000
 8008384:	2310      	movs	r3, #16
 8008386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a9f      	ldr	r2, [pc, #636]	@ (800860c <UART_SetConfig+0x568>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d17a      	bne.n	800848a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008394:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008398:	2b08      	cmp	r3, #8
 800839a:	d824      	bhi.n	80083e6 <UART_SetConfig+0x342>
 800839c:	a201      	add	r2, pc, #4	@ (adr r2, 80083a4 <UART_SetConfig+0x300>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	080083c9 	.word	0x080083c9
 80083a8:	080083e7 	.word	0x080083e7
 80083ac:	080083d1 	.word	0x080083d1
 80083b0:	080083e7 	.word	0x080083e7
 80083b4:	080083d7 	.word	0x080083d7
 80083b8:	080083e7 	.word	0x080083e7
 80083bc:	080083e7 	.word	0x080083e7
 80083c0:	080083e7 	.word	0x080083e7
 80083c4:	080083df 	.word	0x080083df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c8:	f7fd fa3e 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 80083cc:	61f8      	str	r0, [r7, #28]
        break;
 80083ce:	e010      	b.n	80083f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083d0:	4b8f      	ldr	r3, [pc, #572]	@ (8008610 <UART_SetConfig+0x56c>)
 80083d2:	61fb      	str	r3, [r7, #28]
        break;
 80083d4:	e00d      	b.n	80083f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083d6:	f7fd f99f 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 80083da:	61f8      	str	r0, [r7, #28]
        break;
 80083dc:	e009      	b.n	80083f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083e2:	61fb      	str	r3, [r7, #28]
        break;
 80083e4:	e005      	b.n	80083f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80083e6:	2300      	movs	r3, #0
 80083e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80083f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 80fb 	beq.w	80085f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	4413      	add	r3, r2
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	429a      	cmp	r2, r3
 8008408:	d305      	bcc.n	8008416 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008410:	69fa      	ldr	r2, [r7, #28]
 8008412:	429a      	cmp	r2, r3
 8008414:	d903      	bls.n	800841e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800841c:	e0e8      	b.n	80085f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	2200      	movs	r2, #0
 8008422:	461c      	mov	r4, r3
 8008424:	4615      	mov	r5, r2
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	022b      	lsls	r3, r5, #8
 8008430:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008434:	0222      	lsls	r2, r4, #8
 8008436:	68f9      	ldr	r1, [r7, #12]
 8008438:	6849      	ldr	r1, [r1, #4]
 800843a:	0849      	lsrs	r1, r1, #1
 800843c:	2000      	movs	r0, #0
 800843e:	4688      	mov	r8, r1
 8008440:	4681      	mov	r9, r0
 8008442:	eb12 0a08 	adds.w	sl, r2, r8
 8008446:	eb43 0b09 	adc.w	fp, r3, r9
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	603b      	str	r3, [r7, #0]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008458:	4650      	mov	r0, sl
 800845a:	4659      	mov	r1, fp
 800845c:	f7f8 fc14 	bl	8000c88 <__aeabi_uldivmod>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4613      	mov	r3, r2
 8008466:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800846e:	d308      	bcc.n	8008482 <UART_SetConfig+0x3de>
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008476:	d204      	bcs.n	8008482 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	69ba      	ldr	r2, [r7, #24]
 800847e:	60da      	str	r2, [r3, #12]
 8008480:	e0b6      	b.n	80085f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008488:	e0b2      	b.n	80085f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008492:	d15e      	bne.n	8008552 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008494:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008498:	2b08      	cmp	r3, #8
 800849a:	d828      	bhi.n	80084ee <UART_SetConfig+0x44a>
 800849c:	a201      	add	r2, pc, #4	@ (adr r2, 80084a4 <UART_SetConfig+0x400>)
 800849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a2:	bf00      	nop
 80084a4:	080084c9 	.word	0x080084c9
 80084a8:	080084d1 	.word	0x080084d1
 80084ac:	080084d9 	.word	0x080084d9
 80084b0:	080084ef 	.word	0x080084ef
 80084b4:	080084df 	.word	0x080084df
 80084b8:	080084ef 	.word	0x080084ef
 80084bc:	080084ef 	.word	0x080084ef
 80084c0:	080084ef 	.word	0x080084ef
 80084c4:	080084e7 	.word	0x080084e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c8:	f7fd f9be 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 80084cc:	61f8      	str	r0, [r7, #28]
        break;
 80084ce:	e014      	b.n	80084fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084d0:	f7fd f9d0 	bl	8005874 <HAL_RCC_GetPCLK2Freq>
 80084d4:	61f8      	str	r0, [r7, #28]
        break;
 80084d6:	e010      	b.n	80084fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008610 <UART_SetConfig+0x56c>)
 80084da:	61fb      	str	r3, [r7, #28]
        break;
 80084dc:	e00d      	b.n	80084fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084de:	f7fd f91b 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 80084e2:	61f8      	str	r0, [r7, #28]
        break;
 80084e4:	e009      	b.n	80084fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ea:	61fb      	str	r3, [r7, #28]
        break;
 80084ec:	e005      	b.n	80084fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80084f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d077      	beq.n	80085f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	005a      	lsls	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	085b      	lsrs	r3, r3, #1
 800850a:	441a      	add	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	fbb2 f3f3 	udiv	r3, r2, r3
 8008514:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	2b0f      	cmp	r3, #15
 800851a:	d916      	bls.n	800854a <UART_SetConfig+0x4a6>
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008522:	d212      	bcs.n	800854a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	b29b      	uxth	r3, r3
 8008528:	f023 030f 	bic.w	r3, r3, #15
 800852c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	085b      	lsrs	r3, r3, #1
 8008532:	b29b      	uxth	r3, r3
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	b29a      	uxth	r2, r3
 800853a:	8afb      	ldrh	r3, [r7, #22]
 800853c:	4313      	orrs	r3, r2
 800853e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	8afa      	ldrh	r2, [r7, #22]
 8008546:	60da      	str	r2, [r3, #12]
 8008548:	e052      	b.n	80085f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008550:	e04e      	b.n	80085f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008552:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008556:	2b08      	cmp	r3, #8
 8008558:	d827      	bhi.n	80085aa <UART_SetConfig+0x506>
 800855a:	a201      	add	r2, pc, #4	@ (adr r2, 8008560 <UART_SetConfig+0x4bc>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008585 	.word	0x08008585
 8008564:	0800858d 	.word	0x0800858d
 8008568:	08008595 	.word	0x08008595
 800856c:	080085ab 	.word	0x080085ab
 8008570:	0800859b 	.word	0x0800859b
 8008574:	080085ab 	.word	0x080085ab
 8008578:	080085ab 	.word	0x080085ab
 800857c:	080085ab 	.word	0x080085ab
 8008580:	080085a3 	.word	0x080085a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008584:	f7fd f960 	bl	8005848 <HAL_RCC_GetPCLK1Freq>
 8008588:	61f8      	str	r0, [r7, #28]
        break;
 800858a:	e014      	b.n	80085b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800858c:	f7fd f972 	bl	8005874 <HAL_RCC_GetPCLK2Freq>
 8008590:	61f8      	str	r0, [r7, #28]
        break;
 8008592:	e010      	b.n	80085b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008594:	4b1e      	ldr	r3, [pc, #120]	@ (8008610 <UART_SetConfig+0x56c>)
 8008596:	61fb      	str	r3, [r7, #28]
        break;
 8008598:	e00d      	b.n	80085b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800859a:	f7fd f8bd 	bl	8005718 <HAL_RCC_GetSysClockFreq>
 800859e:	61f8      	str	r0, [r7, #28]
        break;
 80085a0:	e009      	b.n	80085b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085a6:	61fb      	str	r3, [r7, #28]
        break;
 80085a8:	e005      	b.n	80085b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80085b4:	bf00      	nop
    }

    if (pclk != 0U)
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d019      	beq.n	80085f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	085a      	lsrs	r2, r3, #1
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	441a      	add	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	2b0f      	cmp	r3, #15
 80085d4:	d909      	bls.n	80085ea <UART_SetConfig+0x546>
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085dc:	d205      	bcs.n	80085ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60da      	str	r2, [r3, #12]
 80085e8:	e002      	b.n	80085f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80085fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008600:	4618      	mov	r0, r3
 8008602:	3728      	adds	r7, #40	@ 0x28
 8008604:	46bd      	mov	sp, r7
 8008606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800860a:	bf00      	nop
 800860c:	40008000 	.word	0x40008000
 8008610:	00f42400 	.word	0x00f42400

08008614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00a      	beq.n	800863e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00a      	beq.n	8008682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008686:	f003 0304 	and.w	r3, r3, #4
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a8:	f003 0310 	and.w	r3, r3, #16
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00a      	beq.n	80086c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01a      	beq.n	800872a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008712:	d10a      	bne.n	800872a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	430a      	orrs	r2, r1
 8008728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	430a      	orrs	r2, r1
 800874a:	605a      	str	r2, [r3, #4]
  }
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b098      	sub	sp, #96	@ 0x60
 800875c:	af02      	add	r7, sp, #8
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008768:	f7fa facc 	bl	8002d04 <HAL_GetTick>
 800876c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0308 	and.w	r3, r3, #8
 8008778:	2b08      	cmp	r3, #8
 800877a:	d12e      	bne.n	80087da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800877c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008784:	2200      	movs	r2, #0
 8008786:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f88c 	bl	80088a8 <UART_WaitOnFlagUntilTimeout>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d021      	beq.n	80087da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80087b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e6      	bne.n	8008796 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e062      	b.n	80088a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d149      	bne.n	800887c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087f0:	2200      	movs	r2, #0
 80087f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f856 	bl	80088a8 <UART_WaitOnFlagUntilTimeout>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d03c      	beq.n	800887c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	623b      	str	r3, [r7, #32]
   return(result);
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008820:	633b      	str	r3, [r7, #48]	@ 0x30
 8008822:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800882e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e6      	bne.n	8008802 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3308      	adds	r3, #8
 800883a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	e853 3f00 	ldrex	r3, [r3]
 8008842:	60fb      	str	r3, [r7, #12]
   return(result);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0301 	bic.w	r3, r3, #1
 800884a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3308      	adds	r3, #8
 8008852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008854:	61fa      	str	r2, [r7, #28]
 8008856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	69b9      	ldr	r1, [r7, #24]
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	617b      	str	r3, [r7, #20]
   return(result);
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e5      	bne.n	8008834 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e011      	b.n	80088a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2220      	movs	r2, #32
 8008880:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2220      	movs	r2, #32
 8008886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3758      	adds	r7, #88	@ 0x58
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088b8:	e049      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c0:	d045      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c2:	f7fa fa1f 	bl	8002d04 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d302      	bcc.n	80088d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e048      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0304 	and.w	r3, r3, #4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d031      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f003 0308 	and.w	r3, r3, #8
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	d110      	bne.n	800891a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2208      	movs	r2, #8
 80088fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f8ff 	bl	8008b04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2208      	movs	r2, #8
 800890a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e029      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008928:	d111      	bne.n	800894e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 f8e5 	bl	8008b04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2220      	movs	r2, #32
 800893e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e00f      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4013      	ands	r3, r2
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	429a      	cmp	r2, r3
 800895c:	bf0c      	ite	eq
 800895e:	2301      	moveq	r3, #1
 8008960:	2300      	movne	r3, #0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	429a      	cmp	r2, r3
 800896a:	d0a6      	beq.n	80088ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008978:	b480      	push	{r7}
 800897a:	b097      	sub	sp, #92	@ 0x5c
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	88fa      	ldrh	r2, [r7, #6]
 8008998:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089aa:	d10e      	bne.n	80089ca <UART_Start_Receive_IT+0x52>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <UART_Start_Receive_IT+0x48>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80089ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089be:	e02d      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	22ff      	movs	r2, #255	@ 0xff
 80089c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089c8:	e028      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10d      	bne.n	80089ee <UART_Start_Receive_IT+0x76>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d104      	bne.n	80089e4 <UART_Start_Receive_IT+0x6c>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	22ff      	movs	r2, #255	@ 0xff
 80089de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089e2:	e01b      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	227f      	movs	r2, #127	@ 0x7f
 80089e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80089ec:	e016      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089f6:	d10d      	bne.n	8008a14 <UART_Start_Receive_IT+0x9c>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d104      	bne.n	8008a0a <UART_Start_Receive_IT+0x92>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	227f      	movs	r2, #127	@ 0x7f
 8008a04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008a08:	e008      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	223f      	movs	r2, #63	@ 0x3f
 8008a0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008a12:	e003      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2222      	movs	r2, #34	@ 0x22
 8008a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3308      	adds	r3, #8
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a36:	e853 3f00 	ldrex	r3, [r3]
 8008a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3308      	adds	r3, #8
 8008a4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a4c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008a4e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e5      	bne.n	8008a2c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a68:	d107      	bne.n	8008a7a <UART_Start_Receive_IT+0x102>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4a21      	ldr	r2, [pc, #132]	@ (8008afc <UART_Start_Receive_IT+0x184>)
 8008a76:	669a      	str	r2, [r3, #104]	@ 0x68
 8008a78:	e002      	b.n	8008a80 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4a20      	ldr	r2, [pc, #128]	@ (8008b00 <UART_Start_Receive_IT+0x188>)
 8008a7e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d019      	beq.n	8008abc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a98:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008aac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e6      	bne.n	8008a88 <UART_Start_Receive_IT+0x110>
 8008aba:	e018      	b.n	8008aee <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f043 0320 	orr.w	r3, r3, #32
 8008ad0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ada:	623b      	str	r3, [r7, #32]
 8008adc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	69f9      	ldr	r1, [r7, #28]
 8008ae0:	6a3a      	ldr	r2, [r7, #32]
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e6      	bne.n	8008abc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	375c      	adds	r7, #92	@ 0x5c
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	08008e09 	.word	0x08008e09
 8008b00:	08008c4d 	.word	0x08008c4d

08008b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b095      	sub	sp, #84	@ 0x54
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b14:	e853 3f00 	ldrex	r3, [r3]
 8008b18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e6      	bne.n	8008b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	f023 0301 	bic.w	r3, r3, #1
 8008b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e5      	bne.n	8008b3e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d118      	bne.n	8008bac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f023 0310 	bic.w	r3, r3, #16
 8008b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b98:	61bb      	str	r3, [r7, #24]
 8008b9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6979      	ldr	r1, [r7, #20]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e6      	bne.n	8008b7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008bc0:	bf00      	nop
 8008bc2:	3754      	adds	r7, #84	@ 0x54
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f7ff fa44 	bl	8008078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bf0:	bf00      	nop
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	61bb      	str	r3, [r7, #24]
 8008c20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c22:	6979      	ldr	r1, [r7, #20]
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	e841 2300 	strex	r3, r2, [r1]
 8008c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1e6      	bne.n	8008c00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2220      	movs	r2, #32
 8008c36:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff fa10 	bl	8008064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c44:	bf00      	nop
 8008c46:	3720      	adds	r7, #32
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b09c      	sub	sp, #112	@ 0x70
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c64:	2b22      	cmp	r3, #34	@ 0x22
 8008c66:	f040 80be 	bne.w	8008de6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008c70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c78:	b2d9      	uxtb	r1, r3
 8008c7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c84:	400a      	ands	r2, r1
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f040 80a3 	bne.w	8008dfa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cda:	e841 2300 	strex	r3, r2, [r1]
 8008cde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1e6      	bne.n	8008cb4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3308      	adds	r3, #8
 8008cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	f023 0301 	bic.w	r3, r3, #1
 8008cfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3308      	adds	r3, #8
 8008d04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d06:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e5      	bne.n	8008ce6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a34      	ldr	r2, [pc, #208]	@ (8008e04 <UART_RxISR_8BIT+0x1b8>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d01f      	beq.n	8008d78 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d018      	beq.n	8008d78 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4e:	e853 3f00 	ldrex	r3, [r3]
 8008d52:	623b      	str	r3, [r7, #32]
   return(result);
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	461a      	mov	r2, r3
 8008d62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d6c:	e841 2300 	strex	r3, r2, [r1]
 8008d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1e6      	bne.n	8008d46 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d12e      	bne.n	8008dde <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0310 	bic.w	r3, r3, #16
 8008d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	69b9      	ldr	r1, [r7, #24]
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	617b      	str	r3, [r7, #20]
   return(result);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e6      	bne.n	8008d86 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	f003 0310 	and.w	r3, r3, #16
 8008dc2:	2b10      	cmp	r3, #16
 8008dc4:	d103      	bne.n	8008dce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2210      	movs	r2, #16
 8008dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff f958 	bl	800808c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ddc:	e00d      	b.n	8008dfa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7f8 fccc 	bl	800177c <HAL_UART_RxCpltCallback>
}
 8008de4:	e009      	b.n	8008dfa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	8b1b      	ldrh	r3, [r3, #24]
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0208 	orr.w	r2, r2, #8
 8008df6:	b292      	uxth	r2, r2
 8008df8:	831a      	strh	r2, [r3, #24]
}
 8008dfa:	bf00      	nop
 8008dfc:	3770      	adds	r7, #112	@ 0x70
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	40008000 	.word	0x40008000

08008e08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b09c      	sub	sp, #112	@ 0x70
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e20:	2b22      	cmp	r3, #34	@ 0x22
 8008e22:	f040 80be 	bne.w	8008fa2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008e2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e34:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008e3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e3e:	4013      	ands	r3, r2
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e4a:	1c9a      	adds	r2, r3, #2
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f040 80a3 	bne.w	8008fb6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e84:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e90:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e6      	bne.n	8008e70 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
 8008eb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3308      	adds	r3, #8
 8008ec0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ec2:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ec8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e5      	bne.n	8008ea2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a34      	ldr	r2, [pc, #208]	@ (8008fc0 <UART_RxISR_16BIT+0x1b8>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d01f      	beq.n	8008f34 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d018      	beq.n	8008f34 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	e853 3f00 	ldrex	r3, [r3]
 8008f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f22:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e6      	bne.n	8008f02 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d12e      	bne.n	8008f9a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f023 0310 	bic.w	r3, r3, #16
 8008f56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f60:	61bb      	str	r3, [r7, #24]
 8008f62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6979      	ldr	r1, [r7, #20]
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e6      	bne.n	8008f42 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	f003 0310 	and.w	r3, r3, #16
 8008f7e:	2b10      	cmp	r3, #16
 8008f80:	d103      	bne.n	8008f8a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2210      	movs	r2, #16
 8008f88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff f87a 	bl	800808c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f98:	e00d      	b.n	8008fb6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7f8 fbee 	bl	800177c <HAL_UART_RxCpltCallback>
}
 8008fa0:	e009      	b.n	8008fb6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	8b1b      	ldrh	r3, [r3, #24]
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0208 	orr.w	r2, r2, #8
 8008fb2:	b292      	uxth	r2, r2
 8008fb4:	831a      	strh	r2, [r3, #24]
}
 8008fb6:	bf00      	nop
 8008fb8:	3770      	adds	r7, #112	@ 0x70
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	40008000 	.word	0x40008000

08008fc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <__cvt>:
 8008fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	ec57 6b10 	vmov	r6, r7, d0
 8008fe0:	2f00      	cmp	r7, #0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	463b      	mov	r3, r7
 8008fe8:	bfbb      	ittet	lt
 8008fea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008fee:	461f      	movlt	r7, r3
 8008ff0:	2300      	movge	r3, #0
 8008ff2:	232d      	movlt	r3, #45	@ 0x2d
 8008ff4:	700b      	strb	r3, [r1, #0]
 8008ff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ff8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008ffc:	4691      	mov	r9, r2
 8008ffe:	f023 0820 	bic.w	r8, r3, #32
 8009002:	bfbc      	itt	lt
 8009004:	4632      	movlt	r2, r6
 8009006:	4616      	movlt	r6, r2
 8009008:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800900c:	d005      	beq.n	800901a <__cvt+0x42>
 800900e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009012:	d100      	bne.n	8009016 <__cvt+0x3e>
 8009014:	3401      	adds	r4, #1
 8009016:	2102      	movs	r1, #2
 8009018:	e000      	b.n	800901c <__cvt+0x44>
 800901a:	2103      	movs	r1, #3
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9301      	str	r3, [sp, #4]
 8009020:	ab02      	add	r3, sp, #8
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	ec47 6b10 	vmov	d0, r6, r7
 8009028:	4653      	mov	r3, sl
 800902a:	4622      	mov	r2, r4
 800902c:	f001 f874 	bl	800a118 <_dtoa_r>
 8009030:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009034:	4605      	mov	r5, r0
 8009036:	d119      	bne.n	800906c <__cvt+0x94>
 8009038:	f019 0f01 	tst.w	r9, #1
 800903c:	d00e      	beq.n	800905c <__cvt+0x84>
 800903e:	eb00 0904 	add.w	r9, r0, r4
 8009042:	2200      	movs	r2, #0
 8009044:	2300      	movs	r3, #0
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	f7f7 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800904e:	b108      	cbz	r0, 8009054 <__cvt+0x7c>
 8009050:	f8cd 900c 	str.w	r9, [sp, #12]
 8009054:	2230      	movs	r2, #48	@ 0x30
 8009056:	9b03      	ldr	r3, [sp, #12]
 8009058:	454b      	cmp	r3, r9
 800905a:	d31e      	bcc.n	800909a <__cvt+0xc2>
 800905c:	9b03      	ldr	r3, [sp, #12]
 800905e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009060:	1b5b      	subs	r3, r3, r5
 8009062:	4628      	mov	r0, r5
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	b004      	add	sp, #16
 8009068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009070:	eb00 0904 	add.w	r9, r0, r4
 8009074:	d1e5      	bne.n	8009042 <__cvt+0x6a>
 8009076:	7803      	ldrb	r3, [r0, #0]
 8009078:	2b30      	cmp	r3, #48	@ 0x30
 800907a:	d10a      	bne.n	8009092 <__cvt+0xba>
 800907c:	2200      	movs	r2, #0
 800907e:	2300      	movs	r3, #0
 8009080:	4630      	mov	r0, r6
 8009082:	4639      	mov	r1, r7
 8009084:	f7f7 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 8009088:	b918      	cbnz	r0, 8009092 <__cvt+0xba>
 800908a:	f1c4 0401 	rsb	r4, r4, #1
 800908e:	f8ca 4000 	str.w	r4, [sl]
 8009092:	f8da 3000 	ldr.w	r3, [sl]
 8009096:	4499      	add	r9, r3
 8009098:	e7d3      	b.n	8009042 <__cvt+0x6a>
 800909a:	1c59      	adds	r1, r3, #1
 800909c:	9103      	str	r1, [sp, #12]
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	e7d9      	b.n	8009056 <__cvt+0x7e>

080090a2 <__exponent>:
 80090a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090a4:	2900      	cmp	r1, #0
 80090a6:	bfba      	itte	lt
 80090a8:	4249      	neglt	r1, r1
 80090aa:	232d      	movlt	r3, #45	@ 0x2d
 80090ac:	232b      	movge	r3, #43	@ 0x2b
 80090ae:	2909      	cmp	r1, #9
 80090b0:	7002      	strb	r2, [r0, #0]
 80090b2:	7043      	strb	r3, [r0, #1]
 80090b4:	dd29      	ble.n	800910a <__exponent+0x68>
 80090b6:	f10d 0307 	add.w	r3, sp, #7
 80090ba:	461d      	mov	r5, r3
 80090bc:	270a      	movs	r7, #10
 80090be:	461a      	mov	r2, r3
 80090c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80090c4:	fb07 1416 	mls	r4, r7, r6, r1
 80090c8:	3430      	adds	r4, #48	@ 0x30
 80090ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80090ce:	460c      	mov	r4, r1
 80090d0:	2c63      	cmp	r4, #99	@ 0x63
 80090d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80090d6:	4631      	mov	r1, r6
 80090d8:	dcf1      	bgt.n	80090be <__exponent+0x1c>
 80090da:	3130      	adds	r1, #48	@ 0x30
 80090dc:	1e94      	subs	r4, r2, #2
 80090de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80090e2:	1c41      	adds	r1, r0, #1
 80090e4:	4623      	mov	r3, r4
 80090e6:	42ab      	cmp	r3, r5
 80090e8:	d30a      	bcc.n	8009100 <__exponent+0x5e>
 80090ea:	f10d 0309 	add.w	r3, sp, #9
 80090ee:	1a9b      	subs	r3, r3, r2
 80090f0:	42ac      	cmp	r4, r5
 80090f2:	bf88      	it	hi
 80090f4:	2300      	movhi	r3, #0
 80090f6:	3302      	adds	r3, #2
 80090f8:	4403      	add	r3, r0
 80090fa:	1a18      	subs	r0, r3, r0
 80090fc:	b003      	add	sp, #12
 80090fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009100:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009104:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009108:	e7ed      	b.n	80090e6 <__exponent+0x44>
 800910a:	2330      	movs	r3, #48	@ 0x30
 800910c:	3130      	adds	r1, #48	@ 0x30
 800910e:	7083      	strb	r3, [r0, #2]
 8009110:	70c1      	strb	r1, [r0, #3]
 8009112:	1d03      	adds	r3, r0, #4
 8009114:	e7f1      	b.n	80090fa <__exponent+0x58>
	...

08009118 <_printf_float>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	b08d      	sub	sp, #52	@ 0x34
 800911e:	460c      	mov	r4, r1
 8009120:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009124:	4616      	mov	r6, r2
 8009126:	461f      	mov	r7, r3
 8009128:	4605      	mov	r5, r0
 800912a:	f000 feef 	bl	8009f0c <_localeconv_r>
 800912e:	6803      	ldr	r3, [r0, #0]
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	4618      	mov	r0, r3
 8009134:	f7f7 f89c 	bl	8000270 <strlen>
 8009138:	2300      	movs	r3, #0
 800913a:	930a      	str	r3, [sp, #40]	@ 0x28
 800913c:	f8d8 3000 	ldr.w	r3, [r8]
 8009140:	9005      	str	r0, [sp, #20]
 8009142:	3307      	adds	r3, #7
 8009144:	f023 0307 	bic.w	r3, r3, #7
 8009148:	f103 0208 	add.w	r2, r3, #8
 800914c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009150:	f8d4 b000 	ldr.w	fp, [r4]
 8009154:	f8c8 2000 	str.w	r2, [r8]
 8009158:	e9d3 8900 	ldrd	r8, r9, [r3]
 800915c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009160:	9307      	str	r3, [sp, #28]
 8009162:	f8cd 8018 	str.w	r8, [sp, #24]
 8009166:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800916a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800916e:	4b9c      	ldr	r3, [pc, #624]	@ (80093e0 <_printf_float+0x2c8>)
 8009170:	f04f 32ff 	mov.w	r2, #4294967295
 8009174:	f7f7 fcda 	bl	8000b2c <__aeabi_dcmpun>
 8009178:	bb70      	cbnz	r0, 80091d8 <_printf_float+0xc0>
 800917a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800917e:	4b98      	ldr	r3, [pc, #608]	@ (80093e0 <_printf_float+0x2c8>)
 8009180:	f04f 32ff 	mov.w	r2, #4294967295
 8009184:	f7f7 fcb4 	bl	8000af0 <__aeabi_dcmple>
 8009188:	bb30      	cbnz	r0, 80091d8 <_printf_float+0xc0>
 800918a:	2200      	movs	r2, #0
 800918c:	2300      	movs	r3, #0
 800918e:	4640      	mov	r0, r8
 8009190:	4649      	mov	r1, r9
 8009192:	f7f7 fca3 	bl	8000adc <__aeabi_dcmplt>
 8009196:	b110      	cbz	r0, 800919e <_printf_float+0x86>
 8009198:	232d      	movs	r3, #45	@ 0x2d
 800919a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800919e:	4a91      	ldr	r2, [pc, #580]	@ (80093e4 <_printf_float+0x2cc>)
 80091a0:	4b91      	ldr	r3, [pc, #580]	@ (80093e8 <_printf_float+0x2d0>)
 80091a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80091a6:	bf94      	ite	ls
 80091a8:	4690      	movls	r8, r2
 80091aa:	4698      	movhi	r8, r3
 80091ac:	2303      	movs	r3, #3
 80091ae:	6123      	str	r3, [r4, #16]
 80091b0:	f02b 0304 	bic.w	r3, fp, #4
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	f04f 0900 	mov.w	r9, #0
 80091ba:	9700      	str	r7, [sp, #0]
 80091bc:	4633      	mov	r3, r6
 80091be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80091c0:	4621      	mov	r1, r4
 80091c2:	4628      	mov	r0, r5
 80091c4:	f000 f9d2 	bl	800956c <_printf_common>
 80091c8:	3001      	adds	r0, #1
 80091ca:	f040 808d 	bne.w	80092e8 <_printf_float+0x1d0>
 80091ce:	f04f 30ff 	mov.w	r0, #4294967295
 80091d2:	b00d      	add	sp, #52	@ 0x34
 80091d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d8:	4642      	mov	r2, r8
 80091da:	464b      	mov	r3, r9
 80091dc:	4640      	mov	r0, r8
 80091de:	4649      	mov	r1, r9
 80091e0:	f7f7 fca4 	bl	8000b2c <__aeabi_dcmpun>
 80091e4:	b140      	cbz	r0, 80091f8 <_printf_float+0xe0>
 80091e6:	464b      	mov	r3, r9
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfbc      	itt	lt
 80091ec:	232d      	movlt	r3, #45	@ 0x2d
 80091ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80091f2:	4a7e      	ldr	r2, [pc, #504]	@ (80093ec <_printf_float+0x2d4>)
 80091f4:	4b7e      	ldr	r3, [pc, #504]	@ (80093f0 <_printf_float+0x2d8>)
 80091f6:	e7d4      	b.n	80091a2 <_printf_float+0x8a>
 80091f8:	6863      	ldr	r3, [r4, #4]
 80091fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80091fe:	9206      	str	r2, [sp, #24]
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	d13b      	bne.n	800927c <_printf_float+0x164>
 8009204:	2306      	movs	r3, #6
 8009206:	6063      	str	r3, [r4, #4]
 8009208:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800920c:	2300      	movs	r3, #0
 800920e:	6022      	str	r2, [r4, #0]
 8009210:	9303      	str	r3, [sp, #12]
 8009212:	ab0a      	add	r3, sp, #40	@ 0x28
 8009214:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009218:	ab09      	add	r3, sp, #36	@ 0x24
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	6861      	ldr	r1, [r4, #4]
 800921e:	ec49 8b10 	vmov	d0, r8, r9
 8009222:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009226:	4628      	mov	r0, r5
 8009228:	f7ff fed6 	bl	8008fd8 <__cvt>
 800922c:	9b06      	ldr	r3, [sp, #24]
 800922e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009230:	2b47      	cmp	r3, #71	@ 0x47
 8009232:	4680      	mov	r8, r0
 8009234:	d129      	bne.n	800928a <_printf_float+0x172>
 8009236:	1cc8      	adds	r0, r1, #3
 8009238:	db02      	blt.n	8009240 <_printf_float+0x128>
 800923a:	6863      	ldr	r3, [r4, #4]
 800923c:	4299      	cmp	r1, r3
 800923e:	dd41      	ble.n	80092c4 <_printf_float+0x1ac>
 8009240:	f1aa 0a02 	sub.w	sl, sl, #2
 8009244:	fa5f fa8a 	uxtb.w	sl, sl
 8009248:	3901      	subs	r1, #1
 800924a:	4652      	mov	r2, sl
 800924c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009250:	9109      	str	r1, [sp, #36]	@ 0x24
 8009252:	f7ff ff26 	bl	80090a2 <__exponent>
 8009256:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009258:	1813      	adds	r3, r2, r0
 800925a:	2a01      	cmp	r2, #1
 800925c:	4681      	mov	r9, r0
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	dc02      	bgt.n	8009268 <_printf_float+0x150>
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	07d2      	lsls	r2, r2, #31
 8009266:	d501      	bpl.n	800926c <_printf_float+0x154>
 8009268:	3301      	adds	r3, #1
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0a2      	beq.n	80091ba <_printf_float+0xa2>
 8009274:	232d      	movs	r3, #45	@ 0x2d
 8009276:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800927a:	e79e      	b.n	80091ba <_printf_float+0xa2>
 800927c:	9a06      	ldr	r2, [sp, #24]
 800927e:	2a47      	cmp	r2, #71	@ 0x47
 8009280:	d1c2      	bne.n	8009208 <_printf_float+0xf0>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1c0      	bne.n	8009208 <_printf_float+0xf0>
 8009286:	2301      	movs	r3, #1
 8009288:	e7bd      	b.n	8009206 <_printf_float+0xee>
 800928a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800928e:	d9db      	bls.n	8009248 <_printf_float+0x130>
 8009290:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009294:	d118      	bne.n	80092c8 <_printf_float+0x1b0>
 8009296:	2900      	cmp	r1, #0
 8009298:	6863      	ldr	r3, [r4, #4]
 800929a:	dd0b      	ble.n	80092b4 <_printf_float+0x19c>
 800929c:	6121      	str	r1, [r4, #16]
 800929e:	b913      	cbnz	r3, 80092a6 <_printf_float+0x18e>
 80092a0:	6822      	ldr	r2, [r4, #0]
 80092a2:	07d0      	lsls	r0, r2, #31
 80092a4:	d502      	bpl.n	80092ac <_printf_float+0x194>
 80092a6:	3301      	adds	r3, #1
 80092a8:	440b      	add	r3, r1
 80092aa:	6123      	str	r3, [r4, #16]
 80092ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80092ae:	f04f 0900 	mov.w	r9, #0
 80092b2:	e7db      	b.n	800926c <_printf_float+0x154>
 80092b4:	b913      	cbnz	r3, 80092bc <_printf_float+0x1a4>
 80092b6:	6822      	ldr	r2, [r4, #0]
 80092b8:	07d2      	lsls	r2, r2, #31
 80092ba:	d501      	bpl.n	80092c0 <_printf_float+0x1a8>
 80092bc:	3302      	adds	r3, #2
 80092be:	e7f4      	b.n	80092aa <_printf_float+0x192>
 80092c0:	2301      	movs	r3, #1
 80092c2:	e7f2      	b.n	80092aa <_printf_float+0x192>
 80092c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80092c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ca:	4299      	cmp	r1, r3
 80092cc:	db05      	blt.n	80092da <_printf_float+0x1c2>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	6121      	str	r1, [r4, #16]
 80092d2:	07d8      	lsls	r0, r3, #31
 80092d4:	d5ea      	bpl.n	80092ac <_printf_float+0x194>
 80092d6:	1c4b      	adds	r3, r1, #1
 80092d8:	e7e7      	b.n	80092aa <_printf_float+0x192>
 80092da:	2900      	cmp	r1, #0
 80092dc:	bfd4      	ite	le
 80092de:	f1c1 0202 	rsble	r2, r1, #2
 80092e2:	2201      	movgt	r2, #1
 80092e4:	4413      	add	r3, r2
 80092e6:	e7e0      	b.n	80092aa <_printf_float+0x192>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	055a      	lsls	r2, r3, #21
 80092ec:	d407      	bmi.n	80092fe <_printf_float+0x1e6>
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	4642      	mov	r2, r8
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b8      	blx	r7
 80092f8:	3001      	adds	r0, #1
 80092fa:	d12b      	bne.n	8009354 <_printf_float+0x23c>
 80092fc:	e767      	b.n	80091ce <_printf_float+0xb6>
 80092fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009302:	f240 80dd 	bls.w	80094c0 <_printf_float+0x3a8>
 8009306:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800930a:	2200      	movs	r2, #0
 800930c:	2300      	movs	r3, #0
 800930e:	f7f7 fbdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009312:	2800      	cmp	r0, #0
 8009314:	d033      	beq.n	800937e <_printf_float+0x266>
 8009316:	4a37      	ldr	r2, [pc, #220]	@ (80093f4 <_printf_float+0x2dc>)
 8009318:	2301      	movs	r3, #1
 800931a:	4631      	mov	r1, r6
 800931c:	4628      	mov	r0, r5
 800931e:	47b8      	blx	r7
 8009320:	3001      	adds	r0, #1
 8009322:	f43f af54 	beq.w	80091ce <_printf_float+0xb6>
 8009326:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800932a:	4543      	cmp	r3, r8
 800932c:	db02      	blt.n	8009334 <_printf_float+0x21c>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	07d8      	lsls	r0, r3, #31
 8009332:	d50f      	bpl.n	8009354 <_printf_float+0x23c>
 8009334:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009338:	4631      	mov	r1, r6
 800933a:	4628      	mov	r0, r5
 800933c:	47b8      	blx	r7
 800933e:	3001      	adds	r0, #1
 8009340:	f43f af45 	beq.w	80091ce <_printf_float+0xb6>
 8009344:	f04f 0900 	mov.w	r9, #0
 8009348:	f108 38ff 	add.w	r8, r8, #4294967295
 800934c:	f104 0a1a 	add.w	sl, r4, #26
 8009350:	45c8      	cmp	r8, r9
 8009352:	dc09      	bgt.n	8009368 <_printf_float+0x250>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	079b      	lsls	r3, r3, #30
 8009358:	f100 8103 	bmi.w	8009562 <_printf_float+0x44a>
 800935c:	68e0      	ldr	r0, [r4, #12]
 800935e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009360:	4298      	cmp	r0, r3
 8009362:	bfb8      	it	lt
 8009364:	4618      	movlt	r0, r3
 8009366:	e734      	b.n	80091d2 <_printf_float+0xba>
 8009368:	2301      	movs	r3, #1
 800936a:	4652      	mov	r2, sl
 800936c:	4631      	mov	r1, r6
 800936e:	4628      	mov	r0, r5
 8009370:	47b8      	blx	r7
 8009372:	3001      	adds	r0, #1
 8009374:	f43f af2b 	beq.w	80091ce <_printf_float+0xb6>
 8009378:	f109 0901 	add.w	r9, r9, #1
 800937c:	e7e8      	b.n	8009350 <_printf_float+0x238>
 800937e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009380:	2b00      	cmp	r3, #0
 8009382:	dc39      	bgt.n	80093f8 <_printf_float+0x2e0>
 8009384:	4a1b      	ldr	r2, [pc, #108]	@ (80093f4 <_printf_float+0x2dc>)
 8009386:	2301      	movs	r3, #1
 8009388:	4631      	mov	r1, r6
 800938a:	4628      	mov	r0, r5
 800938c:	47b8      	blx	r7
 800938e:	3001      	adds	r0, #1
 8009390:	f43f af1d 	beq.w	80091ce <_printf_float+0xb6>
 8009394:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009398:	ea59 0303 	orrs.w	r3, r9, r3
 800939c:	d102      	bne.n	80093a4 <_printf_float+0x28c>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	07d9      	lsls	r1, r3, #31
 80093a2:	d5d7      	bpl.n	8009354 <_printf_float+0x23c>
 80093a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093a8:	4631      	mov	r1, r6
 80093aa:	4628      	mov	r0, r5
 80093ac:	47b8      	blx	r7
 80093ae:	3001      	adds	r0, #1
 80093b0:	f43f af0d 	beq.w	80091ce <_printf_float+0xb6>
 80093b4:	f04f 0a00 	mov.w	sl, #0
 80093b8:	f104 0b1a 	add.w	fp, r4, #26
 80093bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093be:	425b      	negs	r3, r3
 80093c0:	4553      	cmp	r3, sl
 80093c2:	dc01      	bgt.n	80093c8 <_printf_float+0x2b0>
 80093c4:	464b      	mov	r3, r9
 80093c6:	e793      	b.n	80092f0 <_printf_float+0x1d8>
 80093c8:	2301      	movs	r3, #1
 80093ca:	465a      	mov	r2, fp
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	f43f aefb 	beq.w	80091ce <_printf_float+0xb6>
 80093d8:	f10a 0a01 	add.w	sl, sl, #1
 80093dc:	e7ee      	b.n	80093bc <_printf_float+0x2a4>
 80093de:	bf00      	nop
 80093e0:	7fefffff 	.word	0x7fefffff
 80093e4:	0800d708 	.word	0x0800d708
 80093e8:	0800d70c 	.word	0x0800d70c
 80093ec:	0800d710 	.word	0x0800d710
 80093f0:	0800d714 	.word	0x0800d714
 80093f4:	0800d718 	.word	0x0800d718
 80093f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093fe:	4553      	cmp	r3, sl
 8009400:	bfa8      	it	ge
 8009402:	4653      	movge	r3, sl
 8009404:	2b00      	cmp	r3, #0
 8009406:	4699      	mov	r9, r3
 8009408:	dc36      	bgt.n	8009478 <_printf_float+0x360>
 800940a:	f04f 0b00 	mov.w	fp, #0
 800940e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009412:	f104 021a 	add.w	r2, r4, #26
 8009416:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009418:	9306      	str	r3, [sp, #24]
 800941a:	eba3 0309 	sub.w	r3, r3, r9
 800941e:	455b      	cmp	r3, fp
 8009420:	dc31      	bgt.n	8009486 <_printf_float+0x36e>
 8009422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009424:	459a      	cmp	sl, r3
 8009426:	dc3a      	bgt.n	800949e <_printf_float+0x386>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	07da      	lsls	r2, r3, #31
 800942c:	d437      	bmi.n	800949e <_printf_float+0x386>
 800942e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009430:	ebaa 0903 	sub.w	r9, sl, r3
 8009434:	9b06      	ldr	r3, [sp, #24]
 8009436:	ebaa 0303 	sub.w	r3, sl, r3
 800943a:	4599      	cmp	r9, r3
 800943c:	bfa8      	it	ge
 800943e:	4699      	movge	r9, r3
 8009440:	f1b9 0f00 	cmp.w	r9, #0
 8009444:	dc33      	bgt.n	80094ae <_printf_float+0x396>
 8009446:	f04f 0800 	mov.w	r8, #0
 800944a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800944e:	f104 0b1a 	add.w	fp, r4, #26
 8009452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009454:	ebaa 0303 	sub.w	r3, sl, r3
 8009458:	eba3 0309 	sub.w	r3, r3, r9
 800945c:	4543      	cmp	r3, r8
 800945e:	f77f af79 	ble.w	8009354 <_printf_float+0x23c>
 8009462:	2301      	movs	r3, #1
 8009464:	465a      	mov	r2, fp
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	47b8      	blx	r7
 800946c:	3001      	adds	r0, #1
 800946e:	f43f aeae 	beq.w	80091ce <_printf_float+0xb6>
 8009472:	f108 0801 	add.w	r8, r8, #1
 8009476:	e7ec      	b.n	8009452 <_printf_float+0x33a>
 8009478:	4642      	mov	r2, r8
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	d1c2      	bne.n	800940a <_printf_float+0x2f2>
 8009484:	e6a3      	b.n	80091ce <_printf_float+0xb6>
 8009486:	2301      	movs	r3, #1
 8009488:	4631      	mov	r1, r6
 800948a:	4628      	mov	r0, r5
 800948c:	9206      	str	r2, [sp, #24]
 800948e:	47b8      	blx	r7
 8009490:	3001      	adds	r0, #1
 8009492:	f43f ae9c 	beq.w	80091ce <_printf_float+0xb6>
 8009496:	9a06      	ldr	r2, [sp, #24]
 8009498:	f10b 0b01 	add.w	fp, fp, #1
 800949c:	e7bb      	b.n	8009416 <_printf_float+0x2fe>
 800949e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094a2:	4631      	mov	r1, r6
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b8      	blx	r7
 80094a8:	3001      	adds	r0, #1
 80094aa:	d1c0      	bne.n	800942e <_printf_float+0x316>
 80094ac:	e68f      	b.n	80091ce <_printf_float+0xb6>
 80094ae:	9a06      	ldr	r2, [sp, #24]
 80094b0:	464b      	mov	r3, r9
 80094b2:	4442      	add	r2, r8
 80094b4:	4631      	mov	r1, r6
 80094b6:	4628      	mov	r0, r5
 80094b8:	47b8      	blx	r7
 80094ba:	3001      	adds	r0, #1
 80094bc:	d1c3      	bne.n	8009446 <_printf_float+0x32e>
 80094be:	e686      	b.n	80091ce <_printf_float+0xb6>
 80094c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80094c4:	f1ba 0f01 	cmp.w	sl, #1
 80094c8:	dc01      	bgt.n	80094ce <_printf_float+0x3b6>
 80094ca:	07db      	lsls	r3, r3, #31
 80094cc:	d536      	bpl.n	800953c <_printf_float+0x424>
 80094ce:	2301      	movs	r3, #1
 80094d0:	4642      	mov	r2, r8
 80094d2:	4631      	mov	r1, r6
 80094d4:	4628      	mov	r0, r5
 80094d6:	47b8      	blx	r7
 80094d8:	3001      	adds	r0, #1
 80094da:	f43f ae78 	beq.w	80091ce <_printf_float+0xb6>
 80094de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094e2:	4631      	mov	r1, r6
 80094e4:	4628      	mov	r0, r5
 80094e6:	47b8      	blx	r7
 80094e8:	3001      	adds	r0, #1
 80094ea:	f43f ae70 	beq.w	80091ce <_printf_float+0xb6>
 80094ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094f2:	2200      	movs	r2, #0
 80094f4:	2300      	movs	r3, #0
 80094f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094fa:	f7f7 fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 80094fe:	b9c0      	cbnz	r0, 8009532 <_printf_float+0x41a>
 8009500:	4653      	mov	r3, sl
 8009502:	f108 0201 	add.w	r2, r8, #1
 8009506:	4631      	mov	r1, r6
 8009508:	4628      	mov	r0, r5
 800950a:	47b8      	blx	r7
 800950c:	3001      	adds	r0, #1
 800950e:	d10c      	bne.n	800952a <_printf_float+0x412>
 8009510:	e65d      	b.n	80091ce <_printf_float+0xb6>
 8009512:	2301      	movs	r3, #1
 8009514:	465a      	mov	r2, fp
 8009516:	4631      	mov	r1, r6
 8009518:	4628      	mov	r0, r5
 800951a:	47b8      	blx	r7
 800951c:	3001      	adds	r0, #1
 800951e:	f43f ae56 	beq.w	80091ce <_printf_float+0xb6>
 8009522:	f108 0801 	add.w	r8, r8, #1
 8009526:	45d0      	cmp	r8, sl
 8009528:	dbf3      	blt.n	8009512 <_printf_float+0x3fa>
 800952a:	464b      	mov	r3, r9
 800952c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009530:	e6df      	b.n	80092f2 <_printf_float+0x1da>
 8009532:	f04f 0800 	mov.w	r8, #0
 8009536:	f104 0b1a 	add.w	fp, r4, #26
 800953a:	e7f4      	b.n	8009526 <_printf_float+0x40e>
 800953c:	2301      	movs	r3, #1
 800953e:	4642      	mov	r2, r8
 8009540:	e7e1      	b.n	8009506 <_printf_float+0x3ee>
 8009542:	2301      	movs	r3, #1
 8009544:	464a      	mov	r2, r9
 8009546:	4631      	mov	r1, r6
 8009548:	4628      	mov	r0, r5
 800954a:	47b8      	blx	r7
 800954c:	3001      	adds	r0, #1
 800954e:	f43f ae3e 	beq.w	80091ce <_printf_float+0xb6>
 8009552:	f108 0801 	add.w	r8, r8, #1
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800955a:	1a5b      	subs	r3, r3, r1
 800955c:	4543      	cmp	r3, r8
 800955e:	dcf0      	bgt.n	8009542 <_printf_float+0x42a>
 8009560:	e6fc      	b.n	800935c <_printf_float+0x244>
 8009562:	f04f 0800 	mov.w	r8, #0
 8009566:	f104 0919 	add.w	r9, r4, #25
 800956a:	e7f4      	b.n	8009556 <_printf_float+0x43e>

0800956c <_printf_common>:
 800956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	4616      	mov	r6, r2
 8009572:	4698      	mov	r8, r3
 8009574:	688a      	ldr	r2, [r1, #8]
 8009576:	690b      	ldr	r3, [r1, #16]
 8009578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800957c:	4293      	cmp	r3, r2
 800957e:	bfb8      	it	lt
 8009580:	4613      	movlt	r3, r2
 8009582:	6033      	str	r3, [r6, #0]
 8009584:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009588:	4607      	mov	r7, r0
 800958a:	460c      	mov	r4, r1
 800958c:	b10a      	cbz	r2, 8009592 <_printf_common+0x26>
 800958e:	3301      	adds	r3, #1
 8009590:	6033      	str	r3, [r6, #0]
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	0699      	lsls	r1, r3, #26
 8009596:	bf42      	ittt	mi
 8009598:	6833      	ldrmi	r3, [r6, #0]
 800959a:	3302      	addmi	r3, #2
 800959c:	6033      	strmi	r3, [r6, #0]
 800959e:	6825      	ldr	r5, [r4, #0]
 80095a0:	f015 0506 	ands.w	r5, r5, #6
 80095a4:	d106      	bne.n	80095b4 <_printf_common+0x48>
 80095a6:	f104 0a19 	add.w	sl, r4, #25
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	6832      	ldr	r2, [r6, #0]
 80095ae:	1a9b      	subs	r3, r3, r2
 80095b0:	42ab      	cmp	r3, r5
 80095b2:	dc26      	bgt.n	8009602 <_printf_common+0x96>
 80095b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095b8:	6822      	ldr	r2, [r4, #0]
 80095ba:	3b00      	subs	r3, #0
 80095bc:	bf18      	it	ne
 80095be:	2301      	movne	r3, #1
 80095c0:	0692      	lsls	r2, r2, #26
 80095c2:	d42b      	bmi.n	800961c <_printf_common+0xb0>
 80095c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095c8:	4641      	mov	r1, r8
 80095ca:	4638      	mov	r0, r7
 80095cc:	47c8      	blx	r9
 80095ce:	3001      	adds	r0, #1
 80095d0:	d01e      	beq.n	8009610 <_printf_common+0xa4>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	6922      	ldr	r2, [r4, #16]
 80095d6:	f003 0306 	and.w	r3, r3, #6
 80095da:	2b04      	cmp	r3, #4
 80095dc:	bf02      	ittt	eq
 80095de:	68e5      	ldreq	r5, [r4, #12]
 80095e0:	6833      	ldreq	r3, [r6, #0]
 80095e2:	1aed      	subeq	r5, r5, r3
 80095e4:	68a3      	ldr	r3, [r4, #8]
 80095e6:	bf0c      	ite	eq
 80095e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095ec:	2500      	movne	r5, #0
 80095ee:	4293      	cmp	r3, r2
 80095f0:	bfc4      	itt	gt
 80095f2:	1a9b      	subgt	r3, r3, r2
 80095f4:	18ed      	addgt	r5, r5, r3
 80095f6:	2600      	movs	r6, #0
 80095f8:	341a      	adds	r4, #26
 80095fa:	42b5      	cmp	r5, r6
 80095fc:	d11a      	bne.n	8009634 <_printf_common+0xc8>
 80095fe:	2000      	movs	r0, #0
 8009600:	e008      	b.n	8009614 <_printf_common+0xa8>
 8009602:	2301      	movs	r3, #1
 8009604:	4652      	mov	r2, sl
 8009606:	4641      	mov	r1, r8
 8009608:	4638      	mov	r0, r7
 800960a:	47c8      	blx	r9
 800960c:	3001      	adds	r0, #1
 800960e:	d103      	bne.n	8009618 <_printf_common+0xac>
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009618:	3501      	adds	r5, #1
 800961a:	e7c6      	b.n	80095aa <_printf_common+0x3e>
 800961c:	18e1      	adds	r1, r4, r3
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	2030      	movs	r0, #48	@ 0x30
 8009622:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009626:	4422      	add	r2, r4
 8009628:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800962c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009630:	3302      	adds	r3, #2
 8009632:	e7c7      	b.n	80095c4 <_printf_common+0x58>
 8009634:	2301      	movs	r3, #1
 8009636:	4622      	mov	r2, r4
 8009638:	4641      	mov	r1, r8
 800963a:	4638      	mov	r0, r7
 800963c:	47c8      	blx	r9
 800963e:	3001      	adds	r0, #1
 8009640:	d0e6      	beq.n	8009610 <_printf_common+0xa4>
 8009642:	3601      	adds	r6, #1
 8009644:	e7d9      	b.n	80095fa <_printf_common+0x8e>
	...

08009648 <_printf_i>:
 8009648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800964c:	7e0f      	ldrb	r7, [r1, #24]
 800964e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009650:	2f78      	cmp	r7, #120	@ 0x78
 8009652:	4691      	mov	r9, r2
 8009654:	4680      	mov	r8, r0
 8009656:	460c      	mov	r4, r1
 8009658:	469a      	mov	sl, r3
 800965a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800965e:	d807      	bhi.n	8009670 <_printf_i+0x28>
 8009660:	2f62      	cmp	r7, #98	@ 0x62
 8009662:	d80a      	bhi.n	800967a <_printf_i+0x32>
 8009664:	2f00      	cmp	r7, #0
 8009666:	f000 80d2 	beq.w	800980e <_printf_i+0x1c6>
 800966a:	2f58      	cmp	r7, #88	@ 0x58
 800966c:	f000 80b9 	beq.w	80097e2 <_printf_i+0x19a>
 8009670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009674:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009678:	e03a      	b.n	80096f0 <_printf_i+0xa8>
 800967a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800967e:	2b15      	cmp	r3, #21
 8009680:	d8f6      	bhi.n	8009670 <_printf_i+0x28>
 8009682:	a101      	add	r1, pc, #4	@ (adr r1, 8009688 <_printf_i+0x40>)
 8009684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009688:	080096e1 	.word	0x080096e1
 800968c:	080096f5 	.word	0x080096f5
 8009690:	08009671 	.word	0x08009671
 8009694:	08009671 	.word	0x08009671
 8009698:	08009671 	.word	0x08009671
 800969c:	08009671 	.word	0x08009671
 80096a0:	080096f5 	.word	0x080096f5
 80096a4:	08009671 	.word	0x08009671
 80096a8:	08009671 	.word	0x08009671
 80096ac:	08009671 	.word	0x08009671
 80096b0:	08009671 	.word	0x08009671
 80096b4:	080097f5 	.word	0x080097f5
 80096b8:	0800971f 	.word	0x0800971f
 80096bc:	080097af 	.word	0x080097af
 80096c0:	08009671 	.word	0x08009671
 80096c4:	08009671 	.word	0x08009671
 80096c8:	08009817 	.word	0x08009817
 80096cc:	08009671 	.word	0x08009671
 80096d0:	0800971f 	.word	0x0800971f
 80096d4:	08009671 	.word	0x08009671
 80096d8:	08009671 	.word	0x08009671
 80096dc:	080097b7 	.word	0x080097b7
 80096e0:	6833      	ldr	r3, [r6, #0]
 80096e2:	1d1a      	adds	r2, r3, #4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6032      	str	r2, [r6, #0]
 80096e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096f0:	2301      	movs	r3, #1
 80096f2:	e09d      	b.n	8009830 <_printf_i+0x1e8>
 80096f4:	6833      	ldr	r3, [r6, #0]
 80096f6:	6820      	ldr	r0, [r4, #0]
 80096f8:	1d19      	adds	r1, r3, #4
 80096fa:	6031      	str	r1, [r6, #0]
 80096fc:	0606      	lsls	r6, r0, #24
 80096fe:	d501      	bpl.n	8009704 <_printf_i+0xbc>
 8009700:	681d      	ldr	r5, [r3, #0]
 8009702:	e003      	b.n	800970c <_printf_i+0xc4>
 8009704:	0645      	lsls	r5, r0, #25
 8009706:	d5fb      	bpl.n	8009700 <_printf_i+0xb8>
 8009708:	f9b3 5000 	ldrsh.w	r5, [r3]
 800970c:	2d00      	cmp	r5, #0
 800970e:	da03      	bge.n	8009718 <_printf_i+0xd0>
 8009710:	232d      	movs	r3, #45	@ 0x2d
 8009712:	426d      	negs	r5, r5
 8009714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009718:	4859      	ldr	r0, [pc, #356]	@ (8009880 <_printf_i+0x238>)
 800971a:	230a      	movs	r3, #10
 800971c:	e011      	b.n	8009742 <_printf_i+0xfa>
 800971e:	6821      	ldr	r1, [r4, #0]
 8009720:	6833      	ldr	r3, [r6, #0]
 8009722:	0608      	lsls	r0, r1, #24
 8009724:	f853 5b04 	ldr.w	r5, [r3], #4
 8009728:	d402      	bmi.n	8009730 <_printf_i+0xe8>
 800972a:	0649      	lsls	r1, r1, #25
 800972c:	bf48      	it	mi
 800972e:	b2ad      	uxthmi	r5, r5
 8009730:	2f6f      	cmp	r7, #111	@ 0x6f
 8009732:	4853      	ldr	r0, [pc, #332]	@ (8009880 <_printf_i+0x238>)
 8009734:	6033      	str	r3, [r6, #0]
 8009736:	bf14      	ite	ne
 8009738:	230a      	movne	r3, #10
 800973a:	2308      	moveq	r3, #8
 800973c:	2100      	movs	r1, #0
 800973e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009742:	6866      	ldr	r6, [r4, #4]
 8009744:	60a6      	str	r6, [r4, #8]
 8009746:	2e00      	cmp	r6, #0
 8009748:	bfa2      	ittt	ge
 800974a:	6821      	ldrge	r1, [r4, #0]
 800974c:	f021 0104 	bicge.w	r1, r1, #4
 8009750:	6021      	strge	r1, [r4, #0]
 8009752:	b90d      	cbnz	r5, 8009758 <_printf_i+0x110>
 8009754:	2e00      	cmp	r6, #0
 8009756:	d04b      	beq.n	80097f0 <_printf_i+0x1a8>
 8009758:	4616      	mov	r6, r2
 800975a:	fbb5 f1f3 	udiv	r1, r5, r3
 800975e:	fb03 5711 	mls	r7, r3, r1, r5
 8009762:	5dc7      	ldrb	r7, [r0, r7]
 8009764:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009768:	462f      	mov	r7, r5
 800976a:	42bb      	cmp	r3, r7
 800976c:	460d      	mov	r5, r1
 800976e:	d9f4      	bls.n	800975a <_printf_i+0x112>
 8009770:	2b08      	cmp	r3, #8
 8009772:	d10b      	bne.n	800978c <_printf_i+0x144>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	07df      	lsls	r7, r3, #31
 8009778:	d508      	bpl.n	800978c <_printf_i+0x144>
 800977a:	6923      	ldr	r3, [r4, #16]
 800977c:	6861      	ldr	r1, [r4, #4]
 800977e:	4299      	cmp	r1, r3
 8009780:	bfde      	ittt	le
 8009782:	2330      	movle	r3, #48	@ 0x30
 8009784:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009788:	f106 36ff 	addle.w	r6, r6, #4294967295
 800978c:	1b92      	subs	r2, r2, r6
 800978e:	6122      	str	r2, [r4, #16]
 8009790:	f8cd a000 	str.w	sl, [sp]
 8009794:	464b      	mov	r3, r9
 8009796:	aa03      	add	r2, sp, #12
 8009798:	4621      	mov	r1, r4
 800979a:	4640      	mov	r0, r8
 800979c:	f7ff fee6 	bl	800956c <_printf_common>
 80097a0:	3001      	adds	r0, #1
 80097a2:	d14a      	bne.n	800983a <_printf_i+0x1f2>
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	b004      	add	sp, #16
 80097aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	f043 0320 	orr.w	r3, r3, #32
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	4833      	ldr	r0, [pc, #204]	@ (8009884 <_printf_i+0x23c>)
 80097b8:	2778      	movs	r7, #120	@ 0x78
 80097ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	6831      	ldr	r1, [r6, #0]
 80097c2:	061f      	lsls	r7, r3, #24
 80097c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80097c8:	d402      	bmi.n	80097d0 <_printf_i+0x188>
 80097ca:	065f      	lsls	r7, r3, #25
 80097cc:	bf48      	it	mi
 80097ce:	b2ad      	uxthmi	r5, r5
 80097d0:	6031      	str	r1, [r6, #0]
 80097d2:	07d9      	lsls	r1, r3, #31
 80097d4:	bf44      	itt	mi
 80097d6:	f043 0320 	orrmi.w	r3, r3, #32
 80097da:	6023      	strmi	r3, [r4, #0]
 80097dc:	b11d      	cbz	r5, 80097e6 <_printf_i+0x19e>
 80097de:	2310      	movs	r3, #16
 80097e0:	e7ac      	b.n	800973c <_printf_i+0xf4>
 80097e2:	4827      	ldr	r0, [pc, #156]	@ (8009880 <_printf_i+0x238>)
 80097e4:	e7e9      	b.n	80097ba <_printf_i+0x172>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	f023 0320 	bic.w	r3, r3, #32
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	e7f6      	b.n	80097de <_printf_i+0x196>
 80097f0:	4616      	mov	r6, r2
 80097f2:	e7bd      	b.n	8009770 <_printf_i+0x128>
 80097f4:	6833      	ldr	r3, [r6, #0]
 80097f6:	6825      	ldr	r5, [r4, #0]
 80097f8:	6961      	ldr	r1, [r4, #20]
 80097fa:	1d18      	adds	r0, r3, #4
 80097fc:	6030      	str	r0, [r6, #0]
 80097fe:	062e      	lsls	r6, r5, #24
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	d501      	bpl.n	8009808 <_printf_i+0x1c0>
 8009804:	6019      	str	r1, [r3, #0]
 8009806:	e002      	b.n	800980e <_printf_i+0x1c6>
 8009808:	0668      	lsls	r0, r5, #25
 800980a:	d5fb      	bpl.n	8009804 <_printf_i+0x1bc>
 800980c:	8019      	strh	r1, [r3, #0]
 800980e:	2300      	movs	r3, #0
 8009810:	6123      	str	r3, [r4, #16]
 8009812:	4616      	mov	r6, r2
 8009814:	e7bc      	b.n	8009790 <_printf_i+0x148>
 8009816:	6833      	ldr	r3, [r6, #0]
 8009818:	1d1a      	adds	r2, r3, #4
 800981a:	6032      	str	r2, [r6, #0]
 800981c:	681e      	ldr	r6, [r3, #0]
 800981e:	6862      	ldr	r2, [r4, #4]
 8009820:	2100      	movs	r1, #0
 8009822:	4630      	mov	r0, r6
 8009824:	f7f6 fcd4 	bl	80001d0 <memchr>
 8009828:	b108      	cbz	r0, 800982e <_printf_i+0x1e6>
 800982a:	1b80      	subs	r0, r0, r6
 800982c:	6060      	str	r0, [r4, #4]
 800982e:	6863      	ldr	r3, [r4, #4]
 8009830:	6123      	str	r3, [r4, #16]
 8009832:	2300      	movs	r3, #0
 8009834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009838:	e7aa      	b.n	8009790 <_printf_i+0x148>
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	4632      	mov	r2, r6
 800983e:	4649      	mov	r1, r9
 8009840:	4640      	mov	r0, r8
 8009842:	47d0      	blx	sl
 8009844:	3001      	adds	r0, #1
 8009846:	d0ad      	beq.n	80097a4 <_printf_i+0x15c>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	079b      	lsls	r3, r3, #30
 800984c:	d413      	bmi.n	8009876 <_printf_i+0x22e>
 800984e:	68e0      	ldr	r0, [r4, #12]
 8009850:	9b03      	ldr	r3, [sp, #12]
 8009852:	4298      	cmp	r0, r3
 8009854:	bfb8      	it	lt
 8009856:	4618      	movlt	r0, r3
 8009858:	e7a6      	b.n	80097a8 <_printf_i+0x160>
 800985a:	2301      	movs	r3, #1
 800985c:	4632      	mov	r2, r6
 800985e:	4649      	mov	r1, r9
 8009860:	4640      	mov	r0, r8
 8009862:	47d0      	blx	sl
 8009864:	3001      	adds	r0, #1
 8009866:	d09d      	beq.n	80097a4 <_printf_i+0x15c>
 8009868:	3501      	adds	r5, #1
 800986a:	68e3      	ldr	r3, [r4, #12]
 800986c:	9903      	ldr	r1, [sp, #12]
 800986e:	1a5b      	subs	r3, r3, r1
 8009870:	42ab      	cmp	r3, r5
 8009872:	dcf2      	bgt.n	800985a <_printf_i+0x212>
 8009874:	e7eb      	b.n	800984e <_printf_i+0x206>
 8009876:	2500      	movs	r5, #0
 8009878:	f104 0619 	add.w	r6, r4, #25
 800987c:	e7f5      	b.n	800986a <_printf_i+0x222>
 800987e:	bf00      	nop
 8009880:	0800d71a 	.word	0x0800d71a
 8009884:	0800d72b 	.word	0x0800d72b

08009888 <_scanf_float>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	b087      	sub	sp, #28
 800988e:	4617      	mov	r7, r2
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	688b      	ldr	r3, [r1, #8]
 8009894:	1e5a      	subs	r2, r3, #1
 8009896:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800989a:	bf81      	itttt	hi
 800989c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80098a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80098a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80098a8:	608b      	strhi	r3, [r1, #8]
 80098aa:	680b      	ldr	r3, [r1, #0]
 80098ac:	460a      	mov	r2, r1
 80098ae:	f04f 0500 	mov.w	r5, #0
 80098b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80098b6:	f842 3b1c 	str.w	r3, [r2], #28
 80098ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80098be:	4680      	mov	r8, r0
 80098c0:	460c      	mov	r4, r1
 80098c2:	bf98      	it	ls
 80098c4:	f04f 0b00 	movls.w	fp, #0
 80098c8:	9201      	str	r2, [sp, #4]
 80098ca:	4616      	mov	r6, r2
 80098cc:	46aa      	mov	sl, r5
 80098ce:	46a9      	mov	r9, r5
 80098d0:	9502      	str	r5, [sp, #8]
 80098d2:	68a2      	ldr	r2, [r4, #8]
 80098d4:	b152      	cbz	r2, 80098ec <_scanf_float+0x64>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	2b4e      	cmp	r3, #78	@ 0x4e
 80098dc:	d864      	bhi.n	80099a8 <_scanf_float+0x120>
 80098de:	2b40      	cmp	r3, #64	@ 0x40
 80098e0:	d83c      	bhi.n	800995c <_scanf_float+0xd4>
 80098e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80098e6:	b2c8      	uxtb	r0, r1
 80098e8:	280e      	cmp	r0, #14
 80098ea:	d93a      	bls.n	8009962 <_scanf_float+0xda>
 80098ec:	f1b9 0f00 	cmp.w	r9, #0
 80098f0:	d003      	beq.n	80098fa <_scanf_float+0x72>
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098fe:	f1ba 0f01 	cmp.w	sl, #1
 8009902:	f200 8117 	bhi.w	8009b34 <_scanf_float+0x2ac>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	429e      	cmp	r6, r3
 800990a:	f200 8108 	bhi.w	8009b1e <_scanf_float+0x296>
 800990e:	2001      	movs	r0, #1
 8009910:	b007      	add	sp, #28
 8009912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009916:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800991a:	2a0d      	cmp	r2, #13
 800991c:	d8e6      	bhi.n	80098ec <_scanf_float+0x64>
 800991e:	a101      	add	r1, pc, #4	@ (adr r1, 8009924 <_scanf_float+0x9c>)
 8009920:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009924:	08009a6b 	.word	0x08009a6b
 8009928:	080098ed 	.word	0x080098ed
 800992c:	080098ed 	.word	0x080098ed
 8009930:	080098ed 	.word	0x080098ed
 8009934:	08009acb 	.word	0x08009acb
 8009938:	08009aa3 	.word	0x08009aa3
 800993c:	080098ed 	.word	0x080098ed
 8009940:	080098ed 	.word	0x080098ed
 8009944:	08009a79 	.word	0x08009a79
 8009948:	080098ed 	.word	0x080098ed
 800994c:	080098ed 	.word	0x080098ed
 8009950:	080098ed 	.word	0x080098ed
 8009954:	080098ed 	.word	0x080098ed
 8009958:	08009a31 	.word	0x08009a31
 800995c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009960:	e7db      	b.n	800991a <_scanf_float+0x92>
 8009962:	290e      	cmp	r1, #14
 8009964:	d8c2      	bhi.n	80098ec <_scanf_float+0x64>
 8009966:	a001      	add	r0, pc, #4	@ (adr r0, 800996c <_scanf_float+0xe4>)
 8009968:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800996c:	08009a21 	.word	0x08009a21
 8009970:	080098ed 	.word	0x080098ed
 8009974:	08009a21 	.word	0x08009a21
 8009978:	08009ab7 	.word	0x08009ab7
 800997c:	080098ed 	.word	0x080098ed
 8009980:	080099c9 	.word	0x080099c9
 8009984:	08009a07 	.word	0x08009a07
 8009988:	08009a07 	.word	0x08009a07
 800998c:	08009a07 	.word	0x08009a07
 8009990:	08009a07 	.word	0x08009a07
 8009994:	08009a07 	.word	0x08009a07
 8009998:	08009a07 	.word	0x08009a07
 800999c:	08009a07 	.word	0x08009a07
 80099a0:	08009a07 	.word	0x08009a07
 80099a4:	08009a07 	.word	0x08009a07
 80099a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80099aa:	d809      	bhi.n	80099c0 <_scanf_float+0x138>
 80099ac:	2b60      	cmp	r3, #96	@ 0x60
 80099ae:	d8b2      	bhi.n	8009916 <_scanf_float+0x8e>
 80099b0:	2b54      	cmp	r3, #84	@ 0x54
 80099b2:	d07b      	beq.n	8009aac <_scanf_float+0x224>
 80099b4:	2b59      	cmp	r3, #89	@ 0x59
 80099b6:	d199      	bne.n	80098ec <_scanf_float+0x64>
 80099b8:	2d07      	cmp	r5, #7
 80099ba:	d197      	bne.n	80098ec <_scanf_float+0x64>
 80099bc:	2508      	movs	r5, #8
 80099be:	e02c      	b.n	8009a1a <_scanf_float+0x192>
 80099c0:	2b74      	cmp	r3, #116	@ 0x74
 80099c2:	d073      	beq.n	8009aac <_scanf_float+0x224>
 80099c4:	2b79      	cmp	r3, #121	@ 0x79
 80099c6:	e7f6      	b.n	80099b6 <_scanf_float+0x12e>
 80099c8:	6821      	ldr	r1, [r4, #0]
 80099ca:	05c8      	lsls	r0, r1, #23
 80099cc:	d51b      	bpl.n	8009a06 <_scanf_float+0x17e>
 80099ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80099d2:	6021      	str	r1, [r4, #0]
 80099d4:	f109 0901 	add.w	r9, r9, #1
 80099d8:	f1bb 0f00 	cmp.w	fp, #0
 80099dc:	d003      	beq.n	80099e6 <_scanf_float+0x15e>
 80099de:	3201      	adds	r2, #1
 80099e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099e4:	60a2      	str	r2, [r4, #8]
 80099e6:	68a3      	ldr	r3, [r4, #8]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	60a3      	str	r3, [r4, #8]
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	3301      	adds	r3, #1
 80099f0:	6123      	str	r3, [r4, #16]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	3b01      	subs	r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	607b      	str	r3, [r7, #4]
 80099fa:	f340 8087 	ble.w	8009b0c <_scanf_float+0x284>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	3301      	adds	r3, #1
 8009a02:	603b      	str	r3, [r7, #0]
 8009a04:	e765      	b.n	80098d2 <_scanf_float+0x4a>
 8009a06:	eb1a 0105 	adds.w	r1, sl, r5
 8009a0a:	f47f af6f 	bne.w	80098ec <_scanf_float+0x64>
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009a14:	6022      	str	r2, [r4, #0]
 8009a16:	460d      	mov	r5, r1
 8009a18:	468a      	mov	sl, r1
 8009a1a:	f806 3b01 	strb.w	r3, [r6], #1
 8009a1e:	e7e2      	b.n	80099e6 <_scanf_float+0x15e>
 8009a20:	6822      	ldr	r2, [r4, #0]
 8009a22:	0610      	lsls	r0, r2, #24
 8009a24:	f57f af62 	bpl.w	80098ec <_scanf_float+0x64>
 8009a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a2c:	6022      	str	r2, [r4, #0]
 8009a2e:	e7f4      	b.n	8009a1a <_scanf_float+0x192>
 8009a30:	f1ba 0f00 	cmp.w	sl, #0
 8009a34:	d10e      	bne.n	8009a54 <_scanf_float+0x1cc>
 8009a36:	f1b9 0f00 	cmp.w	r9, #0
 8009a3a:	d10e      	bne.n	8009a5a <_scanf_float+0x1d2>
 8009a3c:	6822      	ldr	r2, [r4, #0]
 8009a3e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a42:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a46:	d108      	bne.n	8009a5a <_scanf_float+0x1d2>
 8009a48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a4c:	6022      	str	r2, [r4, #0]
 8009a4e:	f04f 0a01 	mov.w	sl, #1
 8009a52:	e7e2      	b.n	8009a1a <_scanf_float+0x192>
 8009a54:	f1ba 0f02 	cmp.w	sl, #2
 8009a58:	d055      	beq.n	8009b06 <_scanf_float+0x27e>
 8009a5a:	2d01      	cmp	r5, #1
 8009a5c:	d002      	beq.n	8009a64 <_scanf_float+0x1dc>
 8009a5e:	2d04      	cmp	r5, #4
 8009a60:	f47f af44 	bne.w	80098ec <_scanf_float+0x64>
 8009a64:	3501      	adds	r5, #1
 8009a66:	b2ed      	uxtb	r5, r5
 8009a68:	e7d7      	b.n	8009a1a <_scanf_float+0x192>
 8009a6a:	f1ba 0f01 	cmp.w	sl, #1
 8009a6e:	f47f af3d 	bne.w	80098ec <_scanf_float+0x64>
 8009a72:	f04f 0a02 	mov.w	sl, #2
 8009a76:	e7d0      	b.n	8009a1a <_scanf_float+0x192>
 8009a78:	b97d      	cbnz	r5, 8009a9a <_scanf_float+0x212>
 8009a7a:	f1b9 0f00 	cmp.w	r9, #0
 8009a7e:	f47f af38 	bne.w	80098f2 <_scanf_float+0x6a>
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a88:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a8c:	f040 8108 	bne.w	8009ca0 <_scanf_float+0x418>
 8009a90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a94:	6022      	str	r2, [r4, #0]
 8009a96:	2501      	movs	r5, #1
 8009a98:	e7bf      	b.n	8009a1a <_scanf_float+0x192>
 8009a9a:	2d03      	cmp	r5, #3
 8009a9c:	d0e2      	beq.n	8009a64 <_scanf_float+0x1dc>
 8009a9e:	2d05      	cmp	r5, #5
 8009aa0:	e7de      	b.n	8009a60 <_scanf_float+0x1d8>
 8009aa2:	2d02      	cmp	r5, #2
 8009aa4:	f47f af22 	bne.w	80098ec <_scanf_float+0x64>
 8009aa8:	2503      	movs	r5, #3
 8009aaa:	e7b6      	b.n	8009a1a <_scanf_float+0x192>
 8009aac:	2d06      	cmp	r5, #6
 8009aae:	f47f af1d 	bne.w	80098ec <_scanf_float+0x64>
 8009ab2:	2507      	movs	r5, #7
 8009ab4:	e7b1      	b.n	8009a1a <_scanf_float+0x192>
 8009ab6:	6822      	ldr	r2, [r4, #0]
 8009ab8:	0591      	lsls	r1, r2, #22
 8009aba:	f57f af17 	bpl.w	80098ec <_scanf_float+0x64>
 8009abe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009ac2:	6022      	str	r2, [r4, #0]
 8009ac4:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ac8:	e7a7      	b.n	8009a1a <_scanf_float+0x192>
 8009aca:	6822      	ldr	r2, [r4, #0]
 8009acc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009ad0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009ad4:	d006      	beq.n	8009ae4 <_scanf_float+0x25c>
 8009ad6:	0550      	lsls	r0, r2, #21
 8009ad8:	f57f af08 	bpl.w	80098ec <_scanf_float+0x64>
 8009adc:	f1b9 0f00 	cmp.w	r9, #0
 8009ae0:	f000 80de 	beq.w	8009ca0 <_scanf_float+0x418>
 8009ae4:	0591      	lsls	r1, r2, #22
 8009ae6:	bf58      	it	pl
 8009ae8:	9902      	ldrpl	r1, [sp, #8]
 8009aea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009aee:	bf58      	it	pl
 8009af0:	eba9 0101 	subpl.w	r1, r9, r1
 8009af4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009af8:	bf58      	it	pl
 8009afa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009afe:	6022      	str	r2, [r4, #0]
 8009b00:	f04f 0900 	mov.w	r9, #0
 8009b04:	e789      	b.n	8009a1a <_scanf_float+0x192>
 8009b06:	f04f 0a03 	mov.w	sl, #3
 8009b0a:	e786      	b.n	8009a1a <_scanf_float+0x192>
 8009b0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009b10:	4639      	mov	r1, r7
 8009b12:	4640      	mov	r0, r8
 8009b14:	4798      	blx	r3
 8009b16:	2800      	cmp	r0, #0
 8009b18:	f43f aedb 	beq.w	80098d2 <_scanf_float+0x4a>
 8009b1c:	e6e6      	b.n	80098ec <_scanf_float+0x64>
 8009b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b26:	463a      	mov	r2, r7
 8009b28:	4640      	mov	r0, r8
 8009b2a:	4798      	blx	r3
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	e6e8      	b.n	8009906 <_scanf_float+0x7e>
 8009b34:	1e6b      	subs	r3, r5, #1
 8009b36:	2b06      	cmp	r3, #6
 8009b38:	d824      	bhi.n	8009b84 <_scanf_float+0x2fc>
 8009b3a:	2d02      	cmp	r5, #2
 8009b3c:	d836      	bhi.n	8009bac <_scanf_float+0x324>
 8009b3e:	9b01      	ldr	r3, [sp, #4]
 8009b40:	429e      	cmp	r6, r3
 8009b42:	f67f aee4 	bls.w	800990e <_scanf_float+0x86>
 8009b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b4e:	463a      	mov	r2, r7
 8009b50:	4640      	mov	r0, r8
 8009b52:	4798      	blx	r3
 8009b54:	6923      	ldr	r3, [r4, #16]
 8009b56:	3b01      	subs	r3, #1
 8009b58:	6123      	str	r3, [r4, #16]
 8009b5a:	e7f0      	b.n	8009b3e <_scanf_float+0x2b6>
 8009b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b60:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009b64:	463a      	mov	r2, r7
 8009b66:	4640      	mov	r0, r8
 8009b68:	4798      	blx	r3
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	6123      	str	r3, [r4, #16]
 8009b70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b74:	fa5f fa8a 	uxtb.w	sl, sl
 8009b78:	f1ba 0f02 	cmp.w	sl, #2
 8009b7c:	d1ee      	bne.n	8009b5c <_scanf_float+0x2d4>
 8009b7e:	3d03      	subs	r5, #3
 8009b80:	b2ed      	uxtb	r5, r5
 8009b82:	1b76      	subs	r6, r6, r5
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	05da      	lsls	r2, r3, #23
 8009b88:	d530      	bpl.n	8009bec <_scanf_float+0x364>
 8009b8a:	055b      	lsls	r3, r3, #21
 8009b8c:	d511      	bpl.n	8009bb2 <_scanf_float+0x32a>
 8009b8e:	9b01      	ldr	r3, [sp, #4]
 8009b90:	429e      	cmp	r6, r3
 8009b92:	f67f aebc 	bls.w	800990e <_scanf_float+0x86>
 8009b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b9e:	463a      	mov	r2, r7
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	4798      	blx	r3
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	6123      	str	r3, [r4, #16]
 8009baa:	e7f0      	b.n	8009b8e <_scanf_float+0x306>
 8009bac:	46aa      	mov	sl, r5
 8009bae:	46b3      	mov	fp, r6
 8009bb0:	e7de      	b.n	8009b70 <_scanf_float+0x2e8>
 8009bb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009bb6:	6923      	ldr	r3, [r4, #16]
 8009bb8:	2965      	cmp	r1, #101	@ 0x65
 8009bba:	f103 33ff 	add.w	r3, r3, #4294967295
 8009bbe:	f106 35ff 	add.w	r5, r6, #4294967295
 8009bc2:	6123      	str	r3, [r4, #16]
 8009bc4:	d00c      	beq.n	8009be0 <_scanf_float+0x358>
 8009bc6:	2945      	cmp	r1, #69	@ 0x45
 8009bc8:	d00a      	beq.n	8009be0 <_scanf_float+0x358>
 8009bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bce:	463a      	mov	r2, r7
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	4798      	blx	r3
 8009bd4:	6923      	ldr	r3, [r4, #16]
 8009bd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	1eb5      	subs	r5, r6, #2
 8009bde:	6123      	str	r3, [r4, #16]
 8009be0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009be4:	463a      	mov	r2, r7
 8009be6:	4640      	mov	r0, r8
 8009be8:	4798      	blx	r3
 8009bea:	462e      	mov	r6, r5
 8009bec:	6822      	ldr	r2, [r4, #0]
 8009bee:	f012 0210 	ands.w	r2, r2, #16
 8009bf2:	d001      	beq.n	8009bf8 <_scanf_float+0x370>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e68b      	b.n	8009910 <_scanf_float+0x88>
 8009bf8:	7032      	strb	r2, [r6, #0]
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c04:	d11c      	bne.n	8009c40 <_scanf_float+0x3b8>
 8009c06:	9b02      	ldr	r3, [sp, #8]
 8009c08:	454b      	cmp	r3, r9
 8009c0a:	eba3 0209 	sub.w	r2, r3, r9
 8009c0e:	d123      	bne.n	8009c58 <_scanf_float+0x3d0>
 8009c10:	9901      	ldr	r1, [sp, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	4640      	mov	r0, r8
 8009c16:	f002 fbf7 	bl	800c408 <_strtod_r>
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	6821      	ldr	r1, [r4, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f011 0f02 	tst.w	r1, #2
 8009c24:	ec57 6b10 	vmov	r6, r7, d0
 8009c28:	f103 0204 	add.w	r2, r3, #4
 8009c2c:	d01f      	beq.n	8009c6e <_scanf_float+0x3e6>
 8009c2e:	9903      	ldr	r1, [sp, #12]
 8009c30:	600a      	str	r2, [r1, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	e9c3 6700 	strd	r6, r7, [r3]
 8009c38:	68e3      	ldr	r3, [r4, #12]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	60e3      	str	r3, [r4, #12]
 8009c3e:	e7d9      	b.n	8009bf4 <_scanf_float+0x36c>
 8009c40:	9b04      	ldr	r3, [sp, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0e4      	beq.n	8009c10 <_scanf_float+0x388>
 8009c46:	9905      	ldr	r1, [sp, #20]
 8009c48:	230a      	movs	r3, #10
 8009c4a:	3101      	adds	r1, #1
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	f002 fc5b 	bl	800c508 <_strtol_r>
 8009c52:	9b04      	ldr	r3, [sp, #16]
 8009c54:	9e05      	ldr	r6, [sp, #20]
 8009c56:	1ac2      	subs	r2, r0, r3
 8009c58:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009c5c:	429e      	cmp	r6, r3
 8009c5e:	bf28      	it	cs
 8009c60:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009c64:	4910      	ldr	r1, [pc, #64]	@ (8009ca8 <_scanf_float+0x420>)
 8009c66:	4630      	mov	r0, r6
 8009c68:	f000 f8e4 	bl	8009e34 <siprintf>
 8009c6c:	e7d0      	b.n	8009c10 <_scanf_float+0x388>
 8009c6e:	f011 0f04 	tst.w	r1, #4
 8009c72:	9903      	ldr	r1, [sp, #12]
 8009c74:	600a      	str	r2, [r1, #0]
 8009c76:	d1dc      	bne.n	8009c32 <_scanf_float+0x3aa>
 8009c78:	681d      	ldr	r5, [r3, #0]
 8009c7a:	4632      	mov	r2, r6
 8009c7c:	463b      	mov	r3, r7
 8009c7e:	4630      	mov	r0, r6
 8009c80:	4639      	mov	r1, r7
 8009c82:	f7f6 ff53 	bl	8000b2c <__aeabi_dcmpun>
 8009c86:	b128      	cbz	r0, 8009c94 <_scanf_float+0x40c>
 8009c88:	4808      	ldr	r0, [pc, #32]	@ (8009cac <_scanf_float+0x424>)
 8009c8a:	f000 f9b7 	bl	8009ffc <nanf>
 8009c8e:	ed85 0a00 	vstr	s0, [r5]
 8009c92:	e7d1      	b.n	8009c38 <_scanf_float+0x3b0>
 8009c94:	4630      	mov	r0, r6
 8009c96:	4639      	mov	r1, r7
 8009c98:	f7f6 ffa6 	bl	8000be8 <__aeabi_d2f>
 8009c9c:	6028      	str	r0, [r5, #0]
 8009c9e:	e7cb      	b.n	8009c38 <_scanf_float+0x3b0>
 8009ca0:	f04f 0900 	mov.w	r9, #0
 8009ca4:	e629      	b.n	80098fa <_scanf_float+0x72>
 8009ca6:	bf00      	nop
 8009ca8:	0800d73c 	.word	0x0800d73c
 8009cac:	0800dad5 	.word	0x0800dad5

08009cb0 <std>:
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8009cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cbe:	6083      	str	r3, [r0, #8]
 8009cc0:	8181      	strh	r1, [r0, #12]
 8009cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009cc4:	81c2      	strh	r2, [r0, #14]
 8009cc6:	6183      	str	r3, [r0, #24]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	2208      	movs	r2, #8
 8009ccc:	305c      	adds	r0, #92	@ 0x5c
 8009cce:	f000 f914 	bl	8009efa <memset>
 8009cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d08 <std+0x58>)
 8009cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <std+0x5c>)
 8009cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009cda:	4b0d      	ldr	r3, [pc, #52]	@ (8009d10 <std+0x60>)
 8009cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009cde:	4b0d      	ldr	r3, [pc, #52]	@ (8009d14 <std+0x64>)
 8009ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d18 <std+0x68>)
 8009ce4:	6224      	str	r4, [r4, #32]
 8009ce6:	429c      	cmp	r4, r3
 8009ce8:	d006      	beq.n	8009cf8 <std+0x48>
 8009cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009cee:	4294      	cmp	r4, r2
 8009cf0:	d002      	beq.n	8009cf8 <std+0x48>
 8009cf2:	33d0      	adds	r3, #208	@ 0xd0
 8009cf4:	429c      	cmp	r4, r3
 8009cf6:	d105      	bne.n	8009d04 <std+0x54>
 8009cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d00:	f000 b978 	b.w	8009ff4 <__retarget_lock_init_recursive>
 8009d04:	bd10      	pop	{r4, pc}
 8009d06:	bf00      	nop
 8009d08:	08009e75 	.word	0x08009e75
 8009d0c:	08009e97 	.word	0x08009e97
 8009d10:	08009ecf 	.word	0x08009ecf
 8009d14:	08009ef3 	.word	0x08009ef3
 8009d18:	20000474 	.word	0x20000474

08009d1c <stdio_exit_handler>:
 8009d1c:	4a02      	ldr	r2, [pc, #8]	@ (8009d28 <stdio_exit_handler+0xc>)
 8009d1e:	4903      	ldr	r1, [pc, #12]	@ (8009d2c <stdio_exit_handler+0x10>)
 8009d20:	4803      	ldr	r0, [pc, #12]	@ (8009d30 <stdio_exit_handler+0x14>)
 8009d22:	f000 b869 	b.w	8009df8 <_fwalk_sglue>
 8009d26:	bf00      	nop
 8009d28:	20000028 	.word	0x20000028
 8009d2c:	0800c8c5 	.word	0x0800c8c5
 8009d30:	20000038 	.word	0x20000038

08009d34 <cleanup_stdio>:
 8009d34:	6841      	ldr	r1, [r0, #4]
 8009d36:	4b0c      	ldr	r3, [pc, #48]	@ (8009d68 <cleanup_stdio+0x34>)
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	b510      	push	{r4, lr}
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	d001      	beq.n	8009d44 <cleanup_stdio+0x10>
 8009d40:	f002 fdc0 	bl	800c8c4 <_fflush_r>
 8009d44:	68a1      	ldr	r1, [r4, #8]
 8009d46:	4b09      	ldr	r3, [pc, #36]	@ (8009d6c <cleanup_stdio+0x38>)
 8009d48:	4299      	cmp	r1, r3
 8009d4a:	d002      	beq.n	8009d52 <cleanup_stdio+0x1e>
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f002 fdb9 	bl	800c8c4 <_fflush_r>
 8009d52:	68e1      	ldr	r1, [r4, #12]
 8009d54:	4b06      	ldr	r3, [pc, #24]	@ (8009d70 <cleanup_stdio+0x3c>)
 8009d56:	4299      	cmp	r1, r3
 8009d58:	d004      	beq.n	8009d64 <cleanup_stdio+0x30>
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d60:	f002 bdb0 	b.w	800c8c4 <_fflush_r>
 8009d64:	bd10      	pop	{r4, pc}
 8009d66:	bf00      	nop
 8009d68:	20000474 	.word	0x20000474
 8009d6c:	200004dc 	.word	0x200004dc
 8009d70:	20000544 	.word	0x20000544

08009d74 <global_stdio_init.part.0>:
 8009d74:	b510      	push	{r4, lr}
 8009d76:	4b0b      	ldr	r3, [pc, #44]	@ (8009da4 <global_stdio_init.part.0+0x30>)
 8009d78:	4c0b      	ldr	r4, [pc, #44]	@ (8009da8 <global_stdio_init.part.0+0x34>)
 8009d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8009dac <global_stdio_init.part.0+0x38>)
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	4620      	mov	r0, r4
 8009d80:	2200      	movs	r2, #0
 8009d82:	2104      	movs	r1, #4
 8009d84:	f7ff ff94 	bl	8009cb0 <std>
 8009d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	2109      	movs	r1, #9
 8009d90:	f7ff ff8e 	bl	8009cb0 <std>
 8009d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d98:	2202      	movs	r2, #2
 8009d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d9e:	2112      	movs	r1, #18
 8009da0:	f7ff bf86 	b.w	8009cb0 <std>
 8009da4:	200005ac 	.word	0x200005ac
 8009da8:	20000474 	.word	0x20000474
 8009dac:	08009d1d 	.word	0x08009d1d

08009db0 <__sfp_lock_acquire>:
 8009db0:	4801      	ldr	r0, [pc, #4]	@ (8009db8 <__sfp_lock_acquire+0x8>)
 8009db2:	f000 b920 	b.w	8009ff6 <__retarget_lock_acquire_recursive>
 8009db6:	bf00      	nop
 8009db8:	200005b5 	.word	0x200005b5

08009dbc <__sfp_lock_release>:
 8009dbc:	4801      	ldr	r0, [pc, #4]	@ (8009dc4 <__sfp_lock_release+0x8>)
 8009dbe:	f000 b91b 	b.w	8009ff8 <__retarget_lock_release_recursive>
 8009dc2:	bf00      	nop
 8009dc4:	200005b5 	.word	0x200005b5

08009dc8 <__sinit>:
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	4604      	mov	r4, r0
 8009dcc:	f7ff fff0 	bl	8009db0 <__sfp_lock_acquire>
 8009dd0:	6a23      	ldr	r3, [r4, #32]
 8009dd2:	b11b      	cbz	r3, 8009ddc <__sinit+0x14>
 8009dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dd8:	f7ff bff0 	b.w	8009dbc <__sfp_lock_release>
 8009ddc:	4b04      	ldr	r3, [pc, #16]	@ (8009df0 <__sinit+0x28>)
 8009dde:	6223      	str	r3, [r4, #32]
 8009de0:	4b04      	ldr	r3, [pc, #16]	@ (8009df4 <__sinit+0x2c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1f5      	bne.n	8009dd4 <__sinit+0xc>
 8009de8:	f7ff ffc4 	bl	8009d74 <global_stdio_init.part.0>
 8009dec:	e7f2      	b.n	8009dd4 <__sinit+0xc>
 8009dee:	bf00      	nop
 8009df0:	08009d35 	.word	0x08009d35
 8009df4:	200005ac 	.word	0x200005ac

08009df8 <_fwalk_sglue>:
 8009df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	4688      	mov	r8, r1
 8009e00:	4614      	mov	r4, r2
 8009e02:	2600      	movs	r6, #0
 8009e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e08:	f1b9 0901 	subs.w	r9, r9, #1
 8009e0c:	d505      	bpl.n	8009e1a <_fwalk_sglue+0x22>
 8009e0e:	6824      	ldr	r4, [r4, #0]
 8009e10:	2c00      	cmp	r4, #0
 8009e12:	d1f7      	bne.n	8009e04 <_fwalk_sglue+0xc>
 8009e14:	4630      	mov	r0, r6
 8009e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e1a:	89ab      	ldrh	r3, [r5, #12]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d907      	bls.n	8009e30 <_fwalk_sglue+0x38>
 8009e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e24:	3301      	adds	r3, #1
 8009e26:	d003      	beq.n	8009e30 <_fwalk_sglue+0x38>
 8009e28:	4629      	mov	r1, r5
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	47c0      	blx	r8
 8009e2e:	4306      	orrs	r6, r0
 8009e30:	3568      	adds	r5, #104	@ 0x68
 8009e32:	e7e9      	b.n	8009e08 <_fwalk_sglue+0x10>

08009e34 <siprintf>:
 8009e34:	b40e      	push	{r1, r2, r3}
 8009e36:	b500      	push	{lr}
 8009e38:	b09c      	sub	sp, #112	@ 0x70
 8009e3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e3c:	9002      	str	r0, [sp, #8]
 8009e3e:	9006      	str	r0, [sp, #24]
 8009e40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e44:	4809      	ldr	r0, [pc, #36]	@ (8009e6c <siprintf+0x38>)
 8009e46:	9107      	str	r1, [sp, #28]
 8009e48:	9104      	str	r1, [sp, #16]
 8009e4a:	4909      	ldr	r1, [pc, #36]	@ (8009e70 <siprintf+0x3c>)
 8009e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e50:	9105      	str	r1, [sp, #20]
 8009e52:	6800      	ldr	r0, [r0, #0]
 8009e54:	9301      	str	r3, [sp, #4]
 8009e56:	a902      	add	r1, sp, #8
 8009e58:	f002 fbb4 	bl	800c5c4 <_svfiprintf_r>
 8009e5c:	9b02      	ldr	r3, [sp, #8]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	701a      	strb	r2, [r3, #0]
 8009e62:	b01c      	add	sp, #112	@ 0x70
 8009e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e68:	b003      	add	sp, #12
 8009e6a:	4770      	bx	lr
 8009e6c:	20000034 	.word	0x20000034
 8009e70:	ffff0208 	.word	0xffff0208

08009e74 <__sread>:
 8009e74:	b510      	push	{r4, lr}
 8009e76:	460c      	mov	r4, r1
 8009e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7c:	f000 f86c 	bl	8009f58 <_read_r>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	bfab      	itete	ge
 8009e84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e86:	89a3      	ldrhlt	r3, [r4, #12]
 8009e88:	181b      	addge	r3, r3, r0
 8009e8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e8e:	bfac      	ite	ge
 8009e90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e92:	81a3      	strhlt	r3, [r4, #12]
 8009e94:	bd10      	pop	{r4, pc}

08009e96 <__swrite>:
 8009e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9a:	461f      	mov	r7, r3
 8009e9c:	898b      	ldrh	r3, [r1, #12]
 8009e9e:	05db      	lsls	r3, r3, #23
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	4616      	mov	r6, r2
 8009ea6:	d505      	bpl.n	8009eb4 <__swrite+0x1e>
 8009ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eac:	2302      	movs	r3, #2
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f000 f840 	bl	8009f34 <_lseek_r>
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ebe:	81a3      	strh	r3, [r4, #12]
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	463b      	mov	r3, r7
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eca:	f000 b857 	b.w	8009f7c <_write_r>

08009ece <__sseek>:
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed6:	f000 f82d 	bl	8009f34 <_lseek_r>
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	bf15      	itete	ne
 8009ee0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ee2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ee6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009eea:	81a3      	strheq	r3, [r4, #12]
 8009eec:	bf18      	it	ne
 8009eee:	81a3      	strhne	r3, [r4, #12]
 8009ef0:	bd10      	pop	{r4, pc}

08009ef2 <__sclose>:
 8009ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef6:	f000 b80d 	b.w	8009f14 <_close_r>

08009efa <memset>:
 8009efa:	4402      	add	r2, r0
 8009efc:	4603      	mov	r3, r0
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d100      	bne.n	8009f04 <memset+0xa>
 8009f02:	4770      	bx	lr
 8009f04:	f803 1b01 	strb.w	r1, [r3], #1
 8009f08:	e7f9      	b.n	8009efe <memset+0x4>
	...

08009f0c <_localeconv_r>:
 8009f0c:	4800      	ldr	r0, [pc, #0]	@ (8009f10 <_localeconv_r+0x4>)
 8009f0e:	4770      	bx	lr
 8009f10:	20000174 	.word	0x20000174

08009f14 <_close_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d06      	ldr	r5, [pc, #24]	@ (8009f30 <_close_r+0x1c>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	f7f8 fdda 	bl	8002ad8 <_close>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_close_r+0x1a>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_close_r+0x1a>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	200005b0 	.word	0x200005b0

08009f34 <_lseek_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d07      	ldr	r5, [pc, #28]	@ (8009f54 <_lseek_r+0x20>)
 8009f38:	4604      	mov	r4, r0
 8009f3a:	4608      	mov	r0, r1
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	2200      	movs	r2, #0
 8009f40:	602a      	str	r2, [r5, #0]
 8009f42:	461a      	mov	r2, r3
 8009f44:	f7f8 fdef 	bl	8002b26 <_lseek>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d102      	bne.n	8009f52 <_lseek_r+0x1e>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	b103      	cbz	r3, 8009f52 <_lseek_r+0x1e>
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	200005b0 	.word	0x200005b0

08009f58 <_read_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d07      	ldr	r5, [pc, #28]	@ (8009f78 <_read_r+0x20>)
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	4608      	mov	r0, r1
 8009f60:	4611      	mov	r1, r2
 8009f62:	2200      	movs	r2, #0
 8009f64:	602a      	str	r2, [r5, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	f7f8 fd7d 	bl	8002a66 <_read>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_read_r+0x1e>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_read_r+0x1e>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	200005b0 	.word	0x200005b0

08009f7c <_write_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d07      	ldr	r5, [pc, #28]	@ (8009f9c <_write_r+0x20>)
 8009f80:	4604      	mov	r4, r0
 8009f82:	4608      	mov	r0, r1
 8009f84:	4611      	mov	r1, r2
 8009f86:	2200      	movs	r2, #0
 8009f88:	602a      	str	r2, [r5, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f7f8 fd88 	bl	8002aa0 <_write>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_write_r+0x1e>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_write_r+0x1e>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	200005b0 	.word	0x200005b0

08009fa0 <__errno>:
 8009fa0:	4b01      	ldr	r3, [pc, #4]	@ (8009fa8 <__errno+0x8>)
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	20000034 	.word	0x20000034

08009fac <__libc_init_array>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	4d0d      	ldr	r5, [pc, #52]	@ (8009fe4 <__libc_init_array+0x38>)
 8009fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8009fe8 <__libc_init_array+0x3c>)
 8009fb2:	1b64      	subs	r4, r4, r5
 8009fb4:	10a4      	asrs	r4, r4, #2
 8009fb6:	2600      	movs	r6, #0
 8009fb8:	42a6      	cmp	r6, r4
 8009fba:	d109      	bne.n	8009fd0 <__libc_init_array+0x24>
 8009fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8009fec <__libc_init_array+0x40>)
 8009fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8009ff0 <__libc_init_array+0x44>)
 8009fc0:	f003 fb70 	bl	800d6a4 <_init>
 8009fc4:	1b64      	subs	r4, r4, r5
 8009fc6:	10a4      	asrs	r4, r4, #2
 8009fc8:	2600      	movs	r6, #0
 8009fca:	42a6      	cmp	r6, r4
 8009fcc:	d105      	bne.n	8009fda <__libc_init_array+0x2e>
 8009fce:	bd70      	pop	{r4, r5, r6, pc}
 8009fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd4:	4798      	blx	r3
 8009fd6:	3601      	adds	r6, #1
 8009fd8:	e7ee      	b.n	8009fb8 <__libc_init_array+0xc>
 8009fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fde:	4798      	blx	r3
 8009fe0:	3601      	adds	r6, #1
 8009fe2:	e7f2      	b.n	8009fca <__libc_init_array+0x1e>
 8009fe4:	0800db40 	.word	0x0800db40
 8009fe8:	0800db40 	.word	0x0800db40
 8009fec:	0800db40 	.word	0x0800db40
 8009ff0:	0800db44 	.word	0x0800db44

08009ff4 <__retarget_lock_init_recursive>:
 8009ff4:	4770      	bx	lr

08009ff6 <__retarget_lock_acquire_recursive>:
 8009ff6:	4770      	bx	lr

08009ff8 <__retarget_lock_release_recursive>:
 8009ff8:	4770      	bx	lr
	...

08009ffc <nanf>:
 8009ffc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a004 <nanf+0x8>
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	7fc00000 	.word	0x7fc00000

0800a008 <quorem>:
 800a008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	6903      	ldr	r3, [r0, #16]
 800a00e:	690c      	ldr	r4, [r1, #16]
 800a010:	42a3      	cmp	r3, r4
 800a012:	4607      	mov	r7, r0
 800a014:	db7e      	blt.n	800a114 <quorem+0x10c>
 800a016:	3c01      	subs	r4, #1
 800a018:	f101 0814 	add.w	r8, r1, #20
 800a01c:	00a3      	lsls	r3, r4, #2
 800a01e:	f100 0514 	add.w	r5, r0, #20
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a02e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a032:	3301      	adds	r3, #1
 800a034:	429a      	cmp	r2, r3
 800a036:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a03a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a03e:	d32e      	bcc.n	800a09e <quorem+0x96>
 800a040:	f04f 0a00 	mov.w	sl, #0
 800a044:	46c4      	mov	ip, r8
 800a046:	46ae      	mov	lr, r5
 800a048:	46d3      	mov	fp, sl
 800a04a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a04e:	b298      	uxth	r0, r3
 800a050:	fb06 a000 	mla	r0, r6, r0, sl
 800a054:	0c02      	lsrs	r2, r0, #16
 800a056:	0c1b      	lsrs	r3, r3, #16
 800a058:	fb06 2303 	mla	r3, r6, r3, r2
 800a05c:	f8de 2000 	ldr.w	r2, [lr]
 800a060:	b280      	uxth	r0, r0
 800a062:	b292      	uxth	r2, r2
 800a064:	1a12      	subs	r2, r2, r0
 800a066:	445a      	add	r2, fp
 800a068:	f8de 0000 	ldr.w	r0, [lr]
 800a06c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a070:	b29b      	uxth	r3, r3
 800a072:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a076:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a07a:	b292      	uxth	r2, r2
 800a07c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a080:	45e1      	cmp	r9, ip
 800a082:	f84e 2b04 	str.w	r2, [lr], #4
 800a086:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a08a:	d2de      	bcs.n	800a04a <quorem+0x42>
 800a08c:	9b00      	ldr	r3, [sp, #0]
 800a08e:	58eb      	ldr	r3, [r5, r3]
 800a090:	b92b      	cbnz	r3, 800a09e <quorem+0x96>
 800a092:	9b01      	ldr	r3, [sp, #4]
 800a094:	3b04      	subs	r3, #4
 800a096:	429d      	cmp	r5, r3
 800a098:	461a      	mov	r2, r3
 800a09a:	d32f      	bcc.n	800a0fc <quorem+0xf4>
 800a09c:	613c      	str	r4, [r7, #16]
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f001 f9c2 	bl	800b428 <__mcmp>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	db25      	blt.n	800a0f4 <quorem+0xec>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0b0:	f8d1 c000 	ldr.w	ip, [r1]
 800a0b4:	fa1f fe82 	uxth.w	lr, r2
 800a0b8:	fa1f f38c 	uxth.w	r3, ip
 800a0bc:	eba3 030e 	sub.w	r3, r3, lr
 800a0c0:	4403      	add	r3, r0
 800a0c2:	0c12      	lsrs	r2, r2, #16
 800a0c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a0c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0d2:	45c1      	cmp	r9, r8
 800a0d4:	f841 3b04 	str.w	r3, [r1], #4
 800a0d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a0dc:	d2e6      	bcs.n	800a0ac <quorem+0xa4>
 800a0de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0e6:	b922      	cbnz	r2, 800a0f2 <quorem+0xea>
 800a0e8:	3b04      	subs	r3, #4
 800a0ea:	429d      	cmp	r5, r3
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	d30b      	bcc.n	800a108 <quorem+0x100>
 800a0f0:	613c      	str	r4, [r7, #16]
 800a0f2:	3601      	adds	r6, #1
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	b003      	add	sp, #12
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fc:	6812      	ldr	r2, [r2, #0]
 800a0fe:	3b04      	subs	r3, #4
 800a100:	2a00      	cmp	r2, #0
 800a102:	d1cb      	bne.n	800a09c <quorem+0x94>
 800a104:	3c01      	subs	r4, #1
 800a106:	e7c6      	b.n	800a096 <quorem+0x8e>
 800a108:	6812      	ldr	r2, [r2, #0]
 800a10a:	3b04      	subs	r3, #4
 800a10c:	2a00      	cmp	r2, #0
 800a10e:	d1ef      	bne.n	800a0f0 <quorem+0xe8>
 800a110:	3c01      	subs	r4, #1
 800a112:	e7ea      	b.n	800a0ea <quorem+0xe2>
 800a114:	2000      	movs	r0, #0
 800a116:	e7ee      	b.n	800a0f6 <quorem+0xee>

0800a118 <_dtoa_r>:
 800a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	69c7      	ldr	r7, [r0, #28]
 800a11e:	b099      	sub	sp, #100	@ 0x64
 800a120:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a124:	ec55 4b10 	vmov	r4, r5, d0
 800a128:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a12a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a12c:	4683      	mov	fp, r0
 800a12e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a130:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a132:	b97f      	cbnz	r7, 800a154 <_dtoa_r+0x3c>
 800a134:	2010      	movs	r0, #16
 800a136:	f000 fdfd 	bl	800ad34 <malloc>
 800a13a:	4602      	mov	r2, r0
 800a13c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a140:	b920      	cbnz	r0, 800a14c <_dtoa_r+0x34>
 800a142:	4ba7      	ldr	r3, [pc, #668]	@ (800a3e0 <_dtoa_r+0x2c8>)
 800a144:	21ef      	movs	r1, #239	@ 0xef
 800a146:	48a7      	ldr	r0, [pc, #668]	@ (800a3e4 <_dtoa_r+0x2cc>)
 800a148:	f002 fc36 	bl	800c9b8 <__assert_func>
 800a14c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a150:	6007      	str	r7, [r0, #0]
 800a152:	60c7      	str	r7, [r0, #12]
 800a154:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	b159      	cbz	r1, 800a174 <_dtoa_r+0x5c>
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	604a      	str	r2, [r1, #4]
 800a160:	2301      	movs	r3, #1
 800a162:	4093      	lsls	r3, r2
 800a164:	608b      	str	r3, [r1, #8]
 800a166:	4658      	mov	r0, fp
 800a168:	f000 feda 	bl	800af20 <_Bfree>
 800a16c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	1e2b      	subs	r3, r5, #0
 800a176:	bfb9      	ittee	lt
 800a178:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a17c:	9303      	strlt	r3, [sp, #12]
 800a17e:	2300      	movge	r3, #0
 800a180:	6033      	strge	r3, [r6, #0]
 800a182:	9f03      	ldr	r7, [sp, #12]
 800a184:	4b98      	ldr	r3, [pc, #608]	@ (800a3e8 <_dtoa_r+0x2d0>)
 800a186:	bfbc      	itt	lt
 800a188:	2201      	movlt	r2, #1
 800a18a:	6032      	strlt	r2, [r6, #0]
 800a18c:	43bb      	bics	r3, r7
 800a18e:	d112      	bne.n	800a1b6 <_dtoa_r+0x9e>
 800a190:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a192:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a19c:	4323      	orrs	r3, r4
 800a19e:	f000 854d 	beq.w	800ac3c <_dtoa_r+0xb24>
 800a1a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a3fc <_dtoa_r+0x2e4>
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 854f 	beq.w	800ac4c <_dtoa_r+0xb34>
 800a1ae:	f10a 0303 	add.w	r3, sl, #3
 800a1b2:	f000 bd49 	b.w	800ac48 <_dtoa_r+0xb30>
 800a1b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	ec51 0b17 	vmov	r0, r1, d7
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a1c6:	f7f6 fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	b158      	cbz	r0, 800a1e6 <_dtoa_r+0xce>
 800a1ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1d6:	b113      	cbz	r3, 800a1de <_dtoa_r+0xc6>
 800a1d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a1da:	4b84      	ldr	r3, [pc, #528]	@ (800a3ec <_dtoa_r+0x2d4>)
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a400 <_dtoa_r+0x2e8>
 800a1e2:	f000 bd33 	b.w	800ac4c <_dtoa_r+0xb34>
 800a1e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a1ea:	aa16      	add	r2, sp, #88	@ 0x58
 800a1ec:	a917      	add	r1, sp, #92	@ 0x5c
 800a1ee:	4658      	mov	r0, fp
 800a1f0:	f001 fa3a 	bl	800b668 <__d2b>
 800a1f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a1f8:	4681      	mov	r9, r0
 800a1fa:	2e00      	cmp	r6, #0
 800a1fc:	d077      	beq.n	800a2ee <_dtoa_r+0x1d6>
 800a1fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a200:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a20c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a210:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a214:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a218:	4619      	mov	r1, r3
 800a21a:	2200      	movs	r2, #0
 800a21c:	4b74      	ldr	r3, [pc, #464]	@ (800a3f0 <_dtoa_r+0x2d8>)
 800a21e:	f7f6 f833 	bl	8000288 <__aeabi_dsub>
 800a222:	a369      	add	r3, pc, #420	@ (adr r3, 800a3c8 <_dtoa_r+0x2b0>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f7f6 f9e6 	bl	80005f8 <__aeabi_dmul>
 800a22c:	a368      	add	r3, pc, #416	@ (adr r3, 800a3d0 <_dtoa_r+0x2b8>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f6 f82b 	bl	800028c <__adddf3>
 800a236:	4604      	mov	r4, r0
 800a238:	4630      	mov	r0, r6
 800a23a:	460d      	mov	r5, r1
 800a23c:	f7f6 f972 	bl	8000524 <__aeabi_i2d>
 800a240:	a365      	add	r3, pc, #404	@ (adr r3, 800a3d8 <_dtoa_r+0x2c0>)
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	f7f6 f9d7 	bl	80005f8 <__aeabi_dmul>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4620      	mov	r0, r4
 800a250:	4629      	mov	r1, r5
 800a252:	f7f6 f81b 	bl	800028c <__adddf3>
 800a256:	4604      	mov	r4, r0
 800a258:	460d      	mov	r5, r1
 800a25a:	f7f6 fc7d 	bl	8000b58 <__aeabi_d2iz>
 800a25e:	2200      	movs	r2, #0
 800a260:	4607      	mov	r7, r0
 800a262:	2300      	movs	r3, #0
 800a264:	4620      	mov	r0, r4
 800a266:	4629      	mov	r1, r5
 800a268:	f7f6 fc38 	bl	8000adc <__aeabi_dcmplt>
 800a26c:	b140      	cbz	r0, 800a280 <_dtoa_r+0x168>
 800a26e:	4638      	mov	r0, r7
 800a270:	f7f6 f958 	bl	8000524 <__aeabi_i2d>
 800a274:	4622      	mov	r2, r4
 800a276:	462b      	mov	r3, r5
 800a278:	f7f6 fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800a27c:	b900      	cbnz	r0, 800a280 <_dtoa_r+0x168>
 800a27e:	3f01      	subs	r7, #1
 800a280:	2f16      	cmp	r7, #22
 800a282:	d851      	bhi.n	800a328 <_dtoa_r+0x210>
 800a284:	4b5b      	ldr	r3, [pc, #364]	@ (800a3f4 <_dtoa_r+0x2dc>)
 800a286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a292:	f7f6 fc23 	bl	8000adc <__aeabi_dcmplt>
 800a296:	2800      	cmp	r0, #0
 800a298:	d048      	beq.n	800a32c <_dtoa_r+0x214>
 800a29a:	3f01      	subs	r7, #1
 800a29c:	2300      	movs	r3, #0
 800a29e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a2a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a2a2:	1b9b      	subs	r3, r3, r6
 800a2a4:	1e5a      	subs	r2, r3, #1
 800a2a6:	bf44      	itt	mi
 800a2a8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a2ac:	2300      	movmi	r3, #0
 800a2ae:	9208      	str	r2, [sp, #32]
 800a2b0:	bf54      	ite	pl
 800a2b2:	f04f 0800 	movpl.w	r8, #0
 800a2b6:	9308      	strmi	r3, [sp, #32]
 800a2b8:	2f00      	cmp	r7, #0
 800a2ba:	db39      	blt.n	800a330 <_dtoa_r+0x218>
 800a2bc:	9b08      	ldr	r3, [sp, #32]
 800a2be:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a2c0:	443b      	add	r3, r7
 800a2c2:	9308      	str	r3, [sp, #32]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ca:	2b09      	cmp	r3, #9
 800a2cc:	d864      	bhi.n	800a398 <_dtoa_r+0x280>
 800a2ce:	2b05      	cmp	r3, #5
 800a2d0:	bfc4      	itt	gt
 800a2d2:	3b04      	subgt	r3, #4
 800a2d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d8:	f1a3 0302 	sub.w	r3, r3, #2
 800a2dc:	bfcc      	ite	gt
 800a2de:	2400      	movgt	r4, #0
 800a2e0:	2401      	movle	r4, #1
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d863      	bhi.n	800a3ae <_dtoa_r+0x296>
 800a2e6:	e8df f003 	tbb	[pc, r3]
 800a2ea:	372a      	.short	0x372a
 800a2ec:	5535      	.short	0x5535
 800a2ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a2f2:	441e      	add	r6, r3
 800a2f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a2f8:	2b20      	cmp	r3, #32
 800a2fa:	bfc1      	itttt	gt
 800a2fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a300:	409f      	lslgt	r7, r3
 800a302:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a306:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a30a:	bfd6      	itet	le
 800a30c:	f1c3 0320 	rsble	r3, r3, #32
 800a310:	ea47 0003 	orrgt.w	r0, r7, r3
 800a314:	fa04 f003 	lslle.w	r0, r4, r3
 800a318:	f7f6 f8f4 	bl	8000504 <__aeabi_ui2d>
 800a31c:	2201      	movs	r2, #1
 800a31e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a322:	3e01      	subs	r6, #1
 800a324:	9214      	str	r2, [sp, #80]	@ 0x50
 800a326:	e777      	b.n	800a218 <_dtoa_r+0x100>
 800a328:	2301      	movs	r3, #1
 800a32a:	e7b8      	b.n	800a29e <_dtoa_r+0x186>
 800a32c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a32e:	e7b7      	b.n	800a2a0 <_dtoa_r+0x188>
 800a330:	427b      	negs	r3, r7
 800a332:	930a      	str	r3, [sp, #40]	@ 0x28
 800a334:	2300      	movs	r3, #0
 800a336:	eba8 0807 	sub.w	r8, r8, r7
 800a33a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a33c:	e7c4      	b.n	800a2c8 <_dtoa_r+0x1b0>
 800a33e:	2300      	movs	r3, #0
 800a340:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a344:	2b00      	cmp	r3, #0
 800a346:	dc35      	bgt.n	800a3b4 <_dtoa_r+0x29c>
 800a348:	2301      	movs	r3, #1
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	9307      	str	r3, [sp, #28]
 800a34e:	461a      	mov	r2, r3
 800a350:	920e      	str	r2, [sp, #56]	@ 0x38
 800a352:	e00b      	b.n	800a36c <_dtoa_r+0x254>
 800a354:	2301      	movs	r3, #1
 800a356:	e7f3      	b.n	800a340 <_dtoa_r+0x228>
 800a358:	2300      	movs	r3, #0
 800a35a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a35c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a35e:	18fb      	adds	r3, r7, r3
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	3301      	adds	r3, #1
 800a364:	2b01      	cmp	r3, #1
 800a366:	9307      	str	r3, [sp, #28]
 800a368:	bfb8      	it	lt
 800a36a:	2301      	movlt	r3, #1
 800a36c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a370:	2100      	movs	r1, #0
 800a372:	2204      	movs	r2, #4
 800a374:	f102 0514 	add.w	r5, r2, #20
 800a378:	429d      	cmp	r5, r3
 800a37a:	d91f      	bls.n	800a3bc <_dtoa_r+0x2a4>
 800a37c:	6041      	str	r1, [r0, #4]
 800a37e:	4658      	mov	r0, fp
 800a380:	f000 fd8e 	bl	800aea0 <_Balloc>
 800a384:	4682      	mov	sl, r0
 800a386:	2800      	cmp	r0, #0
 800a388:	d13c      	bne.n	800a404 <_dtoa_r+0x2ec>
 800a38a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f8 <_dtoa_r+0x2e0>)
 800a38c:	4602      	mov	r2, r0
 800a38e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a392:	e6d8      	b.n	800a146 <_dtoa_r+0x2e>
 800a394:	2301      	movs	r3, #1
 800a396:	e7e0      	b.n	800a35a <_dtoa_r+0x242>
 800a398:	2401      	movs	r4, #1
 800a39a:	2300      	movs	r3, #0
 800a39c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a39e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	9307      	str	r3, [sp, #28]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2312      	movs	r3, #18
 800a3ac:	e7d0      	b.n	800a350 <_dtoa_r+0x238>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3b2:	e7f5      	b.n	800a3a0 <_dtoa_r+0x288>
 800a3b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	9307      	str	r3, [sp, #28]
 800a3ba:	e7d7      	b.n	800a36c <_dtoa_r+0x254>
 800a3bc:	3101      	adds	r1, #1
 800a3be:	0052      	lsls	r2, r2, #1
 800a3c0:	e7d8      	b.n	800a374 <_dtoa_r+0x25c>
 800a3c2:	bf00      	nop
 800a3c4:	f3af 8000 	nop.w
 800a3c8:	636f4361 	.word	0x636f4361
 800a3cc:	3fd287a7 	.word	0x3fd287a7
 800a3d0:	8b60c8b3 	.word	0x8b60c8b3
 800a3d4:	3fc68a28 	.word	0x3fc68a28
 800a3d8:	509f79fb 	.word	0x509f79fb
 800a3dc:	3fd34413 	.word	0x3fd34413
 800a3e0:	0800d74e 	.word	0x0800d74e
 800a3e4:	0800d765 	.word	0x0800d765
 800a3e8:	7ff00000 	.word	0x7ff00000
 800a3ec:	0800d719 	.word	0x0800d719
 800a3f0:	3ff80000 	.word	0x3ff80000
 800a3f4:	0800d860 	.word	0x0800d860
 800a3f8:	0800d7bd 	.word	0x0800d7bd
 800a3fc:	0800d74a 	.word	0x0800d74a
 800a400:	0800d718 	.word	0x0800d718
 800a404:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a408:	6018      	str	r0, [r3, #0]
 800a40a:	9b07      	ldr	r3, [sp, #28]
 800a40c:	2b0e      	cmp	r3, #14
 800a40e:	f200 80a4 	bhi.w	800a55a <_dtoa_r+0x442>
 800a412:	2c00      	cmp	r4, #0
 800a414:	f000 80a1 	beq.w	800a55a <_dtoa_r+0x442>
 800a418:	2f00      	cmp	r7, #0
 800a41a:	dd33      	ble.n	800a484 <_dtoa_r+0x36c>
 800a41c:	4bad      	ldr	r3, [pc, #692]	@ (800a6d4 <_dtoa_r+0x5bc>)
 800a41e:	f007 020f 	and.w	r2, r7, #15
 800a422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a426:	ed93 7b00 	vldr	d7, [r3]
 800a42a:	05f8      	lsls	r0, r7, #23
 800a42c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a430:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a434:	d516      	bpl.n	800a464 <_dtoa_r+0x34c>
 800a436:	4ba8      	ldr	r3, [pc, #672]	@ (800a6d8 <_dtoa_r+0x5c0>)
 800a438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a43c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a440:	f7f6 fa04 	bl	800084c <__aeabi_ddiv>
 800a444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a448:	f004 040f 	and.w	r4, r4, #15
 800a44c:	2603      	movs	r6, #3
 800a44e:	4da2      	ldr	r5, [pc, #648]	@ (800a6d8 <_dtoa_r+0x5c0>)
 800a450:	b954      	cbnz	r4, 800a468 <_dtoa_r+0x350>
 800a452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a45a:	f7f6 f9f7 	bl	800084c <__aeabi_ddiv>
 800a45e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a462:	e028      	b.n	800a4b6 <_dtoa_r+0x39e>
 800a464:	2602      	movs	r6, #2
 800a466:	e7f2      	b.n	800a44e <_dtoa_r+0x336>
 800a468:	07e1      	lsls	r1, r4, #31
 800a46a:	d508      	bpl.n	800a47e <_dtoa_r+0x366>
 800a46c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a470:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a474:	f7f6 f8c0 	bl	80005f8 <__aeabi_dmul>
 800a478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a47c:	3601      	adds	r6, #1
 800a47e:	1064      	asrs	r4, r4, #1
 800a480:	3508      	adds	r5, #8
 800a482:	e7e5      	b.n	800a450 <_dtoa_r+0x338>
 800a484:	f000 80d2 	beq.w	800a62c <_dtoa_r+0x514>
 800a488:	427c      	negs	r4, r7
 800a48a:	4b92      	ldr	r3, [pc, #584]	@ (800a6d4 <_dtoa_r+0x5bc>)
 800a48c:	4d92      	ldr	r5, [pc, #584]	@ (800a6d8 <_dtoa_r+0x5c0>)
 800a48e:	f004 020f 	and.w	r2, r4, #15
 800a492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a49e:	f7f6 f8ab 	bl	80005f8 <__aeabi_dmul>
 800a4a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4a6:	1124      	asrs	r4, r4, #4
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	2602      	movs	r6, #2
 800a4ac:	2c00      	cmp	r4, #0
 800a4ae:	f040 80b2 	bne.w	800a616 <_dtoa_r+0x4fe>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1d3      	bne.n	800a45e <_dtoa_r+0x346>
 800a4b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f000 80b7 	beq.w	800a630 <_dtoa_r+0x518>
 800a4c2:	4b86      	ldr	r3, [pc, #536]	@ (800a6dc <_dtoa_r+0x5c4>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	f7f6 fb07 	bl	8000adc <__aeabi_dcmplt>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f000 80ae 	beq.w	800a630 <_dtoa_r+0x518>
 800a4d4:	9b07      	ldr	r3, [sp, #28]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 80aa 	beq.w	800a630 <_dtoa_r+0x518>
 800a4dc:	9b00      	ldr	r3, [sp, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	dd37      	ble.n	800a552 <_dtoa_r+0x43a>
 800a4e2:	1e7b      	subs	r3, r7, #1
 800a4e4:	9304      	str	r3, [sp, #16]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	4b7d      	ldr	r3, [pc, #500]	@ (800a6e0 <_dtoa_r+0x5c8>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	f7f6 f883 	bl	80005f8 <__aeabi_dmul>
 800a4f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4f6:	9c00      	ldr	r4, [sp, #0]
 800a4f8:	3601      	adds	r6, #1
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f7f6 f812 	bl	8000524 <__aeabi_i2d>
 800a500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a504:	f7f6 f878 	bl	80005f8 <__aeabi_dmul>
 800a508:	4b76      	ldr	r3, [pc, #472]	@ (800a6e4 <_dtoa_r+0x5cc>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	f7f5 febe 	bl	800028c <__adddf3>
 800a510:	4605      	mov	r5, r0
 800a512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a516:	2c00      	cmp	r4, #0
 800a518:	f040 808d 	bne.w	800a636 <_dtoa_r+0x51e>
 800a51c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a520:	4b71      	ldr	r3, [pc, #452]	@ (800a6e8 <_dtoa_r+0x5d0>)
 800a522:	2200      	movs	r2, #0
 800a524:	f7f5 feb0 	bl	8000288 <__aeabi_dsub>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a530:	462a      	mov	r2, r5
 800a532:	4633      	mov	r3, r6
 800a534:	f7f6 faf0 	bl	8000b18 <__aeabi_dcmpgt>
 800a538:	2800      	cmp	r0, #0
 800a53a:	f040 828b 	bne.w	800aa54 <_dtoa_r+0x93c>
 800a53e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a542:	462a      	mov	r2, r5
 800a544:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a548:	f7f6 fac8 	bl	8000adc <__aeabi_dcmplt>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	f040 8128 	bne.w	800a7a2 <_dtoa_r+0x68a>
 800a552:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a556:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a55a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f2c0 815a 	blt.w	800a816 <_dtoa_r+0x6fe>
 800a562:	2f0e      	cmp	r7, #14
 800a564:	f300 8157 	bgt.w	800a816 <_dtoa_r+0x6fe>
 800a568:	4b5a      	ldr	r3, [pc, #360]	@ (800a6d4 <_dtoa_r+0x5bc>)
 800a56a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a56e:	ed93 7b00 	vldr	d7, [r3]
 800a572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a574:	2b00      	cmp	r3, #0
 800a576:	ed8d 7b00 	vstr	d7, [sp]
 800a57a:	da03      	bge.n	800a584 <_dtoa_r+0x46c>
 800a57c:	9b07      	ldr	r3, [sp, #28]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f340 8101 	ble.w	800a786 <_dtoa_r+0x66e>
 800a584:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a588:	4656      	mov	r6, sl
 800a58a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a58e:	4620      	mov	r0, r4
 800a590:	4629      	mov	r1, r5
 800a592:	f7f6 f95b 	bl	800084c <__aeabi_ddiv>
 800a596:	f7f6 fadf 	bl	8000b58 <__aeabi_d2iz>
 800a59a:	4680      	mov	r8, r0
 800a59c:	f7f5 ffc2 	bl	8000524 <__aeabi_i2d>
 800a5a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5a4:	f7f6 f828 	bl	80005f8 <__aeabi_dmul>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a5b4:	f7f5 fe68 	bl	8000288 <__aeabi_dsub>
 800a5b8:	f806 4b01 	strb.w	r4, [r6], #1
 800a5bc:	9d07      	ldr	r5, [sp, #28]
 800a5be:	eba6 040a 	sub.w	r4, r6, sl
 800a5c2:	42a5      	cmp	r5, r4
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	f040 8117 	bne.w	800a7fa <_dtoa_r+0x6e2>
 800a5cc:	f7f5 fe5e 	bl	800028c <__adddf3>
 800a5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	460d      	mov	r5, r1
 800a5d8:	f7f6 fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	f040 80f9 	bne.w	800a7d4 <_dtoa_r+0x6bc>
 800a5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	f7f6 fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5ee:	b118      	cbz	r0, 800a5f8 <_dtoa_r+0x4e0>
 800a5f0:	f018 0f01 	tst.w	r8, #1
 800a5f4:	f040 80ee 	bne.w	800a7d4 <_dtoa_r+0x6bc>
 800a5f8:	4649      	mov	r1, r9
 800a5fa:	4658      	mov	r0, fp
 800a5fc:	f000 fc90 	bl	800af20 <_Bfree>
 800a600:	2300      	movs	r3, #0
 800a602:	7033      	strb	r3, [r6, #0]
 800a604:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a606:	3701      	adds	r7, #1
 800a608:	601f      	str	r7, [r3, #0]
 800a60a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 831d 	beq.w	800ac4c <_dtoa_r+0xb34>
 800a612:	601e      	str	r6, [r3, #0]
 800a614:	e31a      	b.n	800ac4c <_dtoa_r+0xb34>
 800a616:	07e2      	lsls	r2, r4, #31
 800a618:	d505      	bpl.n	800a626 <_dtoa_r+0x50e>
 800a61a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a61e:	f7f5 ffeb 	bl	80005f8 <__aeabi_dmul>
 800a622:	3601      	adds	r6, #1
 800a624:	2301      	movs	r3, #1
 800a626:	1064      	asrs	r4, r4, #1
 800a628:	3508      	adds	r5, #8
 800a62a:	e73f      	b.n	800a4ac <_dtoa_r+0x394>
 800a62c:	2602      	movs	r6, #2
 800a62e:	e742      	b.n	800a4b6 <_dtoa_r+0x39e>
 800a630:	9c07      	ldr	r4, [sp, #28]
 800a632:	9704      	str	r7, [sp, #16]
 800a634:	e761      	b.n	800a4fa <_dtoa_r+0x3e2>
 800a636:	4b27      	ldr	r3, [pc, #156]	@ (800a6d4 <_dtoa_r+0x5bc>)
 800a638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a63a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a63e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a642:	4454      	add	r4, sl
 800a644:	2900      	cmp	r1, #0
 800a646:	d053      	beq.n	800a6f0 <_dtoa_r+0x5d8>
 800a648:	4928      	ldr	r1, [pc, #160]	@ (800a6ec <_dtoa_r+0x5d4>)
 800a64a:	2000      	movs	r0, #0
 800a64c:	f7f6 f8fe 	bl	800084c <__aeabi_ddiv>
 800a650:	4633      	mov	r3, r6
 800a652:	462a      	mov	r2, r5
 800a654:	f7f5 fe18 	bl	8000288 <__aeabi_dsub>
 800a658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a65c:	4656      	mov	r6, sl
 800a65e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a662:	f7f6 fa79 	bl	8000b58 <__aeabi_d2iz>
 800a666:	4605      	mov	r5, r0
 800a668:	f7f5 ff5c 	bl	8000524 <__aeabi_i2d>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a674:	f7f5 fe08 	bl	8000288 <__aeabi_dsub>
 800a678:	3530      	adds	r5, #48	@ 0x30
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a682:	f806 5b01 	strb.w	r5, [r6], #1
 800a686:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a68a:	f7f6 fa27 	bl	8000adc <__aeabi_dcmplt>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d171      	bne.n	800a776 <_dtoa_r+0x65e>
 800a692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a696:	4911      	ldr	r1, [pc, #68]	@ (800a6dc <_dtoa_r+0x5c4>)
 800a698:	2000      	movs	r0, #0
 800a69a:	f7f5 fdf5 	bl	8000288 <__aeabi_dsub>
 800a69e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6a2:	f7f6 fa1b 	bl	8000adc <__aeabi_dcmplt>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f040 8095 	bne.w	800a7d6 <_dtoa_r+0x6be>
 800a6ac:	42a6      	cmp	r6, r4
 800a6ae:	f43f af50 	beq.w	800a552 <_dtoa_r+0x43a>
 800a6b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a6e0 <_dtoa_r+0x5c8>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f7f5 ff9d 	bl	80005f8 <__aeabi_dmul>
 800a6be:	4b08      	ldr	r3, [pc, #32]	@ (800a6e0 <_dtoa_r+0x5c8>)
 800a6c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ca:	f7f5 ff95 	bl	80005f8 <__aeabi_dmul>
 800a6ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6d2:	e7c4      	b.n	800a65e <_dtoa_r+0x546>
 800a6d4:	0800d860 	.word	0x0800d860
 800a6d8:	0800d838 	.word	0x0800d838
 800a6dc:	3ff00000 	.word	0x3ff00000
 800a6e0:	40240000 	.word	0x40240000
 800a6e4:	401c0000 	.word	0x401c0000
 800a6e8:	40140000 	.word	0x40140000
 800a6ec:	3fe00000 	.word	0x3fe00000
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f7f5 ff80 	bl	80005f8 <__aeabi_dmul>
 800a6f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a6fe:	4656      	mov	r6, sl
 800a700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a704:	f7f6 fa28 	bl	8000b58 <__aeabi_d2iz>
 800a708:	4605      	mov	r5, r0
 800a70a:	f7f5 ff0b 	bl	8000524 <__aeabi_i2d>
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a716:	f7f5 fdb7 	bl	8000288 <__aeabi_dsub>
 800a71a:	3530      	adds	r5, #48	@ 0x30
 800a71c:	f806 5b01 	strb.w	r5, [r6], #1
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	42a6      	cmp	r6, r4
 800a726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a72a:	f04f 0200 	mov.w	r2, #0
 800a72e:	d124      	bne.n	800a77a <_dtoa_r+0x662>
 800a730:	4bac      	ldr	r3, [pc, #688]	@ (800a9e4 <_dtoa_r+0x8cc>)
 800a732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a736:	f7f5 fda9 	bl	800028c <__adddf3>
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a742:	f7f6 f9e9 	bl	8000b18 <__aeabi_dcmpgt>
 800a746:	2800      	cmp	r0, #0
 800a748:	d145      	bne.n	800a7d6 <_dtoa_r+0x6be>
 800a74a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a74e:	49a5      	ldr	r1, [pc, #660]	@ (800a9e4 <_dtoa_r+0x8cc>)
 800a750:	2000      	movs	r0, #0
 800a752:	f7f5 fd99 	bl	8000288 <__aeabi_dsub>
 800a756:	4602      	mov	r2, r0
 800a758:	460b      	mov	r3, r1
 800a75a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a75e:	f7f6 f9bd 	bl	8000adc <__aeabi_dcmplt>
 800a762:	2800      	cmp	r0, #0
 800a764:	f43f aef5 	beq.w	800a552 <_dtoa_r+0x43a>
 800a768:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a76a:	1e73      	subs	r3, r6, #1
 800a76c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a76e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a772:	2b30      	cmp	r3, #48	@ 0x30
 800a774:	d0f8      	beq.n	800a768 <_dtoa_r+0x650>
 800a776:	9f04      	ldr	r7, [sp, #16]
 800a778:	e73e      	b.n	800a5f8 <_dtoa_r+0x4e0>
 800a77a:	4b9b      	ldr	r3, [pc, #620]	@ (800a9e8 <_dtoa_r+0x8d0>)
 800a77c:	f7f5 ff3c 	bl	80005f8 <__aeabi_dmul>
 800a780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a784:	e7bc      	b.n	800a700 <_dtoa_r+0x5e8>
 800a786:	d10c      	bne.n	800a7a2 <_dtoa_r+0x68a>
 800a788:	4b98      	ldr	r3, [pc, #608]	@ (800a9ec <_dtoa_r+0x8d4>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a790:	f7f5 ff32 	bl	80005f8 <__aeabi_dmul>
 800a794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a798:	f7f6 f9b4 	bl	8000b04 <__aeabi_dcmpge>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	f000 8157 	beq.w	800aa50 <_dtoa_r+0x938>
 800a7a2:	2400      	movs	r4, #0
 800a7a4:	4625      	mov	r5, r4
 800a7a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7a8:	43db      	mvns	r3, r3
 800a7aa:	9304      	str	r3, [sp, #16]
 800a7ac:	4656      	mov	r6, sl
 800a7ae:	2700      	movs	r7, #0
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	4658      	mov	r0, fp
 800a7b4:	f000 fbb4 	bl	800af20 <_Bfree>
 800a7b8:	2d00      	cmp	r5, #0
 800a7ba:	d0dc      	beq.n	800a776 <_dtoa_r+0x65e>
 800a7bc:	b12f      	cbz	r7, 800a7ca <_dtoa_r+0x6b2>
 800a7be:	42af      	cmp	r7, r5
 800a7c0:	d003      	beq.n	800a7ca <_dtoa_r+0x6b2>
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	4658      	mov	r0, fp
 800a7c6:	f000 fbab 	bl	800af20 <_Bfree>
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	4658      	mov	r0, fp
 800a7ce:	f000 fba7 	bl	800af20 <_Bfree>
 800a7d2:	e7d0      	b.n	800a776 <_dtoa_r+0x65e>
 800a7d4:	9704      	str	r7, [sp, #16]
 800a7d6:	4633      	mov	r3, r6
 800a7d8:	461e      	mov	r6, r3
 800a7da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7de:	2a39      	cmp	r2, #57	@ 0x39
 800a7e0:	d107      	bne.n	800a7f2 <_dtoa_r+0x6da>
 800a7e2:	459a      	cmp	sl, r3
 800a7e4:	d1f8      	bne.n	800a7d8 <_dtoa_r+0x6c0>
 800a7e6:	9a04      	ldr	r2, [sp, #16]
 800a7e8:	3201      	adds	r2, #1
 800a7ea:	9204      	str	r2, [sp, #16]
 800a7ec:	2230      	movs	r2, #48	@ 0x30
 800a7ee:	f88a 2000 	strb.w	r2, [sl]
 800a7f2:	781a      	ldrb	r2, [r3, #0]
 800a7f4:	3201      	adds	r2, #1
 800a7f6:	701a      	strb	r2, [r3, #0]
 800a7f8:	e7bd      	b.n	800a776 <_dtoa_r+0x65e>
 800a7fa:	4b7b      	ldr	r3, [pc, #492]	@ (800a9e8 <_dtoa_r+0x8d0>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f7f5 fefb 	bl	80005f8 <__aeabi_dmul>
 800a802:	2200      	movs	r2, #0
 800a804:	2300      	movs	r3, #0
 800a806:	4604      	mov	r4, r0
 800a808:	460d      	mov	r5, r1
 800a80a:	f7f6 f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a80e:	2800      	cmp	r0, #0
 800a810:	f43f aebb 	beq.w	800a58a <_dtoa_r+0x472>
 800a814:	e6f0      	b.n	800a5f8 <_dtoa_r+0x4e0>
 800a816:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a818:	2a00      	cmp	r2, #0
 800a81a:	f000 80db 	beq.w	800a9d4 <_dtoa_r+0x8bc>
 800a81e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a820:	2a01      	cmp	r2, #1
 800a822:	f300 80bf 	bgt.w	800a9a4 <_dtoa_r+0x88c>
 800a826:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a828:	2a00      	cmp	r2, #0
 800a82a:	f000 80b7 	beq.w	800a99c <_dtoa_r+0x884>
 800a82e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a832:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a834:	4646      	mov	r6, r8
 800a836:	9a08      	ldr	r2, [sp, #32]
 800a838:	2101      	movs	r1, #1
 800a83a:	441a      	add	r2, r3
 800a83c:	4658      	mov	r0, fp
 800a83e:	4498      	add	r8, r3
 800a840:	9208      	str	r2, [sp, #32]
 800a842:	f000 fc6b 	bl	800b11c <__i2b>
 800a846:	4605      	mov	r5, r0
 800a848:	b15e      	cbz	r6, 800a862 <_dtoa_r+0x74a>
 800a84a:	9b08      	ldr	r3, [sp, #32]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	dd08      	ble.n	800a862 <_dtoa_r+0x74a>
 800a850:	42b3      	cmp	r3, r6
 800a852:	9a08      	ldr	r2, [sp, #32]
 800a854:	bfa8      	it	ge
 800a856:	4633      	movge	r3, r6
 800a858:	eba8 0803 	sub.w	r8, r8, r3
 800a85c:	1af6      	subs	r6, r6, r3
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	9308      	str	r3, [sp, #32]
 800a862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a864:	b1f3      	cbz	r3, 800a8a4 <_dtoa_r+0x78c>
 800a866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 80b7 	beq.w	800a9dc <_dtoa_r+0x8c4>
 800a86e:	b18c      	cbz	r4, 800a894 <_dtoa_r+0x77c>
 800a870:	4629      	mov	r1, r5
 800a872:	4622      	mov	r2, r4
 800a874:	4658      	mov	r0, fp
 800a876:	f000 fd11 	bl	800b29c <__pow5mult>
 800a87a:	464a      	mov	r2, r9
 800a87c:	4601      	mov	r1, r0
 800a87e:	4605      	mov	r5, r0
 800a880:	4658      	mov	r0, fp
 800a882:	f000 fc61 	bl	800b148 <__multiply>
 800a886:	4649      	mov	r1, r9
 800a888:	9004      	str	r0, [sp, #16]
 800a88a:	4658      	mov	r0, fp
 800a88c:	f000 fb48 	bl	800af20 <_Bfree>
 800a890:	9b04      	ldr	r3, [sp, #16]
 800a892:	4699      	mov	r9, r3
 800a894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a896:	1b1a      	subs	r2, r3, r4
 800a898:	d004      	beq.n	800a8a4 <_dtoa_r+0x78c>
 800a89a:	4649      	mov	r1, r9
 800a89c:	4658      	mov	r0, fp
 800a89e:	f000 fcfd 	bl	800b29c <__pow5mult>
 800a8a2:	4681      	mov	r9, r0
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	4658      	mov	r0, fp
 800a8a8:	f000 fc38 	bl	800b11c <__i2b>
 800a8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 81cf 	beq.w	800ac54 <_dtoa_r+0xb3c>
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	4658      	mov	r0, fp
 800a8bc:	f000 fcee 	bl	800b29c <__pow5mult>
 800a8c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	f300 8095 	bgt.w	800a9f4 <_dtoa_r+0x8dc>
 800a8ca:	9b02      	ldr	r3, [sp, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f040 8087 	bne.w	800a9e0 <_dtoa_r+0x8c8>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f040 8089 	bne.w	800a9f0 <_dtoa_r+0x8d8>
 800a8de:	9b03      	ldr	r3, [sp, #12]
 800a8e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a8e4:	0d1b      	lsrs	r3, r3, #20
 800a8e6:	051b      	lsls	r3, r3, #20
 800a8e8:	b12b      	cbz	r3, 800a8f6 <_dtoa_r+0x7de>
 800a8ea:	9b08      	ldr	r3, [sp, #32]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	9308      	str	r3, [sp, #32]
 800a8f0:	f108 0801 	add.w	r8, r8, #1
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f000 81b0 	beq.w	800ac60 <_dtoa_r+0xb48>
 800a900:	6923      	ldr	r3, [r4, #16]
 800a902:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a906:	6918      	ldr	r0, [r3, #16]
 800a908:	f000 fbbc 	bl	800b084 <__hi0bits>
 800a90c:	f1c0 0020 	rsb	r0, r0, #32
 800a910:	9b08      	ldr	r3, [sp, #32]
 800a912:	4418      	add	r0, r3
 800a914:	f010 001f 	ands.w	r0, r0, #31
 800a918:	d077      	beq.n	800aa0a <_dtoa_r+0x8f2>
 800a91a:	f1c0 0320 	rsb	r3, r0, #32
 800a91e:	2b04      	cmp	r3, #4
 800a920:	dd6b      	ble.n	800a9fa <_dtoa_r+0x8e2>
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	f1c0 001c 	rsb	r0, r0, #28
 800a928:	4403      	add	r3, r0
 800a92a:	4480      	add	r8, r0
 800a92c:	4406      	add	r6, r0
 800a92e:	9308      	str	r3, [sp, #32]
 800a930:	f1b8 0f00 	cmp.w	r8, #0
 800a934:	dd05      	ble.n	800a942 <_dtoa_r+0x82a>
 800a936:	4649      	mov	r1, r9
 800a938:	4642      	mov	r2, r8
 800a93a:	4658      	mov	r0, fp
 800a93c:	f000 fd08 	bl	800b350 <__lshift>
 800a940:	4681      	mov	r9, r0
 800a942:	9b08      	ldr	r3, [sp, #32]
 800a944:	2b00      	cmp	r3, #0
 800a946:	dd05      	ble.n	800a954 <_dtoa_r+0x83c>
 800a948:	4621      	mov	r1, r4
 800a94a:	461a      	mov	r2, r3
 800a94c:	4658      	mov	r0, fp
 800a94e:	f000 fcff 	bl	800b350 <__lshift>
 800a952:	4604      	mov	r4, r0
 800a954:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a956:	2b00      	cmp	r3, #0
 800a958:	d059      	beq.n	800aa0e <_dtoa_r+0x8f6>
 800a95a:	4621      	mov	r1, r4
 800a95c:	4648      	mov	r0, r9
 800a95e:	f000 fd63 	bl	800b428 <__mcmp>
 800a962:	2800      	cmp	r0, #0
 800a964:	da53      	bge.n	800aa0e <_dtoa_r+0x8f6>
 800a966:	1e7b      	subs	r3, r7, #1
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	4649      	mov	r1, r9
 800a96c:	2300      	movs	r3, #0
 800a96e:	220a      	movs	r2, #10
 800a970:	4658      	mov	r0, fp
 800a972:	f000 faf7 	bl	800af64 <__multadd>
 800a976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a978:	4681      	mov	r9, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 8172 	beq.w	800ac64 <_dtoa_r+0xb4c>
 800a980:	2300      	movs	r3, #0
 800a982:	4629      	mov	r1, r5
 800a984:	220a      	movs	r2, #10
 800a986:	4658      	mov	r0, fp
 800a988:	f000 faec 	bl	800af64 <__multadd>
 800a98c:	9b00      	ldr	r3, [sp, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	4605      	mov	r5, r0
 800a992:	dc67      	bgt.n	800aa64 <_dtoa_r+0x94c>
 800a994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a996:	2b02      	cmp	r3, #2
 800a998:	dc41      	bgt.n	800aa1e <_dtoa_r+0x906>
 800a99a:	e063      	b.n	800aa64 <_dtoa_r+0x94c>
 800a99c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a99e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a9a2:	e746      	b.n	800a832 <_dtoa_r+0x71a>
 800a9a4:	9b07      	ldr	r3, [sp, #28]
 800a9a6:	1e5c      	subs	r4, r3, #1
 800a9a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9aa:	42a3      	cmp	r3, r4
 800a9ac:	bfbf      	itttt	lt
 800a9ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a9b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a9b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a9b4:	1ae3      	sublt	r3, r4, r3
 800a9b6:	bfb4      	ite	lt
 800a9b8:	18d2      	addlt	r2, r2, r3
 800a9ba:	1b1c      	subge	r4, r3, r4
 800a9bc:	9b07      	ldr	r3, [sp, #28]
 800a9be:	bfbc      	itt	lt
 800a9c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a9c2:	2400      	movlt	r4, #0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	bfb5      	itete	lt
 800a9c8:	eba8 0603 	sublt.w	r6, r8, r3
 800a9cc:	9b07      	ldrge	r3, [sp, #28]
 800a9ce:	2300      	movlt	r3, #0
 800a9d0:	4646      	movge	r6, r8
 800a9d2:	e730      	b.n	800a836 <_dtoa_r+0x71e>
 800a9d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a9d8:	4646      	mov	r6, r8
 800a9da:	e735      	b.n	800a848 <_dtoa_r+0x730>
 800a9dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9de:	e75c      	b.n	800a89a <_dtoa_r+0x782>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	e788      	b.n	800a8f6 <_dtoa_r+0x7de>
 800a9e4:	3fe00000 	.word	0x3fe00000
 800a9e8:	40240000 	.word	0x40240000
 800a9ec:	40140000 	.word	0x40140000
 800a9f0:	9b02      	ldr	r3, [sp, #8]
 800a9f2:	e780      	b.n	800a8f6 <_dtoa_r+0x7de>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9f8:	e782      	b.n	800a900 <_dtoa_r+0x7e8>
 800a9fa:	d099      	beq.n	800a930 <_dtoa_r+0x818>
 800a9fc:	9a08      	ldr	r2, [sp, #32]
 800a9fe:	331c      	adds	r3, #28
 800aa00:	441a      	add	r2, r3
 800aa02:	4498      	add	r8, r3
 800aa04:	441e      	add	r6, r3
 800aa06:	9208      	str	r2, [sp, #32]
 800aa08:	e792      	b.n	800a930 <_dtoa_r+0x818>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	e7f6      	b.n	800a9fc <_dtoa_r+0x8e4>
 800aa0e:	9b07      	ldr	r3, [sp, #28]
 800aa10:	9704      	str	r7, [sp, #16]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dc20      	bgt.n	800aa58 <_dtoa_r+0x940>
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	dd1e      	ble.n	800aa5c <_dtoa_r+0x944>
 800aa1e:	9b00      	ldr	r3, [sp, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f47f aec0 	bne.w	800a7a6 <_dtoa_r+0x68e>
 800aa26:	4621      	mov	r1, r4
 800aa28:	2205      	movs	r2, #5
 800aa2a:	4658      	mov	r0, fp
 800aa2c:	f000 fa9a 	bl	800af64 <__multadd>
 800aa30:	4601      	mov	r1, r0
 800aa32:	4604      	mov	r4, r0
 800aa34:	4648      	mov	r0, r9
 800aa36:	f000 fcf7 	bl	800b428 <__mcmp>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f77f aeb3 	ble.w	800a7a6 <_dtoa_r+0x68e>
 800aa40:	4656      	mov	r6, sl
 800aa42:	2331      	movs	r3, #49	@ 0x31
 800aa44:	f806 3b01 	strb.w	r3, [r6], #1
 800aa48:	9b04      	ldr	r3, [sp, #16]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	e6ae      	b.n	800a7ae <_dtoa_r+0x696>
 800aa50:	9c07      	ldr	r4, [sp, #28]
 800aa52:	9704      	str	r7, [sp, #16]
 800aa54:	4625      	mov	r5, r4
 800aa56:	e7f3      	b.n	800aa40 <_dtoa_r+0x928>
 800aa58:	9b07      	ldr	r3, [sp, #28]
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 8104 	beq.w	800ac6c <_dtoa_r+0xb54>
 800aa64:	2e00      	cmp	r6, #0
 800aa66:	dd05      	ble.n	800aa74 <_dtoa_r+0x95c>
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4632      	mov	r2, r6
 800aa6c:	4658      	mov	r0, fp
 800aa6e:	f000 fc6f 	bl	800b350 <__lshift>
 800aa72:	4605      	mov	r5, r0
 800aa74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d05a      	beq.n	800ab30 <_dtoa_r+0xa18>
 800aa7a:	6869      	ldr	r1, [r5, #4]
 800aa7c:	4658      	mov	r0, fp
 800aa7e:	f000 fa0f 	bl	800aea0 <_Balloc>
 800aa82:	4606      	mov	r6, r0
 800aa84:	b928      	cbnz	r0, 800aa92 <_dtoa_r+0x97a>
 800aa86:	4b84      	ldr	r3, [pc, #528]	@ (800ac98 <_dtoa_r+0xb80>)
 800aa88:	4602      	mov	r2, r0
 800aa8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aa8e:	f7ff bb5a 	b.w	800a146 <_dtoa_r+0x2e>
 800aa92:	692a      	ldr	r2, [r5, #16]
 800aa94:	3202      	adds	r2, #2
 800aa96:	0092      	lsls	r2, r2, #2
 800aa98:	f105 010c 	add.w	r1, r5, #12
 800aa9c:	300c      	adds	r0, #12
 800aa9e:	f001 ff75 	bl	800c98c <memcpy>
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4658      	mov	r0, fp
 800aaa8:	f000 fc52 	bl	800b350 <__lshift>
 800aaac:	f10a 0301 	add.w	r3, sl, #1
 800aab0:	9307      	str	r3, [sp, #28]
 800aab2:	9b00      	ldr	r3, [sp, #0]
 800aab4:	4453      	add	r3, sl
 800aab6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	f003 0301 	and.w	r3, r3, #1
 800aabe:	462f      	mov	r7, r5
 800aac0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aac2:	4605      	mov	r5, r0
 800aac4:	9b07      	ldr	r3, [sp, #28]
 800aac6:	4621      	mov	r1, r4
 800aac8:	3b01      	subs	r3, #1
 800aaca:	4648      	mov	r0, r9
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	f7ff fa9b 	bl	800a008 <quorem>
 800aad2:	4639      	mov	r1, r7
 800aad4:	9002      	str	r0, [sp, #8]
 800aad6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aada:	4648      	mov	r0, r9
 800aadc:	f000 fca4 	bl	800b428 <__mcmp>
 800aae0:	462a      	mov	r2, r5
 800aae2:	9008      	str	r0, [sp, #32]
 800aae4:	4621      	mov	r1, r4
 800aae6:	4658      	mov	r0, fp
 800aae8:	f000 fcba 	bl	800b460 <__mdiff>
 800aaec:	68c2      	ldr	r2, [r0, #12]
 800aaee:	4606      	mov	r6, r0
 800aaf0:	bb02      	cbnz	r2, 800ab34 <_dtoa_r+0xa1c>
 800aaf2:	4601      	mov	r1, r0
 800aaf4:	4648      	mov	r0, r9
 800aaf6:	f000 fc97 	bl	800b428 <__mcmp>
 800aafa:	4602      	mov	r2, r0
 800aafc:	4631      	mov	r1, r6
 800aafe:	4658      	mov	r0, fp
 800ab00:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab02:	f000 fa0d 	bl	800af20 <_Bfree>
 800ab06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab0a:	9e07      	ldr	r6, [sp, #28]
 800ab0c:	ea43 0102 	orr.w	r1, r3, r2
 800ab10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab12:	4319      	orrs	r1, r3
 800ab14:	d110      	bne.n	800ab38 <_dtoa_r+0xa20>
 800ab16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab1a:	d029      	beq.n	800ab70 <_dtoa_r+0xa58>
 800ab1c:	9b08      	ldr	r3, [sp, #32]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	dd02      	ble.n	800ab28 <_dtoa_r+0xa10>
 800ab22:	9b02      	ldr	r3, [sp, #8]
 800ab24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ab28:	9b00      	ldr	r3, [sp, #0]
 800ab2a:	f883 8000 	strb.w	r8, [r3]
 800ab2e:	e63f      	b.n	800a7b0 <_dtoa_r+0x698>
 800ab30:	4628      	mov	r0, r5
 800ab32:	e7bb      	b.n	800aaac <_dtoa_r+0x994>
 800ab34:	2201      	movs	r2, #1
 800ab36:	e7e1      	b.n	800aafc <_dtoa_r+0x9e4>
 800ab38:	9b08      	ldr	r3, [sp, #32]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	db04      	blt.n	800ab48 <_dtoa_r+0xa30>
 800ab3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab40:	430b      	orrs	r3, r1
 800ab42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab44:	430b      	orrs	r3, r1
 800ab46:	d120      	bne.n	800ab8a <_dtoa_r+0xa72>
 800ab48:	2a00      	cmp	r2, #0
 800ab4a:	dded      	ble.n	800ab28 <_dtoa_r+0xa10>
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	2201      	movs	r2, #1
 800ab50:	4658      	mov	r0, fp
 800ab52:	f000 fbfd 	bl	800b350 <__lshift>
 800ab56:	4621      	mov	r1, r4
 800ab58:	4681      	mov	r9, r0
 800ab5a:	f000 fc65 	bl	800b428 <__mcmp>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	dc03      	bgt.n	800ab6a <_dtoa_r+0xa52>
 800ab62:	d1e1      	bne.n	800ab28 <_dtoa_r+0xa10>
 800ab64:	f018 0f01 	tst.w	r8, #1
 800ab68:	d0de      	beq.n	800ab28 <_dtoa_r+0xa10>
 800ab6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab6e:	d1d8      	bne.n	800ab22 <_dtoa_r+0xa0a>
 800ab70:	9a00      	ldr	r2, [sp, #0]
 800ab72:	2339      	movs	r3, #57	@ 0x39
 800ab74:	7013      	strb	r3, [r2, #0]
 800ab76:	4633      	mov	r3, r6
 800ab78:	461e      	mov	r6, r3
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ab80:	2a39      	cmp	r2, #57	@ 0x39
 800ab82:	d052      	beq.n	800ac2a <_dtoa_r+0xb12>
 800ab84:	3201      	adds	r2, #1
 800ab86:	701a      	strb	r2, [r3, #0]
 800ab88:	e612      	b.n	800a7b0 <_dtoa_r+0x698>
 800ab8a:	2a00      	cmp	r2, #0
 800ab8c:	dd07      	ble.n	800ab9e <_dtoa_r+0xa86>
 800ab8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab92:	d0ed      	beq.n	800ab70 <_dtoa_r+0xa58>
 800ab94:	9a00      	ldr	r2, [sp, #0]
 800ab96:	f108 0301 	add.w	r3, r8, #1
 800ab9a:	7013      	strb	r3, [r2, #0]
 800ab9c:	e608      	b.n	800a7b0 <_dtoa_r+0x698>
 800ab9e:	9b07      	ldr	r3, [sp, #28]
 800aba0:	9a07      	ldr	r2, [sp, #28]
 800aba2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d028      	beq.n	800abfe <_dtoa_r+0xae6>
 800abac:	4649      	mov	r1, r9
 800abae:	2300      	movs	r3, #0
 800abb0:	220a      	movs	r2, #10
 800abb2:	4658      	mov	r0, fp
 800abb4:	f000 f9d6 	bl	800af64 <__multadd>
 800abb8:	42af      	cmp	r7, r5
 800abba:	4681      	mov	r9, r0
 800abbc:	f04f 0300 	mov.w	r3, #0
 800abc0:	f04f 020a 	mov.w	r2, #10
 800abc4:	4639      	mov	r1, r7
 800abc6:	4658      	mov	r0, fp
 800abc8:	d107      	bne.n	800abda <_dtoa_r+0xac2>
 800abca:	f000 f9cb 	bl	800af64 <__multadd>
 800abce:	4607      	mov	r7, r0
 800abd0:	4605      	mov	r5, r0
 800abd2:	9b07      	ldr	r3, [sp, #28]
 800abd4:	3301      	adds	r3, #1
 800abd6:	9307      	str	r3, [sp, #28]
 800abd8:	e774      	b.n	800aac4 <_dtoa_r+0x9ac>
 800abda:	f000 f9c3 	bl	800af64 <__multadd>
 800abde:	4629      	mov	r1, r5
 800abe0:	4607      	mov	r7, r0
 800abe2:	2300      	movs	r3, #0
 800abe4:	220a      	movs	r2, #10
 800abe6:	4658      	mov	r0, fp
 800abe8:	f000 f9bc 	bl	800af64 <__multadd>
 800abec:	4605      	mov	r5, r0
 800abee:	e7f0      	b.n	800abd2 <_dtoa_r+0xaba>
 800abf0:	9b00      	ldr	r3, [sp, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	bfcc      	ite	gt
 800abf6:	461e      	movgt	r6, r3
 800abf8:	2601      	movle	r6, #1
 800abfa:	4456      	add	r6, sl
 800abfc:	2700      	movs	r7, #0
 800abfe:	4649      	mov	r1, r9
 800ac00:	2201      	movs	r2, #1
 800ac02:	4658      	mov	r0, fp
 800ac04:	f000 fba4 	bl	800b350 <__lshift>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4681      	mov	r9, r0
 800ac0c:	f000 fc0c 	bl	800b428 <__mcmp>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	dcb0      	bgt.n	800ab76 <_dtoa_r+0xa5e>
 800ac14:	d102      	bne.n	800ac1c <_dtoa_r+0xb04>
 800ac16:	f018 0f01 	tst.w	r8, #1
 800ac1a:	d1ac      	bne.n	800ab76 <_dtoa_r+0xa5e>
 800ac1c:	4633      	mov	r3, r6
 800ac1e:	461e      	mov	r6, r3
 800ac20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac24:	2a30      	cmp	r2, #48	@ 0x30
 800ac26:	d0fa      	beq.n	800ac1e <_dtoa_r+0xb06>
 800ac28:	e5c2      	b.n	800a7b0 <_dtoa_r+0x698>
 800ac2a:	459a      	cmp	sl, r3
 800ac2c:	d1a4      	bne.n	800ab78 <_dtoa_r+0xa60>
 800ac2e:	9b04      	ldr	r3, [sp, #16]
 800ac30:	3301      	adds	r3, #1
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	2331      	movs	r3, #49	@ 0x31
 800ac36:	f88a 3000 	strb.w	r3, [sl]
 800ac3a:	e5b9      	b.n	800a7b0 <_dtoa_r+0x698>
 800ac3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ac9c <_dtoa_r+0xb84>
 800ac42:	b11b      	cbz	r3, 800ac4c <_dtoa_r+0xb34>
 800ac44:	f10a 0308 	add.w	r3, sl, #8
 800ac48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	b019      	add	sp, #100	@ 0x64
 800ac50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	f77f ae37 	ble.w	800a8ca <_dtoa_r+0x7b2>
 800ac5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac60:	2001      	movs	r0, #1
 800ac62:	e655      	b.n	800a910 <_dtoa_r+0x7f8>
 800ac64:	9b00      	ldr	r3, [sp, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f77f aed6 	ble.w	800aa18 <_dtoa_r+0x900>
 800ac6c:	4656      	mov	r6, sl
 800ac6e:	4621      	mov	r1, r4
 800ac70:	4648      	mov	r0, r9
 800ac72:	f7ff f9c9 	bl	800a008 <quorem>
 800ac76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac7a:	f806 8b01 	strb.w	r8, [r6], #1
 800ac7e:	9b00      	ldr	r3, [sp, #0]
 800ac80:	eba6 020a 	sub.w	r2, r6, sl
 800ac84:	4293      	cmp	r3, r2
 800ac86:	ddb3      	ble.n	800abf0 <_dtoa_r+0xad8>
 800ac88:	4649      	mov	r1, r9
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	220a      	movs	r2, #10
 800ac8e:	4658      	mov	r0, fp
 800ac90:	f000 f968 	bl	800af64 <__multadd>
 800ac94:	4681      	mov	r9, r0
 800ac96:	e7ea      	b.n	800ac6e <_dtoa_r+0xb56>
 800ac98:	0800d7bd 	.word	0x0800d7bd
 800ac9c:	0800d741 	.word	0x0800d741

0800aca0 <_free_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4605      	mov	r5, r0
 800aca4:	2900      	cmp	r1, #0
 800aca6:	d041      	beq.n	800ad2c <_free_r+0x8c>
 800aca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acac:	1f0c      	subs	r4, r1, #4
 800acae:	2b00      	cmp	r3, #0
 800acb0:	bfb8      	it	lt
 800acb2:	18e4      	addlt	r4, r4, r3
 800acb4:	f000 f8e8 	bl	800ae88 <__malloc_lock>
 800acb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ad30 <_free_r+0x90>)
 800acba:	6813      	ldr	r3, [r2, #0]
 800acbc:	b933      	cbnz	r3, 800accc <_free_r+0x2c>
 800acbe:	6063      	str	r3, [r4, #4]
 800acc0:	6014      	str	r4, [r2, #0]
 800acc2:	4628      	mov	r0, r5
 800acc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acc8:	f000 b8e4 	b.w	800ae94 <__malloc_unlock>
 800accc:	42a3      	cmp	r3, r4
 800acce:	d908      	bls.n	800ace2 <_free_r+0x42>
 800acd0:	6820      	ldr	r0, [r4, #0]
 800acd2:	1821      	adds	r1, r4, r0
 800acd4:	428b      	cmp	r3, r1
 800acd6:	bf01      	itttt	eq
 800acd8:	6819      	ldreq	r1, [r3, #0]
 800acda:	685b      	ldreq	r3, [r3, #4]
 800acdc:	1809      	addeq	r1, r1, r0
 800acde:	6021      	streq	r1, [r4, #0]
 800ace0:	e7ed      	b.n	800acbe <_free_r+0x1e>
 800ace2:	461a      	mov	r2, r3
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	b10b      	cbz	r3, 800acec <_free_r+0x4c>
 800ace8:	42a3      	cmp	r3, r4
 800acea:	d9fa      	bls.n	800ace2 <_free_r+0x42>
 800acec:	6811      	ldr	r1, [r2, #0]
 800acee:	1850      	adds	r0, r2, r1
 800acf0:	42a0      	cmp	r0, r4
 800acf2:	d10b      	bne.n	800ad0c <_free_r+0x6c>
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	4401      	add	r1, r0
 800acf8:	1850      	adds	r0, r2, r1
 800acfa:	4283      	cmp	r3, r0
 800acfc:	6011      	str	r1, [r2, #0]
 800acfe:	d1e0      	bne.n	800acc2 <_free_r+0x22>
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	6053      	str	r3, [r2, #4]
 800ad06:	4408      	add	r0, r1
 800ad08:	6010      	str	r0, [r2, #0]
 800ad0a:	e7da      	b.n	800acc2 <_free_r+0x22>
 800ad0c:	d902      	bls.n	800ad14 <_free_r+0x74>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	602b      	str	r3, [r5, #0]
 800ad12:	e7d6      	b.n	800acc2 <_free_r+0x22>
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	1821      	adds	r1, r4, r0
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	bf04      	itt	eq
 800ad1c:	6819      	ldreq	r1, [r3, #0]
 800ad1e:	685b      	ldreq	r3, [r3, #4]
 800ad20:	6063      	str	r3, [r4, #4]
 800ad22:	bf04      	itt	eq
 800ad24:	1809      	addeq	r1, r1, r0
 800ad26:	6021      	streq	r1, [r4, #0]
 800ad28:	6054      	str	r4, [r2, #4]
 800ad2a:	e7ca      	b.n	800acc2 <_free_r+0x22>
 800ad2c:	bd38      	pop	{r3, r4, r5, pc}
 800ad2e:	bf00      	nop
 800ad30:	200005bc 	.word	0x200005bc

0800ad34 <malloc>:
 800ad34:	4b02      	ldr	r3, [pc, #8]	@ (800ad40 <malloc+0xc>)
 800ad36:	4601      	mov	r1, r0
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	f000 b825 	b.w	800ad88 <_malloc_r>
 800ad3e:	bf00      	nop
 800ad40:	20000034 	.word	0x20000034

0800ad44 <sbrk_aligned>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	4e0f      	ldr	r6, [pc, #60]	@ (800ad84 <sbrk_aligned+0x40>)
 800ad48:	460c      	mov	r4, r1
 800ad4a:	6831      	ldr	r1, [r6, #0]
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	b911      	cbnz	r1, 800ad56 <sbrk_aligned+0x12>
 800ad50:	f001 fe0c 	bl	800c96c <_sbrk_r>
 800ad54:	6030      	str	r0, [r6, #0]
 800ad56:	4621      	mov	r1, r4
 800ad58:	4628      	mov	r0, r5
 800ad5a:	f001 fe07 	bl	800c96c <_sbrk_r>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	d103      	bne.n	800ad6a <sbrk_aligned+0x26>
 800ad62:	f04f 34ff 	mov.w	r4, #4294967295
 800ad66:	4620      	mov	r0, r4
 800ad68:	bd70      	pop	{r4, r5, r6, pc}
 800ad6a:	1cc4      	adds	r4, r0, #3
 800ad6c:	f024 0403 	bic.w	r4, r4, #3
 800ad70:	42a0      	cmp	r0, r4
 800ad72:	d0f8      	beq.n	800ad66 <sbrk_aligned+0x22>
 800ad74:	1a21      	subs	r1, r4, r0
 800ad76:	4628      	mov	r0, r5
 800ad78:	f001 fdf8 	bl	800c96c <_sbrk_r>
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	d1f2      	bne.n	800ad66 <sbrk_aligned+0x22>
 800ad80:	e7ef      	b.n	800ad62 <sbrk_aligned+0x1e>
 800ad82:	bf00      	nop
 800ad84:	200005b8 	.word	0x200005b8

0800ad88 <_malloc_r>:
 800ad88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad8c:	1ccd      	adds	r5, r1, #3
 800ad8e:	f025 0503 	bic.w	r5, r5, #3
 800ad92:	3508      	adds	r5, #8
 800ad94:	2d0c      	cmp	r5, #12
 800ad96:	bf38      	it	cc
 800ad98:	250c      	movcc	r5, #12
 800ad9a:	2d00      	cmp	r5, #0
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	db01      	blt.n	800ada4 <_malloc_r+0x1c>
 800ada0:	42a9      	cmp	r1, r5
 800ada2:	d904      	bls.n	800adae <_malloc_r+0x26>
 800ada4:	230c      	movs	r3, #12
 800ada6:	6033      	str	r3, [r6, #0]
 800ada8:	2000      	movs	r0, #0
 800adaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae84 <_malloc_r+0xfc>
 800adb2:	f000 f869 	bl	800ae88 <__malloc_lock>
 800adb6:	f8d8 3000 	ldr.w	r3, [r8]
 800adba:	461c      	mov	r4, r3
 800adbc:	bb44      	cbnz	r4, 800ae10 <_malloc_r+0x88>
 800adbe:	4629      	mov	r1, r5
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff ffbf 	bl	800ad44 <sbrk_aligned>
 800adc6:	1c43      	adds	r3, r0, #1
 800adc8:	4604      	mov	r4, r0
 800adca:	d158      	bne.n	800ae7e <_malloc_r+0xf6>
 800adcc:	f8d8 4000 	ldr.w	r4, [r8]
 800add0:	4627      	mov	r7, r4
 800add2:	2f00      	cmp	r7, #0
 800add4:	d143      	bne.n	800ae5e <_malloc_r+0xd6>
 800add6:	2c00      	cmp	r4, #0
 800add8:	d04b      	beq.n	800ae72 <_malloc_r+0xea>
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	4639      	mov	r1, r7
 800adde:	4630      	mov	r0, r6
 800ade0:	eb04 0903 	add.w	r9, r4, r3
 800ade4:	f001 fdc2 	bl	800c96c <_sbrk_r>
 800ade8:	4581      	cmp	r9, r0
 800adea:	d142      	bne.n	800ae72 <_malloc_r+0xea>
 800adec:	6821      	ldr	r1, [r4, #0]
 800adee:	1a6d      	subs	r5, r5, r1
 800adf0:	4629      	mov	r1, r5
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7ff ffa6 	bl	800ad44 <sbrk_aligned>
 800adf8:	3001      	adds	r0, #1
 800adfa:	d03a      	beq.n	800ae72 <_malloc_r+0xea>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	442b      	add	r3, r5
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	f8d8 3000 	ldr.w	r3, [r8]
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	bb62      	cbnz	r2, 800ae64 <_malloc_r+0xdc>
 800ae0a:	f8c8 7000 	str.w	r7, [r8]
 800ae0e:	e00f      	b.n	800ae30 <_malloc_r+0xa8>
 800ae10:	6822      	ldr	r2, [r4, #0]
 800ae12:	1b52      	subs	r2, r2, r5
 800ae14:	d420      	bmi.n	800ae58 <_malloc_r+0xd0>
 800ae16:	2a0b      	cmp	r2, #11
 800ae18:	d917      	bls.n	800ae4a <_malloc_r+0xc2>
 800ae1a:	1961      	adds	r1, r4, r5
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	6025      	str	r5, [r4, #0]
 800ae20:	bf18      	it	ne
 800ae22:	6059      	strne	r1, [r3, #4]
 800ae24:	6863      	ldr	r3, [r4, #4]
 800ae26:	bf08      	it	eq
 800ae28:	f8c8 1000 	streq.w	r1, [r8]
 800ae2c:	5162      	str	r2, [r4, r5]
 800ae2e:	604b      	str	r3, [r1, #4]
 800ae30:	4630      	mov	r0, r6
 800ae32:	f000 f82f 	bl	800ae94 <__malloc_unlock>
 800ae36:	f104 000b 	add.w	r0, r4, #11
 800ae3a:	1d23      	adds	r3, r4, #4
 800ae3c:	f020 0007 	bic.w	r0, r0, #7
 800ae40:	1ac2      	subs	r2, r0, r3
 800ae42:	bf1c      	itt	ne
 800ae44:	1a1b      	subne	r3, r3, r0
 800ae46:	50a3      	strne	r3, [r4, r2]
 800ae48:	e7af      	b.n	800adaa <_malloc_r+0x22>
 800ae4a:	6862      	ldr	r2, [r4, #4]
 800ae4c:	42a3      	cmp	r3, r4
 800ae4e:	bf0c      	ite	eq
 800ae50:	f8c8 2000 	streq.w	r2, [r8]
 800ae54:	605a      	strne	r2, [r3, #4]
 800ae56:	e7eb      	b.n	800ae30 <_malloc_r+0xa8>
 800ae58:	4623      	mov	r3, r4
 800ae5a:	6864      	ldr	r4, [r4, #4]
 800ae5c:	e7ae      	b.n	800adbc <_malloc_r+0x34>
 800ae5e:	463c      	mov	r4, r7
 800ae60:	687f      	ldr	r7, [r7, #4]
 800ae62:	e7b6      	b.n	800add2 <_malloc_r+0x4a>
 800ae64:	461a      	mov	r2, r3
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	42a3      	cmp	r3, r4
 800ae6a:	d1fb      	bne.n	800ae64 <_malloc_r+0xdc>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	6053      	str	r3, [r2, #4]
 800ae70:	e7de      	b.n	800ae30 <_malloc_r+0xa8>
 800ae72:	230c      	movs	r3, #12
 800ae74:	6033      	str	r3, [r6, #0]
 800ae76:	4630      	mov	r0, r6
 800ae78:	f000 f80c 	bl	800ae94 <__malloc_unlock>
 800ae7c:	e794      	b.n	800ada8 <_malloc_r+0x20>
 800ae7e:	6005      	str	r5, [r0, #0]
 800ae80:	e7d6      	b.n	800ae30 <_malloc_r+0xa8>
 800ae82:	bf00      	nop
 800ae84:	200005bc 	.word	0x200005bc

0800ae88 <__malloc_lock>:
 800ae88:	4801      	ldr	r0, [pc, #4]	@ (800ae90 <__malloc_lock+0x8>)
 800ae8a:	f7ff b8b4 	b.w	8009ff6 <__retarget_lock_acquire_recursive>
 800ae8e:	bf00      	nop
 800ae90:	200005b4 	.word	0x200005b4

0800ae94 <__malloc_unlock>:
 800ae94:	4801      	ldr	r0, [pc, #4]	@ (800ae9c <__malloc_unlock+0x8>)
 800ae96:	f7ff b8af 	b.w	8009ff8 <__retarget_lock_release_recursive>
 800ae9a:	bf00      	nop
 800ae9c:	200005b4 	.word	0x200005b4

0800aea0 <_Balloc>:
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	69c6      	ldr	r6, [r0, #28]
 800aea4:	4604      	mov	r4, r0
 800aea6:	460d      	mov	r5, r1
 800aea8:	b976      	cbnz	r6, 800aec8 <_Balloc+0x28>
 800aeaa:	2010      	movs	r0, #16
 800aeac:	f7ff ff42 	bl	800ad34 <malloc>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	61e0      	str	r0, [r4, #28]
 800aeb4:	b920      	cbnz	r0, 800aec0 <_Balloc+0x20>
 800aeb6:	4b18      	ldr	r3, [pc, #96]	@ (800af18 <_Balloc+0x78>)
 800aeb8:	4818      	ldr	r0, [pc, #96]	@ (800af1c <_Balloc+0x7c>)
 800aeba:	216b      	movs	r1, #107	@ 0x6b
 800aebc:	f001 fd7c 	bl	800c9b8 <__assert_func>
 800aec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aec4:	6006      	str	r6, [r0, #0]
 800aec6:	60c6      	str	r6, [r0, #12]
 800aec8:	69e6      	ldr	r6, [r4, #28]
 800aeca:	68f3      	ldr	r3, [r6, #12]
 800aecc:	b183      	cbz	r3, 800aef0 <_Balloc+0x50>
 800aece:	69e3      	ldr	r3, [r4, #28]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aed6:	b9b8      	cbnz	r0, 800af08 <_Balloc+0x68>
 800aed8:	2101      	movs	r1, #1
 800aeda:	fa01 f605 	lsl.w	r6, r1, r5
 800aede:	1d72      	adds	r2, r6, #5
 800aee0:	0092      	lsls	r2, r2, #2
 800aee2:	4620      	mov	r0, r4
 800aee4:	f001 fd86 	bl	800c9f4 <_calloc_r>
 800aee8:	b160      	cbz	r0, 800af04 <_Balloc+0x64>
 800aeea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aeee:	e00e      	b.n	800af0e <_Balloc+0x6e>
 800aef0:	2221      	movs	r2, #33	@ 0x21
 800aef2:	2104      	movs	r1, #4
 800aef4:	4620      	mov	r0, r4
 800aef6:	f001 fd7d 	bl	800c9f4 <_calloc_r>
 800aefa:	69e3      	ldr	r3, [r4, #28]
 800aefc:	60f0      	str	r0, [r6, #12]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1e4      	bne.n	800aece <_Balloc+0x2e>
 800af04:	2000      	movs	r0, #0
 800af06:	bd70      	pop	{r4, r5, r6, pc}
 800af08:	6802      	ldr	r2, [r0, #0]
 800af0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af0e:	2300      	movs	r3, #0
 800af10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af14:	e7f7      	b.n	800af06 <_Balloc+0x66>
 800af16:	bf00      	nop
 800af18:	0800d74e 	.word	0x0800d74e
 800af1c:	0800d7ce 	.word	0x0800d7ce

0800af20 <_Bfree>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	69c6      	ldr	r6, [r0, #28]
 800af24:	4605      	mov	r5, r0
 800af26:	460c      	mov	r4, r1
 800af28:	b976      	cbnz	r6, 800af48 <_Bfree+0x28>
 800af2a:	2010      	movs	r0, #16
 800af2c:	f7ff ff02 	bl	800ad34 <malloc>
 800af30:	4602      	mov	r2, r0
 800af32:	61e8      	str	r0, [r5, #28]
 800af34:	b920      	cbnz	r0, 800af40 <_Bfree+0x20>
 800af36:	4b09      	ldr	r3, [pc, #36]	@ (800af5c <_Bfree+0x3c>)
 800af38:	4809      	ldr	r0, [pc, #36]	@ (800af60 <_Bfree+0x40>)
 800af3a:	218f      	movs	r1, #143	@ 0x8f
 800af3c:	f001 fd3c 	bl	800c9b8 <__assert_func>
 800af40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af44:	6006      	str	r6, [r0, #0]
 800af46:	60c6      	str	r6, [r0, #12]
 800af48:	b13c      	cbz	r4, 800af5a <_Bfree+0x3a>
 800af4a:	69eb      	ldr	r3, [r5, #28]
 800af4c:	6862      	ldr	r2, [r4, #4]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af54:	6021      	str	r1, [r4, #0]
 800af56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	0800d74e 	.word	0x0800d74e
 800af60:	0800d7ce 	.word	0x0800d7ce

0800af64 <__multadd>:
 800af64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af68:	690d      	ldr	r5, [r1, #16]
 800af6a:	4607      	mov	r7, r0
 800af6c:	460c      	mov	r4, r1
 800af6e:	461e      	mov	r6, r3
 800af70:	f101 0c14 	add.w	ip, r1, #20
 800af74:	2000      	movs	r0, #0
 800af76:	f8dc 3000 	ldr.w	r3, [ip]
 800af7a:	b299      	uxth	r1, r3
 800af7c:	fb02 6101 	mla	r1, r2, r1, r6
 800af80:	0c1e      	lsrs	r6, r3, #16
 800af82:	0c0b      	lsrs	r3, r1, #16
 800af84:	fb02 3306 	mla	r3, r2, r6, r3
 800af88:	b289      	uxth	r1, r1
 800af8a:	3001      	adds	r0, #1
 800af8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af90:	4285      	cmp	r5, r0
 800af92:	f84c 1b04 	str.w	r1, [ip], #4
 800af96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af9a:	dcec      	bgt.n	800af76 <__multadd+0x12>
 800af9c:	b30e      	cbz	r6, 800afe2 <__multadd+0x7e>
 800af9e:	68a3      	ldr	r3, [r4, #8]
 800afa0:	42ab      	cmp	r3, r5
 800afa2:	dc19      	bgt.n	800afd8 <__multadd+0x74>
 800afa4:	6861      	ldr	r1, [r4, #4]
 800afa6:	4638      	mov	r0, r7
 800afa8:	3101      	adds	r1, #1
 800afaa:	f7ff ff79 	bl	800aea0 <_Balloc>
 800afae:	4680      	mov	r8, r0
 800afb0:	b928      	cbnz	r0, 800afbe <__multadd+0x5a>
 800afb2:	4602      	mov	r2, r0
 800afb4:	4b0c      	ldr	r3, [pc, #48]	@ (800afe8 <__multadd+0x84>)
 800afb6:	480d      	ldr	r0, [pc, #52]	@ (800afec <__multadd+0x88>)
 800afb8:	21ba      	movs	r1, #186	@ 0xba
 800afba:	f001 fcfd 	bl	800c9b8 <__assert_func>
 800afbe:	6922      	ldr	r2, [r4, #16]
 800afc0:	3202      	adds	r2, #2
 800afc2:	f104 010c 	add.w	r1, r4, #12
 800afc6:	0092      	lsls	r2, r2, #2
 800afc8:	300c      	adds	r0, #12
 800afca:	f001 fcdf 	bl	800c98c <memcpy>
 800afce:	4621      	mov	r1, r4
 800afd0:	4638      	mov	r0, r7
 800afd2:	f7ff ffa5 	bl	800af20 <_Bfree>
 800afd6:	4644      	mov	r4, r8
 800afd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afdc:	3501      	adds	r5, #1
 800afde:	615e      	str	r6, [r3, #20]
 800afe0:	6125      	str	r5, [r4, #16]
 800afe2:	4620      	mov	r0, r4
 800afe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe8:	0800d7bd 	.word	0x0800d7bd
 800afec:	0800d7ce 	.word	0x0800d7ce

0800aff0 <__s2b>:
 800aff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff4:	460c      	mov	r4, r1
 800aff6:	4615      	mov	r5, r2
 800aff8:	461f      	mov	r7, r3
 800affa:	2209      	movs	r2, #9
 800affc:	3308      	adds	r3, #8
 800affe:	4606      	mov	r6, r0
 800b000:	fb93 f3f2 	sdiv	r3, r3, r2
 800b004:	2100      	movs	r1, #0
 800b006:	2201      	movs	r2, #1
 800b008:	429a      	cmp	r2, r3
 800b00a:	db09      	blt.n	800b020 <__s2b+0x30>
 800b00c:	4630      	mov	r0, r6
 800b00e:	f7ff ff47 	bl	800aea0 <_Balloc>
 800b012:	b940      	cbnz	r0, 800b026 <__s2b+0x36>
 800b014:	4602      	mov	r2, r0
 800b016:	4b19      	ldr	r3, [pc, #100]	@ (800b07c <__s2b+0x8c>)
 800b018:	4819      	ldr	r0, [pc, #100]	@ (800b080 <__s2b+0x90>)
 800b01a:	21d3      	movs	r1, #211	@ 0xd3
 800b01c:	f001 fccc 	bl	800c9b8 <__assert_func>
 800b020:	0052      	lsls	r2, r2, #1
 800b022:	3101      	adds	r1, #1
 800b024:	e7f0      	b.n	800b008 <__s2b+0x18>
 800b026:	9b08      	ldr	r3, [sp, #32]
 800b028:	6143      	str	r3, [r0, #20]
 800b02a:	2d09      	cmp	r5, #9
 800b02c:	f04f 0301 	mov.w	r3, #1
 800b030:	6103      	str	r3, [r0, #16]
 800b032:	dd16      	ble.n	800b062 <__s2b+0x72>
 800b034:	f104 0909 	add.w	r9, r4, #9
 800b038:	46c8      	mov	r8, r9
 800b03a:	442c      	add	r4, r5
 800b03c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b040:	4601      	mov	r1, r0
 800b042:	3b30      	subs	r3, #48	@ 0x30
 800b044:	220a      	movs	r2, #10
 800b046:	4630      	mov	r0, r6
 800b048:	f7ff ff8c 	bl	800af64 <__multadd>
 800b04c:	45a0      	cmp	r8, r4
 800b04e:	d1f5      	bne.n	800b03c <__s2b+0x4c>
 800b050:	f1a5 0408 	sub.w	r4, r5, #8
 800b054:	444c      	add	r4, r9
 800b056:	1b2d      	subs	r5, r5, r4
 800b058:	1963      	adds	r3, r4, r5
 800b05a:	42bb      	cmp	r3, r7
 800b05c:	db04      	blt.n	800b068 <__s2b+0x78>
 800b05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b062:	340a      	adds	r4, #10
 800b064:	2509      	movs	r5, #9
 800b066:	e7f6      	b.n	800b056 <__s2b+0x66>
 800b068:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b06c:	4601      	mov	r1, r0
 800b06e:	3b30      	subs	r3, #48	@ 0x30
 800b070:	220a      	movs	r2, #10
 800b072:	4630      	mov	r0, r6
 800b074:	f7ff ff76 	bl	800af64 <__multadd>
 800b078:	e7ee      	b.n	800b058 <__s2b+0x68>
 800b07a:	bf00      	nop
 800b07c:	0800d7bd 	.word	0x0800d7bd
 800b080:	0800d7ce 	.word	0x0800d7ce

0800b084 <__hi0bits>:
 800b084:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b088:	4603      	mov	r3, r0
 800b08a:	bf36      	itet	cc
 800b08c:	0403      	lslcc	r3, r0, #16
 800b08e:	2000      	movcs	r0, #0
 800b090:	2010      	movcc	r0, #16
 800b092:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b096:	bf3c      	itt	cc
 800b098:	021b      	lslcc	r3, r3, #8
 800b09a:	3008      	addcc	r0, #8
 800b09c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0a0:	bf3c      	itt	cc
 800b0a2:	011b      	lslcc	r3, r3, #4
 800b0a4:	3004      	addcc	r0, #4
 800b0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0aa:	bf3c      	itt	cc
 800b0ac:	009b      	lslcc	r3, r3, #2
 800b0ae:	3002      	addcc	r0, #2
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	db05      	blt.n	800b0c0 <__hi0bits+0x3c>
 800b0b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b0b8:	f100 0001 	add.w	r0, r0, #1
 800b0bc:	bf08      	it	eq
 800b0be:	2020      	moveq	r0, #32
 800b0c0:	4770      	bx	lr

0800b0c2 <__lo0bits>:
 800b0c2:	6803      	ldr	r3, [r0, #0]
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	f013 0007 	ands.w	r0, r3, #7
 800b0ca:	d00b      	beq.n	800b0e4 <__lo0bits+0x22>
 800b0cc:	07d9      	lsls	r1, r3, #31
 800b0ce:	d421      	bmi.n	800b114 <__lo0bits+0x52>
 800b0d0:	0798      	lsls	r0, r3, #30
 800b0d2:	bf49      	itett	mi
 800b0d4:	085b      	lsrmi	r3, r3, #1
 800b0d6:	089b      	lsrpl	r3, r3, #2
 800b0d8:	2001      	movmi	r0, #1
 800b0da:	6013      	strmi	r3, [r2, #0]
 800b0dc:	bf5c      	itt	pl
 800b0de:	6013      	strpl	r3, [r2, #0]
 800b0e0:	2002      	movpl	r0, #2
 800b0e2:	4770      	bx	lr
 800b0e4:	b299      	uxth	r1, r3
 800b0e6:	b909      	cbnz	r1, 800b0ec <__lo0bits+0x2a>
 800b0e8:	0c1b      	lsrs	r3, r3, #16
 800b0ea:	2010      	movs	r0, #16
 800b0ec:	b2d9      	uxtb	r1, r3
 800b0ee:	b909      	cbnz	r1, 800b0f4 <__lo0bits+0x32>
 800b0f0:	3008      	adds	r0, #8
 800b0f2:	0a1b      	lsrs	r3, r3, #8
 800b0f4:	0719      	lsls	r1, r3, #28
 800b0f6:	bf04      	itt	eq
 800b0f8:	091b      	lsreq	r3, r3, #4
 800b0fa:	3004      	addeq	r0, #4
 800b0fc:	0799      	lsls	r1, r3, #30
 800b0fe:	bf04      	itt	eq
 800b100:	089b      	lsreq	r3, r3, #2
 800b102:	3002      	addeq	r0, #2
 800b104:	07d9      	lsls	r1, r3, #31
 800b106:	d403      	bmi.n	800b110 <__lo0bits+0x4e>
 800b108:	085b      	lsrs	r3, r3, #1
 800b10a:	f100 0001 	add.w	r0, r0, #1
 800b10e:	d003      	beq.n	800b118 <__lo0bits+0x56>
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	4770      	bx	lr
 800b114:	2000      	movs	r0, #0
 800b116:	4770      	bx	lr
 800b118:	2020      	movs	r0, #32
 800b11a:	4770      	bx	lr

0800b11c <__i2b>:
 800b11c:	b510      	push	{r4, lr}
 800b11e:	460c      	mov	r4, r1
 800b120:	2101      	movs	r1, #1
 800b122:	f7ff febd 	bl	800aea0 <_Balloc>
 800b126:	4602      	mov	r2, r0
 800b128:	b928      	cbnz	r0, 800b136 <__i2b+0x1a>
 800b12a:	4b05      	ldr	r3, [pc, #20]	@ (800b140 <__i2b+0x24>)
 800b12c:	4805      	ldr	r0, [pc, #20]	@ (800b144 <__i2b+0x28>)
 800b12e:	f240 1145 	movw	r1, #325	@ 0x145
 800b132:	f001 fc41 	bl	800c9b8 <__assert_func>
 800b136:	2301      	movs	r3, #1
 800b138:	6144      	str	r4, [r0, #20]
 800b13a:	6103      	str	r3, [r0, #16]
 800b13c:	bd10      	pop	{r4, pc}
 800b13e:	bf00      	nop
 800b140:	0800d7bd 	.word	0x0800d7bd
 800b144:	0800d7ce 	.word	0x0800d7ce

0800b148 <__multiply>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	4614      	mov	r4, r2
 800b14e:	690a      	ldr	r2, [r1, #16]
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	429a      	cmp	r2, r3
 800b154:	bfa8      	it	ge
 800b156:	4623      	movge	r3, r4
 800b158:	460f      	mov	r7, r1
 800b15a:	bfa4      	itt	ge
 800b15c:	460c      	movge	r4, r1
 800b15e:	461f      	movge	r7, r3
 800b160:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b164:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b168:	68a3      	ldr	r3, [r4, #8]
 800b16a:	6861      	ldr	r1, [r4, #4]
 800b16c:	eb0a 0609 	add.w	r6, sl, r9
 800b170:	42b3      	cmp	r3, r6
 800b172:	b085      	sub	sp, #20
 800b174:	bfb8      	it	lt
 800b176:	3101      	addlt	r1, #1
 800b178:	f7ff fe92 	bl	800aea0 <_Balloc>
 800b17c:	b930      	cbnz	r0, 800b18c <__multiply+0x44>
 800b17e:	4602      	mov	r2, r0
 800b180:	4b44      	ldr	r3, [pc, #272]	@ (800b294 <__multiply+0x14c>)
 800b182:	4845      	ldr	r0, [pc, #276]	@ (800b298 <__multiply+0x150>)
 800b184:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b188:	f001 fc16 	bl	800c9b8 <__assert_func>
 800b18c:	f100 0514 	add.w	r5, r0, #20
 800b190:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b194:	462b      	mov	r3, r5
 800b196:	2200      	movs	r2, #0
 800b198:	4543      	cmp	r3, r8
 800b19a:	d321      	bcc.n	800b1e0 <__multiply+0x98>
 800b19c:	f107 0114 	add.w	r1, r7, #20
 800b1a0:	f104 0214 	add.w	r2, r4, #20
 800b1a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b1a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b1ac:	9302      	str	r3, [sp, #8]
 800b1ae:	1b13      	subs	r3, r2, r4
 800b1b0:	3b15      	subs	r3, #21
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	f104 0715 	add.w	r7, r4, #21
 800b1bc:	42ba      	cmp	r2, r7
 800b1be:	bf38      	it	cc
 800b1c0:	2304      	movcc	r3, #4
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	9b02      	ldr	r3, [sp, #8]
 800b1c6:	9103      	str	r1, [sp, #12]
 800b1c8:	428b      	cmp	r3, r1
 800b1ca:	d80c      	bhi.n	800b1e6 <__multiply+0x9e>
 800b1cc:	2e00      	cmp	r6, #0
 800b1ce:	dd03      	ble.n	800b1d8 <__multiply+0x90>
 800b1d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d05b      	beq.n	800b290 <__multiply+0x148>
 800b1d8:	6106      	str	r6, [r0, #16]
 800b1da:	b005      	add	sp, #20
 800b1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e0:	f843 2b04 	str.w	r2, [r3], #4
 800b1e4:	e7d8      	b.n	800b198 <__multiply+0x50>
 800b1e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b1ea:	f1ba 0f00 	cmp.w	sl, #0
 800b1ee:	d024      	beq.n	800b23a <__multiply+0xf2>
 800b1f0:	f104 0e14 	add.w	lr, r4, #20
 800b1f4:	46a9      	mov	r9, r5
 800b1f6:	f04f 0c00 	mov.w	ip, #0
 800b1fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1fe:	f8d9 3000 	ldr.w	r3, [r9]
 800b202:	fa1f fb87 	uxth.w	fp, r7
 800b206:	b29b      	uxth	r3, r3
 800b208:	fb0a 330b 	mla	r3, sl, fp, r3
 800b20c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b210:	f8d9 7000 	ldr.w	r7, [r9]
 800b214:	4463      	add	r3, ip
 800b216:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b21a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b21e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b222:	b29b      	uxth	r3, r3
 800b224:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b228:	4572      	cmp	r2, lr
 800b22a:	f849 3b04 	str.w	r3, [r9], #4
 800b22e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b232:	d8e2      	bhi.n	800b1fa <__multiply+0xb2>
 800b234:	9b01      	ldr	r3, [sp, #4]
 800b236:	f845 c003 	str.w	ip, [r5, r3]
 800b23a:	9b03      	ldr	r3, [sp, #12]
 800b23c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b240:	3104      	adds	r1, #4
 800b242:	f1b9 0f00 	cmp.w	r9, #0
 800b246:	d021      	beq.n	800b28c <__multiply+0x144>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	f104 0c14 	add.w	ip, r4, #20
 800b24e:	46ae      	mov	lr, r5
 800b250:	f04f 0a00 	mov.w	sl, #0
 800b254:	f8bc b000 	ldrh.w	fp, [ip]
 800b258:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b25c:	fb09 770b 	mla	r7, r9, fp, r7
 800b260:	4457      	add	r7, sl
 800b262:	b29b      	uxth	r3, r3
 800b264:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b268:	f84e 3b04 	str.w	r3, [lr], #4
 800b26c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b270:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b274:	f8be 3000 	ldrh.w	r3, [lr]
 800b278:	fb09 330a 	mla	r3, r9, sl, r3
 800b27c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b280:	4562      	cmp	r2, ip
 800b282:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b286:	d8e5      	bhi.n	800b254 <__multiply+0x10c>
 800b288:	9f01      	ldr	r7, [sp, #4]
 800b28a:	51eb      	str	r3, [r5, r7]
 800b28c:	3504      	adds	r5, #4
 800b28e:	e799      	b.n	800b1c4 <__multiply+0x7c>
 800b290:	3e01      	subs	r6, #1
 800b292:	e79b      	b.n	800b1cc <__multiply+0x84>
 800b294:	0800d7bd 	.word	0x0800d7bd
 800b298:	0800d7ce 	.word	0x0800d7ce

0800b29c <__pow5mult>:
 800b29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a0:	4615      	mov	r5, r2
 800b2a2:	f012 0203 	ands.w	r2, r2, #3
 800b2a6:	4607      	mov	r7, r0
 800b2a8:	460e      	mov	r6, r1
 800b2aa:	d007      	beq.n	800b2bc <__pow5mult+0x20>
 800b2ac:	4c25      	ldr	r4, [pc, #148]	@ (800b344 <__pow5mult+0xa8>)
 800b2ae:	3a01      	subs	r2, #1
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2b6:	f7ff fe55 	bl	800af64 <__multadd>
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	10ad      	asrs	r5, r5, #2
 800b2be:	d03d      	beq.n	800b33c <__pow5mult+0xa0>
 800b2c0:	69fc      	ldr	r4, [r7, #28]
 800b2c2:	b97c      	cbnz	r4, 800b2e4 <__pow5mult+0x48>
 800b2c4:	2010      	movs	r0, #16
 800b2c6:	f7ff fd35 	bl	800ad34 <malloc>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	61f8      	str	r0, [r7, #28]
 800b2ce:	b928      	cbnz	r0, 800b2dc <__pow5mult+0x40>
 800b2d0:	4b1d      	ldr	r3, [pc, #116]	@ (800b348 <__pow5mult+0xac>)
 800b2d2:	481e      	ldr	r0, [pc, #120]	@ (800b34c <__pow5mult+0xb0>)
 800b2d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b2d8:	f001 fb6e 	bl	800c9b8 <__assert_func>
 800b2dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2e0:	6004      	str	r4, [r0, #0]
 800b2e2:	60c4      	str	r4, [r0, #12]
 800b2e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b2e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2ec:	b94c      	cbnz	r4, 800b302 <__pow5mult+0x66>
 800b2ee:	f240 2171 	movw	r1, #625	@ 0x271
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	f7ff ff12 	bl	800b11c <__i2b>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2fe:	4604      	mov	r4, r0
 800b300:	6003      	str	r3, [r0, #0]
 800b302:	f04f 0900 	mov.w	r9, #0
 800b306:	07eb      	lsls	r3, r5, #31
 800b308:	d50a      	bpl.n	800b320 <__pow5mult+0x84>
 800b30a:	4631      	mov	r1, r6
 800b30c:	4622      	mov	r2, r4
 800b30e:	4638      	mov	r0, r7
 800b310:	f7ff ff1a 	bl	800b148 <__multiply>
 800b314:	4631      	mov	r1, r6
 800b316:	4680      	mov	r8, r0
 800b318:	4638      	mov	r0, r7
 800b31a:	f7ff fe01 	bl	800af20 <_Bfree>
 800b31e:	4646      	mov	r6, r8
 800b320:	106d      	asrs	r5, r5, #1
 800b322:	d00b      	beq.n	800b33c <__pow5mult+0xa0>
 800b324:	6820      	ldr	r0, [r4, #0]
 800b326:	b938      	cbnz	r0, 800b338 <__pow5mult+0x9c>
 800b328:	4622      	mov	r2, r4
 800b32a:	4621      	mov	r1, r4
 800b32c:	4638      	mov	r0, r7
 800b32e:	f7ff ff0b 	bl	800b148 <__multiply>
 800b332:	6020      	str	r0, [r4, #0]
 800b334:	f8c0 9000 	str.w	r9, [r0]
 800b338:	4604      	mov	r4, r0
 800b33a:	e7e4      	b.n	800b306 <__pow5mult+0x6a>
 800b33c:	4630      	mov	r0, r6
 800b33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b342:	bf00      	nop
 800b344:	0800d828 	.word	0x0800d828
 800b348:	0800d74e 	.word	0x0800d74e
 800b34c:	0800d7ce 	.word	0x0800d7ce

0800b350 <__lshift>:
 800b350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b354:	460c      	mov	r4, r1
 800b356:	6849      	ldr	r1, [r1, #4]
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b35e:	68a3      	ldr	r3, [r4, #8]
 800b360:	4607      	mov	r7, r0
 800b362:	4691      	mov	r9, r2
 800b364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b368:	f108 0601 	add.w	r6, r8, #1
 800b36c:	42b3      	cmp	r3, r6
 800b36e:	db0b      	blt.n	800b388 <__lshift+0x38>
 800b370:	4638      	mov	r0, r7
 800b372:	f7ff fd95 	bl	800aea0 <_Balloc>
 800b376:	4605      	mov	r5, r0
 800b378:	b948      	cbnz	r0, 800b38e <__lshift+0x3e>
 800b37a:	4602      	mov	r2, r0
 800b37c:	4b28      	ldr	r3, [pc, #160]	@ (800b420 <__lshift+0xd0>)
 800b37e:	4829      	ldr	r0, [pc, #164]	@ (800b424 <__lshift+0xd4>)
 800b380:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b384:	f001 fb18 	bl	800c9b8 <__assert_func>
 800b388:	3101      	adds	r1, #1
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	e7ee      	b.n	800b36c <__lshift+0x1c>
 800b38e:	2300      	movs	r3, #0
 800b390:	f100 0114 	add.w	r1, r0, #20
 800b394:	f100 0210 	add.w	r2, r0, #16
 800b398:	4618      	mov	r0, r3
 800b39a:	4553      	cmp	r3, sl
 800b39c:	db33      	blt.n	800b406 <__lshift+0xb6>
 800b39e:	6920      	ldr	r0, [r4, #16]
 800b3a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3a4:	f104 0314 	add.w	r3, r4, #20
 800b3a8:	f019 091f 	ands.w	r9, r9, #31
 800b3ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3b4:	d02b      	beq.n	800b40e <__lshift+0xbe>
 800b3b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b3ba:	468a      	mov	sl, r1
 800b3bc:	2200      	movs	r2, #0
 800b3be:	6818      	ldr	r0, [r3, #0]
 800b3c0:	fa00 f009 	lsl.w	r0, r0, r9
 800b3c4:	4310      	orrs	r0, r2
 800b3c6:	f84a 0b04 	str.w	r0, [sl], #4
 800b3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ce:	459c      	cmp	ip, r3
 800b3d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3d4:	d8f3      	bhi.n	800b3be <__lshift+0x6e>
 800b3d6:	ebac 0304 	sub.w	r3, ip, r4
 800b3da:	3b15      	subs	r3, #21
 800b3dc:	f023 0303 	bic.w	r3, r3, #3
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	f104 0015 	add.w	r0, r4, #21
 800b3e6:	4584      	cmp	ip, r0
 800b3e8:	bf38      	it	cc
 800b3ea:	2304      	movcc	r3, #4
 800b3ec:	50ca      	str	r2, [r1, r3]
 800b3ee:	b10a      	cbz	r2, 800b3f4 <__lshift+0xa4>
 800b3f0:	f108 0602 	add.w	r6, r8, #2
 800b3f4:	3e01      	subs	r6, #1
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	612e      	str	r6, [r5, #16]
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	f7ff fd90 	bl	800af20 <_Bfree>
 800b400:	4628      	mov	r0, r5
 800b402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b406:	f842 0f04 	str.w	r0, [r2, #4]!
 800b40a:	3301      	adds	r3, #1
 800b40c:	e7c5      	b.n	800b39a <__lshift+0x4a>
 800b40e:	3904      	subs	r1, #4
 800b410:	f853 2b04 	ldr.w	r2, [r3], #4
 800b414:	f841 2f04 	str.w	r2, [r1, #4]!
 800b418:	459c      	cmp	ip, r3
 800b41a:	d8f9      	bhi.n	800b410 <__lshift+0xc0>
 800b41c:	e7ea      	b.n	800b3f4 <__lshift+0xa4>
 800b41e:	bf00      	nop
 800b420:	0800d7bd 	.word	0x0800d7bd
 800b424:	0800d7ce 	.word	0x0800d7ce

0800b428 <__mcmp>:
 800b428:	690a      	ldr	r2, [r1, #16]
 800b42a:	4603      	mov	r3, r0
 800b42c:	6900      	ldr	r0, [r0, #16]
 800b42e:	1a80      	subs	r0, r0, r2
 800b430:	b530      	push	{r4, r5, lr}
 800b432:	d10e      	bne.n	800b452 <__mcmp+0x2a>
 800b434:	3314      	adds	r3, #20
 800b436:	3114      	adds	r1, #20
 800b438:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b43c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b440:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b448:	4295      	cmp	r5, r2
 800b44a:	d003      	beq.n	800b454 <__mcmp+0x2c>
 800b44c:	d205      	bcs.n	800b45a <__mcmp+0x32>
 800b44e:	f04f 30ff 	mov.w	r0, #4294967295
 800b452:	bd30      	pop	{r4, r5, pc}
 800b454:	42a3      	cmp	r3, r4
 800b456:	d3f3      	bcc.n	800b440 <__mcmp+0x18>
 800b458:	e7fb      	b.n	800b452 <__mcmp+0x2a>
 800b45a:	2001      	movs	r0, #1
 800b45c:	e7f9      	b.n	800b452 <__mcmp+0x2a>
	...

0800b460 <__mdiff>:
 800b460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	4689      	mov	r9, r1
 800b466:	4606      	mov	r6, r0
 800b468:	4611      	mov	r1, r2
 800b46a:	4648      	mov	r0, r9
 800b46c:	4614      	mov	r4, r2
 800b46e:	f7ff ffdb 	bl	800b428 <__mcmp>
 800b472:	1e05      	subs	r5, r0, #0
 800b474:	d112      	bne.n	800b49c <__mdiff+0x3c>
 800b476:	4629      	mov	r1, r5
 800b478:	4630      	mov	r0, r6
 800b47a:	f7ff fd11 	bl	800aea0 <_Balloc>
 800b47e:	4602      	mov	r2, r0
 800b480:	b928      	cbnz	r0, 800b48e <__mdiff+0x2e>
 800b482:	4b3f      	ldr	r3, [pc, #252]	@ (800b580 <__mdiff+0x120>)
 800b484:	f240 2137 	movw	r1, #567	@ 0x237
 800b488:	483e      	ldr	r0, [pc, #248]	@ (800b584 <__mdiff+0x124>)
 800b48a:	f001 fa95 	bl	800c9b8 <__assert_func>
 800b48e:	2301      	movs	r3, #1
 800b490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b494:	4610      	mov	r0, r2
 800b496:	b003      	add	sp, #12
 800b498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49c:	bfbc      	itt	lt
 800b49e:	464b      	movlt	r3, r9
 800b4a0:	46a1      	movlt	r9, r4
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b4a8:	bfba      	itte	lt
 800b4aa:	461c      	movlt	r4, r3
 800b4ac:	2501      	movlt	r5, #1
 800b4ae:	2500      	movge	r5, #0
 800b4b0:	f7ff fcf6 	bl	800aea0 <_Balloc>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	b918      	cbnz	r0, 800b4c0 <__mdiff+0x60>
 800b4b8:	4b31      	ldr	r3, [pc, #196]	@ (800b580 <__mdiff+0x120>)
 800b4ba:	f240 2145 	movw	r1, #581	@ 0x245
 800b4be:	e7e3      	b.n	800b488 <__mdiff+0x28>
 800b4c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b4c4:	6926      	ldr	r6, [r4, #16]
 800b4c6:	60c5      	str	r5, [r0, #12]
 800b4c8:	f109 0310 	add.w	r3, r9, #16
 800b4cc:	f109 0514 	add.w	r5, r9, #20
 800b4d0:	f104 0e14 	add.w	lr, r4, #20
 800b4d4:	f100 0b14 	add.w	fp, r0, #20
 800b4d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b4dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b4e0:	9301      	str	r3, [sp, #4]
 800b4e2:	46d9      	mov	r9, fp
 800b4e4:	f04f 0c00 	mov.w	ip, #0
 800b4e8:	9b01      	ldr	r3, [sp, #4]
 800b4ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	fa1f f38a 	uxth.w	r3, sl
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	b283      	uxth	r3, r0
 800b4fc:	1acb      	subs	r3, r1, r3
 800b4fe:	0c00      	lsrs	r0, r0, #16
 800b500:	4463      	add	r3, ip
 800b502:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b506:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b510:	4576      	cmp	r6, lr
 800b512:	f849 3b04 	str.w	r3, [r9], #4
 800b516:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b51a:	d8e5      	bhi.n	800b4e8 <__mdiff+0x88>
 800b51c:	1b33      	subs	r3, r6, r4
 800b51e:	3b15      	subs	r3, #21
 800b520:	f023 0303 	bic.w	r3, r3, #3
 800b524:	3415      	adds	r4, #21
 800b526:	3304      	adds	r3, #4
 800b528:	42a6      	cmp	r6, r4
 800b52a:	bf38      	it	cc
 800b52c:	2304      	movcc	r3, #4
 800b52e:	441d      	add	r5, r3
 800b530:	445b      	add	r3, fp
 800b532:	461e      	mov	r6, r3
 800b534:	462c      	mov	r4, r5
 800b536:	4544      	cmp	r4, r8
 800b538:	d30e      	bcc.n	800b558 <__mdiff+0xf8>
 800b53a:	f108 0103 	add.w	r1, r8, #3
 800b53e:	1b49      	subs	r1, r1, r5
 800b540:	f021 0103 	bic.w	r1, r1, #3
 800b544:	3d03      	subs	r5, #3
 800b546:	45a8      	cmp	r8, r5
 800b548:	bf38      	it	cc
 800b54a:	2100      	movcc	r1, #0
 800b54c:	440b      	add	r3, r1
 800b54e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b552:	b191      	cbz	r1, 800b57a <__mdiff+0x11a>
 800b554:	6117      	str	r7, [r2, #16]
 800b556:	e79d      	b.n	800b494 <__mdiff+0x34>
 800b558:	f854 1b04 	ldr.w	r1, [r4], #4
 800b55c:	46e6      	mov	lr, ip
 800b55e:	0c08      	lsrs	r0, r1, #16
 800b560:	fa1c fc81 	uxtah	ip, ip, r1
 800b564:	4471      	add	r1, lr
 800b566:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b56a:	b289      	uxth	r1, r1
 800b56c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b570:	f846 1b04 	str.w	r1, [r6], #4
 800b574:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b578:	e7dd      	b.n	800b536 <__mdiff+0xd6>
 800b57a:	3f01      	subs	r7, #1
 800b57c:	e7e7      	b.n	800b54e <__mdiff+0xee>
 800b57e:	bf00      	nop
 800b580:	0800d7bd 	.word	0x0800d7bd
 800b584:	0800d7ce 	.word	0x0800d7ce

0800b588 <__ulp>:
 800b588:	b082      	sub	sp, #8
 800b58a:	ed8d 0b00 	vstr	d0, [sp]
 800b58e:	9a01      	ldr	r2, [sp, #4]
 800b590:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d0 <__ulp+0x48>)
 800b592:	4013      	ands	r3, r2
 800b594:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	dc08      	bgt.n	800b5ae <__ulp+0x26>
 800b59c:	425b      	negs	r3, r3
 800b59e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b5a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5a6:	da04      	bge.n	800b5b2 <__ulp+0x2a>
 800b5a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b5ac:	4113      	asrs	r3, r2
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	e008      	b.n	800b5c4 <__ulp+0x3c>
 800b5b2:	f1a2 0314 	sub.w	r3, r2, #20
 800b5b6:	2b1e      	cmp	r3, #30
 800b5b8:	bfda      	itte	le
 800b5ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b5be:	40da      	lsrle	r2, r3
 800b5c0:	2201      	movgt	r2, #1
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	ec41 0b10 	vmov	d0, r0, r1
 800b5cc:	b002      	add	sp, #8
 800b5ce:	4770      	bx	lr
 800b5d0:	7ff00000 	.word	0x7ff00000

0800b5d4 <__b2d>:
 800b5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d8:	6906      	ldr	r6, [r0, #16]
 800b5da:	f100 0814 	add.w	r8, r0, #20
 800b5de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b5e2:	1f37      	subs	r7, r6, #4
 800b5e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	f7ff fd4b 	bl	800b084 <__hi0bits>
 800b5ee:	f1c0 0320 	rsb	r3, r0, #32
 800b5f2:	280a      	cmp	r0, #10
 800b5f4:	600b      	str	r3, [r1, #0]
 800b5f6:	491b      	ldr	r1, [pc, #108]	@ (800b664 <__b2d+0x90>)
 800b5f8:	dc15      	bgt.n	800b626 <__b2d+0x52>
 800b5fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800b5fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800b602:	45b8      	cmp	r8, r7
 800b604:	ea43 0501 	orr.w	r5, r3, r1
 800b608:	bf34      	ite	cc
 800b60a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b60e:	2300      	movcs	r3, #0
 800b610:	3015      	adds	r0, #21
 800b612:	fa02 f000 	lsl.w	r0, r2, r0
 800b616:	fa23 f30c 	lsr.w	r3, r3, ip
 800b61a:	4303      	orrs	r3, r0
 800b61c:	461c      	mov	r4, r3
 800b61e:	ec45 4b10 	vmov	d0, r4, r5
 800b622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b626:	45b8      	cmp	r8, r7
 800b628:	bf3a      	itte	cc
 800b62a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b62e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b632:	2300      	movcs	r3, #0
 800b634:	380b      	subs	r0, #11
 800b636:	d012      	beq.n	800b65e <__b2d+0x8a>
 800b638:	f1c0 0120 	rsb	r1, r0, #32
 800b63c:	fa23 f401 	lsr.w	r4, r3, r1
 800b640:	4082      	lsls	r2, r0
 800b642:	4322      	orrs	r2, r4
 800b644:	4547      	cmp	r7, r8
 800b646:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b64a:	bf8c      	ite	hi
 800b64c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b650:	2200      	movls	r2, #0
 800b652:	4083      	lsls	r3, r0
 800b654:	40ca      	lsrs	r2, r1
 800b656:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b65a:	4313      	orrs	r3, r2
 800b65c:	e7de      	b.n	800b61c <__b2d+0x48>
 800b65e:	ea42 0501 	orr.w	r5, r2, r1
 800b662:	e7db      	b.n	800b61c <__b2d+0x48>
 800b664:	3ff00000 	.word	0x3ff00000

0800b668 <__d2b>:
 800b668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b66c:	460f      	mov	r7, r1
 800b66e:	2101      	movs	r1, #1
 800b670:	ec59 8b10 	vmov	r8, r9, d0
 800b674:	4616      	mov	r6, r2
 800b676:	f7ff fc13 	bl	800aea0 <_Balloc>
 800b67a:	4604      	mov	r4, r0
 800b67c:	b930      	cbnz	r0, 800b68c <__d2b+0x24>
 800b67e:	4602      	mov	r2, r0
 800b680:	4b23      	ldr	r3, [pc, #140]	@ (800b710 <__d2b+0xa8>)
 800b682:	4824      	ldr	r0, [pc, #144]	@ (800b714 <__d2b+0xac>)
 800b684:	f240 310f 	movw	r1, #783	@ 0x30f
 800b688:	f001 f996 	bl	800c9b8 <__assert_func>
 800b68c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b694:	b10d      	cbz	r5, 800b69a <__d2b+0x32>
 800b696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b69a:	9301      	str	r3, [sp, #4]
 800b69c:	f1b8 0300 	subs.w	r3, r8, #0
 800b6a0:	d023      	beq.n	800b6ea <__d2b+0x82>
 800b6a2:	4668      	mov	r0, sp
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	f7ff fd0c 	bl	800b0c2 <__lo0bits>
 800b6aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6ae:	b1d0      	cbz	r0, 800b6e6 <__d2b+0x7e>
 800b6b0:	f1c0 0320 	rsb	r3, r0, #32
 800b6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b8:	430b      	orrs	r3, r1
 800b6ba:	40c2      	lsrs	r2, r0
 800b6bc:	6163      	str	r3, [r4, #20]
 800b6be:	9201      	str	r2, [sp, #4]
 800b6c0:	9b01      	ldr	r3, [sp, #4]
 800b6c2:	61a3      	str	r3, [r4, #24]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bf0c      	ite	eq
 800b6c8:	2201      	moveq	r2, #1
 800b6ca:	2202      	movne	r2, #2
 800b6cc:	6122      	str	r2, [r4, #16]
 800b6ce:	b1a5      	cbz	r5, 800b6fa <__d2b+0x92>
 800b6d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6d4:	4405      	add	r5, r0
 800b6d6:	603d      	str	r5, [r7, #0]
 800b6d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6dc:	6030      	str	r0, [r6, #0]
 800b6de:	4620      	mov	r0, r4
 800b6e0:	b003      	add	sp, #12
 800b6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6e6:	6161      	str	r1, [r4, #20]
 800b6e8:	e7ea      	b.n	800b6c0 <__d2b+0x58>
 800b6ea:	a801      	add	r0, sp, #4
 800b6ec:	f7ff fce9 	bl	800b0c2 <__lo0bits>
 800b6f0:	9b01      	ldr	r3, [sp, #4]
 800b6f2:	6163      	str	r3, [r4, #20]
 800b6f4:	3020      	adds	r0, #32
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	e7e8      	b.n	800b6cc <__d2b+0x64>
 800b6fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b702:	6038      	str	r0, [r7, #0]
 800b704:	6918      	ldr	r0, [r3, #16]
 800b706:	f7ff fcbd 	bl	800b084 <__hi0bits>
 800b70a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b70e:	e7e5      	b.n	800b6dc <__d2b+0x74>
 800b710:	0800d7bd 	.word	0x0800d7bd
 800b714:	0800d7ce 	.word	0x0800d7ce

0800b718 <__ratio>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	b085      	sub	sp, #20
 800b71e:	e9cd 1000 	strd	r1, r0, [sp]
 800b722:	a902      	add	r1, sp, #8
 800b724:	f7ff ff56 	bl	800b5d4 <__b2d>
 800b728:	9800      	ldr	r0, [sp, #0]
 800b72a:	a903      	add	r1, sp, #12
 800b72c:	ec55 4b10 	vmov	r4, r5, d0
 800b730:	f7ff ff50 	bl	800b5d4 <__b2d>
 800b734:	9b01      	ldr	r3, [sp, #4]
 800b736:	6919      	ldr	r1, [r3, #16]
 800b738:	9b00      	ldr	r3, [sp, #0]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	1ac9      	subs	r1, r1, r3
 800b73e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b742:	1a9b      	subs	r3, r3, r2
 800b744:	ec5b ab10 	vmov	sl, fp, d0
 800b748:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	bfce      	itee	gt
 800b750:	462a      	movgt	r2, r5
 800b752:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b756:	465a      	movle	r2, fp
 800b758:	462f      	mov	r7, r5
 800b75a:	46d9      	mov	r9, fp
 800b75c:	bfcc      	ite	gt
 800b75e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b762:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b766:	464b      	mov	r3, r9
 800b768:	4652      	mov	r2, sl
 800b76a:	4620      	mov	r0, r4
 800b76c:	4639      	mov	r1, r7
 800b76e:	f7f5 f86d 	bl	800084c <__aeabi_ddiv>
 800b772:	ec41 0b10 	vmov	d0, r0, r1
 800b776:	b005      	add	sp, #20
 800b778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b77c <__copybits>:
 800b77c:	3901      	subs	r1, #1
 800b77e:	b570      	push	{r4, r5, r6, lr}
 800b780:	1149      	asrs	r1, r1, #5
 800b782:	6914      	ldr	r4, [r2, #16]
 800b784:	3101      	adds	r1, #1
 800b786:	f102 0314 	add.w	r3, r2, #20
 800b78a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b78e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b792:	1f05      	subs	r5, r0, #4
 800b794:	42a3      	cmp	r3, r4
 800b796:	d30c      	bcc.n	800b7b2 <__copybits+0x36>
 800b798:	1aa3      	subs	r3, r4, r2
 800b79a:	3b11      	subs	r3, #17
 800b79c:	f023 0303 	bic.w	r3, r3, #3
 800b7a0:	3211      	adds	r2, #17
 800b7a2:	42a2      	cmp	r2, r4
 800b7a4:	bf88      	it	hi
 800b7a6:	2300      	movhi	r3, #0
 800b7a8:	4418      	add	r0, r3
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	4288      	cmp	r0, r1
 800b7ae:	d305      	bcc.n	800b7bc <__copybits+0x40>
 800b7b0:	bd70      	pop	{r4, r5, r6, pc}
 800b7b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7ba:	e7eb      	b.n	800b794 <__copybits+0x18>
 800b7bc:	f840 3b04 	str.w	r3, [r0], #4
 800b7c0:	e7f4      	b.n	800b7ac <__copybits+0x30>

0800b7c2 <__any_on>:
 800b7c2:	f100 0214 	add.w	r2, r0, #20
 800b7c6:	6900      	ldr	r0, [r0, #16]
 800b7c8:	114b      	asrs	r3, r1, #5
 800b7ca:	4298      	cmp	r0, r3
 800b7cc:	b510      	push	{r4, lr}
 800b7ce:	db11      	blt.n	800b7f4 <__any_on+0x32>
 800b7d0:	dd0a      	ble.n	800b7e8 <__any_on+0x26>
 800b7d2:	f011 011f 	ands.w	r1, r1, #31
 800b7d6:	d007      	beq.n	800b7e8 <__any_on+0x26>
 800b7d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7dc:	fa24 f001 	lsr.w	r0, r4, r1
 800b7e0:	fa00 f101 	lsl.w	r1, r0, r1
 800b7e4:	428c      	cmp	r4, r1
 800b7e6:	d10b      	bne.n	800b800 <__any_on+0x3e>
 800b7e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d803      	bhi.n	800b7f8 <__any_on+0x36>
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	bd10      	pop	{r4, pc}
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	e7f7      	b.n	800b7e8 <__any_on+0x26>
 800b7f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7fc:	2900      	cmp	r1, #0
 800b7fe:	d0f5      	beq.n	800b7ec <__any_on+0x2a>
 800b800:	2001      	movs	r0, #1
 800b802:	e7f6      	b.n	800b7f2 <__any_on+0x30>

0800b804 <sulp>:
 800b804:	b570      	push	{r4, r5, r6, lr}
 800b806:	4604      	mov	r4, r0
 800b808:	460d      	mov	r5, r1
 800b80a:	ec45 4b10 	vmov	d0, r4, r5
 800b80e:	4616      	mov	r6, r2
 800b810:	f7ff feba 	bl	800b588 <__ulp>
 800b814:	ec51 0b10 	vmov	r0, r1, d0
 800b818:	b17e      	cbz	r6, 800b83a <sulp+0x36>
 800b81a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b81e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b822:	2b00      	cmp	r3, #0
 800b824:	dd09      	ble.n	800b83a <sulp+0x36>
 800b826:	051b      	lsls	r3, r3, #20
 800b828:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b82c:	2400      	movs	r4, #0
 800b82e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b832:	4622      	mov	r2, r4
 800b834:	462b      	mov	r3, r5
 800b836:	f7f4 fedf 	bl	80005f8 <__aeabi_dmul>
 800b83a:	ec41 0b10 	vmov	d0, r0, r1
 800b83e:	bd70      	pop	{r4, r5, r6, pc}

0800b840 <_strtod_l>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	b09f      	sub	sp, #124	@ 0x7c
 800b846:	460c      	mov	r4, r1
 800b848:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b84a:	2200      	movs	r2, #0
 800b84c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b84e:	9005      	str	r0, [sp, #20]
 800b850:	f04f 0a00 	mov.w	sl, #0
 800b854:	f04f 0b00 	mov.w	fp, #0
 800b858:	460a      	mov	r2, r1
 800b85a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b85c:	7811      	ldrb	r1, [r2, #0]
 800b85e:	292b      	cmp	r1, #43	@ 0x2b
 800b860:	d04a      	beq.n	800b8f8 <_strtod_l+0xb8>
 800b862:	d838      	bhi.n	800b8d6 <_strtod_l+0x96>
 800b864:	290d      	cmp	r1, #13
 800b866:	d832      	bhi.n	800b8ce <_strtod_l+0x8e>
 800b868:	2908      	cmp	r1, #8
 800b86a:	d832      	bhi.n	800b8d2 <_strtod_l+0x92>
 800b86c:	2900      	cmp	r1, #0
 800b86e:	d03b      	beq.n	800b8e8 <_strtod_l+0xa8>
 800b870:	2200      	movs	r2, #0
 800b872:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b874:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b876:	782a      	ldrb	r2, [r5, #0]
 800b878:	2a30      	cmp	r2, #48	@ 0x30
 800b87a:	f040 80b3 	bne.w	800b9e4 <_strtod_l+0x1a4>
 800b87e:	786a      	ldrb	r2, [r5, #1]
 800b880:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b884:	2a58      	cmp	r2, #88	@ 0x58
 800b886:	d16e      	bne.n	800b966 <_strtod_l+0x126>
 800b888:	9302      	str	r3, [sp, #8]
 800b88a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b88c:	9301      	str	r3, [sp, #4]
 800b88e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	4a8e      	ldr	r2, [pc, #568]	@ (800bacc <_strtod_l+0x28c>)
 800b894:	9805      	ldr	r0, [sp, #20]
 800b896:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b898:	a919      	add	r1, sp, #100	@ 0x64
 800b89a:	f001 f927 	bl	800caec <__gethex>
 800b89e:	f010 060f 	ands.w	r6, r0, #15
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	d005      	beq.n	800b8b2 <_strtod_l+0x72>
 800b8a6:	2e06      	cmp	r6, #6
 800b8a8:	d128      	bne.n	800b8fc <_strtod_l+0xbc>
 800b8aa:	3501      	adds	r5, #1
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800b8b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f040 858e 	bne.w	800c3d6 <_strtod_l+0xb96>
 800b8ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8bc:	b1cb      	cbz	r3, 800b8f2 <_strtod_l+0xb2>
 800b8be:	4652      	mov	r2, sl
 800b8c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b8c4:	ec43 2b10 	vmov	d0, r2, r3
 800b8c8:	b01f      	add	sp, #124	@ 0x7c
 800b8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ce:	2920      	cmp	r1, #32
 800b8d0:	d1ce      	bne.n	800b870 <_strtod_l+0x30>
 800b8d2:	3201      	adds	r2, #1
 800b8d4:	e7c1      	b.n	800b85a <_strtod_l+0x1a>
 800b8d6:	292d      	cmp	r1, #45	@ 0x2d
 800b8d8:	d1ca      	bne.n	800b870 <_strtod_l+0x30>
 800b8da:	2101      	movs	r1, #1
 800b8dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b8de:	1c51      	adds	r1, r2, #1
 800b8e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b8e2:	7852      	ldrb	r2, [r2, #1]
 800b8e4:	2a00      	cmp	r2, #0
 800b8e6:	d1c5      	bne.n	800b874 <_strtod_l+0x34>
 800b8e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f040 8570 	bne.w	800c3d2 <_strtod_l+0xb92>
 800b8f2:	4652      	mov	r2, sl
 800b8f4:	465b      	mov	r3, fp
 800b8f6:	e7e5      	b.n	800b8c4 <_strtod_l+0x84>
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	e7ef      	b.n	800b8dc <_strtod_l+0x9c>
 800b8fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b8fe:	b13a      	cbz	r2, 800b910 <_strtod_l+0xd0>
 800b900:	2135      	movs	r1, #53	@ 0x35
 800b902:	a81c      	add	r0, sp, #112	@ 0x70
 800b904:	f7ff ff3a 	bl	800b77c <__copybits>
 800b908:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b90a:	9805      	ldr	r0, [sp, #20]
 800b90c:	f7ff fb08 	bl	800af20 <_Bfree>
 800b910:	3e01      	subs	r6, #1
 800b912:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b914:	2e04      	cmp	r6, #4
 800b916:	d806      	bhi.n	800b926 <_strtod_l+0xe6>
 800b918:	e8df f006 	tbb	[pc, r6]
 800b91c:	201d0314 	.word	0x201d0314
 800b920:	14          	.byte	0x14
 800b921:	00          	.byte	0x00
 800b922:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b926:	05e1      	lsls	r1, r4, #23
 800b928:	bf48      	it	mi
 800b92a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b92e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b932:	0d1b      	lsrs	r3, r3, #20
 800b934:	051b      	lsls	r3, r3, #20
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1bb      	bne.n	800b8b2 <_strtod_l+0x72>
 800b93a:	f7fe fb31 	bl	8009fa0 <__errno>
 800b93e:	2322      	movs	r3, #34	@ 0x22
 800b940:	6003      	str	r3, [r0, #0]
 800b942:	e7b6      	b.n	800b8b2 <_strtod_l+0x72>
 800b944:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b948:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b94c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b950:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b954:	e7e7      	b.n	800b926 <_strtod_l+0xe6>
 800b956:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bad4 <_strtod_l+0x294>
 800b95a:	e7e4      	b.n	800b926 <_strtod_l+0xe6>
 800b95c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b960:	f04f 3aff 	mov.w	sl, #4294967295
 800b964:	e7df      	b.n	800b926 <_strtod_l+0xe6>
 800b966:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b968:	1c5a      	adds	r2, r3, #1
 800b96a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b96c:	785b      	ldrb	r3, [r3, #1]
 800b96e:	2b30      	cmp	r3, #48	@ 0x30
 800b970:	d0f9      	beq.n	800b966 <_strtod_l+0x126>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d09d      	beq.n	800b8b2 <_strtod_l+0x72>
 800b976:	2301      	movs	r3, #1
 800b978:	9309      	str	r3, [sp, #36]	@ 0x24
 800b97a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b97c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b97e:	2300      	movs	r3, #0
 800b980:	9308      	str	r3, [sp, #32]
 800b982:	930a      	str	r3, [sp, #40]	@ 0x28
 800b984:	461f      	mov	r7, r3
 800b986:	220a      	movs	r2, #10
 800b988:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b98a:	7805      	ldrb	r5, [r0, #0]
 800b98c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b990:	b2d9      	uxtb	r1, r3
 800b992:	2909      	cmp	r1, #9
 800b994:	d928      	bls.n	800b9e8 <_strtod_l+0x1a8>
 800b996:	494e      	ldr	r1, [pc, #312]	@ (800bad0 <_strtod_l+0x290>)
 800b998:	2201      	movs	r2, #1
 800b99a:	f000 ffd5 	bl	800c948 <strncmp>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d032      	beq.n	800ba08 <_strtod_l+0x1c8>
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	462a      	mov	r2, r5
 800b9a6:	4681      	mov	r9, r0
 800b9a8:	463d      	mov	r5, r7
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2a65      	cmp	r2, #101	@ 0x65
 800b9ae:	d001      	beq.n	800b9b4 <_strtod_l+0x174>
 800b9b0:	2a45      	cmp	r2, #69	@ 0x45
 800b9b2:	d114      	bne.n	800b9de <_strtod_l+0x19e>
 800b9b4:	b91d      	cbnz	r5, 800b9be <_strtod_l+0x17e>
 800b9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9b8:	4302      	orrs	r2, r0
 800b9ba:	d095      	beq.n	800b8e8 <_strtod_l+0xa8>
 800b9bc:	2500      	movs	r5, #0
 800b9be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b9c0:	1c62      	adds	r2, r4, #1
 800b9c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9c4:	7862      	ldrb	r2, [r4, #1]
 800b9c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b9c8:	d077      	beq.n	800baba <_strtod_l+0x27a>
 800b9ca:	2a2d      	cmp	r2, #45	@ 0x2d
 800b9cc:	d07b      	beq.n	800bac6 <_strtod_l+0x286>
 800b9ce:	f04f 0c00 	mov.w	ip, #0
 800b9d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b9d6:	2909      	cmp	r1, #9
 800b9d8:	f240 8082 	bls.w	800bae0 <_strtod_l+0x2a0>
 800b9dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800b9de:	f04f 0800 	mov.w	r8, #0
 800b9e2:	e0a2      	b.n	800bb2a <_strtod_l+0x2ea>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	e7c7      	b.n	800b978 <_strtod_l+0x138>
 800b9e8:	2f08      	cmp	r7, #8
 800b9ea:	bfd5      	itete	le
 800b9ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b9ee:	9908      	ldrgt	r1, [sp, #32]
 800b9f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b9f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b9f8:	f100 0001 	add.w	r0, r0, #1
 800b9fc:	bfd4      	ite	le
 800b9fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ba00:	9308      	strgt	r3, [sp, #32]
 800ba02:	3701      	adds	r7, #1
 800ba04:	9019      	str	r0, [sp, #100]	@ 0x64
 800ba06:	e7bf      	b.n	800b988 <_strtod_l+0x148>
 800ba08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba0e:	785a      	ldrb	r2, [r3, #1]
 800ba10:	b37f      	cbz	r7, 800ba72 <_strtod_l+0x232>
 800ba12:	4681      	mov	r9, r0
 800ba14:	463d      	mov	r5, r7
 800ba16:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ba1a:	2b09      	cmp	r3, #9
 800ba1c:	d912      	bls.n	800ba44 <_strtod_l+0x204>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e7c4      	b.n	800b9ac <_strtod_l+0x16c>
 800ba22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba24:	1c5a      	adds	r2, r3, #1
 800ba26:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba28:	785a      	ldrb	r2, [r3, #1]
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	2a30      	cmp	r2, #48	@ 0x30
 800ba2e:	d0f8      	beq.n	800ba22 <_strtod_l+0x1e2>
 800ba30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ba34:	2b08      	cmp	r3, #8
 800ba36:	f200 84d3 	bhi.w	800c3e0 <_strtod_l+0xba0>
 800ba3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba3e:	4681      	mov	r9, r0
 800ba40:	2000      	movs	r0, #0
 800ba42:	4605      	mov	r5, r0
 800ba44:	3a30      	subs	r2, #48	@ 0x30
 800ba46:	f100 0301 	add.w	r3, r0, #1
 800ba4a:	d02a      	beq.n	800baa2 <_strtod_l+0x262>
 800ba4c:	4499      	add	r9, r3
 800ba4e:	eb00 0c05 	add.w	ip, r0, r5
 800ba52:	462b      	mov	r3, r5
 800ba54:	210a      	movs	r1, #10
 800ba56:	4563      	cmp	r3, ip
 800ba58:	d10d      	bne.n	800ba76 <_strtod_l+0x236>
 800ba5a:	1c69      	adds	r1, r5, #1
 800ba5c:	4401      	add	r1, r0
 800ba5e:	4428      	add	r0, r5
 800ba60:	2808      	cmp	r0, #8
 800ba62:	dc16      	bgt.n	800ba92 <_strtod_l+0x252>
 800ba64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba66:	230a      	movs	r3, #10
 800ba68:	fb03 2300 	mla	r3, r3, r0, r2
 800ba6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e018      	b.n	800baa4 <_strtod_l+0x264>
 800ba72:	4638      	mov	r0, r7
 800ba74:	e7da      	b.n	800ba2c <_strtod_l+0x1ec>
 800ba76:	2b08      	cmp	r3, #8
 800ba78:	f103 0301 	add.w	r3, r3, #1
 800ba7c:	dc03      	bgt.n	800ba86 <_strtod_l+0x246>
 800ba7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ba80:	434e      	muls	r6, r1
 800ba82:	960a      	str	r6, [sp, #40]	@ 0x28
 800ba84:	e7e7      	b.n	800ba56 <_strtod_l+0x216>
 800ba86:	2b10      	cmp	r3, #16
 800ba88:	bfde      	ittt	le
 800ba8a:	9e08      	ldrle	r6, [sp, #32]
 800ba8c:	434e      	mulle	r6, r1
 800ba8e:	9608      	strle	r6, [sp, #32]
 800ba90:	e7e1      	b.n	800ba56 <_strtod_l+0x216>
 800ba92:	280f      	cmp	r0, #15
 800ba94:	dceb      	bgt.n	800ba6e <_strtod_l+0x22e>
 800ba96:	9808      	ldr	r0, [sp, #32]
 800ba98:	230a      	movs	r3, #10
 800ba9a:	fb03 2300 	mla	r3, r3, r0, r2
 800ba9e:	9308      	str	r3, [sp, #32]
 800baa0:	e7e5      	b.n	800ba6e <_strtod_l+0x22e>
 800baa2:	4629      	mov	r1, r5
 800baa4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800baa6:	1c50      	adds	r0, r2, #1
 800baa8:	9019      	str	r0, [sp, #100]	@ 0x64
 800baaa:	7852      	ldrb	r2, [r2, #1]
 800baac:	4618      	mov	r0, r3
 800baae:	460d      	mov	r5, r1
 800bab0:	e7b1      	b.n	800ba16 <_strtod_l+0x1d6>
 800bab2:	f04f 0900 	mov.w	r9, #0
 800bab6:	2301      	movs	r3, #1
 800bab8:	e77d      	b.n	800b9b6 <_strtod_l+0x176>
 800baba:	f04f 0c00 	mov.w	ip, #0
 800babe:	1ca2      	adds	r2, r4, #2
 800bac0:	9219      	str	r2, [sp, #100]	@ 0x64
 800bac2:	78a2      	ldrb	r2, [r4, #2]
 800bac4:	e785      	b.n	800b9d2 <_strtod_l+0x192>
 800bac6:	f04f 0c01 	mov.w	ip, #1
 800baca:	e7f8      	b.n	800babe <_strtod_l+0x27e>
 800bacc:	0800d940 	.word	0x0800d940
 800bad0:	0800d928 	.word	0x0800d928
 800bad4:	7ff00000 	.word	0x7ff00000
 800bad8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bada:	1c51      	adds	r1, r2, #1
 800badc:	9119      	str	r1, [sp, #100]	@ 0x64
 800bade:	7852      	ldrb	r2, [r2, #1]
 800bae0:	2a30      	cmp	r2, #48	@ 0x30
 800bae2:	d0f9      	beq.n	800bad8 <_strtod_l+0x298>
 800bae4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bae8:	2908      	cmp	r1, #8
 800baea:	f63f af78 	bhi.w	800b9de <_strtod_l+0x19e>
 800baee:	3a30      	subs	r2, #48	@ 0x30
 800baf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800baf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800baf4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800baf6:	f04f 080a 	mov.w	r8, #10
 800bafa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bafc:	1c56      	adds	r6, r2, #1
 800bafe:	9619      	str	r6, [sp, #100]	@ 0x64
 800bb00:	7852      	ldrb	r2, [r2, #1]
 800bb02:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bb06:	f1be 0f09 	cmp.w	lr, #9
 800bb0a:	d939      	bls.n	800bb80 <_strtod_l+0x340>
 800bb0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bb0e:	1a76      	subs	r6, r6, r1
 800bb10:	2e08      	cmp	r6, #8
 800bb12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bb16:	dc03      	bgt.n	800bb20 <_strtod_l+0x2e0>
 800bb18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb1a:	4588      	cmp	r8, r1
 800bb1c:	bfa8      	it	ge
 800bb1e:	4688      	movge	r8, r1
 800bb20:	f1bc 0f00 	cmp.w	ip, #0
 800bb24:	d001      	beq.n	800bb2a <_strtod_l+0x2ea>
 800bb26:	f1c8 0800 	rsb	r8, r8, #0
 800bb2a:	2d00      	cmp	r5, #0
 800bb2c:	d14e      	bne.n	800bbcc <_strtod_l+0x38c>
 800bb2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb30:	4308      	orrs	r0, r1
 800bb32:	f47f aebe 	bne.w	800b8b2 <_strtod_l+0x72>
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f47f aed6 	bne.w	800b8e8 <_strtod_l+0xa8>
 800bb3c:	2a69      	cmp	r2, #105	@ 0x69
 800bb3e:	d028      	beq.n	800bb92 <_strtod_l+0x352>
 800bb40:	dc25      	bgt.n	800bb8e <_strtod_l+0x34e>
 800bb42:	2a49      	cmp	r2, #73	@ 0x49
 800bb44:	d025      	beq.n	800bb92 <_strtod_l+0x352>
 800bb46:	2a4e      	cmp	r2, #78	@ 0x4e
 800bb48:	f47f aece 	bne.w	800b8e8 <_strtod_l+0xa8>
 800bb4c:	499b      	ldr	r1, [pc, #620]	@ (800bdbc <_strtod_l+0x57c>)
 800bb4e:	a819      	add	r0, sp, #100	@ 0x64
 800bb50:	f001 f9ee 	bl	800cf30 <__match>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	f43f aec7 	beq.w	800b8e8 <_strtod_l+0xa8>
 800bb5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	2b28      	cmp	r3, #40	@ 0x28
 800bb60:	d12e      	bne.n	800bbc0 <_strtod_l+0x380>
 800bb62:	4997      	ldr	r1, [pc, #604]	@ (800bdc0 <_strtod_l+0x580>)
 800bb64:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb66:	a819      	add	r0, sp, #100	@ 0x64
 800bb68:	f001 f9f6 	bl	800cf58 <__hexnan>
 800bb6c:	2805      	cmp	r0, #5
 800bb6e:	d127      	bne.n	800bbc0 <_strtod_l+0x380>
 800bb70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bb72:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bb76:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bb7a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bb7e:	e698      	b.n	800b8b2 <_strtod_l+0x72>
 800bb80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb82:	fb08 2101 	mla	r1, r8, r1, r2
 800bb86:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bb8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb8c:	e7b5      	b.n	800bafa <_strtod_l+0x2ba>
 800bb8e:	2a6e      	cmp	r2, #110	@ 0x6e
 800bb90:	e7da      	b.n	800bb48 <_strtod_l+0x308>
 800bb92:	498c      	ldr	r1, [pc, #560]	@ (800bdc4 <_strtod_l+0x584>)
 800bb94:	a819      	add	r0, sp, #100	@ 0x64
 800bb96:	f001 f9cb 	bl	800cf30 <__match>
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	f43f aea4 	beq.w	800b8e8 <_strtod_l+0xa8>
 800bba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bba2:	4989      	ldr	r1, [pc, #548]	@ (800bdc8 <_strtod_l+0x588>)
 800bba4:	3b01      	subs	r3, #1
 800bba6:	a819      	add	r0, sp, #100	@ 0x64
 800bba8:	9319      	str	r3, [sp, #100]	@ 0x64
 800bbaa:	f001 f9c1 	bl	800cf30 <__match>
 800bbae:	b910      	cbnz	r0, 800bbb6 <_strtod_l+0x376>
 800bbb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	9319      	str	r3, [sp, #100]	@ 0x64
 800bbb6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bdd8 <_strtod_l+0x598>
 800bbba:	f04f 0a00 	mov.w	sl, #0
 800bbbe:	e678      	b.n	800b8b2 <_strtod_l+0x72>
 800bbc0:	4882      	ldr	r0, [pc, #520]	@ (800bdcc <_strtod_l+0x58c>)
 800bbc2:	f000 fef1 	bl	800c9a8 <nan>
 800bbc6:	ec5b ab10 	vmov	sl, fp, d0
 800bbca:	e672      	b.n	800b8b2 <_strtod_l+0x72>
 800bbcc:	eba8 0309 	sub.w	r3, r8, r9
 800bbd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbd4:	2f00      	cmp	r7, #0
 800bbd6:	bf08      	it	eq
 800bbd8:	462f      	moveq	r7, r5
 800bbda:	2d10      	cmp	r5, #16
 800bbdc:	462c      	mov	r4, r5
 800bbde:	bfa8      	it	ge
 800bbe0:	2410      	movge	r4, #16
 800bbe2:	f7f4 fc8f 	bl	8000504 <__aeabi_ui2d>
 800bbe6:	2d09      	cmp	r5, #9
 800bbe8:	4682      	mov	sl, r0
 800bbea:	468b      	mov	fp, r1
 800bbec:	dc13      	bgt.n	800bc16 <_strtod_l+0x3d6>
 800bbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f43f ae5e 	beq.w	800b8b2 <_strtod_l+0x72>
 800bbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf8:	dd78      	ble.n	800bcec <_strtod_l+0x4ac>
 800bbfa:	2b16      	cmp	r3, #22
 800bbfc:	dc5f      	bgt.n	800bcbe <_strtod_l+0x47e>
 800bbfe:	4974      	ldr	r1, [pc, #464]	@ (800bdd0 <_strtod_l+0x590>)
 800bc00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc08:	4652      	mov	r2, sl
 800bc0a:	465b      	mov	r3, fp
 800bc0c:	f7f4 fcf4 	bl	80005f8 <__aeabi_dmul>
 800bc10:	4682      	mov	sl, r0
 800bc12:	468b      	mov	fp, r1
 800bc14:	e64d      	b.n	800b8b2 <_strtod_l+0x72>
 800bc16:	4b6e      	ldr	r3, [pc, #440]	@ (800bdd0 <_strtod_l+0x590>)
 800bc18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bc20:	f7f4 fcea 	bl	80005f8 <__aeabi_dmul>
 800bc24:	4682      	mov	sl, r0
 800bc26:	9808      	ldr	r0, [sp, #32]
 800bc28:	468b      	mov	fp, r1
 800bc2a:	f7f4 fc6b 	bl	8000504 <__aeabi_ui2d>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	4650      	mov	r0, sl
 800bc34:	4659      	mov	r1, fp
 800bc36:	f7f4 fb29 	bl	800028c <__adddf3>
 800bc3a:	2d0f      	cmp	r5, #15
 800bc3c:	4682      	mov	sl, r0
 800bc3e:	468b      	mov	fp, r1
 800bc40:	ddd5      	ble.n	800bbee <_strtod_l+0x3ae>
 800bc42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc44:	1b2c      	subs	r4, r5, r4
 800bc46:	441c      	add	r4, r3
 800bc48:	2c00      	cmp	r4, #0
 800bc4a:	f340 8096 	ble.w	800bd7a <_strtod_l+0x53a>
 800bc4e:	f014 030f 	ands.w	r3, r4, #15
 800bc52:	d00a      	beq.n	800bc6a <_strtod_l+0x42a>
 800bc54:	495e      	ldr	r1, [pc, #376]	@ (800bdd0 <_strtod_l+0x590>)
 800bc56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc5a:	4652      	mov	r2, sl
 800bc5c:	465b      	mov	r3, fp
 800bc5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc62:	f7f4 fcc9 	bl	80005f8 <__aeabi_dmul>
 800bc66:	4682      	mov	sl, r0
 800bc68:	468b      	mov	fp, r1
 800bc6a:	f034 040f 	bics.w	r4, r4, #15
 800bc6e:	d073      	beq.n	800bd58 <_strtod_l+0x518>
 800bc70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bc74:	dd48      	ble.n	800bd08 <_strtod_l+0x4c8>
 800bc76:	2400      	movs	r4, #0
 800bc78:	46a0      	mov	r8, r4
 800bc7a:	940a      	str	r4, [sp, #40]	@ 0x28
 800bc7c:	46a1      	mov	r9, r4
 800bc7e:	9a05      	ldr	r2, [sp, #20]
 800bc80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bdd8 <_strtod_l+0x598>
 800bc84:	2322      	movs	r3, #34	@ 0x22
 800bc86:	6013      	str	r3, [r2, #0]
 800bc88:	f04f 0a00 	mov.w	sl, #0
 800bc8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f43f ae0f 	beq.w	800b8b2 <_strtod_l+0x72>
 800bc94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc96:	9805      	ldr	r0, [sp, #20]
 800bc98:	f7ff f942 	bl	800af20 <_Bfree>
 800bc9c:	9805      	ldr	r0, [sp, #20]
 800bc9e:	4649      	mov	r1, r9
 800bca0:	f7ff f93e 	bl	800af20 <_Bfree>
 800bca4:	9805      	ldr	r0, [sp, #20]
 800bca6:	4641      	mov	r1, r8
 800bca8:	f7ff f93a 	bl	800af20 <_Bfree>
 800bcac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcae:	9805      	ldr	r0, [sp, #20]
 800bcb0:	f7ff f936 	bl	800af20 <_Bfree>
 800bcb4:	9805      	ldr	r0, [sp, #20]
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	f7ff f932 	bl	800af20 <_Bfree>
 800bcbc:	e5f9      	b.n	800b8b2 <_strtod_l+0x72>
 800bcbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcc0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	dbbc      	blt.n	800bc42 <_strtod_l+0x402>
 800bcc8:	4c41      	ldr	r4, [pc, #260]	@ (800bdd0 <_strtod_l+0x590>)
 800bcca:	f1c5 050f 	rsb	r5, r5, #15
 800bcce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bcd2:	4652      	mov	r2, sl
 800bcd4:	465b      	mov	r3, fp
 800bcd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcda:	f7f4 fc8d 	bl	80005f8 <__aeabi_dmul>
 800bcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce0:	1b5d      	subs	r5, r3, r5
 800bce2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bce6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bcea:	e78f      	b.n	800bc0c <_strtod_l+0x3cc>
 800bcec:	3316      	adds	r3, #22
 800bcee:	dba8      	blt.n	800bc42 <_strtod_l+0x402>
 800bcf0:	4b37      	ldr	r3, [pc, #220]	@ (800bdd0 <_strtod_l+0x590>)
 800bcf2:	eba9 0808 	sub.w	r8, r9, r8
 800bcf6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bcfa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bcfe:	4650      	mov	r0, sl
 800bd00:	4659      	mov	r1, fp
 800bd02:	f7f4 fda3 	bl	800084c <__aeabi_ddiv>
 800bd06:	e783      	b.n	800bc10 <_strtod_l+0x3d0>
 800bd08:	4b32      	ldr	r3, [pc, #200]	@ (800bdd4 <_strtod_l+0x594>)
 800bd0a:	9308      	str	r3, [sp, #32]
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	1124      	asrs	r4, r4, #4
 800bd10:	4650      	mov	r0, sl
 800bd12:	4659      	mov	r1, fp
 800bd14:	461e      	mov	r6, r3
 800bd16:	2c01      	cmp	r4, #1
 800bd18:	dc21      	bgt.n	800bd5e <_strtod_l+0x51e>
 800bd1a:	b10b      	cbz	r3, 800bd20 <_strtod_l+0x4e0>
 800bd1c:	4682      	mov	sl, r0
 800bd1e:	468b      	mov	fp, r1
 800bd20:	492c      	ldr	r1, [pc, #176]	@ (800bdd4 <_strtod_l+0x594>)
 800bd22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bd26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bd2a:	4652      	mov	r2, sl
 800bd2c:	465b      	mov	r3, fp
 800bd2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd32:	f7f4 fc61 	bl	80005f8 <__aeabi_dmul>
 800bd36:	4b28      	ldr	r3, [pc, #160]	@ (800bdd8 <_strtod_l+0x598>)
 800bd38:	460a      	mov	r2, r1
 800bd3a:	400b      	ands	r3, r1
 800bd3c:	4927      	ldr	r1, [pc, #156]	@ (800bddc <_strtod_l+0x59c>)
 800bd3e:	428b      	cmp	r3, r1
 800bd40:	4682      	mov	sl, r0
 800bd42:	d898      	bhi.n	800bc76 <_strtod_l+0x436>
 800bd44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bd48:	428b      	cmp	r3, r1
 800bd4a:	bf86      	itte	hi
 800bd4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bde0 <_strtod_l+0x5a0>
 800bd50:	f04f 3aff 	movhi.w	sl, #4294967295
 800bd54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9308      	str	r3, [sp, #32]
 800bd5c:	e07a      	b.n	800be54 <_strtod_l+0x614>
 800bd5e:	07e2      	lsls	r2, r4, #31
 800bd60:	d505      	bpl.n	800bd6e <_strtod_l+0x52e>
 800bd62:	9b08      	ldr	r3, [sp, #32]
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 fc46 	bl	80005f8 <__aeabi_dmul>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	9a08      	ldr	r2, [sp, #32]
 800bd70:	3208      	adds	r2, #8
 800bd72:	3601      	adds	r6, #1
 800bd74:	1064      	asrs	r4, r4, #1
 800bd76:	9208      	str	r2, [sp, #32]
 800bd78:	e7cd      	b.n	800bd16 <_strtod_l+0x4d6>
 800bd7a:	d0ed      	beq.n	800bd58 <_strtod_l+0x518>
 800bd7c:	4264      	negs	r4, r4
 800bd7e:	f014 020f 	ands.w	r2, r4, #15
 800bd82:	d00a      	beq.n	800bd9a <_strtod_l+0x55a>
 800bd84:	4b12      	ldr	r3, [pc, #72]	@ (800bdd0 <_strtod_l+0x590>)
 800bd86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd8a:	4650      	mov	r0, sl
 800bd8c:	4659      	mov	r1, fp
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fd5b 	bl	800084c <__aeabi_ddiv>
 800bd96:	4682      	mov	sl, r0
 800bd98:	468b      	mov	fp, r1
 800bd9a:	1124      	asrs	r4, r4, #4
 800bd9c:	d0dc      	beq.n	800bd58 <_strtod_l+0x518>
 800bd9e:	2c1f      	cmp	r4, #31
 800bda0:	dd20      	ble.n	800bde4 <_strtod_l+0x5a4>
 800bda2:	2400      	movs	r4, #0
 800bda4:	46a0      	mov	r8, r4
 800bda6:	940a      	str	r4, [sp, #40]	@ 0x28
 800bda8:	46a1      	mov	r9, r4
 800bdaa:	9a05      	ldr	r2, [sp, #20]
 800bdac:	2322      	movs	r3, #34	@ 0x22
 800bdae:	f04f 0a00 	mov.w	sl, #0
 800bdb2:	f04f 0b00 	mov.w	fp, #0
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	e768      	b.n	800bc8c <_strtod_l+0x44c>
 800bdba:	bf00      	nop
 800bdbc:	0800d715 	.word	0x0800d715
 800bdc0:	0800d92c 	.word	0x0800d92c
 800bdc4:	0800d70d 	.word	0x0800d70d
 800bdc8:	0800d744 	.word	0x0800d744
 800bdcc:	0800dad5 	.word	0x0800dad5
 800bdd0:	0800d860 	.word	0x0800d860
 800bdd4:	0800d838 	.word	0x0800d838
 800bdd8:	7ff00000 	.word	0x7ff00000
 800bddc:	7ca00000 	.word	0x7ca00000
 800bde0:	7fefffff 	.word	0x7fefffff
 800bde4:	f014 0310 	ands.w	r3, r4, #16
 800bde8:	bf18      	it	ne
 800bdea:	236a      	movne	r3, #106	@ 0x6a
 800bdec:	4ea9      	ldr	r6, [pc, #676]	@ (800c094 <_strtod_l+0x854>)
 800bdee:	9308      	str	r3, [sp, #32]
 800bdf0:	4650      	mov	r0, sl
 800bdf2:	4659      	mov	r1, fp
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	07e2      	lsls	r2, r4, #31
 800bdf8:	d504      	bpl.n	800be04 <_strtod_l+0x5c4>
 800bdfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdfe:	f7f4 fbfb 	bl	80005f8 <__aeabi_dmul>
 800be02:	2301      	movs	r3, #1
 800be04:	1064      	asrs	r4, r4, #1
 800be06:	f106 0608 	add.w	r6, r6, #8
 800be0a:	d1f4      	bne.n	800bdf6 <_strtod_l+0x5b6>
 800be0c:	b10b      	cbz	r3, 800be12 <_strtod_l+0x5d2>
 800be0e:	4682      	mov	sl, r0
 800be10:	468b      	mov	fp, r1
 800be12:	9b08      	ldr	r3, [sp, #32]
 800be14:	b1b3      	cbz	r3, 800be44 <_strtod_l+0x604>
 800be16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800be1e:	2b00      	cmp	r3, #0
 800be20:	4659      	mov	r1, fp
 800be22:	dd0f      	ble.n	800be44 <_strtod_l+0x604>
 800be24:	2b1f      	cmp	r3, #31
 800be26:	dd55      	ble.n	800bed4 <_strtod_l+0x694>
 800be28:	2b34      	cmp	r3, #52	@ 0x34
 800be2a:	bfde      	ittt	le
 800be2c:	f04f 33ff 	movle.w	r3, #4294967295
 800be30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800be34:	4093      	lslle	r3, r2
 800be36:	f04f 0a00 	mov.w	sl, #0
 800be3a:	bfcc      	ite	gt
 800be3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800be40:	ea03 0b01 	andle.w	fp, r3, r1
 800be44:	2200      	movs	r2, #0
 800be46:	2300      	movs	r3, #0
 800be48:	4650      	mov	r0, sl
 800be4a:	4659      	mov	r1, fp
 800be4c:	f7f4 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800be50:	2800      	cmp	r0, #0
 800be52:	d1a6      	bne.n	800bda2 <_strtod_l+0x562>
 800be54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800be5a:	9805      	ldr	r0, [sp, #20]
 800be5c:	462b      	mov	r3, r5
 800be5e:	463a      	mov	r2, r7
 800be60:	f7ff f8c6 	bl	800aff0 <__s2b>
 800be64:	900a      	str	r0, [sp, #40]	@ 0x28
 800be66:	2800      	cmp	r0, #0
 800be68:	f43f af05 	beq.w	800bc76 <_strtod_l+0x436>
 800be6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be6e:	2a00      	cmp	r2, #0
 800be70:	eba9 0308 	sub.w	r3, r9, r8
 800be74:	bfa8      	it	ge
 800be76:	2300      	movge	r3, #0
 800be78:	9312      	str	r3, [sp, #72]	@ 0x48
 800be7a:	2400      	movs	r4, #0
 800be7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800be80:	9316      	str	r3, [sp, #88]	@ 0x58
 800be82:	46a0      	mov	r8, r4
 800be84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be86:	9805      	ldr	r0, [sp, #20]
 800be88:	6859      	ldr	r1, [r3, #4]
 800be8a:	f7ff f809 	bl	800aea0 <_Balloc>
 800be8e:	4681      	mov	r9, r0
 800be90:	2800      	cmp	r0, #0
 800be92:	f43f aef4 	beq.w	800bc7e <_strtod_l+0x43e>
 800be96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be98:	691a      	ldr	r2, [r3, #16]
 800be9a:	3202      	adds	r2, #2
 800be9c:	f103 010c 	add.w	r1, r3, #12
 800bea0:	0092      	lsls	r2, r2, #2
 800bea2:	300c      	adds	r0, #12
 800bea4:	f000 fd72 	bl	800c98c <memcpy>
 800bea8:	ec4b ab10 	vmov	d0, sl, fp
 800beac:	9805      	ldr	r0, [sp, #20]
 800beae:	aa1c      	add	r2, sp, #112	@ 0x70
 800beb0:	a91b      	add	r1, sp, #108	@ 0x6c
 800beb2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800beb6:	f7ff fbd7 	bl	800b668 <__d2b>
 800beba:	901a      	str	r0, [sp, #104]	@ 0x68
 800bebc:	2800      	cmp	r0, #0
 800bebe:	f43f aede 	beq.w	800bc7e <_strtod_l+0x43e>
 800bec2:	9805      	ldr	r0, [sp, #20]
 800bec4:	2101      	movs	r1, #1
 800bec6:	f7ff f929 	bl	800b11c <__i2b>
 800beca:	4680      	mov	r8, r0
 800becc:	b948      	cbnz	r0, 800bee2 <_strtod_l+0x6a2>
 800bece:	f04f 0800 	mov.w	r8, #0
 800bed2:	e6d4      	b.n	800bc7e <_strtod_l+0x43e>
 800bed4:	f04f 32ff 	mov.w	r2, #4294967295
 800bed8:	fa02 f303 	lsl.w	r3, r2, r3
 800bedc:	ea03 0a0a 	and.w	sl, r3, sl
 800bee0:	e7b0      	b.n	800be44 <_strtod_l+0x604>
 800bee2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bee4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bee6:	2d00      	cmp	r5, #0
 800bee8:	bfab      	itete	ge
 800beea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800beec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800beee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bef0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bef2:	bfac      	ite	ge
 800bef4:	18ef      	addge	r7, r5, r3
 800bef6:	1b5e      	sublt	r6, r3, r5
 800bef8:	9b08      	ldr	r3, [sp, #32]
 800befa:	1aed      	subs	r5, r5, r3
 800befc:	4415      	add	r5, r2
 800befe:	4b66      	ldr	r3, [pc, #408]	@ (800c098 <_strtod_l+0x858>)
 800bf00:	3d01      	subs	r5, #1
 800bf02:	429d      	cmp	r5, r3
 800bf04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bf08:	da50      	bge.n	800bfac <_strtod_l+0x76c>
 800bf0a:	1b5b      	subs	r3, r3, r5
 800bf0c:	2b1f      	cmp	r3, #31
 800bf0e:	eba2 0203 	sub.w	r2, r2, r3
 800bf12:	f04f 0101 	mov.w	r1, #1
 800bf16:	dc3d      	bgt.n	800bf94 <_strtod_l+0x754>
 800bf18:	fa01 f303 	lsl.w	r3, r1, r3
 800bf1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf1e:	2300      	movs	r3, #0
 800bf20:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf22:	18bd      	adds	r5, r7, r2
 800bf24:	9b08      	ldr	r3, [sp, #32]
 800bf26:	42af      	cmp	r7, r5
 800bf28:	4416      	add	r6, r2
 800bf2a:	441e      	add	r6, r3
 800bf2c:	463b      	mov	r3, r7
 800bf2e:	bfa8      	it	ge
 800bf30:	462b      	movge	r3, r5
 800bf32:	42b3      	cmp	r3, r6
 800bf34:	bfa8      	it	ge
 800bf36:	4633      	movge	r3, r6
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	bfc2      	ittt	gt
 800bf3c:	1aed      	subgt	r5, r5, r3
 800bf3e:	1af6      	subgt	r6, r6, r3
 800bf40:	1aff      	subgt	r7, r7, r3
 800bf42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dd16      	ble.n	800bf76 <_strtod_l+0x736>
 800bf48:	4641      	mov	r1, r8
 800bf4a:	9805      	ldr	r0, [sp, #20]
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	f7ff f9a5 	bl	800b29c <__pow5mult>
 800bf52:	4680      	mov	r8, r0
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d0ba      	beq.n	800bece <_strtod_l+0x68e>
 800bf58:	4601      	mov	r1, r0
 800bf5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bf5c:	9805      	ldr	r0, [sp, #20]
 800bf5e:	f7ff f8f3 	bl	800b148 <__multiply>
 800bf62:	900e      	str	r0, [sp, #56]	@ 0x38
 800bf64:	2800      	cmp	r0, #0
 800bf66:	f43f ae8a 	beq.w	800bc7e <_strtod_l+0x43e>
 800bf6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf6c:	9805      	ldr	r0, [sp, #20]
 800bf6e:	f7fe ffd7 	bl	800af20 <_Bfree>
 800bf72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf74:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf76:	2d00      	cmp	r5, #0
 800bf78:	dc1d      	bgt.n	800bfb6 <_strtod_l+0x776>
 800bf7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dd23      	ble.n	800bfc8 <_strtod_l+0x788>
 800bf80:	4649      	mov	r1, r9
 800bf82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bf84:	9805      	ldr	r0, [sp, #20]
 800bf86:	f7ff f989 	bl	800b29c <__pow5mult>
 800bf8a:	4681      	mov	r9, r0
 800bf8c:	b9e0      	cbnz	r0, 800bfc8 <_strtod_l+0x788>
 800bf8e:	f04f 0900 	mov.w	r9, #0
 800bf92:	e674      	b.n	800bc7e <_strtod_l+0x43e>
 800bf94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bf98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bf9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bfa0:	35e2      	adds	r5, #226	@ 0xe2
 800bfa2:	fa01 f305 	lsl.w	r3, r1, r5
 800bfa6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfa8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bfaa:	e7ba      	b.n	800bf22 <_strtod_l+0x6e2>
 800bfac:	2300      	movs	r3, #0
 800bfae:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bfb4:	e7b5      	b.n	800bf22 <_strtod_l+0x6e2>
 800bfb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfb8:	9805      	ldr	r0, [sp, #20]
 800bfba:	462a      	mov	r2, r5
 800bfbc:	f7ff f9c8 	bl	800b350 <__lshift>
 800bfc0:	901a      	str	r0, [sp, #104]	@ 0x68
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d1d9      	bne.n	800bf7a <_strtod_l+0x73a>
 800bfc6:	e65a      	b.n	800bc7e <_strtod_l+0x43e>
 800bfc8:	2e00      	cmp	r6, #0
 800bfca:	dd07      	ble.n	800bfdc <_strtod_l+0x79c>
 800bfcc:	4649      	mov	r1, r9
 800bfce:	9805      	ldr	r0, [sp, #20]
 800bfd0:	4632      	mov	r2, r6
 800bfd2:	f7ff f9bd 	bl	800b350 <__lshift>
 800bfd6:	4681      	mov	r9, r0
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d0d8      	beq.n	800bf8e <_strtod_l+0x74e>
 800bfdc:	2f00      	cmp	r7, #0
 800bfde:	dd08      	ble.n	800bff2 <_strtod_l+0x7b2>
 800bfe0:	4641      	mov	r1, r8
 800bfe2:	9805      	ldr	r0, [sp, #20]
 800bfe4:	463a      	mov	r2, r7
 800bfe6:	f7ff f9b3 	bl	800b350 <__lshift>
 800bfea:	4680      	mov	r8, r0
 800bfec:	2800      	cmp	r0, #0
 800bfee:	f43f ae46 	beq.w	800bc7e <_strtod_l+0x43e>
 800bff2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bff4:	9805      	ldr	r0, [sp, #20]
 800bff6:	464a      	mov	r2, r9
 800bff8:	f7ff fa32 	bl	800b460 <__mdiff>
 800bffc:	4604      	mov	r4, r0
 800bffe:	2800      	cmp	r0, #0
 800c000:	f43f ae3d 	beq.w	800bc7e <_strtod_l+0x43e>
 800c004:	68c3      	ldr	r3, [r0, #12]
 800c006:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c008:	2300      	movs	r3, #0
 800c00a:	60c3      	str	r3, [r0, #12]
 800c00c:	4641      	mov	r1, r8
 800c00e:	f7ff fa0b 	bl	800b428 <__mcmp>
 800c012:	2800      	cmp	r0, #0
 800c014:	da46      	bge.n	800c0a4 <_strtod_l+0x864>
 800c016:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c018:	ea53 030a 	orrs.w	r3, r3, sl
 800c01c:	d16c      	bne.n	800c0f8 <_strtod_l+0x8b8>
 800c01e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c022:	2b00      	cmp	r3, #0
 800c024:	d168      	bne.n	800c0f8 <_strtod_l+0x8b8>
 800c026:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c02a:	0d1b      	lsrs	r3, r3, #20
 800c02c:	051b      	lsls	r3, r3, #20
 800c02e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c032:	d961      	bls.n	800c0f8 <_strtod_l+0x8b8>
 800c034:	6963      	ldr	r3, [r4, #20]
 800c036:	b913      	cbnz	r3, 800c03e <_strtod_l+0x7fe>
 800c038:	6923      	ldr	r3, [r4, #16]
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	dd5c      	ble.n	800c0f8 <_strtod_l+0x8b8>
 800c03e:	4621      	mov	r1, r4
 800c040:	2201      	movs	r2, #1
 800c042:	9805      	ldr	r0, [sp, #20]
 800c044:	f7ff f984 	bl	800b350 <__lshift>
 800c048:	4641      	mov	r1, r8
 800c04a:	4604      	mov	r4, r0
 800c04c:	f7ff f9ec 	bl	800b428 <__mcmp>
 800c050:	2800      	cmp	r0, #0
 800c052:	dd51      	ble.n	800c0f8 <_strtod_l+0x8b8>
 800c054:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c058:	9a08      	ldr	r2, [sp, #32]
 800c05a:	0d1b      	lsrs	r3, r3, #20
 800c05c:	051b      	lsls	r3, r3, #20
 800c05e:	2a00      	cmp	r2, #0
 800c060:	d06b      	beq.n	800c13a <_strtod_l+0x8fa>
 800c062:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c066:	d868      	bhi.n	800c13a <_strtod_l+0x8fa>
 800c068:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c06c:	f67f ae9d 	bls.w	800bdaa <_strtod_l+0x56a>
 800c070:	4b0a      	ldr	r3, [pc, #40]	@ (800c09c <_strtod_l+0x85c>)
 800c072:	4650      	mov	r0, sl
 800c074:	4659      	mov	r1, fp
 800c076:	2200      	movs	r2, #0
 800c078:	f7f4 fabe 	bl	80005f8 <__aeabi_dmul>
 800c07c:	4b08      	ldr	r3, [pc, #32]	@ (800c0a0 <_strtod_l+0x860>)
 800c07e:	400b      	ands	r3, r1
 800c080:	4682      	mov	sl, r0
 800c082:	468b      	mov	fp, r1
 800c084:	2b00      	cmp	r3, #0
 800c086:	f47f ae05 	bne.w	800bc94 <_strtod_l+0x454>
 800c08a:	9a05      	ldr	r2, [sp, #20]
 800c08c:	2322      	movs	r3, #34	@ 0x22
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	e600      	b.n	800bc94 <_strtod_l+0x454>
 800c092:	bf00      	nop
 800c094:	0800d958 	.word	0x0800d958
 800c098:	fffffc02 	.word	0xfffffc02
 800c09c:	39500000 	.word	0x39500000
 800c0a0:	7ff00000 	.word	0x7ff00000
 800c0a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c0a8:	d165      	bne.n	800c176 <_strtod_l+0x936>
 800c0aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c0ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0b0:	b35a      	cbz	r2, 800c10a <_strtod_l+0x8ca>
 800c0b2:	4a9f      	ldr	r2, [pc, #636]	@ (800c330 <_strtod_l+0xaf0>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d12b      	bne.n	800c110 <_strtod_l+0x8d0>
 800c0b8:	9b08      	ldr	r3, [sp, #32]
 800c0ba:	4651      	mov	r1, sl
 800c0bc:	b303      	cbz	r3, 800c100 <_strtod_l+0x8c0>
 800c0be:	4b9d      	ldr	r3, [pc, #628]	@ (800c334 <_strtod_l+0xaf4>)
 800c0c0:	465a      	mov	r2, fp
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0cc:	d81b      	bhi.n	800c106 <_strtod_l+0x8c6>
 800c0ce:	0d1b      	lsrs	r3, r3, #20
 800c0d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d8:	4299      	cmp	r1, r3
 800c0da:	d119      	bne.n	800c110 <_strtod_l+0x8d0>
 800c0dc:	4b96      	ldr	r3, [pc, #600]	@ (800c338 <_strtod_l+0xaf8>)
 800c0de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d102      	bne.n	800c0ea <_strtod_l+0x8aa>
 800c0e4:	3101      	adds	r1, #1
 800c0e6:	f43f adca 	beq.w	800bc7e <_strtod_l+0x43e>
 800c0ea:	4b92      	ldr	r3, [pc, #584]	@ (800c334 <_strtod_l+0xaf4>)
 800c0ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0ee:	401a      	ands	r2, r3
 800c0f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c0f4:	f04f 0a00 	mov.w	sl, #0
 800c0f8:	9b08      	ldr	r3, [sp, #32]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1b8      	bne.n	800c070 <_strtod_l+0x830>
 800c0fe:	e5c9      	b.n	800bc94 <_strtod_l+0x454>
 800c100:	f04f 33ff 	mov.w	r3, #4294967295
 800c104:	e7e8      	b.n	800c0d8 <_strtod_l+0x898>
 800c106:	4613      	mov	r3, r2
 800c108:	e7e6      	b.n	800c0d8 <_strtod_l+0x898>
 800c10a:	ea53 030a 	orrs.w	r3, r3, sl
 800c10e:	d0a1      	beq.n	800c054 <_strtod_l+0x814>
 800c110:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c112:	b1db      	cbz	r3, 800c14c <_strtod_l+0x90c>
 800c114:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c116:	4213      	tst	r3, r2
 800c118:	d0ee      	beq.n	800c0f8 <_strtod_l+0x8b8>
 800c11a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c11c:	9a08      	ldr	r2, [sp, #32]
 800c11e:	4650      	mov	r0, sl
 800c120:	4659      	mov	r1, fp
 800c122:	b1bb      	cbz	r3, 800c154 <_strtod_l+0x914>
 800c124:	f7ff fb6e 	bl	800b804 <sulp>
 800c128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c12c:	ec53 2b10 	vmov	r2, r3, d0
 800c130:	f7f4 f8ac 	bl	800028c <__adddf3>
 800c134:	4682      	mov	sl, r0
 800c136:	468b      	mov	fp, r1
 800c138:	e7de      	b.n	800c0f8 <_strtod_l+0x8b8>
 800c13a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c13e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c142:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c146:	f04f 3aff 	mov.w	sl, #4294967295
 800c14a:	e7d5      	b.n	800c0f8 <_strtod_l+0x8b8>
 800c14c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c14e:	ea13 0f0a 	tst.w	r3, sl
 800c152:	e7e1      	b.n	800c118 <_strtod_l+0x8d8>
 800c154:	f7ff fb56 	bl	800b804 <sulp>
 800c158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c15c:	ec53 2b10 	vmov	r2, r3, d0
 800c160:	f7f4 f892 	bl	8000288 <__aeabi_dsub>
 800c164:	2200      	movs	r2, #0
 800c166:	2300      	movs	r3, #0
 800c168:	4682      	mov	sl, r0
 800c16a:	468b      	mov	fp, r1
 800c16c:	f7f4 fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 800c170:	2800      	cmp	r0, #0
 800c172:	d0c1      	beq.n	800c0f8 <_strtod_l+0x8b8>
 800c174:	e619      	b.n	800bdaa <_strtod_l+0x56a>
 800c176:	4641      	mov	r1, r8
 800c178:	4620      	mov	r0, r4
 800c17a:	f7ff facd 	bl	800b718 <__ratio>
 800c17e:	ec57 6b10 	vmov	r6, r7, d0
 800c182:	2200      	movs	r2, #0
 800c184:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c188:	4630      	mov	r0, r6
 800c18a:	4639      	mov	r1, r7
 800c18c:	f7f4 fcb0 	bl	8000af0 <__aeabi_dcmple>
 800c190:	2800      	cmp	r0, #0
 800c192:	d06f      	beq.n	800c274 <_strtod_l+0xa34>
 800c194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c196:	2b00      	cmp	r3, #0
 800c198:	d17a      	bne.n	800c290 <_strtod_l+0xa50>
 800c19a:	f1ba 0f00 	cmp.w	sl, #0
 800c19e:	d158      	bne.n	800c252 <_strtod_l+0xa12>
 800c1a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d15a      	bne.n	800c260 <_strtod_l+0xa20>
 800c1aa:	4b64      	ldr	r3, [pc, #400]	@ (800c33c <_strtod_l+0xafc>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	f7f4 fc93 	bl	8000adc <__aeabi_dcmplt>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d159      	bne.n	800c26e <_strtod_l+0xa2e>
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	4639      	mov	r1, r7
 800c1be:	4b60      	ldr	r3, [pc, #384]	@ (800c340 <_strtod_l+0xb00>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f7f4 fa19 	bl	80005f8 <__aeabi_dmul>
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	460f      	mov	r7, r1
 800c1ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c1ce:	9606      	str	r6, [sp, #24]
 800c1d0:	9307      	str	r3, [sp, #28]
 800c1d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1d6:	4d57      	ldr	r5, [pc, #348]	@ (800c334 <_strtod_l+0xaf4>)
 800c1d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c1dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1de:	401d      	ands	r5, r3
 800c1e0:	4b58      	ldr	r3, [pc, #352]	@ (800c344 <_strtod_l+0xb04>)
 800c1e2:	429d      	cmp	r5, r3
 800c1e4:	f040 80b2 	bne.w	800c34c <_strtod_l+0xb0c>
 800c1e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c1ee:	ec4b ab10 	vmov	d0, sl, fp
 800c1f2:	f7ff f9c9 	bl	800b588 <__ulp>
 800c1f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1fa:	ec51 0b10 	vmov	r0, r1, d0
 800c1fe:	f7f4 f9fb 	bl	80005f8 <__aeabi_dmul>
 800c202:	4652      	mov	r2, sl
 800c204:	465b      	mov	r3, fp
 800c206:	f7f4 f841 	bl	800028c <__adddf3>
 800c20a:	460b      	mov	r3, r1
 800c20c:	4949      	ldr	r1, [pc, #292]	@ (800c334 <_strtod_l+0xaf4>)
 800c20e:	4a4e      	ldr	r2, [pc, #312]	@ (800c348 <_strtod_l+0xb08>)
 800c210:	4019      	ands	r1, r3
 800c212:	4291      	cmp	r1, r2
 800c214:	4682      	mov	sl, r0
 800c216:	d942      	bls.n	800c29e <_strtod_l+0xa5e>
 800c218:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c21a:	4b47      	ldr	r3, [pc, #284]	@ (800c338 <_strtod_l+0xaf8>)
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d103      	bne.n	800c228 <_strtod_l+0x9e8>
 800c220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c222:	3301      	adds	r3, #1
 800c224:	f43f ad2b 	beq.w	800bc7e <_strtod_l+0x43e>
 800c228:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c338 <_strtod_l+0xaf8>
 800c22c:	f04f 3aff 	mov.w	sl, #4294967295
 800c230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c232:	9805      	ldr	r0, [sp, #20]
 800c234:	f7fe fe74 	bl	800af20 <_Bfree>
 800c238:	9805      	ldr	r0, [sp, #20]
 800c23a:	4649      	mov	r1, r9
 800c23c:	f7fe fe70 	bl	800af20 <_Bfree>
 800c240:	9805      	ldr	r0, [sp, #20]
 800c242:	4641      	mov	r1, r8
 800c244:	f7fe fe6c 	bl	800af20 <_Bfree>
 800c248:	9805      	ldr	r0, [sp, #20]
 800c24a:	4621      	mov	r1, r4
 800c24c:	f7fe fe68 	bl	800af20 <_Bfree>
 800c250:	e618      	b.n	800be84 <_strtod_l+0x644>
 800c252:	f1ba 0f01 	cmp.w	sl, #1
 800c256:	d103      	bne.n	800c260 <_strtod_l+0xa20>
 800c258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f43f ada5 	beq.w	800bdaa <_strtod_l+0x56a>
 800c260:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c310 <_strtod_l+0xad0>
 800c264:	4f35      	ldr	r7, [pc, #212]	@ (800c33c <_strtod_l+0xafc>)
 800c266:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c26a:	2600      	movs	r6, #0
 800c26c:	e7b1      	b.n	800c1d2 <_strtod_l+0x992>
 800c26e:	4f34      	ldr	r7, [pc, #208]	@ (800c340 <_strtod_l+0xb00>)
 800c270:	2600      	movs	r6, #0
 800c272:	e7aa      	b.n	800c1ca <_strtod_l+0x98a>
 800c274:	4b32      	ldr	r3, [pc, #200]	@ (800c340 <_strtod_l+0xb00>)
 800c276:	4630      	mov	r0, r6
 800c278:	4639      	mov	r1, r7
 800c27a:	2200      	movs	r2, #0
 800c27c:	f7f4 f9bc 	bl	80005f8 <__aeabi_dmul>
 800c280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c282:	4606      	mov	r6, r0
 800c284:	460f      	mov	r7, r1
 800c286:	2b00      	cmp	r3, #0
 800c288:	d09f      	beq.n	800c1ca <_strtod_l+0x98a>
 800c28a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c28e:	e7a0      	b.n	800c1d2 <_strtod_l+0x992>
 800c290:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c318 <_strtod_l+0xad8>
 800c294:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c298:	ec57 6b17 	vmov	r6, r7, d7
 800c29c:	e799      	b.n	800c1d2 <_strtod_l+0x992>
 800c29e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c2a2:	9b08      	ldr	r3, [sp, #32]
 800c2a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1c1      	bne.n	800c230 <_strtod_l+0x9f0>
 800c2ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2b0:	0d1b      	lsrs	r3, r3, #20
 800c2b2:	051b      	lsls	r3, r3, #20
 800c2b4:	429d      	cmp	r5, r3
 800c2b6:	d1bb      	bne.n	800c230 <_strtod_l+0x9f0>
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	4639      	mov	r1, r7
 800c2bc:	f7f4 fcfc 	bl	8000cb8 <__aeabi_d2lz>
 800c2c0:	f7f4 f96c 	bl	800059c <__aeabi_l2d>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	f7f3 ffdc 	bl	8000288 <__aeabi_dsub>
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c2d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2de:	ea46 060a 	orr.w	r6, r6, sl
 800c2e2:	431e      	orrs	r6, r3
 800c2e4:	d06f      	beq.n	800c3c6 <_strtod_l+0xb86>
 800c2e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c320 <_strtod_l+0xae0>)
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	f7f4 fbf6 	bl	8000adc <__aeabi_dcmplt>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	f47f accf 	bne.w	800bc94 <_strtod_l+0x454>
 800c2f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c328 <_strtod_l+0xae8>)
 800c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c300:	f7f4 fc0a 	bl	8000b18 <__aeabi_dcmpgt>
 800c304:	2800      	cmp	r0, #0
 800c306:	d093      	beq.n	800c230 <_strtod_l+0x9f0>
 800c308:	e4c4      	b.n	800bc94 <_strtod_l+0x454>
 800c30a:	bf00      	nop
 800c30c:	f3af 8000 	nop.w
 800c310:	00000000 	.word	0x00000000
 800c314:	bff00000 	.word	0xbff00000
 800c318:	00000000 	.word	0x00000000
 800c31c:	3ff00000 	.word	0x3ff00000
 800c320:	94a03595 	.word	0x94a03595
 800c324:	3fdfffff 	.word	0x3fdfffff
 800c328:	35afe535 	.word	0x35afe535
 800c32c:	3fe00000 	.word	0x3fe00000
 800c330:	000fffff 	.word	0x000fffff
 800c334:	7ff00000 	.word	0x7ff00000
 800c338:	7fefffff 	.word	0x7fefffff
 800c33c:	3ff00000 	.word	0x3ff00000
 800c340:	3fe00000 	.word	0x3fe00000
 800c344:	7fe00000 	.word	0x7fe00000
 800c348:	7c9fffff 	.word	0x7c9fffff
 800c34c:	9b08      	ldr	r3, [sp, #32]
 800c34e:	b323      	cbz	r3, 800c39a <_strtod_l+0xb5a>
 800c350:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c354:	d821      	bhi.n	800c39a <_strtod_l+0xb5a>
 800c356:	a328      	add	r3, pc, #160	@ (adr r3, 800c3f8 <_strtod_l+0xbb8>)
 800c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35c:	4630      	mov	r0, r6
 800c35e:	4639      	mov	r1, r7
 800c360:	f7f4 fbc6 	bl	8000af0 <__aeabi_dcmple>
 800c364:	b1a0      	cbz	r0, 800c390 <_strtod_l+0xb50>
 800c366:	4639      	mov	r1, r7
 800c368:	4630      	mov	r0, r6
 800c36a:	f7f4 fc1d 	bl	8000ba8 <__aeabi_d2uiz>
 800c36e:	2801      	cmp	r0, #1
 800c370:	bf38      	it	cc
 800c372:	2001      	movcc	r0, #1
 800c374:	f7f4 f8c6 	bl	8000504 <__aeabi_ui2d>
 800c378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c37a:	4606      	mov	r6, r0
 800c37c:	460f      	mov	r7, r1
 800c37e:	b9fb      	cbnz	r3, 800c3c0 <_strtod_l+0xb80>
 800c380:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c384:	9014      	str	r0, [sp, #80]	@ 0x50
 800c386:	9315      	str	r3, [sp, #84]	@ 0x54
 800c388:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c38c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c390:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c392:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c396:	1b5b      	subs	r3, r3, r5
 800c398:	9311      	str	r3, [sp, #68]	@ 0x44
 800c39a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c39e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c3a2:	f7ff f8f1 	bl	800b588 <__ulp>
 800c3a6:	4650      	mov	r0, sl
 800c3a8:	ec53 2b10 	vmov	r2, r3, d0
 800c3ac:	4659      	mov	r1, fp
 800c3ae:	f7f4 f923 	bl	80005f8 <__aeabi_dmul>
 800c3b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c3b6:	f7f3 ff69 	bl	800028c <__adddf3>
 800c3ba:	4682      	mov	sl, r0
 800c3bc:	468b      	mov	fp, r1
 800c3be:	e770      	b.n	800c2a2 <_strtod_l+0xa62>
 800c3c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c3c4:	e7e0      	b.n	800c388 <_strtod_l+0xb48>
 800c3c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c400 <_strtod_l+0xbc0>)
 800c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3cc:	f7f4 fb86 	bl	8000adc <__aeabi_dcmplt>
 800c3d0:	e798      	b.n	800c304 <_strtod_l+0xac4>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c3d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	f7ff ba6d 	b.w	800b8ba <_strtod_l+0x7a>
 800c3e0:	2a65      	cmp	r2, #101	@ 0x65
 800c3e2:	f43f ab66 	beq.w	800bab2 <_strtod_l+0x272>
 800c3e6:	2a45      	cmp	r2, #69	@ 0x45
 800c3e8:	f43f ab63 	beq.w	800bab2 <_strtod_l+0x272>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	f7ff bb9e 	b.w	800bb2e <_strtod_l+0x2ee>
 800c3f2:	bf00      	nop
 800c3f4:	f3af 8000 	nop.w
 800c3f8:	ffc00000 	.word	0xffc00000
 800c3fc:	41dfffff 	.word	0x41dfffff
 800c400:	94a03595 	.word	0x94a03595
 800c404:	3fcfffff 	.word	0x3fcfffff

0800c408 <_strtod_r>:
 800c408:	4b01      	ldr	r3, [pc, #4]	@ (800c410 <_strtod_r+0x8>)
 800c40a:	f7ff ba19 	b.w	800b840 <_strtod_l>
 800c40e:	bf00      	nop
 800c410:	20000084 	.word	0x20000084

0800c414 <_strtol_l.constprop.0>:
 800c414:	2b24      	cmp	r3, #36	@ 0x24
 800c416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c41a:	4686      	mov	lr, r0
 800c41c:	4690      	mov	r8, r2
 800c41e:	d801      	bhi.n	800c424 <_strtol_l.constprop.0+0x10>
 800c420:	2b01      	cmp	r3, #1
 800c422:	d106      	bne.n	800c432 <_strtol_l.constprop.0+0x1e>
 800c424:	f7fd fdbc 	bl	8009fa0 <__errno>
 800c428:	2316      	movs	r3, #22
 800c42a:	6003      	str	r3, [r0, #0]
 800c42c:	2000      	movs	r0, #0
 800c42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c432:	4834      	ldr	r0, [pc, #208]	@ (800c504 <_strtol_l.constprop.0+0xf0>)
 800c434:	460d      	mov	r5, r1
 800c436:	462a      	mov	r2, r5
 800c438:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c43c:	5d06      	ldrb	r6, [r0, r4]
 800c43e:	f016 0608 	ands.w	r6, r6, #8
 800c442:	d1f8      	bne.n	800c436 <_strtol_l.constprop.0+0x22>
 800c444:	2c2d      	cmp	r4, #45	@ 0x2d
 800c446:	d12d      	bne.n	800c4a4 <_strtol_l.constprop.0+0x90>
 800c448:	782c      	ldrb	r4, [r5, #0]
 800c44a:	2601      	movs	r6, #1
 800c44c:	1c95      	adds	r5, r2, #2
 800c44e:	f033 0210 	bics.w	r2, r3, #16
 800c452:	d109      	bne.n	800c468 <_strtol_l.constprop.0+0x54>
 800c454:	2c30      	cmp	r4, #48	@ 0x30
 800c456:	d12a      	bne.n	800c4ae <_strtol_l.constprop.0+0x9a>
 800c458:	782a      	ldrb	r2, [r5, #0]
 800c45a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c45e:	2a58      	cmp	r2, #88	@ 0x58
 800c460:	d125      	bne.n	800c4ae <_strtol_l.constprop.0+0x9a>
 800c462:	786c      	ldrb	r4, [r5, #1]
 800c464:	2310      	movs	r3, #16
 800c466:	3502      	adds	r5, #2
 800c468:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c46c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c470:	2200      	movs	r2, #0
 800c472:	fbbc f9f3 	udiv	r9, ip, r3
 800c476:	4610      	mov	r0, r2
 800c478:	fb03 ca19 	mls	sl, r3, r9, ip
 800c47c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c480:	2f09      	cmp	r7, #9
 800c482:	d81b      	bhi.n	800c4bc <_strtol_l.constprop.0+0xa8>
 800c484:	463c      	mov	r4, r7
 800c486:	42a3      	cmp	r3, r4
 800c488:	dd27      	ble.n	800c4da <_strtol_l.constprop.0+0xc6>
 800c48a:	1c57      	adds	r7, r2, #1
 800c48c:	d007      	beq.n	800c49e <_strtol_l.constprop.0+0x8a>
 800c48e:	4581      	cmp	r9, r0
 800c490:	d320      	bcc.n	800c4d4 <_strtol_l.constprop.0+0xc0>
 800c492:	d101      	bne.n	800c498 <_strtol_l.constprop.0+0x84>
 800c494:	45a2      	cmp	sl, r4
 800c496:	db1d      	blt.n	800c4d4 <_strtol_l.constprop.0+0xc0>
 800c498:	fb00 4003 	mla	r0, r0, r3, r4
 800c49c:	2201      	movs	r2, #1
 800c49e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4a2:	e7eb      	b.n	800c47c <_strtol_l.constprop.0+0x68>
 800c4a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c4a6:	bf04      	itt	eq
 800c4a8:	782c      	ldrbeq	r4, [r5, #0]
 800c4aa:	1c95      	addeq	r5, r2, #2
 800c4ac:	e7cf      	b.n	800c44e <_strtol_l.constprop.0+0x3a>
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1da      	bne.n	800c468 <_strtol_l.constprop.0+0x54>
 800c4b2:	2c30      	cmp	r4, #48	@ 0x30
 800c4b4:	bf0c      	ite	eq
 800c4b6:	2308      	moveq	r3, #8
 800c4b8:	230a      	movne	r3, #10
 800c4ba:	e7d5      	b.n	800c468 <_strtol_l.constprop.0+0x54>
 800c4bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c4c0:	2f19      	cmp	r7, #25
 800c4c2:	d801      	bhi.n	800c4c8 <_strtol_l.constprop.0+0xb4>
 800c4c4:	3c37      	subs	r4, #55	@ 0x37
 800c4c6:	e7de      	b.n	800c486 <_strtol_l.constprop.0+0x72>
 800c4c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c4cc:	2f19      	cmp	r7, #25
 800c4ce:	d804      	bhi.n	800c4da <_strtol_l.constprop.0+0xc6>
 800c4d0:	3c57      	subs	r4, #87	@ 0x57
 800c4d2:	e7d8      	b.n	800c486 <_strtol_l.constprop.0+0x72>
 800c4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d8:	e7e1      	b.n	800c49e <_strtol_l.constprop.0+0x8a>
 800c4da:	1c53      	adds	r3, r2, #1
 800c4dc:	d108      	bne.n	800c4f0 <_strtol_l.constprop.0+0xdc>
 800c4de:	2322      	movs	r3, #34	@ 0x22
 800c4e0:	f8ce 3000 	str.w	r3, [lr]
 800c4e4:	4660      	mov	r0, ip
 800c4e6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ea:	d0a0      	beq.n	800c42e <_strtol_l.constprop.0+0x1a>
 800c4ec:	1e69      	subs	r1, r5, #1
 800c4ee:	e006      	b.n	800c4fe <_strtol_l.constprop.0+0xea>
 800c4f0:	b106      	cbz	r6, 800c4f4 <_strtol_l.constprop.0+0xe0>
 800c4f2:	4240      	negs	r0, r0
 800c4f4:	f1b8 0f00 	cmp.w	r8, #0
 800c4f8:	d099      	beq.n	800c42e <_strtol_l.constprop.0+0x1a>
 800c4fa:	2a00      	cmp	r2, #0
 800c4fc:	d1f6      	bne.n	800c4ec <_strtol_l.constprop.0+0xd8>
 800c4fe:	f8c8 1000 	str.w	r1, [r8]
 800c502:	e794      	b.n	800c42e <_strtol_l.constprop.0+0x1a>
 800c504:	0800d981 	.word	0x0800d981

0800c508 <_strtol_r>:
 800c508:	f7ff bf84 	b.w	800c414 <_strtol_l.constprop.0>

0800c50c <__ssputs_r>:
 800c50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c510:	688e      	ldr	r6, [r1, #8]
 800c512:	461f      	mov	r7, r3
 800c514:	42be      	cmp	r6, r7
 800c516:	680b      	ldr	r3, [r1, #0]
 800c518:	4682      	mov	sl, r0
 800c51a:	460c      	mov	r4, r1
 800c51c:	4690      	mov	r8, r2
 800c51e:	d82d      	bhi.n	800c57c <__ssputs_r+0x70>
 800c520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c524:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c528:	d026      	beq.n	800c578 <__ssputs_r+0x6c>
 800c52a:	6965      	ldr	r5, [r4, #20]
 800c52c:	6909      	ldr	r1, [r1, #16]
 800c52e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c532:	eba3 0901 	sub.w	r9, r3, r1
 800c536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c53a:	1c7b      	adds	r3, r7, #1
 800c53c:	444b      	add	r3, r9
 800c53e:	106d      	asrs	r5, r5, #1
 800c540:	429d      	cmp	r5, r3
 800c542:	bf38      	it	cc
 800c544:	461d      	movcc	r5, r3
 800c546:	0553      	lsls	r3, r2, #21
 800c548:	d527      	bpl.n	800c59a <__ssputs_r+0x8e>
 800c54a:	4629      	mov	r1, r5
 800c54c:	f7fe fc1c 	bl	800ad88 <_malloc_r>
 800c550:	4606      	mov	r6, r0
 800c552:	b360      	cbz	r0, 800c5ae <__ssputs_r+0xa2>
 800c554:	6921      	ldr	r1, [r4, #16]
 800c556:	464a      	mov	r2, r9
 800c558:	f000 fa18 	bl	800c98c <memcpy>
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c566:	81a3      	strh	r3, [r4, #12]
 800c568:	6126      	str	r6, [r4, #16]
 800c56a:	6165      	str	r5, [r4, #20]
 800c56c:	444e      	add	r6, r9
 800c56e:	eba5 0509 	sub.w	r5, r5, r9
 800c572:	6026      	str	r6, [r4, #0]
 800c574:	60a5      	str	r5, [r4, #8]
 800c576:	463e      	mov	r6, r7
 800c578:	42be      	cmp	r6, r7
 800c57a:	d900      	bls.n	800c57e <__ssputs_r+0x72>
 800c57c:	463e      	mov	r6, r7
 800c57e:	6820      	ldr	r0, [r4, #0]
 800c580:	4632      	mov	r2, r6
 800c582:	4641      	mov	r1, r8
 800c584:	f000 f9c6 	bl	800c914 <memmove>
 800c588:	68a3      	ldr	r3, [r4, #8]
 800c58a:	1b9b      	subs	r3, r3, r6
 800c58c:	60a3      	str	r3, [r4, #8]
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	4433      	add	r3, r6
 800c592:	6023      	str	r3, [r4, #0]
 800c594:	2000      	movs	r0, #0
 800c596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c59a:	462a      	mov	r2, r5
 800c59c:	f000 fd89 	bl	800d0b2 <_realloc_r>
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d1e0      	bne.n	800c568 <__ssputs_r+0x5c>
 800c5a6:	6921      	ldr	r1, [r4, #16]
 800c5a8:	4650      	mov	r0, sl
 800c5aa:	f7fe fb79 	bl	800aca0 <_free_r>
 800c5ae:	230c      	movs	r3, #12
 800c5b0:	f8ca 3000 	str.w	r3, [sl]
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5ba:	81a3      	strh	r3, [r4, #12]
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c0:	e7e9      	b.n	800c596 <__ssputs_r+0x8a>
	...

0800c5c4 <_svfiprintf_r>:
 800c5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c8:	4698      	mov	r8, r3
 800c5ca:	898b      	ldrh	r3, [r1, #12]
 800c5cc:	061b      	lsls	r3, r3, #24
 800c5ce:	b09d      	sub	sp, #116	@ 0x74
 800c5d0:	4607      	mov	r7, r0
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	d510      	bpl.n	800c5fa <_svfiprintf_r+0x36>
 800c5d8:	690b      	ldr	r3, [r1, #16]
 800c5da:	b973      	cbnz	r3, 800c5fa <_svfiprintf_r+0x36>
 800c5dc:	2140      	movs	r1, #64	@ 0x40
 800c5de:	f7fe fbd3 	bl	800ad88 <_malloc_r>
 800c5e2:	6028      	str	r0, [r5, #0]
 800c5e4:	6128      	str	r0, [r5, #16]
 800c5e6:	b930      	cbnz	r0, 800c5f6 <_svfiprintf_r+0x32>
 800c5e8:	230c      	movs	r3, #12
 800c5ea:	603b      	str	r3, [r7, #0]
 800c5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f0:	b01d      	add	sp, #116	@ 0x74
 800c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f6:	2340      	movs	r3, #64	@ 0x40
 800c5f8:	616b      	str	r3, [r5, #20]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5fe:	2320      	movs	r3, #32
 800c600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c604:	f8cd 800c 	str.w	r8, [sp, #12]
 800c608:	2330      	movs	r3, #48	@ 0x30
 800c60a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c7a8 <_svfiprintf_r+0x1e4>
 800c60e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c612:	f04f 0901 	mov.w	r9, #1
 800c616:	4623      	mov	r3, r4
 800c618:	469a      	mov	sl, r3
 800c61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c61e:	b10a      	cbz	r2, 800c624 <_svfiprintf_r+0x60>
 800c620:	2a25      	cmp	r2, #37	@ 0x25
 800c622:	d1f9      	bne.n	800c618 <_svfiprintf_r+0x54>
 800c624:	ebba 0b04 	subs.w	fp, sl, r4
 800c628:	d00b      	beq.n	800c642 <_svfiprintf_r+0x7e>
 800c62a:	465b      	mov	r3, fp
 800c62c:	4622      	mov	r2, r4
 800c62e:	4629      	mov	r1, r5
 800c630:	4638      	mov	r0, r7
 800c632:	f7ff ff6b 	bl	800c50c <__ssputs_r>
 800c636:	3001      	adds	r0, #1
 800c638:	f000 80a7 	beq.w	800c78a <_svfiprintf_r+0x1c6>
 800c63c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c63e:	445a      	add	r2, fp
 800c640:	9209      	str	r2, [sp, #36]	@ 0x24
 800c642:	f89a 3000 	ldrb.w	r3, [sl]
 800c646:	2b00      	cmp	r3, #0
 800c648:	f000 809f 	beq.w	800c78a <_svfiprintf_r+0x1c6>
 800c64c:	2300      	movs	r3, #0
 800c64e:	f04f 32ff 	mov.w	r2, #4294967295
 800c652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c656:	f10a 0a01 	add.w	sl, sl, #1
 800c65a:	9304      	str	r3, [sp, #16]
 800c65c:	9307      	str	r3, [sp, #28]
 800c65e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c662:	931a      	str	r3, [sp, #104]	@ 0x68
 800c664:	4654      	mov	r4, sl
 800c666:	2205      	movs	r2, #5
 800c668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c66c:	484e      	ldr	r0, [pc, #312]	@ (800c7a8 <_svfiprintf_r+0x1e4>)
 800c66e:	f7f3 fdaf 	bl	80001d0 <memchr>
 800c672:	9a04      	ldr	r2, [sp, #16]
 800c674:	b9d8      	cbnz	r0, 800c6ae <_svfiprintf_r+0xea>
 800c676:	06d0      	lsls	r0, r2, #27
 800c678:	bf44      	itt	mi
 800c67a:	2320      	movmi	r3, #32
 800c67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c680:	0711      	lsls	r1, r2, #28
 800c682:	bf44      	itt	mi
 800c684:	232b      	movmi	r3, #43	@ 0x2b
 800c686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c68a:	f89a 3000 	ldrb.w	r3, [sl]
 800c68e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c690:	d015      	beq.n	800c6be <_svfiprintf_r+0xfa>
 800c692:	9a07      	ldr	r2, [sp, #28]
 800c694:	4654      	mov	r4, sl
 800c696:	2000      	movs	r0, #0
 800c698:	f04f 0c0a 	mov.w	ip, #10
 800c69c:	4621      	mov	r1, r4
 800c69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6a2:	3b30      	subs	r3, #48	@ 0x30
 800c6a4:	2b09      	cmp	r3, #9
 800c6a6:	d94b      	bls.n	800c740 <_svfiprintf_r+0x17c>
 800c6a8:	b1b0      	cbz	r0, 800c6d8 <_svfiprintf_r+0x114>
 800c6aa:	9207      	str	r2, [sp, #28]
 800c6ac:	e014      	b.n	800c6d8 <_svfiprintf_r+0x114>
 800c6ae:	eba0 0308 	sub.w	r3, r0, r8
 800c6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	9304      	str	r3, [sp, #16]
 800c6ba:	46a2      	mov	sl, r4
 800c6bc:	e7d2      	b.n	800c664 <_svfiprintf_r+0xa0>
 800c6be:	9b03      	ldr	r3, [sp, #12]
 800c6c0:	1d19      	adds	r1, r3, #4
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	9103      	str	r1, [sp, #12]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	bfbb      	ittet	lt
 800c6ca:	425b      	neglt	r3, r3
 800c6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c6d0:	9307      	strge	r3, [sp, #28]
 800c6d2:	9307      	strlt	r3, [sp, #28]
 800c6d4:	bfb8      	it	lt
 800c6d6:	9204      	strlt	r2, [sp, #16]
 800c6d8:	7823      	ldrb	r3, [r4, #0]
 800c6da:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6dc:	d10a      	bne.n	800c6f4 <_svfiprintf_r+0x130>
 800c6de:	7863      	ldrb	r3, [r4, #1]
 800c6e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6e2:	d132      	bne.n	800c74a <_svfiprintf_r+0x186>
 800c6e4:	9b03      	ldr	r3, [sp, #12]
 800c6e6:	1d1a      	adds	r2, r3, #4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	9203      	str	r2, [sp, #12]
 800c6ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6f0:	3402      	adds	r4, #2
 800c6f2:	9305      	str	r3, [sp, #20]
 800c6f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c7b8 <_svfiprintf_r+0x1f4>
 800c6f8:	7821      	ldrb	r1, [r4, #0]
 800c6fa:	2203      	movs	r2, #3
 800c6fc:	4650      	mov	r0, sl
 800c6fe:	f7f3 fd67 	bl	80001d0 <memchr>
 800c702:	b138      	cbz	r0, 800c714 <_svfiprintf_r+0x150>
 800c704:	9b04      	ldr	r3, [sp, #16]
 800c706:	eba0 000a 	sub.w	r0, r0, sl
 800c70a:	2240      	movs	r2, #64	@ 0x40
 800c70c:	4082      	lsls	r2, r0
 800c70e:	4313      	orrs	r3, r2
 800c710:	3401      	adds	r4, #1
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c718:	4824      	ldr	r0, [pc, #144]	@ (800c7ac <_svfiprintf_r+0x1e8>)
 800c71a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c71e:	2206      	movs	r2, #6
 800c720:	f7f3 fd56 	bl	80001d0 <memchr>
 800c724:	2800      	cmp	r0, #0
 800c726:	d036      	beq.n	800c796 <_svfiprintf_r+0x1d2>
 800c728:	4b21      	ldr	r3, [pc, #132]	@ (800c7b0 <_svfiprintf_r+0x1ec>)
 800c72a:	bb1b      	cbnz	r3, 800c774 <_svfiprintf_r+0x1b0>
 800c72c:	9b03      	ldr	r3, [sp, #12]
 800c72e:	3307      	adds	r3, #7
 800c730:	f023 0307 	bic.w	r3, r3, #7
 800c734:	3308      	adds	r3, #8
 800c736:	9303      	str	r3, [sp, #12]
 800c738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c73a:	4433      	add	r3, r6
 800c73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c73e:	e76a      	b.n	800c616 <_svfiprintf_r+0x52>
 800c740:	fb0c 3202 	mla	r2, ip, r2, r3
 800c744:	460c      	mov	r4, r1
 800c746:	2001      	movs	r0, #1
 800c748:	e7a8      	b.n	800c69c <_svfiprintf_r+0xd8>
 800c74a:	2300      	movs	r3, #0
 800c74c:	3401      	adds	r4, #1
 800c74e:	9305      	str	r3, [sp, #20]
 800c750:	4619      	mov	r1, r3
 800c752:	f04f 0c0a 	mov.w	ip, #10
 800c756:	4620      	mov	r0, r4
 800c758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c75c:	3a30      	subs	r2, #48	@ 0x30
 800c75e:	2a09      	cmp	r2, #9
 800c760:	d903      	bls.n	800c76a <_svfiprintf_r+0x1a6>
 800c762:	2b00      	cmp	r3, #0
 800c764:	d0c6      	beq.n	800c6f4 <_svfiprintf_r+0x130>
 800c766:	9105      	str	r1, [sp, #20]
 800c768:	e7c4      	b.n	800c6f4 <_svfiprintf_r+0x130>
 800c76a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c76e:	4604      	mov	r4, r0
 800c770:	2301      	movs	r3, #1
 800c772:	e7f0      	b.n	800c756 <_svfiprintf_r+0x192>
 800c774:	ab03      	add	r3, sp, #12
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	462a      	mov	r2, r5
 800c77a:	4b0e      	ldr	r3, [pc, #56]	@ (800c7b4 <_svfiprintf_r+0x1f0>)
 800c77c:	a904      	add	r1, sp, #16
 800c77e:	4638      	mov	r0, r7
 800c780:	f7fc fcca 	bl	8009118 <_printf_float>
 800c784:	1c42      	adds	r2, r0, #1
 800c786:	4606      	mov	r6, r0
 800c788:	d1d6      	bne.n	800c738 <_svfiprintf_r+0x174>
 800c78a:	89ab      	ldrh	r3, [r5, #12]
 800c78c:	065b      	lsls	r3, r3, #25
 800c78e:	f53f af2d 	bmi.w	800c5ec <_svfiprintf_r+0x28>
 800c792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c794:	e72c      	b.n	800c5f0 <_svfiprintf_r+0x2c>
 800c796:	ab03      	add	r3, sp, #12
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	462a      	mov	r2, r5
 800c79c:	4b05      	ldr	r3, [pc, #20]	@ (800c7b4 <_svfiprintf_r+0x1f0>)
 800c79e:	a904      	add	r1, sp, #16
 800c7a0:	4638      	mov	r0, r7
 800c7a2:	f7fc ff51 	bl	8009648 <_printf_i>
 800c7a6:	e7ed      	b.n	800c784 <_svfiprintf_r+0x1c0>
 800c7a8:	0800da81 	.word	0x0800da81
 800c7ac:	0800da8b 	.word	0x0800da8b
 800c7b0:	08009119 	.word	0x08009119
 800c7b4:	0800c50d 	.word	0x0800c50d
 800c7b8:	0800da87 	.word	0x0800da87

0800c7bc <__sflush_r>:
 800c7bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c4:	0716      	lsls	r6, r2, #28
 800c7c6:	4605      	mov	r5, r0
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	d454      	bmi.n	800c876 <__sflush_r+0xba>
 800c7cc:	684b      	ldr	r3, [r1, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	dc02      	bgt.n	800c7d8 <__sflush_r+0x1c>
 800c7d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	dd48      	ble.n	800c86a <__sflush_r+0xae>
 800c7d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7da:	2e00      	cmp	r6, #0
 800c7dc:	d045      	beq.n	800c86a <__sflush_r+0xae>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c7e4:	682f      	ldr	r7, [r5, #0]
 800c7e6:	6a21      	ldr	r1, [r4, #32]
 800c7e8:	602b      	str	r3, [r5, #0]
 800c7ea:	d030      	beq.n	800c84e <__sflush_r+0x92>
 800c7ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c7ee:	89a3      	ldrh	r3, [r4, #12]
 800c7f0:	0759      	lsls	r1, r3, #29
 800c7f2:	d505      	bpl.n	800c800 <__sflush_r+0x44>
 800c7f4:	6863      	ldr	r3, [r4, #4]
 800c7f6:	1ad2      	subs	r2, r2, r3
 800c7f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c7fa:	b10b      	cbz	r3, 800c800 <__sflush_r+0x44>
 800c7fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c7fe:	1ad2      	subs	r2, r2, r3
 800c800:	2300      	movs	r3, #0
 800c802:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c804:	6a21      	ldr	r1, [r4, #32]
 800c806:	4628      	mov	r0, r5
 800c808:	47b0      	blx	r6
 800c80a:	1c43      	adds	r3, r0, #1
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	d106      	bne.n	800c81e <__sflush_r+0x62>
 800c810:	6829      	ldr	r1, [r5, #0]
 800c812:	291d      	cmp	r1, #29
 800c814:	d82b      	bhi.n	800c86e <__sflush_r+0xb2>
 800c816:	4a2a      	ldr	r2, [pc, #168]	@ (800c8c0 <__sflush_r+0x104>)
 800c818:	410a      	asrs	r2, r1
 800c81a:	07d6      	lsls	r6, r2, #31
 800c81c:	d427      	bmi.n	800c86e <__sflush_r+0xb2>
 800c81e:	2200      	movs	r2, #0
 800c820:	6062      	str	r2, [r4, #4]
 800c822:	04d9      	lsls	r1, r3, #19
 800c824:	6922      	ldr	r2, [r4, #16]
 800c826:	6022      	str	r2, [r4, #0]
 800c828:	d504      	bpl.n	800c834 <__sflush_r+0x78>
 800c82a:	1c42      	adds	r2, r0, #1
 800c82c:	d101      	bne.n	800c832 <__sflush_r+0x76>
 800c82e:	682b      	ldr	r3, [r5, #0]
 800c830:	b903      	cbnz	r3, 800c834 <__sflush_r+0x78>
 800c832:	6560      	str	r0, [r4, #84]	@ 0x54
 800c834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c836:	602f      	str	r7, [r5, #0]
 800c838:	b1b9      	cbz	r1, 800c86a <__sflush_r+0xae>
 800c83a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c83e:	4299      	cmp	r1, r3
 800c840:	d002      	beq.n	800c848 <__sflush_r+0x8c>
 800c842:	4628      	mov	r0, r5
 800c844:	f7fe fa2c 	bl	800aca0 <_free_r>
 800c848:	2300      	movs	r3, #0
 800c84a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c84c:	e00d      	b.n	800c86a <__sflush_r+0xae>
 800c84e:	2301      	movs	r3, #1
 800c850:	4628      	mov	r0, r5
 800c852:	47b0      	blx	r6
 800c854:	4602      	mov	r2, r0
 800c856:	1c50      	adds	r0, r2, #1
 800c858:	d1c9      	bne.n	800c7ee <__sflush_r+0x32>
 800c85a:	682b      	ldr	r3, [r5, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d0c6      	beq.n	800c7ee <__sflush_r+0x32>
 800c860:	2b1d      	cmp	r3, #29
 800c862:	d001      	beq.n	800c868 <__sflush_r+0xac>
 800c864:	2b16      	cmp	r3, #22
 800c866:	d11e      	bne.n	800c8a6 <__sflush_r+0xea>
 800c868:	602f      	str	r7, [r5, #0]
 800c86a:	2000      	movs	r0, #0
 800c86c:	e022      	b.n	800c8b4 <__sflush_r+0xf8>
 800c86e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c872:	b21b      	sxth	r3, r3
 800c874:	e01b      	b.n	800c8ae <__sflush_r+0xf2>
 800c876:	690f      	ldr	r7, [r1, #16]
 800c878:	2f00      	cmp	r7, #0
 800c87a:	d0f6      	beq.n	800c86a <__sflush_r+0xae>
 800c87c:	0793      	lsls	r3, r2, #30
 800c87e:	680e      	ldr	r6, [r1, #0]
 800c880:	bf08      	it	eq
 800c882:	694b      	ldreq	r3, [r1, #20]
 800c884:	600f      	str	r7, [r1, #0]
 800c886:	bf18      	it	ne
 800c888:	2300      	movne	r3, #0
 800c88a:	eba6 0807 	sub.w	r8, r6, r7
 800c88e:	608b      	str	r3, [r1, #8]
 800c890:	f1b8 0f00 	cmp.w	r8, #0
 800c894:	dde9      	ble.n	800c86a <__sflush_r+0xae>
 800c896:	6a21      	ldr	r1, [r4, #32]
 800c898:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c89a:	4643      	mov	r3, r8
 800c89c:	463a      	mov	r2, r7
 800c89e:	4628      	mov	r0, r5
 800c8a0:	47b0      	blx	r6
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	dc08      	bgt.n	800c8b8 <__sflush_r+0xfc>
 800c8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ae:	81a3      	strh	r3, [r4, #12]
 800c8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b8:	4407      	add	r7, r0
 800c8ba:	eba8 0800 	sub.w	r8, r8, r0
 800c8be:	e7e7      	b.n	800c890 <__sflush_r+0xd4>
 800c8c0:	dfbffffe 	.word	0xdfbffffe

0800c8c4 <_fflush_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	690b      	ldr	r3, [r1, #16]
 800c8c8:	4605      	mov	r5, r0
 800c8ca:	460c      	mov	r4, r1
 800c8cc:	b913      	cbnz	r3, 800c8d4 <_fflush_r+0x10>
 800c8ce:	2500      	movs	r5, #0
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	bd38      	pop	{r3, r4, r5, pc}
 800c8d4:	b118      	cbz	r0, 800c8de <_fflush_r+0x1a>
 800c8d6:	6a03      	ldr	r3, [r0, #32]
 800c8d8:	b90b      	cbnz	r3, 800c8de <_fflush_r+0x1a>
 800c8da:	f7fd fa75 	bl	8009dc8 <__sinit>
 800c8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d0f3      	beq.n	800c8ce <_fflush_r+0xa>
 800c8e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c8e8:	07d0      	lsls	r0, r2, #31
 800c8ea:	d404      	bmi.n	800c8f6 <_fflush_r+0x32>
 800c8ec:	0599      	lsls	r1, r3, #22
 800c8ee:	d402      	bmi.n	800c8f6 <_fflush_r+0x32>
 800c8f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8f2:	f7fd fb80 	bl	8009ff6 <__retarget_lock_acquire_recursive>
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	f7ff ff5f 	bl	800c7bc <__sflush_r>
 800c8fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c900:	07da      	lsls	r2, r3, #31
 800c902:	4605      	mov	r5, r0
 800c904:	d4e4      	bmi.n	800c8d0 <_fflush_r+0xc>
 800c906:	89a3      	ldrh	r3, [r4, #12]
 800c908:	059b      	lsls	r3, r3, #22
 800c90a:	d4e1      	bmi.n	800c8d0 <_fflush_r+0xc>
 800c90c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c90e:	f7fd fb73 	bl	8009ff8 <__retarget_lock_release_recursive>
 800c912:	e7dd      	b.n	800c8d0 <_fflush_r+0xc>

0800c914 <memmove>:
 800c914:	4288      	cmp	r0, r1
 800c916:	b510      	push	{r4, lr}
 800c918:	eb01 0402 	add.w	r4, r1, r2
 800c91c:	d902      	bls.n	800c924 <memmove+0x10>
 800c91e:	4284      	cmp	r4, r0
 800c920:	4623      	mov	r3, r4
 800c922:	d807      	bhi.n	800c934 <memmove+0x20>
 800c924:	1e43      	subs	r3, r0, #1
 800c926:	42a1      	cmp	r1, r4
 800c928:	d008      	beq.n	800c93c <memmove+0x28>
 800c92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c932:	e7f8      	b.n	800c926 <memmove+0x12>
 800c934:	4402      	add	r2, r0
 800c936:	4601      	mov	r1, r0
 800c938:	428a      	cmp	r2, r1
 800c93a:	d100      	bne.n	800c93e <memmove+0x2a>
 800c93c:	bd10      	pop	{r4, pc}
 800c93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c946:	e7f7      	b.n	800c938 <memmove+0x24>

0800c948 <strncmp>:
 800c948:	b510      	push	{r4, lr}
 800c94a:	b16a      	cbz	r2, 800c968 <strncmp+0x20>
 800c94c:	3901      	subs	r1, #1
 800c94e:	1884      	adds	r4, r0, r2
 800c950:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c954:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c958:	429a      	cmp	r2, r3
 800c95a:	d103      	bne.n	800c964 <strncmp+0x1c>
 800c95c:	42a0      	cmp	r0, r4
 800c95e:	d001      	beq.n	800c964 <strncmp+0x1c>
 800c960:	2a00      	cmp	r2, #0
 800c962:	d1f5      	bne.n	800c950 <strncmp+0x8>
 800c964:	1ad0      	subs	r0, r2, r3
 800c966:	bd10      	pop	{r4, pc}
 800c968:	4610      	mov	r0, r2
 800c96a:	e7fc      	b.n	800c966 <strncmp+0x1e>

0800c96c <_sbrk_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4d06      	ldr	r5, [pc, #24]	@ (800c988 <_sbrk_r+0x1c>)
 800c970:	2300      	movs	r3, #0
 800c972:	4604      	mov	r4, r0
 800c974:	4608      	mov	r0, r1
 800c976:	602b      	str	r3, [r5, #0]
 800c978:	f7f6 f8e2 	bl	8002b40 <_sbrk>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d102      	bne.n	800c986 <_sbrk_r+0x1a>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	b103      	cbz	r3, 800c986 <_sbrk_r+0x1a>
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	200005b0 	.word	0x200005b0

0800c98c <memcpy>:
 800c98c:	440a      	add	r2, r1
 800c98e:	4291      	cmp	r1, r2
 800c990:	f100 33ff 	add.w	r3, r0, #4294967295
 800c994:	d100      	bne.n	800c998 <memcpy+0xc>
 800c996:	4770      	bx	lr
 800c998:	b510      	push	{r4, lr}
 800c99a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c99e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9a2:	4291      	cmp	r1, r2
 800c9a4:	d1f9      	bne.n	800c99a <memcpy+0xe>
 800c9a6:	bd10      	pop	{r4, pc}

0800c9a8 <nan>:
 800c9a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9b0 <nan+0x8>
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	00000000 	.word	0x00000000
 800c9b4:	7ff80000 	.word	0x7ff80000

0800c9b8 <__assert_func>:
 800c9b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9ba:	4614      	mov	r4, r2
 800c9bc:	461a      	mov	r2, r3
 800c9be:	4b09      	ldr	r3, [pc, #36]	@ (800c9e4 <__assert_func+0x2c>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	68d8      	ldr	r0, [r3, #12]
 800c9c6:	b954      	cbnz	r4, 800c9de <__assert_func+0x26>
 800c9c8:	4b07      	ldr	r3, [pc, #28]	@ (800c9e8 <__assert_func+0x30>)
 800c9ca:	461c      	mov	r4, r3
 800c9cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9d0:	9100      	str	r1, [sp, #0]
 800c9d2:	462b      	mov	r3, r5
 800c9d4:	4905      	ldr	r1, [pc, #20]	@ (800c9ec <__assert_func+0x34>)
 800c9d6:	f000 fba7 	bl	800d128 <fiprintf>
 800c9da:	f000 fbb7 	bl	800d14c <abort>
 800c9de:	4b04      	ldr	r3, [pc, #16]	@ (800c9f0 <__assert_func+0x38>)
 800c9e0:	e7f4      	b.n	800c9cc <__assert_func+0x14>
 800c9e2:	bf00      	nop
 800c9e4:	20000034 	.word	0x20000034
 800c9e8:	0800dad5 	.word	0x0800dad5
 800c9ec:	0800daa7 	.word	0x0800daa7
 800c9f0:	0800da9a 	.word	0x0800da9a

0800c9f4 <_calloc_r>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	fba1 5402 	umull	r5, r4, r1, r2
 800c9fa:	b93c      	cbnz	r4, 800ca0c <_calloc_r+0x18>
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	f7fe f9c3 	bl	800ad88 <_malloc_r>
 800ca02:	4606      	mov	r6, r0
 800ca04:	b928      	cbnz	r0, 800ca12 <_calloc_r+0x1e>
 800ca06:	2600      	movs	r6, #0
 800ca08:	4630      	mov	r0, r6
 800ca0a:	bd70      	pop	{r4, r5, r6, pc}
 800ca0c:	220c      	movs	r2, #12
 800ca0e:	6002      	str	r2, [r0, #0]
 800ca10:	e7f9      	b.n	800ca06 <_calloc_r+0x12>
 800ca12:	462a      	mov	r2, r5
 800ca14:	4621      	mov	r1, r4
 800ca16:	f7fd fa70 	bl	8009efa <memset>
 800ca1a:	e7f5      	b.n	800ca08 <_calloc_r+0x14>

0800ca1c <rshift>:
 800ca1c:	6903      	ldr	r3, [r0, #16]
 800ca1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca2a:	f100 0414 	add.w	r4, r0, #20
 800ca2e:	dd45      	ble.n	800cabc <rshift+0xa0>
 800ca30:	f011 011f 	ands.w	r1, r1, #31
 800ca34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca3c:	d10c      	bne.n	800ca58 <rshift+0x3c>
 800ca3e:	f100 0710 	add.w	r7, r0, #16
 800ca42:	4629      	mov	r1, r5
 800ca44:	42b1      	cmp	r1, r6
 800ca46:	d334      	bcc.n	800cab2 <rshift+0x96>
 800ca48:	1a9b      	subs	r3, r3, r2
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	1eea      	subs	r2, r5, #3
 800ca4e:	4296      	cmp	r6, r2
 800ca50:	bf38      	it	cc
 800ca52:	2300      	movcc	r3, #0
 800ca54:	4423      	add	r3, r4
 800ca56:	e015      	b.n	800ca84 <rshift+0x68>
 800ca58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca5c:	f1c1 0820 	rsb	r8, r1, #32
 800ca60:	40cf      	lsrs	r7, r1
 800ca62:	f105 0e04 	add.w	lr, r5, #4
 800ca66:	46a1      	mov	r9, r4
 800ca68:	4576      	cmp	r6, lr
 800ca6a:	46f4      	mov	ip, lr
 800ca6c:	d815      	bhi.n	800ca9a <rshift+0x7e>
 800ca6e:	1a9a      	subs	r2, r3, r2
 800ca70:	0092      	lsls	r2, r2, #2
 800ca72:	3a04      	subs	r2, #4
 800ca74:	3501      	adds	r5, #1
 800ca76:	42ae      	cmp	r6, r5
 800ca78:	bf38      	it	cc
 800ca7a:	2200      	movcc	r2, #0
 800ca7c:	18a3      	adds	r3, r4, r2
 800ca7e:	50a7      	str	r7, [r4, r2]
 800ca80:	b107      	cbz	r7, 800ca84 <rshift+0x68>
 800ca82:	3304      	adds	r3, #4
 800ca84:	1b1a      	subs	r2, r3, r4
 800ca86:	42a3      	cmp	r3, r4
 800ca88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca8c:	bf08      	it	eq
 800ca8e:	2300      	moveq	r3, #0
 800ca90:	6102      	str	r2, [r0, #16]
 800ca92:	bf08      	it	eq
 800ca94:	6143      	streq	r3, [r0, #20]
 800ca96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca9a:	f8dc c000 	ldr.w	ip, [ip]
 800ca9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800caa2:	ea4c 0707 	orr.w	r7, ip, r7
 800caa6:	f849 7b04 	str.w	r7, [r9], #4
 800caaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800caae:	40cf      	lsrs	r7, r1
 800cab0:	e7da      	b.n	800ca68 <rshift+0x4c>
 800cab2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cab6:	f847 cf04 	str.w	ip, [r7, #4]!
 800caba:	e7c3      	b.n	800ca44 <rshift+0x28>
 800cabc:	4623      	mov	r3, r4
 800cabe:	e7e1      	b.n	800ca84 <rshift+0x68>

0800cac0 <__hexdig_fun>:
 800cac0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cac4:	2b09      	cmp	r3, #9
 800cac6:	d802      	bhi.n	800cace <__hexdig_fun+0xe>
 800cac8:	3820      	subs	r0, #32
 800caca:	b2c0      	uxtb	r0, r0
 800cacc:	4770      	bx	lr
 800cace:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cad2:	2b05      	cmp	r3, #5
 800cad4:	d801      	bhi.n	800cada <__hexdig_fun+0x1a>
 800cad6:	3847      	subs	r0, #71	@ 0x47
 800cad8:	e7f7      	b.n	800caca <__hexdig_fun+0xa>
 800cada:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cade:	2b05      	cmp	r3, #5
 800cae0:	d801      	bhi.n	800cae6 <__hexdig_fun+0x26>
 800cae2:	3827      	subs	r0, #39	@ 0x27
 800cae4:	e7f1      	b.n	800caca <__hexdig_fun+0xa>
 800cae6:	2000      	movs	r0, #0
 800cae8:	4770      	bx	lr
	...

0800caec <__gethex>:
 800caec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf0:	b085      	sub	sp, #20
 800caf2:	468a      	mov	sl, r1
 800caf4:	9302      	str	r3, [sp, #8]
 800caf6:	680b      	ldr	r3, [r1, #0]
 800caf8:	9001      	str	r0, [sp, #4]
 800cafa:	4690      	mov	r8, r2
 800cafc:	1c9c      	adds	r4, r3, #2
 800cafe:	46a1      	mov	r9, r4
 800cb00:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cb04:	2830      	cmp	r0, #48	@ 0x30
 800cb06:	d0fa      	beq.n	800cafe <__gethex+0x12>
 800cb08:	eba9 0303 	sub.w	r3, r9, r3
 800cb0c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cb10:	f7ff ffd6 	bl	800cac0 <__hexdig_fun>
 800cb14:	4605      	mov	r5, r0
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d168      	bne.n	800cbec <__gethex+0x100>
 800cb1a:	49a0      	ldr	r1, [pc, #640]	@ (800cd9c <__gethex+0x2b0>)
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	4648      	mov	r0, r9
 800cb20:	f7ff ff12 	bl	800c948 <strncmp>
 800cb24:	4607      	mov	r7, r0
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d167      	bne.n	800cbfa <__gethex+0x10e>
 800cb2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cb2e:	4626      	mov	r6, r4
 800cb30:	f7ff ffc6 	bl	800cac0 <__hexdig_fun>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d062      	beq.n	800cbfe <__gethex+0x112>
 800cb38:	4623      	mov	r3, r4
 800cb3a:	7818      	ldrb	r0, [r3, #0]
 800cb3c:	2830      	cmp	r0, #48	@ 0x30
 800cb3e:	4699      	mov	r9, r3
 800cb40:	f103 0301 	add.w	r3, r3, #1
 800cb44:	d0f9      	beq.n	800cb3a <__gethex+0x4e>
 800cb46:	f7ff ffbb 	bl	800cac0 <__hexdig_fun>
 800cb4a:	fab0 f580 	clz	r5, r0
 800cb4e:	096d      	lsrs	r5, r5, #5
 800cb50:	f04f 0b01 	mov.w	fp, #1
 800cb54:	464a      	mov	r2, r9
 800cb56:	4616      	mov	r6, r2
 800cb58:	3201      	adds	r2, #1
 800cb5a:	7830      	ldrb	r0, [r6, #0]
 800cb5c:	f7ff ffb0 	bl	800cac0 <__hexdig_fun>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	d1f8      	bne.n	800cb56 <__gethex+0x6a>
 800cb64:	498d      	ldr	r1, [pc, #564]	@ (800cd9c <__gethex+0x2b0>)
 800cb66:	2201      	movs	r2, #1
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f7ff feed 	bl	800c948 <strncmp>
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d13f      	bne.n	800cbf2 <__gethex+0x106>
 800cb72:	b944      	cbnz	r4, 800cb86 <__gethex+0x9a>
 800cb74:	1c74      	adds	r4, r6, #1
 800cb76:	4622      	mov	r2, r4
 800cb78:	4616      	mov	r6, r2
 800cb7a:	3201      	adds	r2, #1
 800cb7c:	7830      	ldrb	r0, [r6, #0]
 800cb7e:	f7ff ff9f 	bl	800cac0 <__hexdig_fun>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d1f8      	bne.n	800cb78 <__gethex+0x8c>
 800cb86:	1ba4      	subs	r4, r4, r6
 800cb88:	00a7      	lsls	r7, r4, #2
 800cb8a:	7833      	ldrb	r3, [r6, #0]
 800cb8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cb90:	2b50      	cmp	r3, #80	@ 0x50
 800cb92:	d13e      	bne.n	800cc12 <__gethex+0x126>
 800cb94:	7873      	ldrb	r3, [r6, #1]
 800cb96:	2b2b      	cmp	r3, #43	@ 0x2b
 800cb98:	d033      	beq.n	800cc02 <__gethex+0x116>
 800cb9a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cb9c:	d034      	beq.n	800cc08 <__gethex+0x11c>
 800cb9e:	1c71      	adds	r1, r6, #1
 800cba0:	2400      	movs	r4, #0
 800cba2:	7808      	ldrb	r0, [r1, #0]
 800cba4:	f7ff ff8c 	bl	800cac0 <__hexdig_fun>
 800cba8:	1e43      	subs	r3, r0, #1
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b18      	cmp	r3, #24
 800cbae:	d830      	bhi.n	800cc12 <__gethex+0x126>
 800cbb0:	f1a0 0210 	sub.w	r2, r0, #16
 800cbb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cbb8:	f7ff ff82 	bl	800cac0 <__hexdig_fun>
 800cbbc:	f100 3cff 	add.w	ip, r0, #4294967295
 800cbc0:	fa5f fc8c 	uxtb.w	ip, ip
 800cbc4:	f1bc 0f18 	cmp.w	ip, #24
 800cbc8:	f04f 030a 	mov.w	r3, #10
 800cbcc:	d91e      	bls.n	800cc0c <__gethex+0x120>
 800cbce:	b104      	cbz	r4, 800cbd2 <__gethex+0xe6>
 800cbd0:	4252      	negs	r2, r2
 800cbd2:	4417      	add	r7, r2
 800cbd4:	f8ca 1000 	str.w	r1, [sl]
 800cbd8:	b1ed      	cbz	r5, 800cc16 <__gethex+0x12a>
 800cbda:	f1bb 0f00 	cmp.w	fp, #0
 800cbde:	bf0c      	ite	eq
 800cbe0:	2506      	moveq	r5, #6
 800cbe2:	2500      	movne	r5, #0
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	b005      	add	sp, #20
 800cbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbec:	2500      	movs	r5, #0
 800cbee:	462c      	mov	r4, r5
 800cbf0:	e7b0      	b.n	800cb54 <__gethex+0x68>
 800cbf2:	2c00      	cmp	r4, #0
 800cbf4:	d1c7      	bne.n	800cb86 <__gethex+0x9a>
 800cbf6:	4627      	mov	r7, r4
 800cbf8:	e7c7      	b.n	800cb8a <__gethex+0x9e>
 800cbfa:	464e      	mov	r6, r9
 800cbfc:	462f      	mov	r7, r5
 800cbfe:	2501      	movs	r5, #1
 800cc00:	e7c3      	b.n	800cb8a <__gethex+0x9e>
 800cc02:	2400      	movs	r4, #0
 800cc04:	1cb1      	adds	r1, r6, #2
 800cc06:	e7cc      	b.n	800cba2 <__gethex+0xb6>
 800cc08:	2401      	movs	r4, #1
 800cc0a:	e7fb      	b.n	800cc04 <__gethex+0x118>
 800cc0c:	fb03 0002 	mla	r0, r3, r2, r0
 800cc10:	e7ce      	b.n	800cbb0 <__gethex+0xc4>
 800cc12:	4631      	mov	r1, r6
 800cc14:	e7de      	b.n	800cbd4 <__gethex+0xe8>
 800cc16:	eba6 0309 	sub.w	r3, r6, r9
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	2b07      	cmp	r3, #7
 800cc20:	dc0a      	bgt.n	800cc38 <__gethex+0x14c>
 800cc22:	9801      	ldr	r0, [sp, #4]
 800cc24:	f7fe f93c 	bl	800aea0 <_Balloc>
 800cc28:	4604      	mov	r4, r0
 800cc2a:	b940      	cbnz	r0, 800cc3e <__gethex+0x152>
 800cc2c:	4b5c      	ldr	r3, [pc, #368]	@ (800cda0 <__gethex+0x2b4>)
 800cc2e:	4602      	mov	r2, r0
 800cc30:	21e4      	movs	r1, #228	@ 0xe4
 800cc32:	485c      	ldr	r0, [pc, #368]	@ (800cda4 <__gethex+0x2b8>)
 800cc34:	f7ff fec0 	bl	800c9b8 <__assert_func>
 800cc38:	3101      	adds	r1, #1
 800cc3a:	105b      	asrs	r3, r3, #1
 800cc3c:	e7ef      	b.n	800cc1e <__gethex+0x132>
 800cc3e:	f100 0a14 	add.w	sl, r0, #20
 800cc42:	2300      	movs	r3, #0
 800cc44:	4655      	mov	r5, sl
 800cc46:	469b      	mov	fp, r3
 800cc48:	45b1      	cmp	r9, r6
 800cc4a:	d337      	bcc.n	800ccbc <__gethex+0x1d0>
 800cc4c:	f845 bb04 	str.w	fp, [r5], #4
 800cc50:	eba5 050a 	sub.w	r5, r5, sl
 800cc54:	10ad      	asrs	r5, r5, #2
 800cc56:	6125      	str	r5, [r4, #16]
 800cc58:	4658      	mov	r0, fp
 800cc5a:	f7fe fa13 	bl	800b084 <__hi0bits>
 800cc5e:	016d      	lsls	r5, r5, #5
 800cc60:	f8d8 6000 	ldr.w	r6, [r8]
 800cc64:	1a2d      	subs	r5, r5, r0
 800cc66:	42b5      	cmp	r5, r6
 800cc68:	dd54      	ble.n	800cd14 <__gethex+0x228>
 800cc6a:	1bad      	subs	r5, r5, r6
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f7fe fda7 	bl	800b7c2 <__any_on>
 800cc74:	4681      	mov	r9, r0
 800cc76:	b178      	cbz	r0, 800cc98 <__gethex+0x1ac>
 800cc78:	1e6b      	subs	r3, r5, #1
 800cc7a:	1159      	asrs	r1, r3, #5
 800cc7c:	f003 021f 	and.w	r2, r3, #31
 800cc80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc84:	f04f 0901 	mov.w	r9, #1
 800cc88:	fa09 f202 	lsl.w	r2, r9, r2
 800cc8c:	420a      	tst	r2, r1
 800cc8e:	d003      	beq.n	800cc98 <__gethex+0x1ac>
 800cc90:	454b      	cmp	r3, r9
 800cc92:	dc36      	bgt.n	800cd02 <__gethex+0x216>
 800cc94:	f04f 0902 	mov.w	r9, #2
 800cc98:	4629      	mov	r1, r5
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f7ff febe 	bl	800ca1c <rshift>
 800cca0:	442f      	add	r7, r5
 800cca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cca6:	42bb      	cmp	r3, r7
 800cca8:	da42      	bge.n	800cd30 <__gethex+0x244>
 800ccaa:	9801      	ldr	r0, [sp, #4]
 800ccac:	4621      	mov	r1, r4
 800ccae:	f7fe f937 	bl	800af20 <_Bfree>
 800ccb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	25a3      	movs	r5, #163	@ 0xa3
 800ccba:	e793      	b.n	800cbe4 <__gethex+0xf8>
 800ccbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ccc0:	2a2e      	cmp	r2, #46	@ 0x2e
 800ccc2:	d012      	beq.n	800ccea <__gethex+0x1fe>
 800ccc4:	2b20      	cmp	r3, #32
 800ccc6:	d104      	bne.n	800ccd2 <__gethex+0x1e6>
 800ccc8:	f845 bb04 	str.w	fp, [r5], #4
 800cccc:	f04f 0b00 	mov.w	fp, #0
 800ccd0:	465b      	mov	r3, fp
 800ccd2:	7830      	ldrb	r0, [r6, #0]
 800ccd4:	9303      	str	r3, [sp, #12]
 800ccd6:	f7ff fef3 	bl	800cac0 <__hexdig_fun>
 800ccda:	9b03      	ldr	r3, [sp, #12]
 800ccdc:	f000 000f 	and.w	r0, r0, #15
 800cce0:	4098      	lsls	r0, r3
 800cce2:	ea4b 0b00 	orr.w	fp, fp, r0
 800cce6:	3304      	adds	r3, #4
 800cce8:	e7ae      	b.n	800cc48 <__gethex+0x15c>
 800ccea:	45b1      	cmp	r9, r6
 800ccec:	d8ea      	bhi.n	800ccc4 <__gethex+0x1d8>
 800ccee:	492b      	ldr	r1, [pc, #172]	@ (800cd9c <__gethex+0x2b0>)
 800ccf0:	9303      	str	r3, [sp, #12]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f7ff fe27 	bl	800c948 <strncmp>
 800ccfa:	9b03      	ldr	r3, [sp, #12]
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	d1e1      	bne.n	800ccc4 <__gethex+0x1d8>
 800cd00:	e7a2      	b.n	800cc48 <__gethex+0x15c>
 800cd02:	1ea9      	subs	r1, r5, #2
 800cd04:	4620      	mov	r0, r4
 800cd06:	f7fe fd5c 	bl	800b7c2 <__any_on>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d0c2      	beq.n	800cc94 <__gethex+0x1a8>
 800cd0e:	f04f 0903 	mov.w	r9, #3
 800cd12:	e7c1      	b.n	800cc98 <__gethex+0x1ac>
 800cd14:	da09      	bge.n	800cd2a <__gethex+0x23e>
 800cd16:	1b75      	subs	r5, r6, r5
 800cd18:	4621      	mov	r1, r4
 800cd1a:	9801      	ldr	r0, [sp, #4]
 800cd1c:	462a      	mov	r2, r5
 800cd1e:	f7fe fb17 	bl	800b350 <__lshift>
 800cd22:	1b7f      	subs	r7, r7, r5
 800cd24:	4604      	mov	r4, r0
 800cd26:	f100 0a14 	add.w	sl, r0, #20
 800cd2a:	f04f 0900 	mov.w	r9, #0
 800cd2e:	e7b8      	b.n	800cca2 <__gethex+0x1b6>
 800cd30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd34:	42bd      	cmp	r5, r7
 800cd36:	dd6f      	ble.n	800ce18 <__gethex+0x32c>
 800cd38:	1bed      	subs	r5, r5, r7
 800cd3a:	42ae      	cmp	r6, r5
 800cd3c:	dc34      	bgt.n	800cda8 <__gethex+0x2bc>
 800cd3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d022      	beq.n	800cd8c <__gethex+0x2a0>
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d024      	beq.n	800cd94 <__gethex+0x2a8>
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d115      	bne.n	800cd7a <__gethex+0x28e>
 800cd4e:	42ae      	cmp	r6, r5
 800cd50:	d113      	bne.n	800cd7a <__gethex+0x28e>
 800cd52:	2e01      	cmp	r6, #1
 800cd54:	d10b      	bne.n	800cd6e <__gethex+0x282>
 800cd56:	9a02      	ldr	r2, [sp, #8]
 800cd58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd5c:	6013      	str	r3, [r2, #0]
 800cd5e:	2301      	movs	r3, #1
 800cd60:	6123      	str	r3, [r4, #16]
 800cd62:	f8ca 3000 	str.w	r3, [sl]
 800cd66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd68:	2562      	movs	r5, #98	@ 0x62
 800cd6a:	601c      	str	r4, [r3, #0]
 800cd6c:	e73a      	b.n	800cbe4 <__gethex+0xf8>
 800cd6e:	1e71      	subs	r1, r6, #1
 800cd70:	4620      	mov	r0, r4
 800cd72:	f7fe fd26 	bl	800b7c2 <__any_on>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d1ed      	bne.n	800cd56 <__gethex+0x26a>
 800cd7a:	9801      	ldr	r0, [sp, #4]
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f7fe f8cf 	bl	800af20 <_Bfree>
 800cd82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd84:	2300      	movs	r3, #0
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	2550      	movs	r5, #80	@ 0x50
 800cd8a:	e72b      	b.n	800cbe4 <__gethex+0xf8>
 800cd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1f3      	bne.n	800cd7a <__gethex+0x28e>
 800cd92:	e7e0      	b.n	800cd56 <__gethex+0x26a>
 800cd94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d1dd      	bne.n	800cd56 <__gethex+0x26a>
 800cd9a:	e7ee      	b.n	800cd7a <__gethex+0x28e>
 800cd9c:	0800d928 	.word	0x0800d928
 800cda0:	0800d7bd 	.word	0x0800d7bd
 800cda4:	0800dad6 	.word	0x0800dad6
 800cda8:	1e6f      	subs	r7, r5, #1
 800cdaa:	f1b9 0f00 	cmp.w	r9, #0
 800cdae:	d130      	bne.n	800ce12 <__gethex+0x326>
 800cdb0:	b127      	cbz	r7, 800cdbc <__gethex+0x2d0>
 800cdb2:	4639      	mov	r1, r7
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f7fe fd04 	bl	800b7c2 <__any_on>
 800cdba:	4681      	mov	r9, r0
 800cdbc:	117a      	asrs	r2, r7, #5
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cdc4:	f007 071f 	and.w	r7, r7, #31
 800cdc8:	40bb      	lsls	r3, r7
 800cdca:	4213      	tst	r3, r2
 800cdcc:	4629      	mov	r1, r5
 800cdce:	4620      	mov	r0, r4
 800cdd0:	bf18      	it	ne
 800cdd2:	f049 0902 	orrne.w	r9, r9, #2
 800cdd6:	f7ff fe21 	bl	800ca1c <rshift>
 800cdda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cdde:	1b76      	subs	r6, r6, r5
 800cde0:	2502      	movs	r5, #2
 800cde2:	f1b9 0f00 	cmp.w	r9, #0
 800cde6:	d047      	beq.n	800ce78 <__gethex+0x38c>
 800cde8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d015      	beq.n	800ce1c <__gethex+0x330>
 800cdf0:	2b03      	cmp	r3, #3
 800cdf2:	d017      	beq.n	800ce24 <__gethex+0x338>
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d109      	bne.n	800ce0c <__gethex+0x320>
 800cdf8:	f019 0f02 	tst.w	r9, #2
 800cdfc:	d006      	beq.n	800ce0c <__gethex+0x320>
 800cdfe:	f8da 3000 	ldr.w	r3, [sl]
 800ce02:	ea49 0903 	orr.w	r9, r9, r3
 800ce06:	f019 0f01 	tst.w	r9, #1
 800ce0a:	d10e      	bne.n	800ce2a <__gethex+0x33e>
 800ce0c:	f045 0510 	orr.w	r5, r5, #16
 800ce10:	e032      	b.n	800ce78 <__gethex+0x38c>
 800ce12:	f04f 0901 	mov.w	r9, #1
 800ce16:	e7d1      	b.n	800cdbc <__gethex+0x2d0>
 800ce18:	2501      	movs	r5, #1
 800ce1a:	e7e2      	b.n	800cde2 <__gethex+0x2f6>
 800ce1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce1e:	f1c3 0301 	rsb	r3, r3, #1
 800ce22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d0f0      	beq.n	800ce0c <__gethex+0x320>
 800ce2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce2e:	f104 0314 	add.w	r3, r4, #20
 800ce32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce3a:	f04f 0c00 	mov.w	ip, #0
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce44:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce48:	d01b      	beq.n	800ce82 <__gethex+0x396>
 800ce4a:	3201      	adds	r2, #1
 800ce4c:	6002      	str	r2, [r0, #0]
 800ce4e:	2d02      	cmp	r5, #2
 800ce50:	f104 0314 	add.w	r3, r4, #20
 800ce54:	d13c      	bne.n	800ced0 <__gethex+0x3e4>
 800ce56:	f8d8 2000 	ldr.w	r2, [r8]
 800ce5a:	3a01      	subs	r2, #1
 800ce5c:	42b2      	cmp	r2, r6
 800ce5e:	d109      	bne.n	800ce74 <__gethex+0x388>
 800ce60:	1171      	asrs	r1, r6, #5
 800ce62:	2201      	movs	r2, #1
 800ce64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce68:	f006 061f 	and.w	r6, r6, #31
 800ce6c:	fa02 f606 	lsl.w	r6, r2, r6
 800ce70:	421e      	tst	r6, r3
 800ce72:	d13a      	bne.n	800ceea <__gethex+0x3fe>
 800ce74:	f045 0520 	orr.w	r5, r5, #32
 800ce78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce7a:	601c      	str	r4, [r3, #0]
 800ce7c:	9b02      	ldr	r3, [sp, #8]
 800ce7e:	601f      	str	r7, [r3, #0]
 800ce80:	e6b0      	b.n	800cbe4 <__gethex+0xf8>
 800ce82:	4299      	cmp	r1, r3
 800ce84:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce88:	d8d9      	bhi.n	800ce3e <__gethex+0x352>
 800ce8a:	68a3      	ldr	r3, [r4, #8]
 800ce8c:	459b      	cmp	fp, r3
 800ce8e:	db17      	blt.n	800cec0 <__gethex+0x3d4>
 800ce90:	6861      	ldr	r1, [r4, #4]
 800ce92:	9801      	ldr	r0, [sp, #4]
 800ce94:	3101      	adds	r1, #1
 800ce96:	f7fe f803 	bl	800aea0 <_Balloc>
 800ce9a:	4681      	mov	r9, r0
 800ce9c:	b918      	cbnz	r0, 800cea6 <__gethex+0x3ba>
 800ce9e:	4b1a      	ldr	r3, [pc, #104]	@ (800cf08 <__gethex+0x41c>)
 800cea0:	4602      	mov	r2, r0
 800cea2:	2184      	movs	r1, #132	@ 0x84
 800cea4:	e6c5      	b.n	800cc32 <__gethex+0x146>
 800cea6:	6922      	ldr	r2, [r4, #16]
 800cea8:	3202      	adds	r2, #2
 800ceaa:	f104 010c 	add.w	r1, r4, #12
 800ceae:	0092      	lsls	r2, r2, #2
 800ceb0:	300c      	adds	r0, #12
 800ceb2:	f7ff fd6b 	bl	800c98c <memcpy>
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	9801      	ldr	r0, [sp, #4]
 800ceba:	f7fe f831 	bl	800af20 <_Bfree>
 800cebe:	464c      	mov	r4, r9
 800cec0:	6923      	ldr	r3, [r4, #16]
 800cec2:	1c5a      	adds	r2, r3, #1
 800cec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cec8:	6122      	str	r2, [r4, #16]
 800ceca:	2201      	movs	r2, #1
 800cecc:	615a      	str	r2, [r3, #20]
 800cece:	e7be      	b.n	800ce4e <__gethex+0x362>
 800ced0:	6922      	ldr	r2, [r4, #16]
 800ced2:	455a      	cmp	r2, fp
 800ced4:	dd0b      	ble.n	800ceee <__gethex+0x402>
 800ced6:	2101      	movs	r1, #1
 800ced8:	4620      	mov	r0, r4
 800ceda:	f7ff fd9f 	bl	800ca1c <rshift>
 800cede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cee2:	3701      	adds	r7, #1
 800cee4:	42bb      	cmp	r3, r7
 800cee6:	f6ff aee0 	blt.w	800ccaa <__gethex+0x1be>
 800ceea:	2501      	movs	r5, #1
 800ceec:	e7c2      	b.n	800ce74 <__gethex+0x388>
 800ceee:	f016 061f 	ands.w	r6, r6, #31
 800cef2:	d0fa      	beq.n	800ceea <__gethex+0x3fe>
 800cef4:	4453      	add	r3, sl
 800cef6:	f1c6 0620 	rsb	r6, r6, #32
 800cefa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cefe:	f7fe f8c1 	bl	800b084 <__hi0bits>
 800cf02:	42b0      	cmp	r0, r6
 800cf04:	dbe7      	blt.n	800ced6 <__gethex+0x3ea>
 800cf06:	e7f0      	b.n	800ceea <__gethex+0x3fe>
 800cf08:	0800d7bd 	.word	0x0800d7bd

0800cf0c <L_shift>:
 800cf0c:	f1c2 0208 	rsb	r2, r2, #8
 800cf10:	0092      	lsls	r2, r2, #2
 800cf12:	b570      	push	{r4, r5, r6, lr}
 800cf14:	f1c2 0620 	rsb	r6, r2, #32
 800cf18:	6843      	ldr	r3, [r0, #4]
 800cf1a:	6804      	ldr	r4, [r0, #0]
 800cf1c:	fa03 f506 	lsl.w	r5, r3, r6
 800cf20:	432c      	orrs	r4, r5
 800cf22:	40d3      	lsrs	r3, r2
 800cf24:	6004      	str	r4, [r0, #0]
 800cf26:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf2a:	4288      	cmp	r0, r1
 800cf2c:	d3f4      	bcc.n	800cf18 <L_shift+0xc>
 800cf2e:	bd70      	pop	{r4, r5, r6, pc}

0800cf30 <__match>:
 800cf30:	b530      	push	{r4, r5, lr}
 800cf32:	6803      	ldr	r3, [r0, #0]
 800cf34:	3301      	adds	r3, #1
 800cf36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf3a:	b914      	cbnz	r4, 800cf42 <__match+0x12>
 800cf3c:	6003      	str	r3, [r0, #0]
 800cf3e:	2001      	movs	r0, #1
 800cf40:	bd30      	pop	{r4, r5, pc}
 800cf42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cf4a:	2d19      	cmp	r5, #25
 800cf4c:	bf98      	it	ls
 800cf4e:	3220      	addls	r2, #32
 800cf50:	42a2      	cmp	r2, r4
 800cf52:	d0f0      	beq.n	800cf36 <__match+0x6>
 800cf54:	2000      	movs	r0, #0
 800cf56:	e7f3      	b.n	800cf40 <__match+0x10>

0800cf58 <__hexnan>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	680b      	ldr	r3, [r1, #0]
 800cf5e:	6801      	ldr	r1, [r0, #0]
 800cf60:	115e      	asrs	r6, r3, #5
 800cf62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf66:	f013 031f 	ands.w	r3, r3, #31
 800cf6a:	b087      	sub	sp, #28
 800cf6c:	bf18      	it	ne
 800cf6e:	3604      	addne	r6, #4
 800cf70:	2500      	movs	r5, #0
 800cf72:	1f37      	subs	r7, r6, #4
 800cf74:	4682      	mov	sl, r0
 800cf76:	4690      	mov	r8, r2
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf7e:	46b9      	mov	r9, r7
 800cf80:	463c      	mov	r4, r7
 800cf82:	9502      	str	r5, [sp, #8]
 800cf84:	46ab      	mov	fp, r5
 800cf86:	784a      	ldrb	r2, [r1, #1]
 800cf88:	1c4b      	adds	r3, r1, #1
 800cf8a:	9303      	str	r3, [sp, #12]
 800cf8c:	b342      	cbz	r2, 800cfe0 <__hexnan+0x88>
 800cf8e:	4610      	mov	r0, r2
 800cf90:	9105      	str	r1, [sp, #20]
 800cf92:	9204      	str	r2, [sp, #16]
 800cf94:	f7ff fd94 	bl	800cac0 <__hexdig_fun>
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d151      	bne.n	800d040 <__hexnan+0xe8>
 800cf9c:	9a04      	ldr	r2, [sp, #16]
 800cf9e:	9905      	ldr	r1, [sp, #20]
 800cfa0:	2a20      	cmp	r2, #32
 800cfa2:	d818      	bhi.n	800cfd6 <__hexnan+0x7e>
 800cfa4:	9b02      	ldr	r3, [sp, #8]
 800cfa6:	459b      	cmp	fp, r3
 800cfa8:	dd13      	ble.n	800cfd2 <__hexnan+0x7a>
 800cfaa:	454c      	cmp	r4, r9
 800cfac:	d206      	bcs.n	800cfbc <__hexnan+0x64>
 800cfae:	2d07      	cmp	r5, #7
 800cfb0:	dc04      	bgt.n	800cfbc <__hexnan+0x64>
 800cfb2:	462a      	mov	r2, r5
 800cfb4:	4649      	mov	r1, r9
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f7ff ffa8 	bl	800cf0c <L_shift>
 800cfbc:	4544      	cmp	r4, r8
 800cfbe:	d952      	bls.n	800d066 <__hexnan+0x10e>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f1a4 0904 	sub.w	r9, r4, #4
 800cfc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfca:	f8cd b008 	str.w	fp, [sp, #8]
 800cfce:	464c      	mov	r4, r9
 800cfd0:	461d      	mov	r5, r3
 800cfd2:	9903      	ldr	r1, [sp, #12]
 800cfd4:	e7d7      	b.n	800cf86 <__hexnan+0x2e>
 800cfd6:	2a29      	cmp	r2, #41	@ 0x29
 800cfd8:	d157      	bne.n	800d08a <__hexnan+0x132>
 800cfda:	3102      	adds	r1, #2
 800cfdc:	f8ca 1000 	str.w	r1, [sl]
 800cfe0:	f1bb 0f00 	cmp.w	fp, #0
 800cfe4:	d051      	beq.n	800d08a <__hexnan+0x132>
 800cfe6:	454c      	cmp	r4, r9
 800cfe8:	d206      	bcs.n	800cff8 <__hexnan+0xa0>
 800cfea:	2d07      	cmp	r5, #7
 800cfec:	dc04      	bgt.n	800cff8 <__hexnan+0xa0>
 800cfee:	462a      	mov	r2, r5
 800cff0:	4649      	mov	r1, r9
 800cff2:	4620      	mov	r0, r4
 800cff4:	f7ff ff8a 	bl	800cf0c <L_shift>
 800cff8:	4544      	cmp	r4, r8
 800cffa:	d936      	bls.n	800d06a <__hexnan+0x112>
 800cffc:	f1a8 0204 	sub.w	r2, r8, #4
 800d000:	4623      	mov	r3, r4
 800d002:	f853 1b04 	ldr.w	r1, [r3], #4
 800d006:	f842 1f04 	str.w	r1, [r2, #4]!
 800d00a:	429f      	cmp	r7, r3
 800d00c:	d2f9      	bcs.n	800d002 <__hexnan+0xaa>
 800d00e:	1b3b      	subs	r3, r7, r4
 800d010:	f023 0303 	bic.w	r3, r3, #3
 800d014:	3304      	adds	r3, #4
 800d016:	3401      	adds	r4, #1
 800d018:	3e03      	subs	r6, #3
 800d01a:	42b4      	cmp	r4, r6
 800d01c:	bf88      	it	hi
 800d01e:	2304      	movhi	r3, #4
 800d020:	4443      	add	r3, r8
 800d022:	2200      	movs	r2, #0
 800d024:	f843 2b04 	str.w	r2, [r3], #4
 800d028:	429f      	cmp	r7, r3
 800d02a:	d2fb      	bcs.n	800d024 <__hexnan+0xcc>
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	b91b      	cbnz	r3, 800d038 <__hexnan+0xe0>
 800d030:	4547      	cmp	r7, r8
 800d032:	d128      	bne.n	800d086 <__hexnan+0x12e>
 800d034:	2301      	movs	r3, #1
 800d036:	603b      	str	r3, [r7, #0]
 800d038:	2005      	movs	r0, #5
 800d03a:	b007      	add	sp, #28
 800d03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d040:	3501      	adds	r5, #1
 800d042:	2d08      	cmp	r5, #8
 800d044:	f10b 0b01 	add.w	fp, fp, #1
 800d048:	dd06      	ble.n	800d058 <__hexnan+0x100>
 800d04a:	4544      	cmp	r4, r8
 800d04c:	d9c1      	bls.n	800cfd2 <__hexnan+0x7a>
 800d04e:	2300      	movs	r3, #0
 800d050:	f844 3c04 	str.w	r3, [r4, #-4]
 800d054:	2501      	movs	r5, #1
 800d056:	3c04      	subs	r4, #4
 800d058:	6822      	ldr	r2, [r4, #0]
 800d05a:	f000 000f 	and.w	r0, r0, #15
 800d05e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d062:	6020      	str	r0, [r4, #0]
 800d064:	e7b5      	b.n	800cfd2 <__hexnan+0x7a>
 800d066:	2508      	movs	r5, #8
 800d068:	e7b3      	b.n	800cfd2 <__hexnan+0x7a>
 800d06a:	9b01      	ldr	r3, [sp, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0dd      	beq.n	800d02c <__hexnan+0xd4>
 800d070:	f1c3 0320 	rsb	r3, r3, #32
 800d074:	f04f 32ff 	mov.w	r2, #4294967295
 800d078:	40da      	lsrs	r2, r3
 800d07a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d07e:	4013      	ands	r3, r2
 800d080:	f846 3c04 	str.w	r3, [r6, #-4]
 800d084:	e7d2      	b.n	800d02c <__hexnan+0xd4>
 800d086:	3f04      	subs	r7, #4
 800d088:	e7d0      	b.n	800d02c <__hexnan+0xd4>
 800d08a:	2004      	movs	r0, #4
 800d08c:	e7d5      	b.n	800d03a <__hexnan+0xe2>

0800d08e <__ascii_mbtowc>:
 800d08e:	b082      	sub	sp, #8
 800d090:	b901      	cbnz	r1, 800d094 <__ascii_mbtowc+0x6>
 800d092:	a901      	add	r1, sp, #4
 800d094:	b142      	cbz	r2, 800d0a8 <__ascii_mbtowc+0x1a>
 800d096:	b14b      	cbz	r3, 800d0ac <__ascii_mbtowc+0x1e>
 800d098:	7813      	ldrb	r3, [r2, #0]
 800d09a:	600b      	str	r3, [r1, #0]
 800d09c:	7812      	ldrb	r2, [r2, #0]
 800d09e:	1e10      	subs	r0, r2, #0
 800d0a0:	bf18      	it	ne
 800d0a2:	2001      	movne	r0, #1
 800d0a4:	b002      	add	sp, #8
 800d0a6:	4770      	bx	lr
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	e7fb      	b.n	800d0a4 <__ascii_mbtowc+0x16>
 800d0ac:	f06f 0001 	mvn.w	r0, #1
 800d0b0:	e7f8      	b.n	800d0a4 <__ascii_mbtowc+0x16>

0800d0b2 <_realloc_r>:
 800d0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b6:	4680      	mov	r8, r0
 800d0b8:	4615      	mov	r5, r2
 800d0ba:	460c      	mov	r4, r1
 800d0bc:	b921      	cbnz	r1, 800d0c8 <_realloc_r+0x16>
 800d0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	f7fd be60 	b.w	800ad88 <_malloc_r>
 800d0c8:	b92a      	cbnz	r2, 800d0d6 <_realloc_r+0x24>
 800d0ca:	f7fd fde9 	bl	800aca0 <_free_r>
 800d0ce:	2400      	movs	r4, #0
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d6:	f000 f840 	bl	800d15a <_malloc_usable_size_r>
 800d0da:	4285      	cmp	r5, r0
 800d0dc:	4606      	mov	r6, r0
 800d0de:	d802      	bhi.n	800d0e6 <_realloc_r+0x34>
 800d0e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d0e4:	d8f4      	bhi.n	800d0d0 <_realloc_r+0x1e>
 800d0e6:	4629      	mov	r1, r5
 800d0e8:	4640      	mov	r0, r8
 800d0ea:	f7fd fe4d 	bl	800ad88 <_malloc_r>
 800d0ee:	4607      	mov	r7, r0
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d0ec      	beq.n	800d0ce <_realloc_r+0x1c>
 800d0f4:	42b5      	cmp	r5, r6
 800d0f6:	462a      	mov	r2, r5
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	bf28      	it	cs
 800d0fc:	4632      	movcs	r2, r6
 800d0fe:	f7ff fc45 	bl	800c98c <memcpy>
 800d102:	4621      	mov	r1, r4
 800d104:	4640      	mov	r0, r8
 800d106:	f7fd fdcb 	bl	800aca0 <_free_r>
 800d10a:	463c      	mov	r4, r7
 800d10c:	e7e0      	b.n	800d0d0 <_realloc_r+0x1e>

0800d10e <__ascii_wctomb>:
 800d10e:	4603      	mov	r3, r0
 800d110:	4608      	mov	r0, r1
 800d112:	b141      	cbz	r1, 800d126 <__ascii_wctomb+0x18>
 800d114:	2aff      	cmp	r2, #255	@ 0xff
 800d116:	d904      	bls.n	800d122 <__ascii_wctomb+0x14>
 800d118:	228a      	movs	r2, #138	@ 0x8a
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	f04f 30ff 	mov.w	r0, #4294967295
 800d120:	4770      	bx	lr
 800d122:	700a      	strb	r2, [r1, #0]
 800d124:	2001      	movs	r0, #1
 800d126:	4770      	bx	lr

0800d128 <fiprintf>:
 800d128:	b40e      	push	{r1, r2, r3}
 800d12a:	b503      	push	{r0, r1, lr}
 800d12c:	4601      	mov	r1, r0
 800d12e:	ab03      	add	r3, sp, #12
 800d130:	4805      	ldr	r0, [pc, #20]	@ (800d148 <fiprintf+0x20>)
 800d132:	f853 2b04 	ldr.w	r2, [r3], #4
 800d136:	6800      	ldr	r0, [r0, #0]
 800d138:	9301      	str	r3, [sp, #4]
 800d13a:	f000 f83f 	bl	800d1bc <_vfiprintf_r>
 800d13e:	b002      	add	sp, #8
 800d140:	f85d eb04 	ldr.w	lr, [sp], #4
 800d144:	b003      	add	sp, #12
 800d146:	4770      	bx	lr
 800d148:	20000034 	.word	0x20000034

0800d14c <abort>:
 800d14c:	b508      	push	{r3, lr}
 800d14e:	2006      	movs	r0, #6
 800d150:	f000 fa08 	bl	800d564 <raise>
 800d154:	2001      	movs	r0, #1
 800d156:	f7f5 fc7b 	bl	8002a50 <_exit>

0800d15a <_malloc_usable_size_r>:
 800d15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d15e:	1f18      	subs	r0, r3, #4
 800d160:	2b00      	cmp	r3, #0
 800d162:	bfbc      	itt	lt
 800d164:	580b      	ldrlt	r3, [r1, r0]
 800d166:	18c0      	addlt	r0, r0, r3
 800d168:	4770      	bx	lr

0800d16a <__sfputc_r>:
 800d16a:	6893      	ldr	r3, [r2, #8]
 800d16c:	3b01      	subs	r3, #1
 800d16e:	2b00      	cmp	r3, #0
 800d170:	b410      	push	{r4}
 800d172:	6093      	str	r3, [r2, #8]
 800d174:	da08      	bge.n	800d188 <__sfputc_r+0x1e>
 800d176:	6994      	ldr	r4, [r2, #24]
 800d178:	42a3      	cmp	r3, r4
 800d17a:	db01      	blt.n	800d180 <__sfputc_r+0x16>
 800d17c:	290a      	cmp	r1, #10
 800d17e:	d103      	bne.n	800d188 <__sfputc_r+0x1e>
 800d180:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d184:	f000 b932 	b.w	800d3ec <__swbuf_r>
 800d188:	6813      	ldr	r3, [r2, #0]
 800d18a:	1c58      	adds	r0, r3, #1
 800d18c:	6010      	str	r0, [r2, #0]
 800d18e:	7019      	strb	r1, [r3, #0]
 800d190:	4608      	mov	r0, r1
 800d192:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <__sfputs_r>:
 800d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19a:	4606      	mov	r6, r0
 800d19c:	460f      	mov	r7, r1
 800d19e:	4614      	mov	r4, r2
 800d1a0:	18d5      	adds	r5, r2, r3
 800d1a2:	42ac      	cmp	r4, r5
 800d1a4:	d101      	bne.n	800d1aa <__sfputs_r+0x12>
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e007      	b.n	800d1ba <__sfputs_r+0x22>
 800d1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ae:	463a      	mov	r2, r7
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	f7ff ffda 	bl	800d16a <__sfputc_r>
 800d1b6:	1c43      	adds	r3, r0, #1
 800d1b8:	d1f3      	bne.n	800d1a2 <__sfputs_r+0xa>
 800d1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1bc <_vfiprintf_r>:
 800d1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	b09d      	sub	sp, #116	@ 0x74
 800d1c4:	4614      	mov	r4, r2
 800d1c6:	4698      	mov	r8, r3
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	b118      	cbz	r0, 800d1d4 <_vfiprintf_r+0x18>
 800d1cc:	6a03      	ldr	r3, [r0, #32]
 800d1ce:	b90b      	cbnz	r3, 800d1d4 <_vfiprintf_r+0x18>
 800d1d0:	f7fc fdfa 	bl	8009dc8 <__sinit>
 800d1d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1d6:	07d9      	lsls	r1, r3, #31
 800d1d8:	d405      	bmi.n	800d1e6 <_vfiprintf_r+0x2a>
 800d1da:	89ab      	ldrh	r3, [r5, #12]
 800d1dc:	059a      	lsls	r2, r3, #22
 800d1de:	d402      	bmi.n	800d1e6 <_vfiprintf_r+0x2a>
 800d1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1e2:	f7fc ff08 	bl	8009ff6 <__retarget_lock_acquire_recursive>
 800d1e6:	89ab      	ldrh	r3, [r5, #12]
 800d1e8:	071b      	lsls	r3, r3, #28
 800d1ea:	d501      	bpl.n	800d1f0 <_vfiprintf_r+0x34>
 800d1ec:	692b      	ldr	r3, [r5, #16]
 800d1ee:	b99b      	cbnz	r3, 800d218 <_vfiprintf_r+0x5c>
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f000 f938 	bl	800d468 <__swsetup_r>
 800d1f8:	b170      	cbz	r0, 800d218 <_vfiprintf_r+0x5c>
 800d1fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1fc:	07dc      	lsls	r4, r3, #31
 800d1fe:	d504      	bpl.n	800d20a <_vfiprintf_r+0x4e>
 800d200:	f04f 30ff 	mov.w	r0, #4294967295
 800d204:	b01d      	add	sp, #116	@ 0x74
 800d206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20a:	89ab      	ldrh	r3, [r5, #12]
 800d20c:	0598      	lsls	r0, r3, #22
 800d20e:	d4f7      	bmi.n	800d200 <_vfiprintf_r+0x44>
 800d210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d212:	f7fc fef1 	bl	8009ff8 <__retarget_lock_release_recursive>
 800d216:	e7f3      	b.n	800d200 <_vfiprintf_r+0x44>
 800d218:	2300      	movs	r3, #0
 800d21a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d21c:	2320      	movs	r3, #32
 800d21e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d222:	f8cd 800c 	str.w	r8, [sp, #12]
 800d226:	2330      	movs	r3, #48	@ 0x30
 800d228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d3d8 <_vfiprintf_r+0x21c>
 800d22c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d230:	f04f 0901 	mov.w	r9, #1
 800d234:	4623      	mov	r3, r4
 800d236:	469a      	mov	sl, r3
 800d238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d23c:	b10a      	cbz	r2, 800d242 <_vfiprintf_r+0x86>
 800d23e:	2a25      	cmp	r2, #37	@ 0x25
 800d240:	d1f9      	bne.n	800d236 <_vfiprintf_r+0x7a>
 800d242:	ebba 0b04 	subs.w	fp, sl, r4
 800d246:	d00b      	beq.n	800d260 <_vfiprintf_r+0xa4>
 800d248:	465b      	mov	r3, fp
 800d24a:	4622      	mov	r2, r4
 800d24c:	4629      	mov	r1, r5
 800d24e:	4630      	mov	r0, r6
 800d250:	f7ff ffa2 	bl	800d198 <__sfputs_r>
 800d254:	3001      	adds	r0, #1
 800d256:	f000 80a7 	beq.w	800d3a8 <_vfiprintf_r+0x1ec>
 800d25a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d25c:	445a      	add	r2, fp
 800d25e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d260:	f89a 3000 	ldrb.w	r3, [sl]
 800d264:	2b00      	cmp	r3, #0
 800d266:	f000 809f 	beq.w	800d3a8 <_vfiprintf_r+0x1ec>
 800d26a:	2300      	movs	r3, #0
 800d26c:	f04f 32ff 	mov.w	r2, #4294967295
 800d270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d274:	f10a 0a01 	add.w	sl, sl, #1
 800d278:	9304      	str	r3, [sp, #16]
 800d27a:	9307      	str	r3, [sp, #28]
 800d27c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d280:	931a      	str	r3, [sp, #104]	@ 0x68
 800d282:	4654      	mov	r4, sl
 800d284:	2205      	movs	r2, #5
 800d286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d28a:	4853      	ldr	r0, [pc, #332]	@ (800d3d8 <_vfiprintf_r+0x21c>)
 800d28c:	f7f2 ffa0 	bl	80001d0 <memchr>
 800d290:	9a04      	ldr	r2, [sp, #16]
 800d292:	b9d8      	cbnz	r0, 800d2cc <_vfiprintf_r+0x110>
 800d294:	06d1      	lsls	r1, r2, #27
 800d296:	bf44      	itt	mi
 800d298:	2320      	movmi	r3, #32
 800d29a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d29e:	0713      	lsls	r3, r2, #28
 800d2a0:	bf44      	itt	mi
 800d2a2:	232b      	movmi	r3, #43	@ 0x2b
 800d2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2ae:	d015      	beq.n	800d2dc <_vfiprintf_r+0x120>
 800d2b0:	9a07      	ldr	r2, [sp, #28]
 800d2b2:	4654      	mov	r4, sl
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	f04f 0c0a 	mov.w	ip, #10
 800d2ba:	4621      	mov	r1, r4
 800d2bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2c0:	3b30      	subs	r3, #48	@ 0x30
 800d2c2:	2b09      	cmp	r3, #9
 800d2c4:	d94b      	bls.n	800d35e <_vfiprintf_r+0x1a2>
 800d2c6:	b1b0      	cbz	r0, 800d2f6 <_vfiprintf_r+0x13a>
 800d2c8:	9207      	str	r2, [sp, #28]
 800d2ca:	e014      	b.n	800d2f6 <_vfiprintf_r+0x13a>
 800d2cc:	eba0 0308 	sub.w	r3, r0, r8
 800d2d0:	fa09 f303 	lsl.w	r3, r9, r3
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	9304      	str	r3, [sp, #16]
 800d2d8:	46a2      	mov	sl, r4
 800d2da:	e7d2      	b.n	800d282 <_vfiprintf_r+0xc6>
 800d2dc:	9b03      	ldr	r3, [sp, #12]
 800d2de:	1d19      	adds	r1, r3, #4
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	9103      	str	r1, [sp, #12]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	bfbb      	ittet	lt
 800d2e8:	425b      	neglt	r3, r3
 800d2ea:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ee:	9307      	strge	r3, [sp, #28]
 800d2f0:	9307      	strlt	r3, [sp, #28]
 800d2f2:	bfb8      	it	lt
 800d2f4:	9204      	strlt	r2, [sp, #16]
 800d2f6:	7823      	ldrb	r3, [r4, #0]
 800d2f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2fa:	d10a      	bne.n	800d312 <_vfiprintf_r+0x156>
 800d2fc:	7863      	ldrb	r3, [r4, #1]
 800d2fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800d300:	d132      	bne.n	800d368 <_vfiprintf_r+0x1ac>
 800d302:	9b03      	ldr	r3, [sp, #12]
 800d304:	1d1a      	adds	r2, r3, #4
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	9203      	str	r2, [sp, #12]
 800d30a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d30e:	3402      	adds	r4, #2
 800d310:	9305      	str	r3, [sp, #20]
 800d312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d3e8 <_vfiprintf_r+0x22c>
 800d316:	7821      	ldrb	r1, [r4, #0]
 800d318:	2203      	movs	r2, #3
 800d31a:	4650      	mov	r0, sl
 800d31c:	f7f2 ff58 	bl	80001d0 <memchr>
 800d320:	b138      	cbz	r0, 800d332 <_vfiprintf_r+0x176>
 800d322:	9b04      	ldr	r3, [sp, #16]
 800d324:	eba0 000a 	sub.w	r0, r0, sl
 800d328:	2240      	movs	r2, #64	@ 0x40
 800d32a:	4082      	lsls	r2, r0
 800d32c:	4313      	orrs	r3, r2
 800d32e:	3401      	adds	r4, #1
 800d330:	9304      	str	r3, [sp, #16]
 800d332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d336:	4829      	ldr	r0, [pc, #164]	@ (800d3dc <_vfiprintf_r+0x220>)
 800d338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d33c:	2206      	movs	r2, #6
 800d33e:	f7f2 ff47 	bl	80001d0 <memchr>
 800d342:	2800      	cmp	r0, #0
 800d344:	d03f      	beq.n	800d3c6 <_vfiprintf_r+0x20a>
 800d346:	4b26      	ldr	r3, [pc, #152]	@ (800d3e0 <_vfiprintf_r+0x224>)
 800d348:	bb1b      	cbnz	r3, 800d392 <_vfiprintf_r+0x1d6>
 800d34a:	9b03      	ldr	r3, [sp, #12]
 800d34c:	3307      	adds	r3, #7
 800d34e:	f023 0307 	bic.w	r3, r3, #7
 800d352:	3308      	adds	r3, #8
 800d354:	9303      	str	r3, [sp, #12]
 800d356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d358:	443b      	add	r3, r7
 800d35a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d35c:	e76a      	b.n	800d234 <_vfiprintf_r+0x78>
 800d35e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d362:	460c      	mov	r4, r1
 800d364:	2001      	movs	r0, #1
 800d366:	e7a8      	b.n	800d2ba <_vfiprintf_r+0xfe>
 800d368:	2300      	movs	r3, #0
 800d36a:	3401      	adds	r4, #1
 800d36c:	9305      	str	r3, [sp, #20]
 800d36e:	4619      	mov	r1, r3
 800d370:	f04f 0c0a 	mov.w	ip, #10
 800d374:	4620      	mov	r0, r4
 800d376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d37a:	3a30      	subs	r2, #48	@ 0x30
 800d37c:	2a09      	cmp	r2, #9
 800d37e:	d903      	bls.n	800d388 <_vfiprintf_r+0x1cc>
 800d380:	2b00      	cmp	r3, #0
 800d382:	d0c6      	beq.n	800d312 <_vfiprintf_r+0x156>
 800d384:	9105      	str	r1, [sp, #20]
 800d386:	e7c4      	b.n	800d312 <_vfiprintf_r+0x156>
 800d388:	fb0c 2101 	mla	r1, ip, r1, r2
 800d38c:	4604      	mov	r4, r0
 800d38e:	2301      	movs	r3, #1
 800d390:	e7f0      	b.n	800d374 <_vfiprintf_r+0x1b8>
 800d392:	ab03      	add	r3, sp, #12
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	462a      	mov	r2, r5
 800d398:	4b12      	ldr	r3, [pc, #72]	@ (800d3e4 <_vfiprintf_r+0x228>)
 800d39a:	a904      	add	r1, sp, #16
 800d39c:	4630      	mov	r0, r6
 800d39e:	f7fb febb 	bl	8009118 <_printf_float>
 800d3a2:	4607      	mov	r7, r0
 800d3a4:	1c78      	adds	r0, r7, #1
 800d3a6:	d1d6      	bne.n	800d356 <_vfiprintf_r+0x19a>
 800d3a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3aa:	07d9      	lsls	r1, r3, #31
 800d3ac:	d405      	bmi.n	800d3ba <_vfiprintf_r+0x1fe>
 800d3ae:	89ab      	ldrh	r3, [r5, #12]
 800d3b0:	059a      	lsls	r2, r3, #22
 800d3b2:	d402      	bmi.n	800d3ba <_vfiprintf_r+0x1fe>
 800d3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3b6:	f7fc fe1f 	bl	8009ff8 <__retarget_lock_release_recursive>
 800d3ba:	89ab      	ldrh	r3, [r5, #12]
 800d3bc:	065b      	lsls	r3, r3, #25
 800d3be:	f53f af1f 	bmi.w	800d200 <_vfiprintf_r+0x44>
 800d3c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3c4:	e71e      	b.n	800d204 <_vfiprintf_r+0x48>
 800d3c6:	ab03      	add	r3, sp, #12
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	462a      	mov	r2, r5
 800d3cc:	4b05      	ldr	r3, [pc, #20]	@ (800d3e4 <_vfiprintf_r+0x228>)
 800d3ce:	a904      	add	r1, sp, #16
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f7fc f939 	bl	8009648 <_printf_i>
 800d3d6:	e7e4      	b.n	800d3a2 <_vfiprintf_r+0x1e6>
 800d3d8:	0800da81 	.word	0x0800da81
 800d3dc:	0800da8b 	.word	0x0800da8b
 800d3e0:	08009119 	.word	0x08009119
 800d3e4:	0800d199 	.word	0x0800d199
 800d3e8:	0800da87 	.word	0x0800da87

0800d3ec <__swbuf_r>:
 800d3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ee:	460e      	mov	r6, r1
 800d3f0:	4614      	mov	r4, r2
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	b118      	cbz	r0, 800d3fe <__swbuf_r+0x12>
 800d3f6:	6a03      	ldr	r3, [r0, #32]
 800d3f8:	b90b      	cbnz	r3, 800d3fe <__swbuf_r+0x12>
 800d3fa:	f7fc fce5 	bl	8009dc8 <__sinit>
 800d3fe:	69a3      	ldr	r3, [r4, #24]
 800d400:	60a3      	str	r3, [r4, #8]
 800d402:	89a3      	ldrh	r3, [r4, #12]
 800d404:	071a      	lsls	r2, r3, #28
 800d406:	d501      	bpl.n	800d40c <__swbuf_r+0x20>
 800d408:	6923      	ldr	r3, [r4, #16]
 800d40a:	b943      	cbnz	r3, 800d41e <__swbuf_r+0x32>
 800d40c:	4621      	mov	r1, r4
 800d40e:	4628      	mov	r0, r5
 800d410:	f000 f82a 	bl	800d468 <__swsetup_r>
 800d414:	b118      	cbz	r0, 800d41e <__swbuf_r+0x32>
 800d416:	f04f 37ff 	mov.w	r7, #4294967295
 800d41a:	4638      	mov	r0, r7
 800d41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	6922      	ldr	r2, [r4, #16]
 800d422:	1a98      	subs	r0, r3, r2
 800d424:	6963      	ldr	r3, [r4, #20]
 800d426:	b2f6      	uxtb	r6, r6
 800d428:	4283      	cmp	r3, r0
 800d42a:	4637      	mov	r7, r6
 800d42c:	dc05      	bgt.n	800d43a <__swbuf_r+0x4e>
 800d42e:	4621      	mov	r1, r4
 800d430:	4628      	mov	r0, r5
 800d432:	f7ff fa47 	bl	800c8c4 <_fflush_r>
 800d436:	2800      	cmp	r0, #0
 800d438:	d1ed      	bne.n	800d416 <__swbuf_r+0x2a>
 800d43a:	68a3      	ldr	r3, [r4, #8]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	60a3      	str	r3, [r4, #8]
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	6022      	str	r2, [r4, #0]
 800d446:	701e      	strb	r6, [r3, #0]
 800d448:	6962      	ldr	r2, [r4, #20]
 800d44a:	1c43      	adds	r3, r0, #1
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d004      	beq.n	800d45a <__swbuf_r+0x6e>
 800d450:	89a3      	ldrh	r3, [r4, #12]
 800d452:	07db      	lsls	r3, r3, #31
 800d454:	d5e1      	bpl.n	800d41a <__swbuf_r+0x2e>
 800d456:	2e0a      	cmp	r6, #10
 800d458:	d1df      	bne.n	800d41a <__swbuf_r+0x2e>
 800d45a:	4621      	mov	r1, r4
 800d45c:	4628      	mov	r0, r5
 800d45e:	f7ff fa31 	bl	800c8c4 <_fflush_r>
 800d462:	2800      	cmp	r0, #0
 800d464:	d0d9      	beq.n	800d41a <__swbuf_r+0x2e>
 800d466:	e7d6      	b.n	800d416 <__swbuf_r+0x2a>

0800d468 <__swsetup_r>:
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	4b29      	ldr	r3, [pc, #164]	@ (800d510 <__swsetup_r+0xa8>)
 800d46c:	4605      	mov	r5, r0
 800d46e:	6818      	ldr	r0, [r3, #0]
 800d470:	460c      	mov	r4, r1
 800d472:	b118      	cbz	r0, 800d47c <__swsetup_r+0x14>
 800d474:	6a03      	ldr	r3, [r0, #32]
 800d476:	b90b      	cbnz	r3, 800d47c <__swsetup_r+0x14>
 800d478:	f7fc fca6 	bl	8009dc8 <__sinit>
 800d47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d480:	0719      	lsls	r1, r3, #28
 800d482:	d422      	bmi.n	800d4ca <__swsetup_r+0x62>
 800d484:	06da      	lsls	r2, r3, #27
 800d486:	d407      	bmi.n	800d498 <__swsetup_r+0x30>
 800d488:	2209      	movs	r2, #9
 800d48a:	602a      	str	r2, [r5, #0]
 800d48c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d490:	81a3      	strh	r3, [r4, #12]
 800d492:	f04f 30ff 	mov.w	r0, #4294967295
 800d496:	e033      	b.n	800d500 <__swsetup_r+0x98>
 800d498:	0758      	lsls	r0, r3, #29
 800d49a:	d512      	bpl.n	800d4c2 <__swsetup_r+0x5a>
 800d49c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d49e:	b141      	cbz	r1, 800d4b2 <__swsetup_r+0x4a>
 800d4a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4a4:	4299      	cmp	r1, r3
 800d4a6:	d002      	beq.n	800d4ae <__swsetup_r+0x46>
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	f7fd fbf9 	bl	800aca0 <_free_r>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4b2:	89a3      	ldrh	r3, [r4, #12]
 800d4b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d4b8:	81a3      	strh	r3, [r4, #12]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	6063      	str	r3, [r4, #4]
 800d4be:	6923      	ldr	r3, [r4, #16]
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	f043 0308 	orr.w	r3, r3, #8
 800d4c8:	81a3      	strh	r3, [r4, #12]
 800d4ca:	6923      	ldr	r3, [r4, #16]
 800d4cc:	b94b      	cbnz	r3, 800d4e2 <__swsetup_r+0x7a>
 800d4ce:	89a3      	ldrh	r3, [r4, #12]
 800d4d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4d8:	d003      	beq.n	800d4e2 <__swsetup_r+0x7a>
 800d4da:	4621      	mov	r1, r4
 800d4dc:	4628      	mov	r0, r5
 800d4de:	f000 f883 	bl	800d5e8 <__smakebuf_r>
 800d4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4e6:	f013 0201 	ands.w	r2, r3, #1
 800d4ea:	d00a      	beq.n	800d502 <__swsetup_r+0x9a>
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	60a2      	str	r2, [r4, #8]
 800d4f0:	6962      	ldr	r2, [r4, #20]
 800d4f2:	4252      	negs	r2, r2
 800d4f4:	61a2      	str	r2, [r4, #24]
 800d4f6:	6922      	ldr	r2, [r4, #16]
 800d4f8:	b942      	cbnz	r2, 800d50c <__swsetup_r+0xa4>
 800d4fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4fe:	d1c5      	bne.n	800d48c <__swsetup_r+0x24>
 800d500:	bd38      	pop	{r3, r4, r5, pc}
 800d502:	0799      	lsls	r1, r3, #30
 800d504:	bf58      	it	pl
 800d506:	6962      	ldrpl	r2, [r4, #20]
 800d508:	60a2      	str	r2, [r4, #8]
 800d50a:	e7f4      	b.n	800d4f6 <__swsetup_r+0x8e>
 800d50c:	2000      	movs	r0, #0
 800d50e:	e7f7      	b.n	800d500 <__swsetup_r+0x98>
 800d510:	20000034 	.word	0x20000034

0800d514 <_raise_r>:
 800d514:	291f      	cmp	r1, #31
 800d516:	b538      	push	{r3, r4, r5, lr}
 800d518:	4605      	mov	r5, r0
 800d51a:	460c      	mov	r4, r1
 800d51c:	d904      	bls.n	800d528 <_raise_r+0x14>
 800d51e:	2316      	movs	r3, #22
 800d520:	6003      	str	r3, [r0, #0]
 800d522:	f04f 30ff 	mov.w	r0, #4294967295
 800d526:	bd38      	pop	{r3, r4, r5, pc}
 800d528:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d52a:	b112      	cbz	r2, 800d532 <_raise_r+0x1e>
 800d52c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d530:	b94b      	cbnz	r3, 800d546 <_raise_r+0x32>
 800d532:	4628      	mov	r0, r5
 800d534:	f000 f830 	bl	800d598 <_getpid_r>
 800d538:	4622      	mov	r2, r4
 800d53a:	4601      	mov	r1, r0
 800d53c:	4628      	mov	r0, r5
 800d53e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d542:	f000 b817 	b.w	800d574 <_kill_r>
 800d546:	2b01      	cmp	r3, #1
 800d548:	d00a      	beq.n	800d560 <_raise_r+0x4c>
 800d54a:	1c59      	adds	r1, r3, #1
 800d54c:	d103      	bne.n	800d556 <_raise_r+0x42>
 800d54e:	2316      	movs	r3, #22
 800d550:	6003      	str	r3, [r0, #0]
 800d552:	2001      	movs	r0, #1
 800d554:	e7e7      	b.n	800d526 <_raise_r+0x12>
 800d556:	2100      	movs	r1, #0
 800d558:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d55c:	4620      	mov	r0, r4
 800d55e:	4798      	blx	r3
 800d560:	2000      	movs	r0, #0
 800d562:	e7e0      	b.n	800d526 <_raise_r+0x12>

0800d564 <raise>:
 800d564:	4b02      	ldr	r3, [pc, #8]	@ (800d570 <raise+0xc>)
 800d566:	4601      	mov	r1, r0
 800d568:	6818      	ldr	r0, [r3, #0]
 800d56a:	f7ff bfd3 	b.w	800d514 <_raise_r>
 800d56e:	bf00      	nop
 800d570:	20000034 	.word	0x20000034

0800d574 <_kill_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4d07      	ldr	r5, [pc, #28]	@ (800d594 <_kill_r+0x20>)
 800d578:	2300      	movs	r3, #0
 800d57a:	4604      	mov	r4, r0
 800d57c:	4608      	mov	r0, r1
 800d57e:	4611      	mov	r1, r2
 800d580:	602b      	str	r3, [r5, #0]
 800d582:	f7f5 fa55 	bl	8002a30 <_kill>
 800d586:	1c43      	adds	r3, r0, #1
 800d588:	d102      	bne.n	800d590 <_kill_r+0x1c>
 800d58a:	682b      	ldr	r3, [r5, #0]
 800d58c:	b103      	cbz	r3, 800d590 <_kill_r+0x1c>
 800d58e:	6023      	str	r3, [r4, #0]
 800d590:	bd38      	pop	{r3, r4, r5, pc}
 800d592:	bf00      	nop
 800d594:	200005b0 	.word	0x200005b0

0800d598 <_getpid_r>:
 800d598:	f7f5 ba42 	b.w	8002a20 <_getpid>

0800d59c <__swhatbuf_r>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	460c      	mov	r4, r1
 800d5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a4:	2900      	cmp	r1, #0
 800d5a6:	b096      	sub	sp, #88	@ 0x58
 800d5a8:	4615      	mov	r5, r2
 800d5aa:	461e      	mov	r6, r3
 800d5ac:	da0d      	bge.n	800d5ca <__swhatbuf_r+0x2e>
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d5b4:	f04f 0100 	mov.w	r1, #0
 800d5b8:	bf14      	ite	ne
 800d5ba:	2340      	movne	r3, #64	@ 0x40
 800d5bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	6031      	str	r1, [r6, #0]
 800d5c4:	602b      	str	r3, [r5, #0]
 800d5c6:	b016      	add	sp, #88	@ 0x58
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	466a      	mov	r2, sp
 800d5cc:	f000 f848 	bl	800d660 <_fstat_r>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	dbec      	blt.n	800d5ae <__swhatbuf_r+0x12>
 800d5d4:	9901      	ldr	r1, [sp, #4]
 800d5d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d5de:	4259      	negs	r1, r3
 800d5e0:	4159      	adcs	r1, r3
 800d5e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5e6:	e7eb      	b.n	800d5c0 <__swhatbuf_r+0x24>

0800d5e8 <__smakebuf_r>:
 800d5e8:	898b      	ldrh	r3, [r1, #12]
 800d5ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5ec:	079d      	lsls	r5, r3, #30
 800d5ee:	4606      	mov	r6, r0
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	d507      	bpl.n	800d604 <__smakebuf_r+0x1c>
 800d5f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	6123      	str	r3, [r4, #16]
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	6163      	str	r3, [r4, #20]
 800d600:	b003      	add	sp, #12
 800d602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d604:	ab01      	add	r3, sp, #4
 800d606:	466a      	mov	r2, sp
 800d608:	f7ff ffc8 	bl	800d59c <__swhatbuf_r>
 800d60c:	9f00      	ldr	r7, [sp, #0]
 800d60e:	4605      	mov	r5, r0
 800d610:	4639      	mov	r1, r7
 800d612:	4630      	mov	r0, r6
 800d614:	f7fd fbb8 	bl	800ad88 <_malloc_r>
 800d618:	b948      	cbnz	r0, 800d62e <__smakebuf_r+0x46>
 800d61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d61e:	059a      	lsls	r2, r3, #22
 800d620:	d4ee      	bmi.n	800d600 <__smakebuf_r+0x18>
 800d622:	f023 0303 	bic.w	r3, r3, #3
 800d626:	f043 0302 	orr.w	r3, r3, #2
 800d62a:	81a3      	strh	r3, [r4, #12]
 800d62c:	e7e2      	b.n	800d5f4 <__smakebuf_r+0xc>
 800d62e:	89a3      	ldrh	r3, [r4, #12]
 800d630:	6020      	str	r0, [r4, #0]
 800d632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d636:	81a3      	strh	r3, [r4, #12]
 800d638:	9b01      	ldr	r3, [sp, #4]
 800d63a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d63e:	b15b      	cbz	r3, 800d658 <__smakebuf_r+0x70>
 800d640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d644:	4630      	mov	r0, r6
 800d646:	f000 f81d 	bl	800d684 <_isatty_r>
 800d64a:	b128      	cbz	r0, 800d658 <__smakebuf_r+0x70>
 800d64c:	89a3      	ldrh	r3, [r4, #12]
 800d64e:	f023 0303 	bic.w	r3, r3, #3
 800d652:	f043 0301 	orr.w	r3, r3, #1
 800d656:	81a3      	strh	r3, [r4, #12]
 800d658:	89a3      	ldrh	r3, [r4, #12]
 800d65a:	431d      	orrs	r5, r3
 800d65c:	81a5      	strh	r5, [r4, #12]
 800d65e:	e7cf      	b.n	800d600 <__smakebuf_r+0x18>

0800d660 <_fstat_r>:
 800d660:	b538      	push	{r3, r4, r5, lr}
 800d662:	4d07      	ldr	r5, [pc, #28]	@ (800d680 <_fstat_r+0x20>)
 800d664:	2300      	movs	r3, #0
 800d666:	4604      	mov	r4, r0
 800d668:	4608      	mov	r0, r1
 800d66a:	4611      	mov	r1, r2
 800d66c:	602b      	str	r3, [r5, #0]
 800d66e:	f7f5 fa3f 	bl	8002af0 <_fstat>
 800d672:	1c43      	adds	r3, r0, #1
 800d674:	d102      	bne.n	800d67c <_fstat_r+0x1c>
 800d676:	682b      	ldr	r3, [r5, #0]
 800d678:	b103      	cbz	r3, 800d67c <_fstat_r+0x1c>
 800d67a:	6023      	str	r3, [r4, #0]
 800d67c:	bd38      	pop	{r3, r4, r5, pc}
 800d67e:	bf00      	nop
 800d680:	200005b0 	.word	0x200005b0

0800d684 <_isatty_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4d06      	ldr	r5, [pc, #24]	@ (800d6a0 <_isatty_r+0x1c>)
 800d688:	2300      	movs	r3, #0
 800d68a:	4604      	mov	r4, r0
 800d68c:	4608      	mov	r0, r1
 800d68e:	602b      	str	r3, [r5, #0]
 800d690:	f7f5 fa3e 	bl	8002b10 <_isatty>
 800d694:	1c43      	adds	r3, r0, #1
 800d696:	d102      	bne.n	800d69e <_isatty_r+0x1a>
 800d698:	682b      	ldr	r3, [r5, #0]
 800d69a:	b103      	cbz	r3, 800d69e <_isatty_r+0x1a>
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	bd38      	pop	{r3, r4, r5, pc}
 800d6a0:	200005b0 	.word	0x200005b0

0800d6a4 <_init>:
 800d6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a6:	bf00      	nop
 800d6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6aa:	bc08      	pop	{r3}
 800d6ac:	469e      	mov	lr, r3
 800d6ae:	4770      	bx	lr

0800d6b0 <_fini>:
 800d6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b2:	bf00      	nop
 800d6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6b6:	bc08      	pop	{r3}
 800d6b8:	469e      	mov	lr, r3
 800d6ba:	4770      	bx	lr
